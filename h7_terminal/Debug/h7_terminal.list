
h7_terminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c0d4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  0801c3a8  0801c3a8  0001d3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cee0  0801cee0  0001dee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801cee8  0801cee8  0001dee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ceec  0801ceec  0001deec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000032c  24000000  0801cef0  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016e0  2400032c  0801d21c  0001e32c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001a0c  0801d21c  0001ea0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001e32c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00036618  00000000  00000000  0001e35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004a5a  00000000  00000000  00054972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002af0  00000000  00000000  000593d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000213e  00000000  00000000  0005bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037761  00000000  00000000  0005dffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a6af  00000000  00000000  0009575f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015be3f  00000000  00000000  000bfe0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  0021bc4d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d04c  00000000  00000000  0021bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00228d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400032c 	.word	0x2400032c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c38c 	.word	0x0801c38c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000330 	.word	0x24000330
 800030c:	0801c38c 	.word	0x0801c38c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_dmul>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80003ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80003ce:	bf1d      	ittte	ne
 80003d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80003d4:	ea94 0f0c 	teqne	r4, ip
 80003d8:	ea95 0f0c 	teqne	r5, ip
 80003dc:	f000 f8de 	bleq	800059c <__aeabi_dmul+0x1dc>
 80003e0:	442c      	add	r4, r5
 80003e2:	ea81 0603 	eor.w	r6, r1, r3
 80003e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80003ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80003ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80003f2:	bf18      	it	ne
 80003f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80003f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000400:	d038      	beq.n	8000474 <__aeabi_dmul+0xb4>
 8000402:	fba0 ce02 	umull	ip, lr, r0, r2
 8000406:	f04f 0500 	mov.w	r5, #0
 800040a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800040e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000412:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000416:	f04f 0600 	mov.w	r6, #0
 800041a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800041e:	f09c 0f00 	teq	ip, #0
 8000422:	bf18      	it	ne
 8000424:	f04e 0e01 	orrne.w	lr, lr, #1
 8000428:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800042c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000430:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000434:	d204      	bcs.n	8000440 <__aeabi_dmul+0x80>
 8000436:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800043a:	416d      	adcs	r5, r5
 800043c:	eb46 0606 	adc.w	r6, r6, r6
 8000440:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000444:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000448:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800044c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000450:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000454:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000458:	bf88      	it	hi
 800045a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800045e:	d81e      	bhi.n	800049e <__aeabi_dmul+0xde>
 8000460:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000464:	bf08      	it	eq
 8000466:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800046a:	f150 0000 	adcs.w	r0, r0, #0
 800046e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000478:	ea46 0101 	orr.w	r1, r6, r1
 800047c:	ea40 0002 	orr.w	r0, r0, r2
 8000480:	ea81 0103 	eor.w	r1, r1, r3
 8000484:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000488:	bfc2      	ittt	gt
 800048a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800048e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000492:	bd70      	popgt	{r4, r5, r6, pc}
 8000494:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000498:	f04f 0e00 	mov.w	lr, #0
 800049c:	3c01      	subs	r4, #1
 800049e:	f300 80ab 	bgt.w	80005f8 <__aeabi_dmul+0x238>
 80004a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80004a6:	bfde      	ittt	le
 80004a8:	2000      	movle	r0, #0
 80004aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80004ae:	bd70      	pople	{r4, r5, r6, pc}
 80004b0:	f1c4 0400 	rsb	r4, r4, #0
 80004b4:	3c20      	subs	r4, #32
 80004b6:	da35      	bge.n	8000524 <__aeabi_dmul+0x164>
 80004b8:	340c      	adds	r4, #12
 80004ba:	dc1b      	bgt.n	80004f4 <__aeabi_dmul+0x134>
 80004bc:	f104 0414 	add.w	r4, r4, #20
 80004c0:	f1c4 0520 	rsb	r5, r4, #32
 80004c4:	fa00 f305 	lsl.w	r3, r0, r5
 80004c8:	fa20 f004 	lsr.w	r0, r0, r4
 80004cc:	fa01 f205 	lsl.w	r2, r1, r5
 80004d0:	ea40 0002 	orr.w	r0, r0, r2
 80004d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80004e0:	fa21 f604 	lsr.w	r6, r1, r4
 80004e4:	eb42 0106 	adc.w	r1, r2, r6
 80004e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	f1c4 040c 	rsb	r4, r4, #12
 80004f8:	f1c4 0520 	rsb	r5, r4, #32
 80004fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000500:	fa20 f005 	lsr.w	r0, r0, r5
 8000504:	fa01 f204 	lsl.w	r2, r1, r4
 8000508:	ea40 0002 	orr.w	r0, r0, r2
 800050c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000514:	f141 0100 	adc.w	r1, r1, #0
 8000518:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800051c:	bf08      	it	eq
 800051e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	f1c4 0520 	rsb	r5, r4, #32
 8000528:	fa00 f205 	lsl.w	r2, r0, r5
 800052c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000530:	fa20 f304 	lsr.w	r3, r0, r4
 8000534:	fa01 f205 	lsl.w	r2, r1, r5
 8000538:	ea43 0302 	orr.w	r3, r3, r2
 800053c:	fa21 f004 	lsr.w	r0, r1, r4
 8000540:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000544:	fa21 f204 	lsr.w	r2, r1, r4
 8000548:	ea20 0002 	bic.w	r0, r0, r2
 800054c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000550:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000554:	bf08      	it	eq
 8000556:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	f094 0f00 	teq	r4, #0
 8000560:	d10f      	bne.n	8000582 <__aeabi_dmul+0x1c2>
 8000562:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000566:	0040      	lsls	r0, r0, #1
 8000568:	eb41 0101 	adc.w	r1, r1, r1
 800056c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000570:	bf08      	it	eq
 8000572:	3c01      	subeq	r4, #1
 8000574:	d0f7      	beq.n	8000566 <__aeabi_dmul+0x1a6>
 8000576:	ea41 0106 	orr.w	r1, r1, r6
 800057a:	f095 0f00 	teq	r5, #0
 800057e:	bf18      	it	ne
 8000580:	4770      	bxne	lr
 8000582:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000586:	0052      	lsls	r2, r2, #1
 8000588:	eb43 0303 	adc.w	r3, r3, r3
 800058c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000590:	bf08      	it	eq
 8000592:	3d01      	subeq	r5, #1
 8000594:	d0f7      	beq.n	8000586 <__aeabi_dmul+0x1c6>
 8000596:	ea43 0306 	orr.w	r3, r3, r6
 800059a:	4770      	bx	lr
 800059c:	ea94 0f0c 	teq	r4, ip
 80005a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80005a4:	bf18      	it	ne
 80005a6:	ea95 0f0c 	teqne	r5, ip
 80005aa:	d00c      	beq.n	80005c6 <__aeabi_dmul+0x206>
 80005ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005b0:	bf18      	it	ne
 80005b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80005b6:	d1d1      	bne.n	800055c <__aeabi_dmul+0x19c>
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	f04f 0000 	mov.w	r0, #0
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
 80005c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005ca:	bf06      	itte	eq
 80005cc:	4610      	moveq	r0, r2
 80005ce:	4619      	moveq	r1, r3
 80005d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80005d4:	d019      	beq.n	800060a <__aeabi_dmul+0x24a>
 80005d6:	ea94 0f0c 	teq	r4, ip
 80005da:	d102      	bne.n	80005e2 <__aeabi_dmul+0x222>
 80005dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80005e0:	d113      	bne.n	800060a <__aeabi_dmul+0x24a>
 80005e2:	ea95 0f0c 	teq	r5, ip
 80005e6:	d105      	bne.n	80005f4 <__aeabi_dmul+0x234>
 80005e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80005ec:	bf1c      	itt	ne
 80005ee:	4610      	movne	r0, r2
 80005f0:	4619      	movne	r1, r3
 80005f2:	d10a      	bne.n	800060a <__aeabi_dmul+0x24a>
 80005f4:	ea81 0103 	eor.w	r1, r1, r3
 80005f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80005fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd70      	pop	{r4, r5, r6, pc}
 800060a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800060e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000612:	bd70      	pop	{r4, r5, r6, pc}

08000614 <__aeabi_drsub>:
 8000614:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	e002      	b.n	8000620 <__adddf3>
 800061a:	bf00      	nop

0800061c <__aeabi_dsub>:
 800061c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000620 <__adddf3>:
 8000620:	b530      	push	{r4, r5, lr}
 8000622:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000626:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	bf1f      	itttt	ne
 8000636:	ea54 0c00 	orrsne.w	ip, r4, r0
 800063a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800063e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000642:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000646:	f000 80e2 	beq.w	800080e <__adddf3+0x1ee>
 800064a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800064e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000652:	bfb8      	it	lt
 8000654:	426d      	neglt	r5, r5
 8000656:	dd0c      	ble.n	8000672 <__adddf3+0x52>
 8000658:	442c      	add	r4, r5
 800065a:	ea80 0202 	eor.w	r2, r0, r2
 800065e:	ea81 0303 	eor.w	r3, r1, r3
 8000662:	ea82 0000 	eor.w	r0, r2, r0
 8000666:	ea83 0101 	eor.w	r1, r3, r1
 800066a:	ea80 0202 	eor.w	r2, r0, r2
 800066e:	ea81 0303 	eor.w	r3, r1, r3
 8000672:	2d36      	cmp	r5, #54	@ 0x36
 8000674:	bf88      	it	hi
 8000676:	bd30      	pophi	{r4, r5, pc}
 8000678:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800067c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000680:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000684:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000688:	d002      	beq.n	8000690 <__adddf3+0x70>
 800068a:	4240      	negs	r0, r0
 800068c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000690:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000694:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000698:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800069c:	d002      	beq.n	80006a4 <__adddf3+0x84>
 800069e:	4252      	negs	r2, r2
 80006a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a4:	ea94 0f05 	teq	r4, r5
 80006a8:	f000 80a7 	beq.w	80007fa <__adddf3+0x1da>
 80006ac:	f1a4 0401 	sub.w	r4, r4, #1
 80006b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80006b4:	db0d      	blt.n	80006d2 <__adddf3+0xb2>
 80006b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80006ba:	fa22 f205 	lsr.w	r2, r2, r5
 80006be:	1880      	adds	r0, r0, r2
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80006c8:	1880      	adds	r0, r0, r2
 80006ca:	fa43 f305 	asr.w	r3, r3, r5
 80006ce:	4159      	adcs	r1, r3
 80006d0:	e00e      	b.n	80006f0 <__adddf3+0xd0>
 80006d2:	f1a5 0520 	sub.w	r5, r5, #32
 80006d6:	f10e 0e20 	add.w	lr, lr, #32
 80006da:	2a01      	cmp	r2, #1
 80006dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80006e0:	bf28      	it	cs
 80006e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006e6:	fa43 f305 	asr.w	r3, r3, r5
 80006ea:	18c0      	adds	r0, r0, r3
 80006ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006f4:	d507      	bpl.n	8000706 <__adddf3+0xe6>
 80006f6:	f04f 0e00 	mov.w	lr, #0
 80006fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80006fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000702:	eb6e 0101 	sbc.w	r1, lr, r1
 8000706:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800070a:	d31b      	bcc.n	8000744 <__adddf3+0x124>
 800070c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000710:	d30c      	bcc.n	800072c <__adddf3+0x10c>
 8000712:	0849      	lsrs	r1, r1, #1
 8000714:	ea5f 0030 	movs.w	r0, r0, rrx
 8000718:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800071c:	f104 0401 	add.w	r4, r4, #1
 8000720:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000724:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000728:	f080 809a 	bcs.w	8000860 <__adddf3+0x240>
 800072c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000730:	bf08      	it	eq
 8000732:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000736:	f150 0000 	adcs.w	r0, r0, #0
 800073a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800073e:	ea41 0105 	orr.w	r1, r1, r5
 8000742:	bd30      	pop	{r4, r5, pc}
 8000744:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000748:	4140      	adcs	r0, r0
 800074a:	eb41 0101 	adc.w	r1, r1, r1
 800074e:	3c01      	subs	r4, #1
 8000750:	bf28      	it	cs
 8000752:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000756:	d2e9      	bcs.n	800072c <__adddf3+0x10c>
 8000758:	f091 0f00 	teq	r1, #0
 800075c:	bf04      	itt	eq
 800075e:	4601      	moveq	r1, r0
 8000760:	2000      	moveq	r0, #0
 8000762:	fab1 f381 	clz	r3, r1
 8000766:	bf08      	it	eq
 8000768:	3320      	addeq	r3, #32
 800076a:	f1a3 030b 	sub.w	r3, r3, #11
 800076e:	f1b3 0220 	subs.w	r2, r3, #32
 8000772:	da0c      	bge.n	800078e <__adddf3+0x16e>
 8000774:	320c      	adds	r2, #12
 8000776:	dd08      	ble.n	800078a <__adddf3+0x16a>
 8000778:	f102 0c14 	add.w	ip, r2, #20
 800077c:	f1c2 020c 	rsb	r2, r2, #12
 8000780:	fa01 f00c 	lsl.w	r0, r1, ip
 8000784:	fa21 f102 	lsr.w	r1, r1, r2
 8000788:	e00c      	b.n	80007a4 <__adddf3+0x184>
 800078a:	f102 0214 	add.w	r2, r2, #20
 800078e:	bfd8      	it	le
 8000790:	f1c2 0c20 	rsble	ip, r2, #32
 8000794:	fa01 f102 	lsl.w	r1, r1, r2
 8000798:	fa20 fc0c 	lsr.w	ip, r0, ip
 800079c:	bfdc      	itt	le
 800079e:	ea41 010c 	orrle.w	r1, r1, ip
 80007a2:	4090      	lslle	r0, r2
 80007a4:	1ae4      	subs	r4, r4, r3
 80007a6:	bfa2      	ittt	ge
 80007a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80007ac:	4329      	orrge	r1, r5
 80007ae:	bd30      	popge	{r4, r5, pc}
 80007b0:	ea6f 0404 	mvn.w	r4, r4
 80007b4:	3c1f      	subs	r4, #31
 80007b6:	da1c      	bge.n	80007f2 <__adddf3+0x1d2>
 80007b8:	340c      	adds	r4, #12
 80007ba:	dc0e      	bgt.n	80007da <__adddf3+0x1ba>
 80007bc:	f104 0414 	add.w	r4, r4, #20
 80007c0:	f1c4 0220 	rsb	r2, r4, #32
 80007c4:	fa20 f004 	lsr.w	r0, r0, r4
 80007c8:	fa01 f302 	lsl.w	r3, r1, r2
 80007cc:	ea40 0003 	orr.w	r0, r0, r3
 80007d0:	fa21 f304 	lsr.w	r3, r1, r4
 80007d4:	ea45 0103 	orr.w	r1, r5, r3
 80007d8:	bd30      	pop	{r4, r5, pc}
 80007da:	f1c4 040c 	rsb	r4, r4, #12
 80007de:	f1c4 0220 	rsb	r2, r4, #32
 80007e2:	fa20 f002 	lsr.w	r0, r0, r2
 80007e6:	fa01 f304 	lsl.w	r3, r1, r4
 80007ea:	ea40 0003 	orr.w	r0, r0, r3
 80007ee:	4629      	mov	r1, r5
 80007f0:	bd30      	pop	{r4, r5, pc}
 80007f2:	fa21 f004 	lsr.w	r0, r1, r4
 80007f6:	4629      	mov	r1, r5
 80007f8:	bd30      	pop	{r4, r5, pc}
 80007fa:	f094 0f00 	teq	r4, #0
 80007fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000802:	bf06      	itte	eq
 8000804:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000808:	3401      	addeq	r4, #1
 800080a:	3d01      	subne	r5, #1
 800080c:	e74e      	b.n	80006ac <__adddf3+0x8c>
 800080e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000812:	bf18      	it	ne
 8000814:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000818:	d029      	beq.n	800086e <__adddf3+0x24e>
 800081a:	ea94 0f05 	teq	r4, r5
 800081e:	bf08      	it	eq
 8000820:	ea90 0f02 	teqeq	r0, r2
 8000824:	d005      	beq.n	8000832 <__adddf3+0x212>
 8000826:	ea54 0c00 	orrs.w	ip, r4, r0
 800082a:	bf04      	itt	eq
 800082c:	4619      	moveq	r1, r3
 800082e:	4610      	moveq	r0, r2
 8000830:	bd30      	pop	{r4, r5, pc}
 8000832:	ea91 0f03 	teq	r1, r3
 8000836:	bf1e      	ittt	ne
 8000838:	2100      	movne	r1, #0
 800083a:	2000      	movne	r0, #0
 800083c:	bd30      	popne	{r4, r5, pc}
 800083e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000842:	d105      	bne.n	8000850 <__adddf3+0x230>
 8000844:	0040      	lsls	r0, r0, #1
 8000846:	4149      	adcs	r1, r1
 8000848:	bf28      	it	cs
 800084a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800084e:	bd30      	pop	{r4, r5, pc}
 8000850:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000854:	bf3c      	itt	cc
 8000856:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800085a:	bd30      	popcc	{r4, r5, pc}
 800085c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000860:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000864:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd30      	pop	{r4, r5, pc}
 800086e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000872:	bf1a      	itte	ne
 8000874:	4619      	movne	r1, r3
 8000876:	4610      	movne	r0, r2
 8000878:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800087c:	bf1c      	itt	ne
 800087e:	460b      	movne	r3, r1
 8000880:	4602      	movne	r2, r0
 8000882:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000886:	bf06      	itte	eq
 8000888:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800088c:	ea91 0f03 	teqeq	r1, r3
 8000890:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000894:	bd30      	pop	{r4, r5, pc}
 8000896:	bf00      	nop

08000898 <__aeabi_ui2d>:
 8000898:	f090 0f00 	teq	r0, #0
 800089c:	bf04      	itt	eq
 800089e:	2100      	moveq	r1, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	b530      	push	{r4, r5, lr}
 80008a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80008a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80008ac:	f04f 0500 	mov.w	r5, #0
 80008b0:	f04f 0100 	mov.w	r1, #0
 80008b4:	e750      	b.n	8000758 <__adddf3+0x138>
 80008b6:	bf00      	nop

080008b8 <__aeabi_i2d>:
 80008b8:	f090 0f00 	teq	r0, #0
 80008bc:	bf04      	itt	eq
 80008be:	2100      	moveq	r1, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	b530      	push	{r4, r5, lr}
 80008c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80008c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80008cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80008d0:	bf48      	it	mi
 80008d2:	4240      	negmi	r0, r0
 80008d4:	f04f 0100 	mov.w	r1, #0
 80008d8:	e73e      	b.n	8000758 <__adddf3+0x138>
 80008da:	bf00      	nop

080008dc <__aeabi_f2d>:
 80008dc:	0042      	lsls	r2, r0, #1
 80008de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80008e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80008e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008ea:	bf1f      	itttt	ne
 80008ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80008f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80008f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80008f8:	4770      	bxne	lr
 80008fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80008fe:	bf08      	it	eq
 8000900:	4770      	bxeq	lr
 8000902:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000906:	bf04      	itt	eq
 8000908:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800090c:	4770      	bxeq	lr
 800090e:	b530      	push	{r4, r5, lr}
 8000910:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000914:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000918:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800091c:	e71c      	b.n	8000758 <__adddf3+0x138>
 800091e:	bf00      	nop

08000920 <__aeabi_ul2d>:
 8000920:	ea50 0201 	orrs.w	r2, r0, r1
 8000924:	bf08      	it	eq
 8000926:	4770      	bxeq	lr
 8000928:	b530      	push	{r4, r5, lr}
 800092a:	f04f 0500 	mov.w	r5, #0
 800092e:	e00a      	b.n	8000946 <__aeabi_l2d+0x16>

08000930 <__aeabi_l2d>:
 8000930:	ea50 0201 	orrs.w	r2, r0, r1
 8000934:	bf08      	it	eq
 8000936:	4770      	bxeq	lr
 8000938:	b530      	push	{r4, r5, lr}
 800093a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800093e:	d502      	bpl.n	8000946 <__aeabi_l2d+0x16>
 8000940:	4240      	negs	r0, r0
 8000942:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000946:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800094a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800094e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000952:	f43f aed8 	beq.w	8000706 <__adddf3+0xe6>
 8000956:	f04f 0203 	mov.w	r2, #3
 800095a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800095e:	bf18      	it	ne
 8000960:	3203      	addne	r2, #3
 8000962:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000966:	bf18      	it	ne
 8000968:	3203      	addne	r2, #3
 800096a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800096e:	f1c2 0320 	rsb	r3, r2, #32
 8000972:	fa00 fc03 	lsl.w	ip, r0, r3
 8000976:	fa20 f002 	lsr.w	r0, r0, r2
 800097a:	fa01 fe03 	lsl.w	lr, r1, r3
 800097e:	ea40 000e 	orr.w	r0, r0, lr
 8000982:	fa21 f102 	lsr.w	r1, r1, r2
 8000986:	4414      	add	r4, r2
 8000988:	e6bd      	b.n	8000706 <__adddf3+0xe6>
 800098a:	bf00      	nop

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b988 	b.w	8000e64 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	468e      	mov	lr, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	4688      	mov	r8, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d962      	bls.n	8000c48 <__udivmoddi4+0xdc>
 8000b82:	fab2 f682 	clz	r6, r2
 8000b86:	b14e      	cbz	r6, 8000b9c <__udivmoddi4+0x30>
 8000b88:	f1c6 0320 	rsb	r3, r6, #32
 8000b8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	40b7      	lsls	r7, r6
 8000b96:	ea43 0808 	orr.w	r8, r3, r8
 8000b9a:	40b4      	lsls	r4, r6
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	fa1f fc87 	uxth.w	ip, r7
 8000ba4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ba8:	0c23      	lsrs	r3, r4, #16
 8000baa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fb01 f20c 	mul.w	r2, r1, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc0:	f080 80ea 	bcs.w	8000d98 <__udivmoddi4+0x22c>
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f240 80e7 	bls.w	8000d98 <__udivmoddi4+0x22c>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	443b      	add	r3, r7
 8000bce:	1a9a      	subs	r2, r3, r2
 8000bd0:	b2a3      	uxth	r3, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be2:	459c      	cmp	ip, r3
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x8e>
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bec:	f080 80d6 	bcs.w	8000d9c <__udivmoddi4+0x230>
 8000bf0:	459c      	cmp	ip, r3
 8000bf2:	f240 80d3 	bls.w	8000d9c <__udivmoddi4+0x230>
 8000bf6:	443b      	add	r3, r7
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bfe:	eba3 030c 	sub.w	r3, r3, ip
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11d      	cbz	r5, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40f3      	lsrs	r3, r6
 8000c08:	2200      	movs	r2, #0
 8000c0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d905      	bls.n	8000c22 <__udivmoddi4+0xb6>
 8000c16:	b10d      	cbz	r5, 8000c1c <__udivmoddi4+0xb0>
 8000c18:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	e7f5      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c22:	fab3 f183 	clz	r1, r3
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d146      	bne.n	8000cb8 <__udivmoddi4+0x14c>
 8000c2a:	4573      	cmp	r3, lr
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0xc8>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 8105 	bhi.w	8000e3e <__udivmoddi4+0x2d2>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	4690      	mov	r8, r2
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0e5      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c42:	e9c5 4800 	strd	r4, r8, [r5]
 8000c46:	e7e2      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f000 8090 	beq.w	8000d6e <__udivmoddi4+0x202>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f040 80a4 	bne.w	8000da0 <__udivmoddi4+0x234>
 8000c58:	1a8a      	subs	r2, r1, r2
 8000c5a:	0c03      	lsrs	r3, r0, #16
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	b280      	uxth	r0, r0
 8000c62:	b2bc      	uxth	r4, r7
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c72:	fb04 f20c 	mul.w	r2, r4, ip
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x11e>
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x11c>
 8000c82:	429a      	cmp	r2, r3
 8000c84:	f200 80e0 	bhi.w	8000e48 <__udivmoddi4+0x2dc>
 8000c88:	46c4      	mov	ip, r8
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c98:	fb02 f404 	mul.w	r4, r2, r4
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x144>
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x142>
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	f200 80ca 	bhi.w	8000e42 <__udivmoddi4+0x2d6>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	1b1b      	subs	r3, r3, r4
 8000cb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cb6:	e7a5      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cb8:	f1c1 0620 	rsb	r6, r1, #32
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc2:	431f      	orrs	r7, r3
 8000cc4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cc8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ccc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cda:	fa1f fc87 	uxth.w	ip, r7
 8000cde:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce2:	0c1c      	lsrs	r4, r3, #16
 8000ce4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ce8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x1a0>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cfe:	f080 809c 	bcs.w	8000e3a <__udivmoddi4+0x2ce>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f240 8099 	bls.w	8000e3a <__udivmoddi4+0x2ce>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	443c      	add	r4, r7
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	fa1f fe83 	uxth.w	lr, r3
 8000d14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d18:	fb09 4413 	mls	r4, r9, r3, r4
 8000d1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x1ce>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d2e:	f080 8082 	bcs.w	8000e36 <__udivmoddi4+0x2ca>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d97f      	bls.n	8000e36 <__udivmoddi4+0x2ca>
 8000d36:	3b02      	subs	r3, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3e:	eba4 040c 	sub.w	r4, r4, ip
 8000d42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d46:	4564      	cmp	r4, ip
 8000d48:	4673      	mov	r3, lr
 8000d4a:	46e1      	mov	r9, ip
 8000d4c:	d362      	bcc.n	8000e14 <__udivmoddi4+0x2a8>
 8000d4e:	d05f      	beq.n	8000e10 <__udivmoddi4+0x2a4>
 8000d50:	b15d      	cbz	r5, 8000d6a <__udivmoddi4+0x1fe>
 8000d52:	ebb8 0203 	subs.w	r2, r8, r3
 8000d56:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d62:	431e      	orrs	r6, r3
 8000d64:	40cc      	lsrs	r4, r1
 8000d66:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e74f      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000d6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d72:	0c01      	lsrs	r1, r0, #16
 8000d74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d78:	b280      	uxth	r0, r0
 8000d7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4638      	mov	r0, r7
 8000d82:	463c      	mov	r4, r7
 8000d84:	46b8      	mov	r8, r7
 8000d86:	46be      	mov	lr, r7
 8000d88:	2620      	movs	r6, #32
 8000d8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d8e:	eba2 0208 	sub.w	r2, r2, r8
 8000d92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d96:	e766      	b.n	8000c66 <__udivmoddi4+0xfa>
 8000d98:	4601      	mov	r1, r0
 8000d9a:	e718      	b.n	8000bce <__udivmoddi4+0x62>
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	e72c      	b.n	8000bfa <__udivmoddi4+0x8e>
 8000da0:	f1c6 0220 	rsb	r2, r6, #32
 8000da4:	fa2e f302 	lsr.w	r3, lr, r2
 8000da8:	40b7      	lsls	r7, r6
 8000daa:	40b1      	lsls	r1, r6
 8000dac:	fa20 f202 	lsr.w	r2, r0, r2
 8000db0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db4:	430a      	orrs	r2, r1
 8000db6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dba:	b2bc      	uxth	r4, r7
 8000dbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc6:	fb08 f904 	mul.w	r9, r8, r4
 8000dca:	40b0      	lsls	r0, r6
 8000dcc:	4589      	cmp	r9, r1
 8000dce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd2:	b280      	uxth	r0, r0
 8000dd4:	d93e      	bls.n	8000e54 <__udivmoddi4+0x2e8>
 8000dd6:	1879      	adds	r1, r7, r1
 8000dd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ddc:	d201      	bcs.n	8000de2 <__udivmoddi4+0x276>
 8000dde:	4589      	cmp	r9, r1
 8000de0:	d81f      	bhi.n	8000e22 <__udivmoddi4+0x2b6>
 8000de2:	eba1 0109 	sub.w	r1, r1, r9
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fb09 f804 	mul.w	r8, r9, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	b292      	uxth	r2, r2
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	4542      	cmp	r2, r8
 8000dfa:	d229      	bcs.n	8000e50 <__udivmoddi4+0x2e4>
 8000dfc:	18ba      	adds	r2, r7, r2
 8000dfe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e02:	d2c4      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e04:	4542      	cmp	r2, r8
 8000e06:	d2c2      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e08:	f1a9 0102 	sub.w	r1, r9, #2
 8000e0c:	443a      	add	r2, r7
 8000e0e:	e7be      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e10:	45f0      	cmp	r8, lr
 8000e12:	d29d      	bcs.n	8000d50 <__udivmoddi4+0x1e4>
 8000e14:	ebbe 0302 	subs.w	r3, lr, r2
 8000e18:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	46e1      	mov	r9, ip
 8000e20:	e796      	b.n	8000d50 <__udivmoddi4+0x1e4>
 8000e22:	eba7 0909 	sub.w	r9, r7, r9
 8000e26:	4449      	add	r1, r9
 8000e28:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e2c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e30:	fb09 f804 	mul.w	r8, r9, r4
 8000e34:	e7db      	b.n	8000dee <__udivmoddi4+0x282>
 8000e36:	4673      	mov	r3, lr
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1ce>
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	e766      	b.n	8000d0c <__udivmoddi4+0x1a0>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xd2>
 8000e42:	443b      	add	r3, r7
 8000e44:	3a02      	subs	r2, #2
 8000e46:	e733      	b.n	8000cb0 <__udivmoddi4+0x144>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	443b      	add	r3, r7
 8000e4e:	e71c      	b.n	8000c8a <__udivmoddi4+0x11e>
 8000e50:	4649      	mov	r1, r9
 8000e52:	e79c      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e54:	eba1 0109 	sub.w	r1, r1, r9
 8000e58:	46c4      	mov	ip, r8
 8000e5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5e:	fb09 f804 	mul.w	r8, r9, r4
 8000e62:	e7c4      	b.n	8000dee <__udivmoddi4+0x282>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <read_insert_sensors>:
void convert_acc(int16_t *rawData, float *convertedData);
void convert_gyro(int16_t *rawData, float *convertedData);
void convert_mag(int16_t *rawData, float *convertedData);
void start_mag_cal(void);

void read_insert_sensors(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
    IKS4A1_MOTION_SENSOR_Axes_t raw_acc, raw_gyro, raw_mag;

	if(IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO, &raw_acc) == BSP_ERROR_NONE)
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	461a      	mov	r2, r3
 8000e74:	2102      	movs	r1, #2
 8000e76:	2003      	movs	r0, #3
 8000e78:	f007 fbe8 	bl	800864c <IKS4A1_MOTION_SENSOR_GetAxes>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d123      	bne.n	8000eca <read_insert_sensors+0x62>
	{
		// MFX_input_t structure needs acc [g] gyro [dps] and [uT/50]
		mfx_input.acc[0] = raw_acc.x / 1000.0f;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8c:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8000fc0 <read_insert_sensors+0x158>
 8000e90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e94:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc4 <read_insert_sensors+0x15c>)
 8000e96:	edc3 7a03 	vstr	s15, [r3, #12]
		mfx_input.acc[1] = raw_acc.y / 1000.0f;
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8000fc0 <read_insert_sensors+0x158>
 8000ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eac:	4b45      	ldr	r3, [pc, #276]	@ (8000fc4 <read_insert_sensors+0x15c>)
 8000eae:	edc3 7a04 	vstr	s15, [r3, #16]
		mfx_input.acc[2] = raw_acc.z / 1000.0f;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ebc:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8000fc0 <read_insert_sensors+0x158>
 8000ec0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc4 <read_insert_sensors+0x15c>)
 8000ec6:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	if(IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LSM6DSO16IS_0, MOTION_GYRO, &raw_gyro) == BSP_ERROR_NONE)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f007 fbba 	bl	800864c <IKS4A1_MOTION_SENSOR_GetAxes>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d123      	bne.n	8000f26 <read_insert_sensors+0xbe>
	{
		mfx_input.gyro[0] = raw_gyro.x / 1000.0f;
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee8:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8000fc0 <read_insert_sensors+0x158>
 8000eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef0:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <read_insert_sensors+0x15c>)
 8000ef2:	edc3 7a06 	vstr	s15, [r3, #24]
		mfx_input.gyro[1] = raw_gyro.y / 1000.0f;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f00:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000fc0 <read_insert_sensors+0x158>
 8000f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f08:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc4 <read_insert_sensors+0x15c>)
 8000f0a:	edc3 7a07 	vstr	s15, [r3, #28]
		mfx_input.gyro[2] = raw_gyro.z / 1000.0f;
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f18:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000fc0 <read_insert_sensors+0x158>
 8000f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f20:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <read_insert_sensors+0x15c>)
 8000f22:	edc3 7a08 	vstr	s15, [r3, #32]
	}

	if(IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LIS2MDL_0, MOTION_MAGNETO, &raw_mag) == BSP_ERROR_NONE)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f007 fb8d 	bl	800864c <IKS4A1_MOTION_SENSOR_GetAxes>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d13e      	bne.n	8000fb6 <read_insert_sensors+0x14e>
	{
		mfx_input.mag[0] = (raw_mag.x * 0.15f / 50.0f) - magCalOutput.hi_bias[0];
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f42:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000fc8 <read_insert_sensors+0x160>
 8000f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000fcc <read_insert_sensors+0x164>
 8000f4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <read_insert_sensors+0x168>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <read_insert_sensors+0x15c>)
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
		mfx_input.mag[1] = (raw_mag.y * 0.15f / 50.0f) - magCalOutput.hi_bias[1];
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000fc8 <read_insert_sensors+0x160>
 8000f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f74:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8000fcc <read_insert_sensors+0x164>
 8000f78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <read_insert_sensors+0x168>)
 8000f7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <read_insert_sensors+0x15c>)
 8000f88:	edc3 7a01 	vstr	s15, [r3, #4]
		mfx_input.mag[2] = (raw_mag.z * 0.15f / 50.0f) - magCalOutput.hi_bias[2];
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f96:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000fc8 <read_insert_sensors+0x160>
 8000f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000fcc <read_insert_sensors+0x164>
 8000fa2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <read_insert_sensors+0x168>)
 8000fa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <read_insert_sensors+0x15c>)
 8000fb2:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	@ 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	447a0000 	.word	0x447a0000
 8000fc4:	24000c5c 	.word	0x24000c5c
 8000fc8:	3e19999a 	.word	0x3e19999a
 8000fcc:	42480000 	.word	0x42480000
 8000fd0:	24000ccc 	.word	0x24000ccc

08000fd4 <set_sensors_scale>:


int32_t set_sensors_scale(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	int32_t ret = BSP_ERROR_NONE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]

	if (IKS4A1_MOTION_SENSOR_SetFullScale(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f007 fbbc 	bl	8008760 <IKS4A1_MOTION_SENSOR_SetFullScale>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <set_sensors_scale+0x20>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 8000fee:	f06f 0304 	mvn.w	r3, #4
 8000ff2:	607b      	str	r3, [r7, #4]
	}

	if (IKS4A1_MOTION_SENSOR_SetOutputDataRate(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO, 104.0f) != BSP_ERROR_NONE)
 8000ff4:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001060 <set_sensors_scale+0x8c>
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f007 fb6a 	bl	80086d4 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <set_sensors_scale+0x38>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 8001006:	f06f 0304 	mvn.w	r3, #4
 800100a:	607b      	str	r3, [r7, #4]
	}

	if (IKS4A1_MOTION_SENSOR_SetFullScale(IKS4A1_LSM6DSO16IS_0, MOTION_GYRO, 500) != BSP_ERROR_NONE)
 800100c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001010:	2101      	movs	r1, #1
 8001012:	2003      	movs	r0, #3
 8001014:	f007 fba4 	bl	8008760 <IKS4A1_MOTION_SENSOR_SetFullScale>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <set_sensors_scale+0x50>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800101e:	f06f 0304 	mvn.w	r3, #4
 8001022:	607b      	str	r3, [r7, #4]
	}

	if (IKS4A1_MOTION_SENSOR_SetOutputDataRate(IKS4A1_LSM6DSO16IS_0, MOTION_GYRO, 104.0f) != BSP_ERROR_NONE)
 8001024:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001060 <set_sensors_scale+0x8c>
 8001028:	2101      	movs	r1, #1
 800102a:	2003      	movs	r0, #3
 800102c:	f007 fb52 	bl	80086d4 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <set_sensors_scale+0x68>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 8001036:	f06f 0304 	mvn.w	r3, #4
 800103a:	607b      	str	r3, [r7, #4]
	}

	if (IKS4A1_MOTION_SENSOR_SetOutputDataRate(IKS4A1_LIS2MDL_0, MOTION_MAGNETO, 104.0f) != BSP_ERROR_NONE)
 800103c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001060 <set_sensors_scale+0x8c>
 8001040:	2104      	movs	r1, #4
 8001042:	2000      	movs	r0, #0
 8001044:	f007 fb46 	bl	80086d4 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <set_sensors_scale+0x80>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800104e:	f06f 0304 	mvn.w	r3, #4
 8001052:	607b      	str	r3, [r7, #4]
	}

	return ret;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	42d00000 	.word	0x42d00000

08001064 <sensors_init>:

void sensors_init(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 8001068:	2103      	movs	r1, #3
 800106a:	2003      	movs	r0, #3
 800106c:	f007 f97a 	bl	8008364 <IKS4A1_MOTION_SENSOR_Init>
	IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 8001070:	2104      	movs	r1, #4
 8001072:	2000      	movs	r0, #0
 8001074:	f007 f976 	bl	8008364 <IKS4A1_MOTION_SENSOR_Init>
    IKS4A1_MOTION_SENSOR_Enable(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO);
 8001078:	2102      	movs	r1, #2
 800107a:	2003      	movs	r0, #3
 800107c:	f007 faa4 	bl	80085c8 <IKS4A1_MOTION_SENSOR_Enable>
	IKS4A1_MOTION_SENSOR_Enable(IKS4A1_LSM6DSO16IS_0, MOTION_GYRO);
 8001080:	2101      	movs	r1, #1
 8001082:	2003      	movs	r0, #3
 8001084:	f007 faa0 	bl	80085c8 <IKS4A1_MOTION_SENSOR_Enable>
	IKS4A1_MOTION_SENSOR_Enable(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 8001088:	2104      	movs	r1, #4
 800108a:	2000      	movs	r0, #0
 800108c:	f007 fa9c 	bl	80085c8 <IKS4A1_MOTION_SENSOR_Enable>

	if (set_sensors_scale() != BSP_ERROR_NONE)
 8001090:	f7ff ffa0 	bl	8000fd4 <set_sensors_scale>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <sensors_init+0x3a>
	{
	    Error_Handler();
 800109a:	f000 fb8d 	bl	80017b8 <Error_Handler>
	}
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <start_mag_cal>:

void start_mag_cal(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0ac      	sub	sp, #176	@ 0xb0
 80010a8:	af06      	add	r7, sp, #24
    IKS4A1_MOTION_SENSOR_Axes_t mag_data;
    char msg_mag[128];
    uint32_t timeout = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const uint32_t max_attempts = 10000;
 80010b0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80010b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    HAL_UART_Transmit(&huart3, (uint8_t*)"Calibrating magnetometer...\r\n", 29, HAL_MAX_DELAY);
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	221d      	movs	r2, #29
 80010be:	495b      	ldr	r1, [pc, #364]	@ (800122c <start_mag_cal+0x188>)
 80010c0:	485b      	ldr	r0, [pc, #364]	@ (8001230 <start_mag_cal+0x18c>)
 80010c2:	f00c fa4d 	bl	800d560 <HAL_UART_Transmit>

    do {
        IKS4A1_MOTION_SENSOR_GetAxes(IKS4A1_LIS2MDL_0, MOTION_MAGNETO, &mag_data);
 80010c6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80010ca:	461a      	mov	r2, r3
 80010cc:	2104      	movs	r1, #4
 80010ce:	2000      	movs	r0, #0
 80010d0:	f007 fabc 	bl	800864c <IKS4A1_MOTION_SENSOR_GetAxes>
        magCalInput.mag[0] = (float)mag_data.x * 0.15f / 50.0f;
 80010d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e0:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001234 <start_mag_cal+0x190>
 80010e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010e8:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8001238 <start_mag_cal+0x194>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	4b52      	ldr	r3, [pc, #328]	@ (800123c <start_mag_cal+0x198>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
        magCalInput.mag[1] = (float)mag_data.y * 0.15f / 50.0f;
 80010f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001234 <start_mag_cal+0x190>
 8001106:	ee27 7a87 	vmul.f32	s14, s15, s14
 800110a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8001238 <start_mag_cal+0x194>
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	4b4a      	ldr	r3, [pc, #296]	@ (800123c <start_mag_cal+0x198>)
 8001114:	edc3 7a01 	vstr	s15, [r3, #4]
        magCalInput.mag[2] = (float)mag_data.z * 0.15f / 50.0f;
 8001118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001124:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001234 <start_mag_cal+0x190>
 8001128:	ee27 7a87 	vmul.f32	s14, s15, s14
 800112c:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8001238 <start_mag_cal+0x194>
 8001130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001134:	4b41      	ldr	r3, [pc, #260]	@ (800123c <start_mag_cal+0x198>)
 8001136:	edc3 7a02 	vstr	s15, [r3, #8]
        magCalInput.time_stamp = HAL_GetTick();
 800113a:	f007 fff3 	bl	8009124 <HAL_GetTick>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b3e      	ldr	r3, [pc, #248]	@ (800123c <start_mag_cal+0x198>)
 8001144:	60da      	str	r2, [r3, #12]
        magCalInput.mag[0] = mag_data.x  * 100.0f/ 50.0f;
		magCalInput.mag[1] = mag_data.y * 100.0f / 50.0f;
		magCalInput.mag[2] = mag_data.z * 100.0f / 50.0f;
		*/

        MotionFX_MagCal_run(&magCalInput);
 8001146:	483d      	ldr	r0, [pc, #244]	@ (800123c <start_mag_cal+0x198>)
 8001148:	f016 fb6a 	bl	8017820 <MotionFX_MagCal_run>
        MotionFX_MagCal_getParams(&magCalOutput);
 800114c:	483c      	ldr	r0, [pc, #240]	@ (8001240 <start_mag_cal+0x19c>)
 800114e:	f016 fd9d 	bl	8017c8c <MotionFX_MagCal_getParams>

        timeout++;
 8001152:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001156:	3301      	adds	r3, #1
 8001158:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        sprintf(msg_mag, "Calibration Quality: %d. Offsets (μT): X=%.2f Y=%.2f Z=%.2f\r\n",
        				magCalOutput.cal_quality,
 800115c:	4b38      	ldr	r3, [pc, #224]	@ (8001240 <start_mag_cal+0x19c>)
 800115e:	7b1b      	ldrb	r3, [r3, #12]
        sprintf(msg_mag, "Calibration Quality: %d. Offsets (μT): X=%.2f Y=%.2f Z=%.2f\r\n",
 8001160:	461a      	mov	r2, r3
                        magCalOutput.hi_bias[0] * 50.0f, // convert from μT/50 to μT
 8001162:	4b37      	ldr	r3, [pc, #220]	@ (8001240 <start_mag_cal+0x19c>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001238 <start_mag_cal+0x194>
 800116c:	ee67 7a87 	vmul.f32	s15, s15, s14
        sprintf(msg_mag, "Calibration Quality: %d. Offsets (μT): X=%.2f Y=%.2f Z=%.2f\r\n",
 8001170:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                        magCalOutput.hi_bias[1] * 50.0f,
 8001174:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <start_mag_cal+0x19c>)
 8001176:	edd3 6a01 	vldr	s13, [r3, #4]
 800117a:	ed9f 6a2f 	vldr	s12, [pc, #188]	@ 8001238 <start_mag_cal+0x194>
 800117e:	ee66 6a86 	vmul.f32	s13, s13, s12
        sprintf(msg_mag, "Calibration Quality: %d. Offsets (μT): X=%.2f Y=%.2f Z=%.2f\r\n",
 8001182:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                        magCalOutput.hi_bias[2] * 50.0f);
 8001186:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <start_mag_cal+0x19c>)
 8001188:	edd3 5a02 	vldr	s11, [r3, #8]
 800118c:	ed9f 5a2a 	vldr	s10, [pc, #168]	@ 8001238 <start_mag_cal+0x194>
 8001190:	ee65 5a85 	vmul.f32	s11, s11, s10
        sprintf(msg_mag, "Calibration Quality: %d. Offsets (μT): X=%.2f Y=%.2f Z=%.2f\r\n",
 8001194:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	ed8d 5b04 	vstr	d5, [sp, #16]
 800119e:	ed8d 6b02 	vstr	d6, [sp, #8]
 80011a2:	ed8d 7b00 	vstr	d7, [sp]
 80011a6:	4927      	ldr	r1, [pc, #156]	@ (8001244 <start_mag_cal+0x1a0>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f017 faa5 	bl	80186f8 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg_mag, strlen(msg_mag), HAL_MAX_DELAY);
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f8fd 	bl	80003b0 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	1d39      	adds	r1, r7, #4
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	481b      	ldr	r0, [pc, #108]	@ (8001230 <start_mag_cal+0x18c>)
 80011c2:	f00c f9cd 	bl	800d560 <HAL_UART_Transmit>
        // delay to avoid having too frequent MagCal_run calls
    	HAL_Delay(10);
 80011c6:	200a      	movs	r0, #10
 80011c8:	f007 ffb8 	bl	800913c <HAL_Delay>

    } while((magCalOutput.cal_quality != MFX_MAGCALGOOD) && (timeout < max_attempts));
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <start_mag_cal+0x19c>)
 80011ce:	7b1b      	ldrb	r3, [r3, #12]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d006      	beq.n	80011e2 <start_mag_cal+0x13e>
 80011d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80011d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011dc:	429a      	cmp	r2, r3
 80011de:	f4ff af72 	bcc.w	80010c6 <start_mag_cal+0x22>

    if(magCalOutput.cal_quality == MFX_MAGCALGOOD) {
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <start_mag_cal+0x19c>)
 80011e4:	7b1b      	ldrb	r3, [r3, #12]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d108      	bne.n	80011fc <start_mag_cal+0x158>

        sprintf(msg_mag, "Calibration SUCCESSFUL. Quality: %d\r\n", magCalOutput.cal_quality);
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <start_mag_cal+0x19c>)
 80011ec:	7b1b      	ldrb	r3, [r3, #12]
 80011ee:	461a      	mov	r2, r3
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4915      	ldr	r1, [pc, #84]	@ (8001248 <start_mag_cal+0x1a4>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f017 fa7f 	bl	80186f8 <siprintf>
 80011fa:	e007      	b.n	800120c <start_mag_cal+0x168>

    } else {
        sprintf(msg_mag, "Calibration FAILED. Quality: %d\r\n", magCalOutput.cal_quality);
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <start_mag_cal+0x19c>)
 80011fe:	7b1b      	ldrb	r3, [r3, #12]
 8001200:	461a      	mov	r2, r3
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4911      	ldr	r1, [pc, #68]	@ (800124c <start_mag_cal+0x1a8>)
 8001206:	4618      	mov	r0, r3
 8001208:	f017 fa76 	bl	80186f8 <siprintf>
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)msg_mag, strlen(msg_mag), HAL_MAX_DELAY);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f8ce 	bl	80003b0 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	1d39      	adds	r1, r7, #4
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	4804      	ldr	r0, [pc, #16]	@ (8001230 <start_mag_cal+0x18c>)
 8001220:	f00c f99e 	bl	800d560 <HAL_UART_Transmit>
}
 8001224:	bf00      	nop
 8001226:	3798      	adds	r7, #152	@ 0x98
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	0801c3a8 	.word	0x0801c3a8
 8001230:	24000bc8 	.word	0x24000bc8
 8001234:	3e19999a 	.word	0x3e19999a
 8001238:	42480000 	.word	0x42480000
 800123c:	24000cbc 	.word	0x24000cbc
 8001240:	24000ccc 	.word	0x24000ccc
 8001244:	0801c3c8 	.word	0x0801c3c8
 8001248:	0801c408 	.word	0x0801c408
 800124c:	0801c430 	.word	0x0801c430

08001250 <main>:

int main(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	ed2d 8b0c 	vpush	{d8-d13}
 8001256:	b0de      	sub	sp, #376	@ 0x178
 8001258:	af1a      	add	r7, sp, #104	@ 0x68
    HAL_Init();
 800125a:	f007 fedd 	bl	8009018 <HAL_Init>
    MPU_Config();
 800125e:	f000 fa7f 	bl	8001760 <MPU_Config>
    SystemClock_Config();
 8001262:	f000 f90f 	bl	8001484 <SystemClock_Config>
    MX_GPIO_Init();
 8001266:	f000 f9eb 	bl	8001640 <MX_GPIO_Init>
    MX_CRC_Init();
 800126a:	f000 f97b 	bl	8001564 <MX_CRC_Init>
    MX_USART3_UART_Init();
 800126e:	f000 f99b 	bl	80015a8 <MX_USART3_UART_Init>

    sensors_init();
 8001272:	f7ff fef7 	bl	8001064 <sensors_init>

    MotionFX_initialize(mfxstate);
 8001276:	4879      	ldr	r0, [pc, #484]	@ (800145c <main+0x20c>)
 8001278:	f016 f85c 	bl	8017334 <MotionFX_initialize>
    MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 800127c:	2101      	movs	r1, #1
 800127e:	4877      	ldr	r0, [pc, #476]	@ (800145c <main+0x20c>)
 8001280:	f016 f910 	bl	80174a4 <MotionFX_enable_9X>

    BSP_LED_Init(LED_GREEN);
 8001284:	2000      	movs	r0, #0
 8001286:	f007 fda5 	bl	8008dd4 <BSP_LED_Init>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800128a:	2101      	movs	r1, #1
 800128c:	2000      	movs	r0, #0
 800128e:	f007 fe17 	bl	8008ec0 <BSP_PB_Init>

    while (1) {
        last_time = HAL_GetTick();
 8001292:	f007 ff47 	bl	8009124 <HAL_GetTick>
 8001296:	ee07 0a90 	vmov	s15, r0
 800129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129e:	4b70      	ldr	r3, [pc, #448]	@ (8001460 <main+0x210>)
 80012a0:	edc3 7a00 	vstr	s15, [r3]
        if(BSP_PB_GetState(BUTTON_USER)) {
 80012a4:	2000      	movs	r0, #0
 80012a6:	f007 fe7d 	bl	8008fa4 <BSP_PB_GetState>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d01c      	beq.n	80012ea <main+0x9a>
            MotionFX_MagCal_init(10, 1);
 80012b0:	2101      	movs	r1, #1
 80012b2:	200a      	movs	r0, #10
 80012b4:	f016 fa24 	bl	8017700 <MotionFX_MagCal_init>
            start_mag_cal();
 80012b8:	f7ff fef4 	bl	80010a4 <start_mag_cal>
            HAL_Delay(3000);
 80012bc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80012c0:	f007 ff3c 	bl	800913c <HAL_Delay>
            // saving the reference yaw
            if (!yaw_reference_set && mfx_output.rotation[0] != 0.0f) {
 80012c4:	4b67      	ldr	r3, [pc, #412]	@ (8001464 <main+0x214>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10e      	bne.n	80012ea <main+0x9a>
 80012cc:	4b66      	ldr	r3, [pc, #408]	@ (8001468 <main+0x218>)
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	d006      	beq.n	80012ea <main+0x9a>
                    	    initial_yaw = mfx_output.rotation[0];
 80012dc:	4b62      	ldr	r3, [pc, #392]	@ (8001468 <main+0x218>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a62      	ldr	r2, [pc, #392]	@ (800146c <main+0x21c>)
 80012e2:	6013      	str	r3, [r2, #0]
                    	    yaw_reference_set = 1;
 80012e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001464 <main+0x214>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
            }
        }
        char msg[256];

        read_insert_sensors();
 80012ea:	f7ff fdbd 	bl	8000e68 <read_insert_sensors>

        // delta for kalman filter
        uint32_t now = HAL_GetTick();
 80012ee:	f007 ff19 	bl	8009124 <HAL_GetTick>
 80012f2:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        float delta_time = (now - last_time) / 1000.0f;
 80012f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001302:	4b57      	ldr	r3, [pc, #348]	@ (8001460 <main+0x210>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800130c:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001470 <main+0x220>
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
        if (delta_time <= 0.0f) delta_time = 0.01f;
 8001318:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 800131c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	d802      	bhi.n	800132c <main+0xdc>
 8001326:	4b53      	ldr	r3, [pc, #332]	@ (8001474 <main+0x224>)
 8001328:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

		MotionFX_propagate(mfxstate, &mfx_output, &mfx_input, &delta_time);
 800132c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001330:	4a51      	ldr	r2, [pc, #324]	@ (8001478 <main+0x228>)
 8001332:	494d      	ldr	r1, [pc, #308]	@ (8001468 <main+0x218>)
 8001334:	4849      	ldr	r0, [pc, #292]	@ (800145c <main+0x20c>)
 8001336:	f016 f8e7 	bl	8017508 <MotionFX_propagate>
		MotionFX_update(mfxstate, &mfx_output, &mfx_input, &delta_time, NULL);
 800133a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800133e:	2200      	movs	r2, #0
 8001340:	9200      	str	r2, [sp, #0]
 8001342:	4a4d      	ldr	r2, [pc, #308]	@ (8001478 <main+0x228>)
 8001344:	4948      	ldr	r1, [pc, #288]	@ (8001468 <main+0x218>)
 8001346:	4845      	ldr	r0, [pc, #276]	@ (800145c <main+0x20c>)
 8001348:	f016 f8cc 	bl	80174e4 <MotionFX_update>

        last_time = now;
 800134c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001358:	4b41      	ldr	r3, [pc, #260]	@ (8001460 <main+0x210>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
        // subtracting the inizial yaw to obtain the real yaw
        float relative_yaw = mfx_output.rotation[0] - initial_yaw;
 800135e:	4b42      	ldr	r3, [pc, #264]	@ (8001468 <main+0x218>)
 8001360:	ed93 7a00 	vldr	s14, [r3]
 8001364:	4b41      	ldr	r3, [pc, #260]	@ (800146c <main+0x21c>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136e:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
			"Combined Acc: X=%.3f Y=%.3f Z=%.3f | "
			"Mag: X=%.3f Y=%.3f Z=%.3f | "

			"Orientation: Yaw=%.2f Pitch=%.2f Roll=%.2f | "
			"Compass: %.2f | Compass Error: %.2f \r\n\r\n",
			mfx_input.acc[0], mfx_input.acc[1], mfx_input.acc[2],
 8001372:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <main+0x228>)
 8001374:	edd3 7a03 	vldr	s15, [r3, #12]
		sprintf(msg,
 8001378:	eeb7 dae7 	vcvt.f64.f32	d13, s15
			mfx_input.acc[0], mfx_input.acc[1], mfx_input.acc[2],
 800137c:	4b3e      	ldr	r3, [pc, #248]	@ (8001478 <main+0x228>)
 800137e:	edd3 7a04 	vldr	s15, [r3, #16]
		sprintf(msg,
 8001382:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			mfx_input.acc[0], mfx_input.acc[1], mfx_input.acc[2],
 8001386:	4b3c      	ldr	r3, [pc, #240]	@ (8001478 <main+0x228>)
 8001388:	edd3 6a05 	vldr	s13, [r3, #20]
		sprintf(msg,
 800138c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			mfx_input.mag[0], mfx_input.mag[1], mfx_input.mag[2],
 8001390:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <main+0x228>)
 8001392:	edd3 5a00 	vldr	s11, [r3]
		sprintf(msg,
 8001396:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			mfx_input.mag[0], mfx_input.mag[1], mfx_input.mag[2],
 800139a:	4b37      	ldr	r3, [pc, #220]	@ (8001478 <main+0x228>)
 800139c:	edd3 4a01 	vldr	s9, [r3, #4]
		sprintf(msg,
 80013a0:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			mfx_input.mag[0], mfx_input.mag[1], mfx_input.mag[2],
 80013a4:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <main+0x228>)
 80013a6:	edd3 3a02 	vldr	s7, [r3, #8]
		sprintf(msg,
 80013aa:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
			mfx_output.linear_acceleration[0], mfx_output.linear_acceleration[1], mfx_output.linear_acceleration[2],
 80013ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <main+0x218>)
 80013b0:	edd3 2a0a 	vldr	s5, [r3, #40]	@ 0x28
		sprintf(msg,
 80013b4:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
			mfx_output.linear_acceleration[0], mfx_output.linear_acceleration[1], mfx_output.linear_acceleration[2],
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <main+0x218>)
 80013ba:	edd3 1a0b 	vldr	s3, [r3, #44]	@ 0x2c
		sprintf(msg,
 80013be:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
			mfx_output.linear_acceleration[0], mfx_output.linear_acceleration[1], mfx_output.linear_acceleration[2],
 80013c2:	4b29      	ldr	r3, [pc, #164]	@ (8001468 <main+0x218>)
 80013c4:	edd3 0a0c 	vldr	s1, [r3, #48]	@ 0x30
		sprintf(msg,
 80013c8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80013cc:	ed97 8a42 	vldr	s16, [r7, #264]	@ 0x108
 80013d0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
			// from the sensor data the roll and pitch angles are switched with respect to the comment of the structure in the library
			relative_yaw, mfx_output.rotation[1], mfx_output.rotation[2],
 80013d4:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <main+0x218>)
 80013d6:	ed93 9a01 	vldr	s18, [r3, #4]
		sprintf(msg,
 80013da:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
			relative_yaw, mfx_output.rotation[1], mfx_output.rotation[2],
 80013de:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <main+0x218>)
 80013e0:	ed93 aa02 	vldr	s20, [r3, #8]
		sprintf(msg,
 80013e4:	eeb7 aaca 	vcvt.f64.f32	d10, s20
			mfx_output.heading, mfx_output.headingErr
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <main+0x218>)
 80013ea:	ed93 ba0d 	vldr	s22, [r3, #52]	@ 0x34
		sprintf(msg,
 80013ee:	eeb7 bacb 	vcvt.f64.f32	d11, s22
			mfx_output.heading, mfx_output.headingErr
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <main+0x218>)
 80013f4:	ed93 ca0e 	vldr	s24, [r3, #56]	@ 0x38
		sprintf(msg,
 80013f8:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 80013fc:	1d38      	adds	r0, r7, #4
 80013fe:	ed8d cb18 	vstr	d12, [sp, #96]	@ 0x60
 8001402:	ed8d bb16 	vstr	d11, [sp, #88]	@ 0x58
 8001406:	ed8d ab14 	vstr	d10, [sp, #80]	@ 0x50
 800140a:	ed8d 9b12 	vstr	d9, [sp, #72]	@ 0x48
 800140e:	ed8d 8b10 	vstr	d8, [sp, #64]	@ 0x40
 8001412:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8001416:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 800141a:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 800141e:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001422:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001426:	ed8d 5b04 	vstr	d5, [sp, #16]
 800142a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800142e:	ed8d 7b00 	vstr	d7, [sp]
 8001432:	ec53 2b1d 	vmov	r2, r3, d13
 8001436:	4911      	ldr	r1, [pc, #68]	@ (800147c <main+0x22c>)
 8001438:	f017 f95e 	bl	80186f8 <siprintf>
		);

		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ffb6 	bl	80003b0 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	1d39      	adds	r1, r7, #4
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	480c      	ldr	r0, [pc, #48]	@ (8001480 <main+0x230>)
 8001450:	f00c f886 	bl	800d560 <HAL_UART_Transmit>

		HAL_Delay(10);
 8001454:	200a      	movs	r0, #10
 8001456:	f007 fe71 	bl	800913c <HAL_Delay>
    while (1) {
 800145a:	e71a      	b.n	8001292 <main+0x42>
 800145c:	24000ce8 	.word	0x24000ce8
 8001460:	24000cdc 	.word	0x24000cdc
 8001464:	24000ce4 	.word	0x24000ce4
 8001468:	24000c80 	.word	0x24000c80
 800146c:	24000ce0 	.word	0x24000ce0
 8001470:	447a0000 	.word	0x447a0000
 8001474:	3c23d70a 	.word	0x3c23d70a
 8001478:	24000c5c 	.word	0x24000c5c
 800147c:	0801c454 	.word	0x0801c454
 8001480:	24000bc8 	.word	0x24000bc8

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b09c      	sub	sp, #112	@ 0x70
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148e:	224c      	movs	r2, #76	@ 0x4c
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f017 f995 	bl	80187c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2220      	movs	r2, #32
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f017 f98f 	bl	80187c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f009 faa9 	bl	800a9fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <SystemClock_Config+0xdc>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001560 <SystemClock_Config+0xdc>)
 80014b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014bc:	6193      	str	r3, [r2, #24]
 80014be:	4b28      	ldr	r3, [pc, #160]	@ (8001560 <SystemClock_Config+0xdc>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014ca:	bf00      	nop
 80014cc:	4b24      	ldr	r3, [pc, #144]	@ (8001560 <SystemClock_Config+0xdc>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014d8:	d1f8      	bne.n	80014cc <SystemClock_Config+0x48>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014da:	2302      	movs	r3, #2
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014de:	2301      	movs	r3, #1
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80014e2:	2340      	movs	r3, #64	@ 0x40
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e6:	2302      	movs	r3, #2
 80014e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ea:	2300      	movs	r3, #0
 80014ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014ee:	2304      	movs	r3, #4
 80014f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80014f2:	230c      	movs	r3, #12
 80014f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014fa:	2304      	movs	r3, #4
 80014fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001502:	230c      	movs	r3, #12
 8001504:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001506:	2300      	movs	r3, #0
 8001508:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001512:	4618      	mov	r0, r3
 8001514:	f009 faac 	bl	800aa70 <HAL_RCC_OscConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800151e:	f000 f94b 	bl	80017b8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001522:	233f      	movs	r3, #63	@ 0x3f
 8001524:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001526:	2303      	movs	r3, #3
 8001528:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800152e:	2308      	movs	r3, #8
 8001530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001532:	2340      	movs	r3, #64	@ 0x40
 8001534:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001536:	2340      	movs	r3, #64	@ 0x40
 8001538:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800153a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800153e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001540:	2340      	movs	r3, #64	@ 0x40
 8001542:	623b      	str	r3, [r7, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2101      	movs	r1, #1
 8001548:	4618      	mov	r0, r3
 800154a:	f009 fe6b 	bl	800b224 <HAL_RCC_ClockConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001554:	f000 f930 	bl	80017b8 <Error_Handler>
  }
}
 8001558:	bf00      	nop
 800155a:	3770      	adds	r7, #112	@ 0x70
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	58024800 	.word	0x58024800

08001564 <MX_CRC_Init>:
/**
  * @brief CRC Initialization Function
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <MX_CRC_Init+0x3c>)
 800156a:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <MX_CRC_Init+0x40>)
 800156c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <MX_CRC_Init+0x3c>)
 8001570:	2200      	movs	r2, #0
 8001572:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001574:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <MX_CRC_Init+0x3c>)
 8001576:	2200      	movs	r2, #0
 8001578:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <MX_CRC_Init+0x3c>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001580:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <MX_CRC_Init+0x3c>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <MX_CRC_Init+0x3c>)
 8001588:	2201      	movs	r2, #1
 800158a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <MX_CRC_Init+0x3c>)
 800158e:	f007 ff81 	bl	8009494 <HAL_CRC_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001598:	f000 f90e 	bl	80017b8 <Error_Handler>
  }
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24000ba4 	.word	0x24000ba4
 80015a4:	58024c00 	.word	0x58024c00

080015a8 <MX_USART3_UART_Init>:
/**
  * @brief USART3 Initialization Function
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 80015ac:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015ae:	4a23      	ldr	r2, [pc, #140]	@ (800163c <MX_USART3_UART_Init+0x94>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ea:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f0:	4811      	ldr	r0, [pc, #68]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 80015f2:	f00b ff65 	bl	800d4c0 <HAL_UART_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015fc:	f000 f8dc 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001600:	2100      	movs	r1, #0
 8001602:	480d      	ldr	r0, [pc, #52]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 8001604:	f00d f8ff 	bl	800e806 <HAL_UARTEx_SetTxFifoThreshold>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800160e:	f000 f8d3 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001612:	2100      	movs	r1, #0
 8001614:	4808      	ldr	r0, [pc, #32]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 8001616:	f00d f934 	bl	800e882 <HAL_UARTEx_SetRxFifoThreshold>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001620:	f000 f8ca 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001624:	4804      	ldr	r0, [pc, #16]	@ (8001638 <MX_USART3_UART_Init+0x90>)
 8001626:	f00d f8b5 	bl	800e794 <HAL_UARTEx_DisableFifoMode>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001630:	f000 f8c2 	bl	80017b8 <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	24000bc8 	.word	0x24000bc8
 800163c:	40004800 	.word	0x40004800

08001640 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4b3f      	ldr	r3, [pc, #252]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165c:	4a3d      	ldr	r2, [pc, #244]	@ (8001754 <MX_GPIO_Init+0x114>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001666:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b37      	ldr	r3, [pc, #220]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	4a36      	ldr	r2, [pc, #216]	@ (8001754 <MX_GPIO_Init+0x114>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001684:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001692:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001698:	4a2e      	ldr	r2, [pc, #184]	@ (8001754 <MX_GPIO_Init+0x114>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <MX_GPIO_Init+0x114>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b28      	ldr	r3, [pc, #160]	@ (8001754 <MX_GPIO_Init+0x114>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b6:	4a27      	ldr	r2, [pc, #156]	@ (8001754 <MX_GPIO_Init+0x114>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <MX_GPIO_Init+0x114>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <MX_GPIO_Init+0x114>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001754 <MX_GPIO_Init+0x114>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <MX_GPIO_Init+0x114>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016f2:	4819      	ldr	r0, [pc, #100]	@ (8001758 <MX_GPIO_Init+0x118>)
 80016f4:	f008 fae6 	bl	8009cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2102      	movs	r1, #2
 80016fc:	4817      	ldr	r0, [pc, #92]	@ (800175c <MX_GPIO_Init+0x11c>)
 80016fe:	f008 fae1 	bl	8009cc4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001702:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	480f      	ldr	r0, [pc, #60]	@ (8001758 <MX_GPIO_Init+0x118>)
 800171c:	f008 f810 	bl	8009740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001720:	2302      	movs	r3, #2
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4809      	ldr	r0, [pc, #36]	@ (800175c <MX_GPIO_Init+0x11c>)
 8001738:	f008 f802 	bl	8009740 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2028      	movs	r0, #40	@ 0x28
 8001742:	f007 fdfa 	bl	800933a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001746:	2028      	movs	r0, #40	@ 0x28
 8001748:	f007 fe11 	bl	800936e <HAL_NVIC_EnableIRQ>
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	@ 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	58024400 	.word	0x58024400
 8001758:	58020400 	.word	0x58020400
 800175c:	58021000 	.word	0x58021000

08001760 <MPU_Config>:

/* MPU Configuration */
void MPU_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001766:	463b      	mov	r3, r7
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]

  HAL_MPU_Disable();
 8001772:	f007 fe17 	bl	80093a4 <HAL_MPU_Disable>

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001776:	2301      	movs	r3, #1
 8001778:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800177a:	2300      	movs	r3, #0
 800177c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001782:	231f      	movs	r3, #31
 8001784:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001786:	2387      	movs	r3, #135	@ 0x87
 8001788:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800178a:	2300      	movs	r3, #0
 800178c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800178e:	2300      	movs	r3, #0
 8001790:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001792:	2301      	movs	r3, #1
 8001794:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001796:	2301      	movs	r3, #1
 8001798:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017a2:	463b      	mov	r3, r7
 80017a4:	4618      	mov	r0, r3
 80017a6:	f007 fe35 	bl	8009414 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017aa:	2004      	movs	r0, #4
 80017ac:	f007 fe12 	bl	80093d4 <HAL_MPU_Enable>
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  __disable_irq();
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <Error_Handler+0x8>

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_MspInit+0x30>)
 80017cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017d0:	4a08      	ldr	r2, [pc, #32]	@ (80017f4 <HAL_MspInit+0x30>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_MspInit+0x30>)
 80017dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	58024400 	.word	0x58024400

080017f8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <HAL_CRC_MspInit+0x3c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10e      	bne.n	8001828 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_CRC_MspInit+0x40>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001810:	4a09      	ldr	r2, [pc, #36]	@ (8001838 <HAL_CRC_MspInit+0x40>)
 8001812:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <HAL_CRC_MspInit+0x40>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001820:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	58024c00 	.word	0x58024c00
 8001838:	58024400 	.word	0x58024400

0800183c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0b8      	sub	sp, #224	@ 0xe0
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	22b8      	movs	r2, #184	@ 0xb8
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f016 ffb0 	bl	80187c2 <memset>
  if(huart->Instance==USART3)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a27      	ldr	r2, [pc, #156]	@ (8001904 <HAL_UART_MspInit+0xc8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d146      	bne.n	80018fa <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800186c:	f04f 0202 	mov.w	r2, #2
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4618      	mov	r0, r3
 8001884:	f00a f85a 	bl	800b93c <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800188e:	f7ff ff93 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001892:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <HAL_UART_MspInit+0xcc>)
 8001894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001898:	4a1b      	ldr	r2, [pc, #108]	@ (8001908 <HAL_UART_MspInit+0xcc>)
 800189a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018a2:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_UART_MspInit+0xcc>)
 80018a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <HAL_UART_MspInit+0xcc>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b6:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <HAL_UART_MspInit+0xcc>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_UART_MspInit+0xcc>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	@ (800190c <HAL_UART_MspInit+0xd0>)
 80018f6:	f007 ff23 	bl	8009740 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80018fa:	bf00      	nop
 80018fc:	37e0      	adds	r7, #224	@ 0xe0
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40004800 	.word	0x40004800
 8001908:	58024400 	.word	0x58024400
 800190c:	58020c00 	.word	0x58020c00

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <NMI_Handler+0x4>

08001918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <MemManage_Handler+0x4>

08001928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <UsageFault_Handler+0x4>

08001938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001966:	f007 fbc9 	bl	80090fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <EXTI15_10_IRQHandler+0x10>)
 8001976:	f007 feb3 	bl	80096e0 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	24001818 	.word	0x24001818

08001984 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <BSP_I2C1_Init+0x70>)
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <BSP_I2C1_Init+0x74>)
 8001992:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <BSP_I2C1_Init+0x78>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	4918      	ldr	r1, [pc, #96]	@ (80019fc <BSP_I2C1_Init+0x78>)
 800199c:	600a      	str	r2, [r1, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d122      	bne.n	80019e8 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80019a2:	4814      	ldr	r0, [pc, #80]	@ (80019f4 <BSP_I2C1_Init+0x70>)
 80019a4:	f008 fcb6 	bl	800a314 <HAL_I2C_GetState>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d11c      	bne.n	80019e8 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80019ae:	4811      	ldr	r0, [pc, #68]	@ (80019f4 <BSP_I2C1_Init+0x70>)
 80019b0:	f000 f8fe 	bl	8001bb0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d116      	bne.n	80019e8 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80019ba:	480e      	ldr	r0, [pc, #56]	@ (80019f4 <BSP_I2C1_Init+0x70>)
 80019bc:	f000 f8b4 	bl	8001b28 <MX_I2C1_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80019c6:	f06f 0307 	mvn.w	r3, #7
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	e00c      	b.n	80019e8 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4808      	ldr	r0, [pc, #32]	@ (80019f4 <BSP_I2C1_Init+0x70>)
 80019d2:	f008 ff7b 	bl	800a8cc <HAL_I2CEx_ConfigAnalogFilter>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80019dc:	f06f 0307 	mvn.w	r3, #7
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	e001      	b.n	80019e8 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80019e8:	687b      	ldr	r3, [r7, #4]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2400167c 	.word	0x2400167c
 80019f8:	40005400 	.word	0x40005400
 80019fc:	240016d0 	.word	0x240016d0

08001a00 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <BSP_I2C1_DeInit+0x48>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d014      	beq.n	8001a3c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <BSP_I2C1_DeInit+0x48>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	4a0b      	ldr	r2, [pc, #44]	@ (8001a48 <BSP_I2C1_DeInit+0x48>)
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <BSP_I2C1_DeInit+0x48>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10b      	bne.n	8001a3c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001a24:	4809      	ldr	r0, [pc, #36]	@ (8001a4c <BSP_I2C1_DeInit+0x4c>)
 8001a26:	f000 f92f 	bl	8001c88 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001a2a:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <BSP_I2C1_DeInit+0x4c>)
 8001a2c:	f008 fa00 	bl	8009e30 <HAL_I2C_DeInit>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001a36:	f06f 0307 	mvn.w	r3, #7
 8001a3a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	240016d0 	.word	0x240016d0
 8001a4c:	2400167c 	.word	0x2400167c

08001a50 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af04      	add	r7, sp, #16
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	81fb      	strh	r3, [r7, #14]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	81bb      	strh	r3, [r7, #12]
 8001a62:	4613      	mov	r3, r2
 8001a64:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001a6a:	89ba      	ldrh	r2, [r7, #12]
 8001a6c:	89f9      	ldrh	r1, [r7, #14]
 8001a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <BSP_I2C1_WriteReg+0x60>)
 8001a80:	f008 fa1a 	bl	8009eb8 <HAL_I2C_Mem_Write>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00c      	beq.n	8001aa4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001a8a:	4809      	ldr	r0, [pc, #36]	@ (8001ab0 <BSP_I2C1_WriteReg+0x60>)
 8001a8c:	f008 fc50 	bl	800a330 <HAL_I2C_GetError>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d103      	bne.n	8001a9e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a96:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e002      	b.n	8001aa4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a9e:	f06f 0303 	mvn.w	r3, #3
 8001aa2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001aa4:	697b      	ldr	r3, [r7, #20]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2400167c 	.word	0x2400167c

08001ab4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	60ba      	str	r2, [r7, #8]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	81fb      	strh	r3, [r7, #14]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	81bb      	strh	r3, [r7, #12]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001ace:	89ba      	ldrh	r2, [r7, #12]
 8001ad0:	89f9      	ldrh	r1, [r7, #14]
 8001ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <BSP_I2C1_ReadReg+0x60>)
 8001ae4:	f008 fafc 	bl	800a0e0 <HAL_I2C_Mem_Read>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001aee:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <BSP_I2C1_ReadReg+0x60>)
 8001af0:	f008 fc1e 	bl	800a330 <HAL_I2C_GetError>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d103      	bne.n	8001b02 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001afa:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e002      	b.n	8001b08 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b02:	f06f 0303 	mvn.w	r3, #3
 8001b06:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b08:	697b      	ldr	r3, [r7, #20]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2400167c 	.word	0x2400167c

08001b18 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001b1c:	f007 fb02 	bl	8009124 <HAL_GetTick>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <MX_I2C1_Init+0x80>)
 8001b38:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x2010091A;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bac <MX_I2C1_Init+0x84>)
 8001b3e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f008 f8c4 	bl	8009cf8 <HAL_I2C_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f008 fea5 	bl	800a8cc <HAL_I2CEx_ConfigAnalogFilter>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f008 fee7 	bl	800a962 <HAL_I2CEx_ConfigDigitalFilter>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	2010091a 	.word	0x2010091a

08001bb0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0b8      	sub	sp, #224	@ 0xe0
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	22b8      	movs	r2, #184	@ 0xb8
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f016 fdfe 	bl	80187c2 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bc6:	f04f 0208 	mov.w	r2, #8
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f009 fead 	bl	800b93c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <I2C1_MspInit+0xd0>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be8:	4a25      	ldr	r2, [pc, #148]	@ (8001c80 <I2C1_MspInit+0xd0>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf2:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <I2C1_MspInit+0xd0>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c08:	2312      	movs	r3, #18
 8001c0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001c20:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c24:	4619      	mov	r1, r3
 8001c26:	4817      	ldr	r0, [pc, #92]	@ (8001c84 <I2C1_MspInit+0xd4>)
 8001c28:	f007 fd8a 	bl	8009740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c34:	2312      	movs	r3, #18
 8001c36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001c46:	2304      	movs	r3, #4
 8001c48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001c4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c50:	4619      	mov	r1, r3
 8001c52:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <I2C1_MspInit+0xd4>)
 8001c54:	f007 fd74 	bl	8009740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <I2C1_MspInit+0xd0>)
 8001c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <I2C1_MspInit+0xd0>)
 8001c60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <I2C1_MspInit+0xd0>)
 8001c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001c76:	bf00      	nop
 8001c78:	37e0      	adds	r7, #224	@ 0xe0
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	58024400 	.word	0x58024400
 8001c84:	58020400 	.word	0x58020400

08001c88 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <I2C1_MspDeInit+0x34>)
 8001c92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c96:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <I2C1_MspDeInit+0x34>)
 8001c98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001ca0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ca4:	4806      	ldr	r0, [pc, #24]	@ (8001cc0 <I2C1_MspDeInit+0x38>)
 8001ca6:	f007 fef3 	bl	8009a90 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001caa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cae:	4804      	ldr	r0, [pc, #16]	@ (8001cc0 <I2C1_MspDeInit+0x38>)
 8001cb0:	f007 feee 	bl	8009a90 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020400 	.word	0x58020400

08001cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return 1;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_kill>:

int _kill(int pid, int sig)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cde:	f016 fdc3 	bl	8018868 <__errno>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2216      	movs	r2, #22
 8001ce6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_exit>:

void _exit (int status)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ffe7 	bl	8001cd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d06:	bf00      	nop
 8001d08:	e7fd      	b.n	8001d06 <_exit+0x12>

08001d0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	e00a      	b.n	8001d32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d1c:	f3af 8000 	nop.w
 8001d20:	4601      	mov	r1, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	60ba      	str	r2, [r7, #8]
 8001d28:	b2ca      	uxtb	r2, r1
 8001d2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	dbf0      	blt.n	8001d1c <_read+0x12>
  }

  return len;
 8001d3a:	687b      	ldr	r3, [r7, #4]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e009      	b.n	8001d6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	60ba      	str	r2, [r7, #8]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f007 f936 	bl	8008fd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	dbf1      	blt.n	8001d56 <_write+0x12>
  }
  return len;
 8001d72:	687b      	ldr	r3, [r7, #4]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_close>:

int _close(int file)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da4:	605a      	str	r2, [r3, #4]
  return 0;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_isatty>:

int _isatty(int file)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dbc:	2301      	movs	r3, #1
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dec:	4a14      	ldr	r2, [pc, #80]	@ (8001e40 <_sbrk+0x5c>)
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <_sbrk+0x60>)
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df8:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <_sbrk+0x64>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <_sbrk+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d207      	bcs.n	8001e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e14:	f016 fd28 	bl	8018868 <__errno>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	e009      	b.n	8001e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <_sbrk+0x64>)
 8001e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	24050000 	.word	0x24050000
 8001e44:	00000400 	.word	0x00000400
 8001e48:	240016d4 	.word	0x240016d4
 8001e4c:	24001a10 	.word	0x24001a10

08001e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e54:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <SystemInit+0x100>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f50 <SystemInit+0x100>)
 8001e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e64:	4b3b      	ldr	r3, [pc, #236]	@ (8001f54 <SystemInit+0x104>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d807      	bhi.n	8001e80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e70:	4b38      	ldr	r3, [pc, #224]	@ (8001f54 <SystemInit+0x104>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 030f 	bic.w	r3, r3, #15
 8001e78:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <SystemInit+0x104>)
 8001e7a:	f043 0307 	orr.w	r3, r3, #7
 8001e7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e80:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <SystemInit+0x108>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a34      	ldr	r2, [pc, #208]	@ (8001f58 <SystemInit+0x108>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e8c:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <SystemInit+0x108>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <SystemInit+0x108>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4930      	ldr	r1, [pc, #192]	@ (8001f58 <SystemInit+0x108>)
 8001e98:	4b30      	ldr	r3, [pc, #192]	@ (8001f5c <SystemInit+0x10c>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f54 <SystemInit+0x104>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001f54 <SystemInit+0x104>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 030f 	bic.w	r3, r3, #15
 8001eb2:	4a28      	ldr	r2, [pc, #160]	@ (8001f54 <SystemInit+0x104>)
 8001eb4:	f043 0307 	orr.w	r3, r3, #7
 8001eb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eba:	4b27      	ldr	r3, [pc, #156]	@ (8001f58 <SystemInit+0x108>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <SystemInit+0x108>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ec6:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <SystemInit+0x108>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <SystemInit+0x108>)
 8001ece:	4a24      	ldr	r2, [pc, #144]	@ (8001f60 <SystemInit+0x110>)
 8001ed0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <SystemInit+0x108>)
 8001ed4:	4a23      	ldr	r2, [pc, #140]	@ (8001f64 <SystemInit+0x114>)
 8001ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <SystemInit+0x108>)
 8001eda:	4a23      	ldr	r2, [pc, #140]	@ (8001f68 <SystemInit+0x118>)
 8001edc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <SystemInit+0x108>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <SystemInit+0x108>)
 8001ee6:	4a20      	ldr	r2, [pc, #128]	@ (8001f68 <SystemInit+0x118>)
 8001ee8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <SystemInit+0x108>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <SystemInit+0x108>)
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <SystemInit+0x118>)
 8001ef4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <SystemInit+0x108>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001efc:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <SystemInit+0x108>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a15      	ldr	r2, [pc, #84]	@ (8001f58 <SystemInit+0x108>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <SystemInit+0x108>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001f0e:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <SystemInit+0x108>)
 8001f10:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d113      	bne.n	8001f44 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <SystemInit+0x108>)
 8001f1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f22:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <SystemInit+0x108>)
 8001f24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <SystemInit+0x11c>)
 8001f2e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001f32:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <SystemInit+0x108>)
 8001f36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f3a:	4a07      	ldr	r2, [pc, #28]	@ (8001f58 <SystemInit+0x108>)
 8001f3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f40:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00
 8001f54:	52002000 	.word	0x52002000
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f60:	02020200 	.word	0x02020200
 8001f64:	01ff0000 	.word	0x01ff0000
 8001f68:	01010280 	.word	0x01010280
 8001f6c:	52004000 	.word	0x52004000

08001f70 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <ExitRun0Mode+0x2c>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <ExitRun0Mode+0x2c>)
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001f80:	bf00      	nop
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <ExitRun0Mode+0x2c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f9      	beq.n	8001f82 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	58024800 	.word	0x58024800

08001fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001fdc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001fa4:	f7ff ffe4 	bl	8001f70 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa8:	f7ff ff52 	bl	8001e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fac:	480c      	ldr	r0, [pc, #48]	@ (8001fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fae:	490d      	ldr	r1, [pc, #52]	@ (8001fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f016 fc4f 	bl	8018874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd6:	f7ff f93b 	bl	8001250 <main>
  bx  lr
 8001fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fdc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001fe0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fe4:	2400032c 	.word	0x2400032c
  ldr r2, =_sidata
 8001fe8:	0801cef0 	.word	0x0801cef0
  ldr r2, =_sbss
 8001fec:	2400032c 	.word	0x2400032c
  ldr r4, =_ebss
 8001ff0:	24001a0c 	.word	0x24001a0c

08001ff4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC3_IRQHandler>
	...

08001ff8 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d103      	bne.n	8002014 <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	e084      	b.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	7b1a      	ldrb	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a34      	ldr	r2, [pc, #208]	@ (8002128 <LIS2DUXS12_RegisterBusIO+0x130>)
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a33      	ldr	r2, [pc, #204]	@ (800212c <LIS2DUXS12_RegisterBusIO+0x134>)
 800205e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e04f      	b.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4798      	blx	r3
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e045      	b.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d11c      	bne.n	80020d4 <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d13c      	bne.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f8f0 	bl	800228a <LIS2DUXS12_ExitDeepPowerDownSPI>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295
 80020b4:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 80020b6:	2350      	movs	r3, #80	@ 0x50
 80020b8:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	461a      	mov	r2, r3
 80020be:	2110      	movs	r1, #16
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fbf2 	bl	80028aa <LIS2DUXS12_Write_Reg>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d028      	beq.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
          {
            ret = LIS2DUXS12_ERROR;
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e024      	b.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10e      	bne.n	80020fa <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11b      	bne.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8cf 	bl	800228a <LIS2DUXS12_ExitDeepPowerDownSPI>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
          {
            ret = LIS2DUXS12_ERROR;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e011      	b.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002108:	2b00      	cmp	r3, #0
 800210a:	d108      	bne.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8a7 	bl	8002260 <LIS2DUXS12_ExitDeepPowerDownI2C>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <LIS2DUXS12_RegisterBusIO+0x126>
          {
            ret = LIS2DUXS12_ERROR;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
 800211c:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	08002d65 	.word	0x08002d65
 800212c:	08002d9b 	.word	0x08002d9b

08002130 <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d01f      	beq.n	8002180 <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3320      	adds	r3, #32
 8002144:	f107 0214 	add.w	r2, r7, #20
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f001 fb0a 	bl	8003764 <lis2duxs12_i3c_configure_get>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e05c      	b.n	8002216 <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 800215c:	7d7b      	ldrb	r3, [r7, #21]
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3320      	adds	r3, #32
 8002168:	f107 0214 	add.w	r2, r7, #20
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f001 fac0 	bl	80036f4 <lis2duxs12_i3c_configure_set>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	e04a      	b.n	8002216 <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8002180:	2100      	movs	r1, #0
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fbac 	bl	80028e0 <LIS2DUXS12_Set_Mem_Bank>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e040      	b.n	8002216 <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3320      	adds	r3, #32
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fec4 	bl	8002f28 <lis2duxs12_init_set>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e034      	b.n	8002216 <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f103 0020 	add.w	r0, r3, #32
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021c4:	f001 fb33 	bl	800382e <lis2duxs12_fifo_mode_set>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e020      	b.n	8002216 <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <LIS2DUXS12_Init+0xf0>)
 80021d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	2100      	movs	r1, #0
 80021e8:	460a      	mov	r2, r1
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	460a      	mov	r2, r1
 80021ee:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3320      	adds	r3, #32
 80021f4:	f107 0208 	add.w	r2, r7, #8
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 ffe2 	bl	80031c4 <lis2duxs12_mode_set>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e004      	b.n	8002216 <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	42c80000 	.word	0x42c80000

08002224 <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f8ad 	bl	800238c <LIS2DUXS12_ACC_Disable>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	e00c      	b.n	8002258 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode*/
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3320      	adds	r3, #32
 800226c:	f107 020f 	add.w	r2, r7, #15
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fe46 	bl	8002f04 <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	2019      	movs	r0, #25
 800227e:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3320      	adds	r3, #32
 8002296:	4618      	mov	r0, r3
 8002298:	f001 f960 	bl	800355c <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	2019      	movs	r0, #25
 80022a2:	4798      	blx	r3

  return LIS2DUXS12_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3320      	adds	r3, #32
 80022bc:	f107 020f 	add.w	r2, r7, #15
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fe1e 	bl	8002f04 <lis2duxs12_device_id_get>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e003      	b.n	80022dc <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2200      	movs	r2, #0
 80022fe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2210      	movs	r2, #16
 8002310:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4a06      	ldr	r2, [pc, #24]	@ (800233c <LIS2DUXS12_GetCapabilities+0x58>)
 8002324:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	44480000 	.word	0x44480000

08002340 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e016      	b.n	8002384 <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002362:	4619      	mov	r1, r3
 8002364:	eeb0 0a67 	vmov.f32	s0, s15
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fadb 	bl	8002924 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
 8002378:	e004      	b.n	8002384 <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e046      	b.n	8002430 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f893 	bl	80024d4 <LIS2DUXS12_ACC_GetOutputDataRate>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	e03a      	b.n	8002430 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 80023ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80023be:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002438 <LIS2DUXS12_ACC_Disable+0xac>
 80023c2:	eef4 7a47 	vcmp.f32	s15, s14
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	d10e      	bne.n	80023ea <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 80023cc:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800243c <LIS2DUXS12_ACC_Disable+0xb0>
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f94b 	bl	800266c <LIS2DUXS12_ACC_SetOutputDataRate>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295
 80023e0:	e026      	b.n	8002430 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	2003      	movs	r0, #3
 80023e8:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3320      	adds	r3, #32
 80023ee:	f107 0208 	add.w	r2, r7, #8
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 ffa1 	bl	800333c <lis2duxs12_mode_get>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
 8002404:	e014      	b.n	8002430 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8002406:	2300      	movs	r3, #0
 8002408:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3320      	adds	r3, #32
 800240e:	f107 0208 	add.w	r2, r7, #8
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fed5 	bl	80031c4 <lis2duxs12_mode_set>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	e004      	b.n	8002430 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	44480000 	.word	0x44480000
 800243c:	43c80000 	.word	0x43c80000

08002440 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3320      	adds	r3, #32
 8002452:	f107 0208 	add.w	r2, r7, #8
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f000 ff6f 	bl	800333c <lis2duxs12_mode_get>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	e026      	b.n	80024b8 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 800246a:	7a7b      	ldrb	r3, [r7, #9]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d81b      	bhi.n	80024a8 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 8002470:	a201      	add	r2, pc, #4	@ (adr r2, 8002478 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	08002489 	.word	0x08002489
 800247c:	08002491 	.word	0x08002491
 8002480:	08002499 	.word	0x08002499
 8002484:	080024a1 	.word	0x080024a1
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 800248c:	601a      	str	r2, [r3, #0]
      break;
 800248e:	e012      	b.n	80024b6 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8002494:	601a      	str	r2, [r3, #0]
      break;
 8002496:	e00e      	b.n	80024b6 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4a0b      	ldr	r2, [pc, #44]	@ (80024c8 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 800249c:	601a      	str	r2, [r3, #0]
      break;
 800249e:	e00a      	b.n	80024b6 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 80024a4:	601a      	str	r2, [r3, #0]
      break;
 80024a6:	e006      	b.n	80024b6 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 80024ac:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	60fb      	str	r3, [r7, #12]
      break;
 80024b4:	bf00      	nop
  }

  return ret;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	3d79db23 	.word	0x3d79db23
 80024c4:	3df9db23 	.word	0x3df9db23
 80024c8:	3e79db23 	.word	0x3e79db23
 80024cc:	3ef9db23 	.word	0x3ef9db23
 80024d0:	bf800000 	.word	0xbf800000

080024d4 <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3320      	adds	r3, #32
 80024e6:	f107 0208 	add.w	r2, r7, #8
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 ff25 	bl	800333c <lis2duxs12_mode_get>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	e09b      	b.n	8002636 <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 80024fe:	7a3b      	ldrb	r3, [r7, #8]
 8002500:	2b2f      	cmp	r3, #47	@ 0x2f
 8002502:	f200 8090 	bhi.w	8002626 <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8002506:	a201      	add	r2, pc, #4	@ (adr r2, 800250c <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	080025cd 	.word	0x080025cd
 8002510:	080025d7 	.word	0x080025d7
 8002514:	080025df 	.word	0x080025df
 8002518:	080025f7 	.word	0x080025f7
 800251c:	080025e7 	.word	0x080025e7
 8002520:	080025ef 	.word	0x080025ef
 8002524:	080025f7 	.word	0x080025f7
 8002528:	080025ff 	.word	0x080025ff
 800252c:	08002607 	.word	0x08002607
 8002530:	0800260f 	.word	0x0800260f
 8002534:	08002617 	.word	0x08002617
 8002538:	0800261f 	.word	0x0800261f
 800253c:	08002627 	.word	0x08002627
 8002540:	08002627 	.word	0x08002627
 8002544:	08002627 	.word	0x08002627
 8002548:	08002627 	.word	0x08002627
 800254c:	08002627 	.word	0x08002627
 8002550:	08002627 	.word	0x08002627
 8002554:	08002627 	.word	0x08002627
 8002558:	08002627 	.word	0x08002627
 800255c:	080025e7 	.word	0x080025e7
 8002560:	080025ef 	.word	0x080025ef
 8002564:	080025f7 	.word	0x080025f7
 8002568:	080025ff 	.word	0x080025ff
 800256c:	08002607 	.word	0x08002607
 8002570:	0800260f 	.word	0x0800260f
 8002574:	08002617 	.word	0x08002617
 8002578:	0800261f 	.word	0x0800261f
 800257c:	08002627 	.word	0x08002627
 8002580:	08002627 	.word	0x08002627
 8002584:	08002627 	.word	0x08002627
 8002588:	08002627 	.word	0x08002627
 800258c:	08002627 	.word	0x08002627
 8002590:	08002627 	.word	0x08002627
 8002594:	08002627 	.word	0x08002627
 8002598:	08002627 	.word	0x08002627
 800259c:	08002627 	.word	0x08002627
 80025a0:	08002627 	.word	0x08002627
 80025a4:	08002627 	.word	0x08002627
 80025a8:	08002627 	.word	0x08002627
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002627 	.word	0x08002627
 80025b4:	08002627 	.word	0x08002627
 80025b8:	08002627 	.word	0x08002627
 80025bc:	08002627 	.word	0x08002627
 80025c0:	08002627 	.word	0x08002627
 80025c4:	080025cd 	.word	0x080025cd
 80025c8:	080025cd 	.word	0x080025cd
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
      break;
 80025d4:	e02e      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	4a19      	ldr	r2, [pc, #100]	@ (8002640 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 80025da:	601a      	str	r2, [r3, #0]
      break;
 80025dc:	e02a      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	4a18      	ldr	r2, [pc, #96]	@ (8002644 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 80025e2:	601a      	str	r2, [r3, #0]
      break;
 80025e4:	e026      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 80025ea:	601a      	str	r2, [r3, #0]
      break;
 80025ec:	e022      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	4a16      	ldr	r2, [pc, #88]	@ (800264c <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 80025f2:	601a      	str	r2, [r3, #0]
      break;
 80025f4:	e01e      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	4a15      	ldr	r2, [pc, #84]	@ (8002650 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 80025fa:	601a      	str	r2, [r3, #0]
      break;
 80025fc:	e01a      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	4a14      	ldr	r2, [pc, #80]	@ (8002654 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8002602:	601a      	str	r2, [r3, #0]
      break;
 8002604:	e016      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	4a13      	ldr	r2, [pc, #76]	@ (8002658 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 800260a:	601a      	str	r2, [r3, #0]
      break;
 800260c:	e012      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	4a12      	ldr	r2, [pc, #72]	@ (800265c <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8002612:	601a      	str	r2, [r3, #0]
      break;
 8002614:	e00e      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4a11      	ldr	r2, [pc, #68]	@ (8002660 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 800261a:	601a      	str	r2, [r3, #0]
      break;
 800261c:	e00a      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	4a10      	ldr	r2, [pc, #64]	@ (8002664 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8002622:	601a      	str	r2, [r3, #0]
      break;
 8002624:	e006      	b.n	8002634 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 800262a:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	60fb      	str	r3, [r7, #12]
      break;
 8002632:	bf00      	nop
  }

  return ret;
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	3fcccccd 	.word	0x3fcccccd
 8002644:	40400000 	.word	0x40400000
 8002648:	40c00000 	.word	0x40c00000
 800264c:	41480000 	.word	0x41480000
 8002650:	41c80000 	.word	0x41c80000
 8002654:	42480000 	.word	0x42480000
 8002658:	42c80000 	.word	0x42c80000
 800265c:	43480000 	.word	0x43480000
 8002660:	43c80000 	.word	0x43c80000
 8002664:	44480000 	.word	0x44480000
 8002668:	bf800000 	.word	0xbf800000

0800266c <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 8002678:	2102      	movs	r1, #2
 800267a:	ed97 0a00 	vldr	s0, [r7]
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f805 	bl	800268e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	ed87 0a02 	vstr	s0, [r7, #8]
 800269a:	460b      	mov	r3, r1
 800269c:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d108      	bne.n	80026ba <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4619      	mov	r1, r3
 80026ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f937 	bl	8002924 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	e007      	b.n	80026ca <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	4619      	mov	r1, r3
 80026be:	ed97 0a02 	vldr	s0, [r7, #8]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 faac 	bl	8002c20 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 80026c8:	4603      	mov	r3, r0
  }
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3320      	adds	r3, #32
 80026e6:	f107 0208 	add.w	r2, r7, #8
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fe25 	bl	800333c <lis2duxs12_mode_get>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
 80026fc:	e027      	b.n	800274e <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 80026fe:	7a7b      	ldrb	r3, [r7, #9]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d81b      	bhi.n	800273c <LIS2DUXS12_ACC_GetFullScale+0x68>
 8002704:	a201      	add	r2, pc, #4	@ (adr r2, 800270c <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8002706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270a:	bf00      	nop
 800270c:	0800271d 	.word	0x0800271d
 8002710:	08002725 	.word	0x08002725
 8002714:	0800272d 	.word	0x0800272d
 8002718:	08002735 	.word	0x08002735
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2202      	movs	r2, #2
 8002720:	601a      	str	r2, [r3, #0]
      break;
 8002722:	e013      	b.n	800274c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2204      	movs	r2, #4
 8002728:	601a      	str	r2, [r3, #0]
      break;
 800272a:	e00f      	b.n	800274c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2208      	movs	r2, #8
 8002730:	601a      	str	r2, [r3, #0]
      break;
 8002732:	e00b      	b.n	800274c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2210      	movs	r2, #16
 8002738:	601a      	str	r2, [r3, #0]
      break;
 800273a:	e007      	b.n	800274c <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f04f 32ff 	mov.w	r2, #4294967295
 8002742:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	60fb      	str	r3, [r7, #12]
      break;
 800274a:	bf00      	nop
  }

  return ret;
 800274c:	68fb      	ldr	r3, [r7, #12]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop

08002758 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3320      	adds	r3, #32
 8002766:	f107 020c 	add.w	r2, r7, #12
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fde5 	bl	800333c <lis2duxs12_mode_get>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	e01f      	b.n	80027be <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b02      	cmp	r3, #2
 8002782:	dd0b      	ble.n	800279c <LIS2DUXS12_ACC_SetFullScale+0x44>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b04      	cmp	r3, #4
 8002788:	dd06      	ble.n	8002798 <LIS2DUXS12_ACC_SetFullScale+0x40>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b08      	cmp	r3, #8
 800278e:	dc01      	bgt.n	8002794 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 8002790:	2302      	movs	r3, #2
 8002792:	e004      	b.n	800279e <LIS2DUXS12_ACC_SetFullScale+0x46>
 8002794:	2303      	movs	r3, #3
 8002796:	e002      	b.n	800279e <LIS2DUXS12_ACC_SetFullScale+0x46>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <LIS2DUXS12_ACC_SetFullScale+0x46>
 800279c:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 800279e:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3320      	adds	r3, #32
 80027a4:	f107 020c 	add.w	r2, r7, #12
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fd0a 	bl	80031c4 <lis2duxs12_mode_set>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e000      	b.n	80027be <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b088      	sub	sp, #32
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3320      	adds	r3, #32
 80027d4:	f107 021c 	add.w	r2, r7, #28
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fdae 	bl	800333c <lis2duxs12_mode_get>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	e01b      	b.n	8002824 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3320      	adds	r3, #32
 80027f0:	f107 0208 	add.w	r2, r7, #8
 80027f4:	f107 011c 	add.w	r1, r7, #28
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fecf 	bl	800359c <lis2duxs12_xl_data_get>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	e00c      	b.n	8002824 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 800280a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 8002812:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 800281a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3320      	adds	r3, #32
 800283a:	f107 021c 	add.w	r2, r7, #28
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fd7b 	bl	800333c <lis2duxs12_mode_get>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
 8002850:	e027      	b.n	80028a2 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3320      	adds	r3, #32
 8002856:	f107 0208 	add.w	r2, r7, #8
 800285a:	f107 011c 	add.w	r1, r7, #28
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fe9c 	bl	800359c <lis2duxs12_xl_data_get>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	e018      	b.n	80028a2 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 8002870:	edd7 7a02 	vldr	s15, [r7, #8]
 8002874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002878:	ee17 2a90 	vmov	r2, s15
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 8002880:	edd7 7a03 	vldr	s15, [r7, #12]
 8002884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002888:	ee17 2a90 	vmov	r2, s15
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 8002890:	edd7 7a04 	vldr	s15, [r7, #16]
 8002894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002898:	ee17 2a90 	vmov	r2, s15
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	70fb      	strb	r3, [r7, #3]
 80028b6:	4613      	mov	r3, r2
 80028b8:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f103 0020 	add.w	r0, r3, #32
 80028c0:	1cba      	adds	r2, r7, #2
 80028c2:	78f9      	ldrb	r1, [r7, #3]
 80028c4:	2301      	movs	r3, #1
 80028c6:	f000 faa0 	bl	8002e0a <lis2duxs12_write_reg>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	e000      	b.n	80028d8 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 80028fc:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3320      	adds	r3, #32
 8002902:	7afa      	ldrb	r2, [r7, #11]
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f000 ff6b 	bl	80037e2 <lis2duxs12_mem_bank_set>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002918:	68fb      	ldr	r3, [r7, #12]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002930:	460b      	mov	r3, r1
 8002932:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3320      	adds	r3, #32
 8002938:	f107 0214 	add.w	r2, r7, #20
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fcfc 	bl	800333c <lis2duxs12_mode_get>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	e142      	b.n	8002bd6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d118      	bne.n	8002988 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 8002956:	edd7 7a02 	vldr	s15, [r7, #8]
 800295a:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8002be0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 800295e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	d801      	bhi.n	800296c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 8002968:	2301      	movs	r3, #1
 800296a:	e00b      	b.n	8002984 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 800296c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002970:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	d801      	bhi.n	8002982 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 800297e:	2302      	movs	r3, #2
 8002980:	e000      	b.n	8002984 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002982:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 8002984:	753b      	strb	r3, [r7, #20]
 8002986:	e0a4      	b.n	8002ad2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d14f      	bne.n	8002a2e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 800298e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002992:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8002996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	d801      	bhi.n	80029a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 80029a0:	2304      	movs	r3, #4
 80029a2:	e042      	b.n	8002a2a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80029a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029a8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80029ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b4:	d801      	bhi.n	80029ba <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 80029b6:	2305      	movs	r3, #5
 80029b8:	e037      	b.n	8002a2a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80029ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80029be:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80029c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	d801      	bhi.n	80029d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 80029cc:	2306      	movs	r3, #6
 80029ce:	e02c      	b.n	8002a2a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80029d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80029d4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002be4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 80029d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	d801      	bhi.n	80029e6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 80029e2:	2307      	movs	r3, #7
 80029e4:	e021      	b.n	8002a2a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80029e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ea:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8002be8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80029ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	d801      	bhi.n	80029fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80029f8:	2308      	movs	r3, #8
 80029fa:	e016      	b.n	8002a2a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80029fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a00:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002bec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8002a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0c:	d801      	bhi.n	8002a12 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 8002a0e:	2309      	movs	r3, #9
 8002a10:	e00b      	b.n	8002a2a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002a12:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a16:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8002bf0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8002a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a22:	d801      	bhi.n	8002a28 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002a24:	230a      	movs	r3, #10
 8002a26:	e000      	b.n	8002a2a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002a28:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 8002a2a:	753b      	strb	r3, [r7, #20]
 8002a2c:	e051      	b.n	8002ad2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d14e      	bne.n	8002ad2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 8002a34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a38:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8002a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	d801      	bhi.n	8002a4a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002a46:	2314      	movs	r3, #20
 8002a48:	e042      	b.n	8002ad0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002a4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a4e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	d801      	bhi.n	8002a60 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002a5c:	2315      	movs	r3, #21
 8002a5e:	e037      	b.n	8002ad0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a64:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a70:	d801      	bhi.n	8002a76 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002a72:	2316      	movs	r3, #22
 8002a74:	e02c      	b.n	8002ad0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002a76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a7a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002be4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8002a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	d801      	bhi.n	8002a8c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002a88:	2317      	movs	r3, #23
 8002a8a:	e021      	b.n	8002ad0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002a8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a90:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002be8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8002a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9c:	d801      	bhi.n	8002aa2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002a9e:	2318      	movs	r3, #24
 8002aa0:	e016      	b.n	8002ad0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aa6:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002bec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8002aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	d801      	bhi.n	8002ab8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002ab4:	2319      	movs	r3, #25
 8002ab6:	e00b      	b.n	8002ad0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002abc:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002bf0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8002ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	d801      	bhi.n	8002ace <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002aca:	231a      	movs	r3, #26
 8002acc:	e000      	b.n	8002ad0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002ace:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 8002ad0:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3320      	adds	r3, #32
 8002ad6:	f107 0214 	add.w	r2, r7, #20
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fb71 	bl	80031c4 <lis2duxs12_mode_set>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aec:	e073      	b.n	8002bd6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 8002aee:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d05b      	beq.n	8002bac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 8002af4:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d056      	beq.n	8002ba8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 8002afa:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d051      	beq.n	8002ba4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 8002b00:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8002b02:	2b14      	cmp	r3, #20
 8002b04:	d04c      	beq.n	8002ba0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 8002b06:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d047      	beq.n	8002b9c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 8002b0c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 8002b0e:	2b15      	cmp	r3, #21
 8002b10:	d042      	beq.n	8002b98 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 8002b12:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d03d      	beq.n	8002b94 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 8002b18:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d038      	beq.n	8002b90 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 8002b1e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8002b20:	2b16      	cmp	r3, #22
 8002b22:	d033      	beq.n	8002b8c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 8002b24:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8002b26:	2b07      	cmp	r3, #7
 8002b28:	d02e      	beq.n	8002b88 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 8002b2a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8002b2c:	2b17      	cmp	r3, #23
 8002b2e:	d029      	beq.n	8002b84 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 8002b30:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d024      	beq.n	8002b80 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 8002b36:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8002b38:	2b18      	cmp	r3, #24
 8002b3a:	d01f      	beq.n	8002b7c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 8002b3c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 8002b3e:	2b09      	cmp	r3, #9
 8002b40:	d01a      	beq.n	8002b78 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 8002b42:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8002b44:	2b19      	cmp	r3, #25
 8002b46:	d015      	beq.n	8002b74 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8002b48:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8002b4a:	2b0a      	cmp	r3, #10
 8002b4c:	d010      	beq.n	8002b70 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 8002b4e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8002b50:	2b1a      	cmp	r3, #26
 8002b52:	d00b      	beq.n	8002b6c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 8002b54:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 8002b56:	2b0b      	cmp	r3, #11
 8002b58:	d006      	beq.n	8002b68 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 8002b5a:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 8002b5c:	2b1b      	cmp	r3, #27
 8002b5e:	d101      	bne.n	8002b64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 8002b60:	4b24      	ldr	r3, [pc, #144]	@ (8002bf4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 8002b62:	e024      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8002b64:	4b24      	ldr	r3, [pc, #144]	@ (8002bf8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 8002b66:	e022      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 8002b6a:	e020      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8002b6c:	4b23      	ldr	r3, [pc, #140]	@ (8002bfc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8002b6e:	e01e      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8002b70:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8002b72:	e01c      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8002b74:	4b22      	ldr	r3, [pc, #136]	@ (8002c00 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 8002b76:	e01a      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 8002b78:	4b21      	ldr	r3, [pc, #132]	@ (8002c00 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 8002b7a:	e018      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8002b7c:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8002b7e:	e016      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8002b80:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8002b82:	e014      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8002b84:	4b20      	ldr	r3, [pc, #128]	@ (8002c08 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 8002b86:	e012      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8002b88:	4b1f      	ldr	r3, [pc, #124]	@ (8002c08 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 8002b8a:	e010      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8002b8e:	e00e      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8002b90:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8002b92:	e00c      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8002b94:	4b1d      	ldr	r3, [pc, #116]	@ (8002c0c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8002b96:	e00a      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 8002b98:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 8002b9a:	e008      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 8002b9e:	e006      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 8002ba2:	e004      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 8002ba6:	e002      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 8002baa:	e000      	b.n	8002bae <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002bb8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002bbc:	eef4 7a47 	vcmp.f32	s15, s14
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	d102      	bne.n	8002bcc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	e004      	b.n	8002bd6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	79fa      	ldrb	r2, [r7, #7]
 8002bd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	3fcccccd 	.word	0x3fcccccd
 8002be4:	42480000 	.word	0x42480000
 8002be8:	42c80000 	.word	0x42c80000
 8002bec:	43480000 	.word	0x43480000
 8002bf0:	43c80000 	.word	0x43c80000
 8002bf4:	44480000 	.word	0x44480000
 8002bf8:	bf800000 	.word	0xbf800000
 8002bfc:	43c80000 	.word	0x43c80000
 8002c00:	43480000 	.word	0x43480000
 8002c04:	42c80000 	.word	0x42c80000
 8002c08:	42480000 	.word	0x42480000
 8002c0c:	41c80000 	.word	0x41c80000
 8002c10:	41480000 	.word	0x41480000
 8002c14:	40c00000 	.word	0x40c00000
 8002c18:	40400000 	.word	0x40400000
 8002c1c:	3fcccccd 	.word	0x3fcccccd

08002c20 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11a      	bne.n	8002c6c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 8002c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c3a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c46:	d802      	bhi.n	8002c4e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8002c48:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002c4c:	e00b      	b.n	8002c66 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 8002c4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c52:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	d801      	bhi.n	8002c64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 8002c60:	4b33      	ldr	r3, [pc, #204]	@ (8002d30 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 8002c62:	e000      	b.n	8002c66 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 8002c64:	4b33      	ldr	r3, [pc, #204]	@ (8002d34 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c6a:	e055      	b.n	8002d18 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d002      	beq.n	8002c78 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d14f      	bne.n	8002d18 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 8002c78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c7c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8002c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	d801      	bhi.n	8002c8e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d38 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 8002c8c:	e042      	b.n	8002d14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 8002c8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c92:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	d801      	bhi.n	8002ca4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 8002ca0:	4b26      	ldr	r3, [pc, #152]	@ (8002d3c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002ca2:	e037      	b.n	8002d14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 8002ca4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb4:	d801      	bhi.n	8002cba <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d34 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002cb8:	e02c      	b.n	8002d14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 8002cba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cbe:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002d40 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 8002cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	d801      	bhi.n	8002cd0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d44 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 8002cce:	e021      	b.n	8002d14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 8002cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cd4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002d48 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 8002cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce0:	d801      	bhi.n	8002ce6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 8002ce4:	e016      	b.n	8002d14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 8002ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cea:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002d50 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 8002cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	d801      	bhi.n	8002cfc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 8002cf8:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 8002cfa:	e00b      	b.n	8002d14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 8002cfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d00:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002d58 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 8002d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0c:	d801      	bhi.n	8002d12 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 8002d10:	e000      	b.n	8002d14 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002d12:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	79fa      	ldrb	r2, [r7, #7]
 8002d1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40400000 	.word	0x40400000
 8002d34:	41c80000 	.word	0x41c80000
 8002d38:	40c00000 	.word	0x40c00000
 8002d3c:	41480000 	.word	0x41480000
 8002d40:	42480000 	.word	0x42480000
 8002d44:	42480000 	.word	0x42480000
 8002d48:	42c80000 	.word	0x42c80000
 8002d4c:	42c80000 	.word	0x42c80000
 8002d50:	43480000 	.word	0x43480000
 8002d54:	43480000 	.word	0x43480000
 8002d58:	43c80000 	.word	0x43c80000
 8002d5c:	43c80000 	.word	0x43c80000
 8002d60:	44480000 	.word	0x44480000

08002d64 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	460b      	mov	r3, r1
 8002d72:	72fb      	strb	r3, [r7, #11]
 8002d74:	4613      	mov	r3, r2
 8002d76:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	695c      	ldr	r4, [r3, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	7b1b      	ldrb	r3, [r3, #12]
 8002d84:	4618      	mov	r0, r3
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	b299      	uxth	r1, r3
 8002d8a:	893b      	ldrh	r3, [r7, #8]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	47a0      	blx	r4
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}

08002d9a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d9a:	b590      	push	{r4, r7, lr}
 8002d9c:	b087      	sub	sp, #28
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	460b      	mov	r3, r1
 8002da8:	72fb      	strb	r3, [r7, #11]
 8002daa:	4613      	mov	r3, r2
 8002dac:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	691c      	ldr	r4, [r3, #16]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	7b1b      	ldrb	r3, [r3, #12]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	b299      	uxth	r1, r3
 8002dc0:	893b      	ldrh	r3, [r7, #8]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	47a0      	blx	r4
 8002dc6:	4603      	mov	r3, r0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd90      	pop	{r4, r7, pc}

08002dd0 <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	460b      	mov	r3, r1
 8002dde:	72fb      	strb	r3, [r7, #11]
 8002de0:	4613      	mov	r3, r2
 8002de2:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <lis2duxs12_read_reg+0x20>
  {
    return -1;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	e008      	b.n	8002e02 <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685c      	ldr	r4, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68d8      	ldr	r0, [r3, #12]
 8002df8:	893b      	ldrh	r3, [r7, #8]
 8002dfa:	7af9      	ldrb	r1, [r7, #11]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	47a0      	blx	r4
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd90      	pop	{r4, r7, pc}

08002e0a <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 8002e0a:	b590      	push	{r4, r7, lr}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	461a      	mov	r2, r3
 8002e16:	460b      	mov	r3, r1
 8002e18:	72fb      	strb	r3, [r7, #11]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <lis2duxs12_write_reg+0x20>
  {
    return -1;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
 8002e28:	e008      	b.n	8002e3c <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681c      	ldr	r4, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68d8      	ldr	r0, [r3, #12]
 8002e32:	893b      	ldrh	r3, [r7, #8]
 8002e34:	7af9      	ldrb	r1, [r7, #11]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	47a0      	blx	r4
 8002e3a:	4603      	mov	r3, r0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd90      	pop	{r4, r7, pc}

08002e44 <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 8002e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002e70 <lis2duxs12_from_fs2g_to_mg+0x2c>
 8002e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e62:	eeb0 0a67 	vmov.f32	s0, s15
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	3d79db23 	.word	0x3d79db23

08002e74 <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 8002e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e8a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ea0 <lis2duxs12_from_fs4g_to_mg+0x2c>
 8002e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e92:	eeb0 0a67 	vmov.f32	s0, s15
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	3df9db23 	.word	0x3df9db23

08002ea4 <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 8002eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eba:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ed0 <lis2duxs12_from_fs8g_to_mg+0x2c>
 8002ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	3e79db23 	.word	0x3e79db23

08002ed4 <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8002ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eea:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002f00 <lis2duxs12_from_fs16g_to_mg+0x2c>
 8002eee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	3ef9db23 	.word	0x3ef9db23

08002f04 <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 8002f0e:	2301      	movs	r3, #1
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	210f      	movs	r1, #15
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff5b 	bl	8002dd0 <lis2duxs12_read_reg>
 8002f1a:	60f8      	str	r0, [r7, #12]

  return ret;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002f3c:	f107 0214 	add.w	r2, r7, #20
 8002f40:	2301      	movs	r3, #1
 8002f42:	2110      	movs	r1, #16
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff43 	bl	8002dd0 <lis2duxs12_read_reg>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002f52:	f107 0210 	add.w	r2, r7, #16
 8002f56:	2301      	movs	r3, #1
 8002f58:	2113      	movs	r1, #19
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff38 	bl	8002dd0 <lis2duxs12_read_reg>
 8002f60:	4602      	mov	r2, r0
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4413      	add	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
  switch (val)
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	f200 80ca 	bhi.w	8003104 <lis2duxs12_init_set+0x1dc>
 8002f70:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <lis2duxs12_init_set+0x50>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08003079 	.word	0x08003079
 8002f7c:	08002f89 	.word	0x08002f89
 8002f80:	08003003 	.word	0x08003003
 8002f84:	080030bf 	.word	0x080030bf
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8002f88:	7c3b      	ldrb	r3, [r7, #16]
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002f90:	f107 0210 	add.w	r2, r7, #16
 8002f94:	2301      	movs	r3, #1
 8002f96:	2113      	movs	r1, #19
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff36 	bl	8002e0a <lis2duxs12_write_reg>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 80bb 	bne.w	8003124 <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002fae:	f107 0210 	add.w	r2, r7, #16
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	2113      	movs	r1, #19
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ff0a 	bl	8002dd0 <lis2duxs12_read_reg>
 8002fbc:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d113      	bne.n	8002fec <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 8002fc4:	7c3b      	ldrb	r3, [r7, #16]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00f      	beq.n	8002ff0 <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2019      	movs	r0, #25
 8002fde:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	77fa      	strb	r2, [r7, #31]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d9e1      	bls.n	8002fae <lis2duxs12_init_set+0x86>
 8002fea:	e002      	b.n	8002ff2 <lis2duxs12_init_set+0xca>
          break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <lis2duxs12_init_set+0xca>
          break;
 8002ff0:	bf00      	nop

      if (cnt >= 5U)
 8002ff2:	7ffb      	ldrb	r3, [r7, #31]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	f240 8097 	bls.w	8003128 <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003000:	e092      	b.n	8003128 <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003002:	7d3b      	ldrb	r3, [r7, #20]
 8003004:	f043 0320 	orr.w	r3, r3, #32
 8003008:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 800300a:	f107 0214 	add.w	r2, r7, #20
 800300e:	2301      	movs	r3, #1
 8003010:	2110      	movs	r1, #16
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fef9 	bl	8002e0a <lis2duxs12_write_reg>
 8003018:	4602      	mov	r2, r0
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4413      	add	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 8082 	bne.w	800312c <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f884 	bl	800313c <lis2duxs12_status_get>
 8003034:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d113      	bne.n	8003064 <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 800303c:	7b3b      	ldrb	r3, [r7, #12]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00f      	beq.n	8003068 <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2001      	movs	r0, #1
 8003056:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003058:	7ffb      	ldrb	r3, [r7, #31]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	77fa      	strb	r2, [r7, #31]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d9e2      	bls.n	8003028 <lis2duxs12_init_set+0x100>
 8003062:	e002      	b.n	800306a <lis2duxs12_init_set+0x142>
          break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <lis2duxs12_init_set+0x142>
          break;
 8003068:	bf00      	nop

      if (cnt >= 5U)
 800306a:	7ffb      	ldrb	r3, [r7, #31]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d95f      	bls.n	8003130 <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 8003070:	f04f 33ff 	mov.w	r3, #4294967295
 8003074:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003076:	e05b      	b.n	8003130 <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8003078:	7c3b      	ldrb	r3, [r7, #16]
 800307a:	f023 0310 	bic.w	r3, r3, #16
 800307e:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003080:	7c3b      	ldrb	r3, [r7, #16]
 8003082:	f043 0320 	orr.w	r3, r3, #32
 8003086:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003088:	7d3b      	ldrb	r3, [r7, #20]
 800308a:	f043 0310 	orr.w	r3, r3, #16
 800308e:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003090:	f107 0210 	add.w	r2, r7, #16
 8003094:	2301      	movs	r3, #1
 8003096:	2113      	movs	r1, #19
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff feb6 	bl	8002e0a <lis2duxs12_write_reg>
 800309e:	4602      	mov	r2, r0
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	4413      	add	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80030a6:	f107 0214 	add.w	r2, r7, #20
 80030aa:	2301      	movs	r3, #1
 80030ac:	2110      	movs	r1, #16
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff feab 	bl	8002e0a <lis2duxs12_write_reg>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
      break;
 80030bc:	e039      	b.n	8003132 <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 80030be:	7c3b      	ldrb	r3, [r7, #16]
 80030c0:	f043 0310 	orr.w	r3, r3, #16
 80030c4:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 80030c6:	7c3b      	ldrb	r3, [r7, #16]
 80030c8:	f043 0320 	orr.w	r3, r3, #32
 80030cc:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 80030ce:	7d3b      	ldrb	r3, [r7, #20]
 80030d0:	f043 0310 	orr.w	r3, r3, #16
 80030d4:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80030d6:	f107 0210 	add.w	r2, r7, #16
 80030da:	2301      	movs	r3, #1
 80030dc:	2113      	movs	r1, #19
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff fe93 	bl	8002e0a <lis2duxs12_write_reg>
 80030e4:	4602      	mov	r2, r0
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4413      	add	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80030ec:	f107 0214 	add.w	r2, r7, #20
 80030f0:	2301      	movs	r3, #1
 80030f2:	2110      	movs	r1, #16
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff fe88 	bl	8002e0a <lis2duxs12_write_reg>
 80030fa:	4602      	mov	r2, r0
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4413      	add	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
      break;
 8003102:	e016      	b.n	8003132 <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003104:	7d3b      	ldrb	r3, [r7, #20]
 8003106:	f043 0320 	orr.w	r3, r3, #32
 800310a:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 800310c:	f107 0214 	add.w	r2, r7, #20
 8003110:	2301      	movs	r3, #1
 8003112:	2110      	movs	r1, #16
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff fe78 	bl	8002e0a <lis2duxs12_write_reg>
 800311a:	4602      	mov	r2, r0
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
      break;
 8003122:	e006      	b.n	8003132 <lis2duxs12_init_set+0x20a>
        break;
 8003124:	bf00      	nop
 8003126:	e004      	b.n	8003132 <lis2duxs12_init_set+0x20a>
      break;
 8003128:	bf00      	nop
 800312a:	e002      	b.n	8003132 <lis2duxs12_init_set+0x20a>
        break;
 800312c:	bf00      	nop
 800312e:	e000      	b.n	8003132 <lis2duxs12_init_set+0x20a>
      break;
 8003130:	bf00      	nop
  }
  return ret;
 8003132:	69bb      	ldr	r3, [r7, #24]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 8003146:	f107 0210 	add.w	r2, r7, #16
 800314a:	2301      	movs	r3, #1
 800314c:	2125      	movs	r1, #37	@ 0x25
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff fe3e 	bl	8002dd0 <lis2duxs12_read_reg>
 8003154:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003156:	f107 020c 	add.w	r2, r7, #12
 800315a:	2301      	movs	r3, #1
 800315c:	2110      	movs	r1, #16
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff fe36 	bl	8002dd0 <lis2duxs12_read_reg>
 8003164:	4602      	mov	r2, r0
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	4413      	add	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800316c:	f107 0208 	add.w	r2, r7, #8
 8003170:	2301      	movs	r3, #1
 8003172:	2113      	movs	r1, #19
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fe2b 	bl	8002dd0 <lis2duxs12_read_reg>
 800317a:	4602      	mov	r2, r0
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	4413      	add	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 8003182:	7b3b      	ldrb	r3, [r7, #12]
 8003184:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003188:	b2d9      	uxtb	r1, r3
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	7813      	ldrb	r3, [r2, #0]
 800318e:	f361 0300 	bfi	r3, r1, #0, #1
 8003192:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 8003194:	7a3b      	ldrb	r3, [r7, #8]
 8003196:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800319a:	b2d9      	uxtb	r1, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	7813      	ldrb	r3, [r2, #0]
 80031a0:	f361 0341 	bfi	r3, r1, #1, #1
 80031a4:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 80031a6:	7c3b      	ldrb	r3, [r7, #16]
 80031a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031ac:	b2d9      	uxtb	r1, r3
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	7813      	ldrb	r3, [r2, #0]
 80031b2:	f361 0382 	bfi	r3, r1, #2, #1
 80031b6:	7013      	strb	r3, [r2, #0]

  return ret;
 80031b8:	697b      	ldr	r3, [r7, #20]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 80031ce:	f107 020c 	add.w	r2, r7, #12
 80031d2:	2301      	movs	r3, #1
 80031d4:	2114      	movs	r1, #20
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fdfa 	bl	8002dd0 <lis2duxs12_read_reg>
 80031dc:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	7b3b      	ldrb	r3, [r7, #12]
 80031ea:	f362 1307 	bfi	r3, r2, #4, #4
 80031ee:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	7b3b      	ldrb	r3, [r7, #12]
 80031fc:	f362 0301 	bfi	r3, r2, #0, #2
 8003200:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b06      	cmp	r3, #6
 8003208:	d859      	bhi.n	80032be <lis2duxs12_mode_set+0xfa>
 800320a:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <lis2duxs12_mode_set+0x4c>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	0800322d 	.word	0x0800322d
 8003214:	0800322d 	.word	0x0800322d
 8003218:	0800322d 	.word	0x0800322d
 800321c:	0800322d 	.word	0x0800322d
 8003220:	08003237 	.word	0x08003237
 8003224:	08003253 	.word	0x08003253
 8003228:	0800327f 	.word	0x0800327f
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 800322c:	7b3b      	ldrb	r3, [r7, #12]
 800322e:	f023 030c 	bic.w	r3, r3, #12
 8003232:	733b      	strb	r3, [r7, #12]
      break;
 8003234:	e04d      	b.n	80032d2 <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	789b      	ldrb	r3, [r3, #2]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d003      	beq.n	8003246 <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
 8003242:	617b      	str	r3, [r7, #20]
          break;
 8003244:	e004      	b.n	8003250 <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003246:	7b3b      	ldrb	r3, [r7, #12]
 8003248:	f043 030c 	orr.w	r3, r3, #12
 800324c:	733b      	strb	r3, [r7, #12]
          break;
 800324e:	bf00      	nop
      }
      break;
 8003250:	e03f      	b.n	80032d2 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	789b      	ldrb	r3, [r3, #2]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d005      	beq.n	8003266 <lis2duxs12_mode_set+0xa2>
 800325a:	2b03      	cmp	r3, #3
 800325c:	d009      	beq.n	8003272 <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	617b      	str	r3, [r7, #20]
          break;
 8003264:	e00a      	b.n	800327c <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003266:	7b3b      	ldrb	r3, [r7, #12]
 8003268:	2202      	movs	r2, #2
 800326a:	f362 0383 	bfi	r3, r2, #2, #2
 800326e:	733b      	strb	r3, [r7, #12]
          break;
 8003270:	e004      	b.n	800327c <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003272:	7b3b      	ldrb	r3, [r7, #12]
 8003274:	f043 030c 	orr.w	r3, r3, #12
 8003278:	733b      	strb	r3, [r7, #12]
          break;
 800327a:	bf00      	nop
      }
      break;
 800327c:	e029      	b.n	80032d2 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	789b      	ldrb	r3, [r3, #2]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d015      	beq.n	80032b2 <lis2duxs12_mode_set+0xee>
 8003286:	2b03      	cmp	r3, #3
 8003288:	dc03      	bgt.n	8003292 <lis2duxs12_mode_set+0xce>
 800328a:	2b01      	cmp	r3, #1
 800328c:	d005      	beq.n	800329a <lis2duxs12_mode_set+0xd6>
 800328e:	2b02      	cmp	r3, #2
 8003290:	d009      	beq.n	80032a6 <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	617b      	str	r3, [r7, #20]
          break;
 8003298:	e010      	b.n	80032bc <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 800329a:	7b3b      	ldrb	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f362 0383 	bfi	r3, r2, #2, #2
 80032a2:	733b      	strb	r3, [r7, #12]
          break;
 80032a4:	e00a      	b.n	80032bc <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 80032a6:	7b3b      	ldrb	r3, [r7, #12]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f362 0383 	bfi	r3, r2, #2, #2
 80032ae:	733b      	strb	r3, [r7, #12]
          break;
 80032b0:	e004      	b.n	80032bc <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 80032b2:	7b3b      	ldrb	r3, [r7, #12]
 80032b4:	f043 030c 	orr.w	r3, r3, #12
 80032b8:	733b      	strb	r3, [r7, #12]
          break;
 80032ba:	bf00      	nop
      }
      break;
 80032bc:	e009      	b.n	80032d2 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	789b      	ldrb	r3, [r3, #2]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	7b3b      	ldrb	r3, [r7, #12]
 80032ca:	f362 0383 	bfi	r3, r2, #2, #2
 80032ce:	733b      	strb	r3, [r7, #12]
      break;
 80032d0:	bf00      	nop
  }

  if (ret != 0)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <lis2duxs12_mode_set+0x118>
  {
    return ret;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	e02b      	b.n	8003334 <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 80032dc:	f107 0210 	add.w	r2, r7, #16
 80032e0:	2301      	movs	r3, #1
 80032e2:	2112      	movs	r1, #18
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff fd73 	bl	8002dd0 <lis2duxs12_read_reg>
 80032ea:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d101      	bne.n	80032fc <lis2duxs12_mode_set+0x138>
 80032f8:	2201      	movs	r2, #1
 80032fa:	e000      	b.n	80032fe <lis2duxs12_mode_set+0x13a>
 80032fc:	2200      	movs	r2, #0
 80032fe:	7c3b      	ldrb	r3, [r7, #16]
 8003300:	f362 0382 	bfi	r3, r2, #2, #1
 8003304:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d112      	bne.n	8003332 <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 800330c:	f107 020c 	add.w	r2, r7, #12
 8003310:	2301      	movs	r3, #1
 8003312:	2114      	movs	r1, #20
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fd78 	bl	8002e0a <lis2duxs12_write_reg>
 800331a:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 800331c:	f107 0210 	add.w	r2, r7, #16
 8003320:	2301      	movs	r3, #1
 8003322:	2112      	movs	r1, #18
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fd70 	bl	8002e0a <lis2duxs12_write_reg>
 800332a:	4602      	mov	r2, r0
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	4413      	add	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003332:	697b      	ldr	r3, [r7, #20]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003346:	f107 020c 	add.w	r2, r7, #12
 800334a:	2301      	movs	r3, #1
 800334c:	2114      	movs	r1, #20
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fd3e 	bl	8002dd0 <lis2duxs12_read_reg>
 8003354:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003356:	f107 0210 	add.w	r2, r7, #16
 800335a:	2301      	movs	r3, #1
 800335c:	2112      	movs	r1, #18
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fd36 	bl	8002dd0 <lis2duxs12_read_reg>
 8003364:	4602      	mov	r2, r0
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4413      	add	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 800336c:	7b3b      	ldrb	r3, [r7, #12]
 800336e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b0f      	cmp	r3, #15
 8003376:	f200 809b 	bhi.w	80034b0 <lis2duxs12_mode_get+0x174>
 800337a:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <lis2duxs12_mode_get+0x44>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	080033c1 	.word	0x080033c1
 8003384:	080033c9 	.word	0x080033c9
 8003388:	080033d1 	.word	0x080033d1
 800338c:	080033d9 	.word	0x080033d9
 8003390:	080033e1 	.word	0x080033e1
 8003394:	080033f9 	.word	0x080033f9
 8003398:	08003411 	.word	0x08003411
 800339c:	08003429 	.word	0x08003429
 80033a0:	08003441 	.word	0x08003441
 80033a4:	08003459 	.word	0x08003459
 80033a8:	08003471 	.word	0x08003471
 80033ac:	08003489 	.word	0x08003489
 80033b0:	080034b1 	.word	0x080034b1
 80033b4:	080034b1 	.word	0x080034b1
 80033b8:	080034a1 	.word	0x080034a1
 80033bc:	080034a9 	.word	0x080034a9
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
      break;
 80033c6:	e077      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
      break;
 80033ce:	e073      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2202      	movs	r2, #2
 80033d4:	701a      	strb	r2, [r3, #0]
      break;
 80033d6:	e06f      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2203      	movs	r2, #3
 80033dc:	701a      	strb	r2, [r3, #0]
      break;
 80033de:	e06b      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 80033e0:	7c3b      	ldrb	r3, [r7, #16]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <lis2duxs12_mode_get+0xb4>
 80033ec:	2214      	movs	r2, #20
 80033ee:	e000      	b.n	80033f2 <lis2duxs12_mode_get+0xb6>
 80033f0:	2204      	movs	r2, #4
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	701a      	strb	r2, [r3, #0]
      break;
 80033f6:	e05f      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 80033f8:	7c3b      	ldrb	r3, [r7, #16]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <lis2duxs12_mode_get+0xcc>
 8003404:	2215      	movs	r2, #21
 8003406:	e000      	b.n	800340a <lis2duxs12_mode_get+0xce>
 8003408:	2205      	movs	r2, #5
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	701a      	strb	r2, [r3, #0]
      break;
 800340e:	e053      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8003410:	7c3b      	ldrb	r3, [r7, #16]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <lis2duxs12_mode_get+0xe4>
 800341c:	2216      	movs	r2, #22
 800341e:	e000      	b.n	8003422 <lis2duxs12_mode_get+0xe6>
 8003420:	2206      	movs	r2, #6
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	701a      	strb	r2, [r3, #0]
      break;
 8003426:	e047      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8003428:	7c3b      	ldrb	r3, [r7, #16]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <lis2duxs12_mode_get+0xfc>
 8003434:	2217      	movs	r2, #23
 8003436:	e000      	b.n	800343a <lis2duxs12_mode_get+0xfe>
 8003438:	2207      	movs	r2, #7
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	701a      	strb	r2, [r3, #0]
      break;
 800343e:	e03b      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8003440:	7c3b      	ldrb	r3, [r7, #16]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <lis2duxs12_mode_get+0x114>
 800344c:	2218      	movs	r2, #24
 800344e:	e000      	b.n	8003452 <lis2duxs12_mode_get+0x116>
 8003450:	2208      	movs	r2, #8
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	701a      	strb	r2, [r3, #0]
      break;
 8003456:	e02f      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8003458:	7c3b      	ldrb	r3, [r7, #16]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <lis2duxs12_mode_get+0x12c>
 8003464:	2219      	movs	r2, #25
 8003466:	e000      	b.n	800346a <lis2duxs12_mode_get+0x12e>
 8003468:	2209      	movs	r2, #9
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	701a      	strb	r2, [r3, #0]
      break;
 800346e:	e023      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 8003470:	7c3b      	ldrb	r3, [r7, #16]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <lis2duxs12_mode_get+0x144>
 800347c:	221a      	movs	r2, #26
 800347e:	e000      	b.n	8003482 <lis2duxs12_mode_get+0x146>
 8003480:	220a      	movs	r2, #10
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	701a      	strb	r2, [r3, #0]
      break;
 8003486:	e017      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 8003488:	7c3b      	ldrb	r3, [r7, #16]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <lis2duxs12_mode_get+0x15c>
 8003494:	221b      	movs	r2, #27
 8003496:	e000      	b.n	800349a <lis2duxs12_mode_get+0x15e>
 8003498:	220b      	movs	r2, #11
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	701a      	strb	r2, [r3, #0]
      break;
 800349e:	e00b      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	222e      	movs	r2, #46	@ 0x2e
 80034a4:	701a      	strb	r2, [r3, #0]
      break;
 80034a6:	e007      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	222f      	movs	r2, #47	@ 0x2f
 80034ac:	701a      	strb	r2, [r3, #0]
      break;
 80034ae:	e003      	b.n	80034b8 <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
      break;
 80034b6:	bf00      	nop
  }

  switch (ctrl5.fs)
 80034b8:	7b3b      	ldrb	r3, [r7, #12]
 80034ba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d81b      	bhi.n	80034fc <lis2duxs12_mode_get+0x1c0>
 80034c4:	a201      	add	r2, pc, #4	@ (adr r2, 80034cc <lis2duxs12_mode_get+0x190>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034dd 	.word	0x080034dd
 80034d0:	080034e5 	.word	0x080034e5
 80034d4:	080034ed 	.word	0x080034ed
 80034d8:	080034f5 	.word	0x080034f5
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	705a      	strb	r2, [r3, #1]
      break;
 80034e2:	e00f      	b.n	8003504 <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2201      	movs	r2, #1
 80034e8:	705a      	strb	r2, [r3, #1]
      break;
 80034ea:	e00b      	b.n	8003504 <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2202      	movs	r2, #2
 80034f0:	705a      	strb	r2, [r3, #1]
      break;
 80034f2:	e007      	b.n	8003504 <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2203      	movs	r2, #3
 80034f8:	705a      	strb	r2, [r3, #1]
      break;
 80034fa:	e003      	b.n	8003504 <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	705a      	strb	r2, [r3, #1]
      break;
 8003502:	bf00      	nop
  }

  switch (ctrl5.bw)
 8003504:	7b3b      	ldrb	r3, [r7, #12]
 8003506:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b03      	cmp	r3, #3
 800350e:	d81b      	bhi.n	8003548 <lis2duxs12_mode_get+0x20c>
 8003510:	a201      	add	r2, pc, #4	@ (adr r2, 8003518 <lis2duxs12_mode_get+0x1dc>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	08003529 	.word	0x08003529
 800351c:	08003531 	.word	0x08003531
 8003520:	08003539 	.word	0x08003539
 8003524:	08003541 	.word	0x08003541
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	709a      	strb	r2, [r3, #2]
      break;
 800352e:	e00f      	b.n	8003550 <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	709a      	strb	r2, [r3, #2]
      break;
 8003536:	e00b      	b.n	8003550 <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2202      	movs	r2, #2
 800353c:	709a      	strb	r2, [r3, #2]
      break;
 800353e:	e007      	b.n	8003550 <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2203      	movs	r2, #3
 8003544:	709a      	strb	r2, [r3, #2]
      break;
 8003546:	e003      	b.n	8003550 <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2200      	movs	r2, #0
 800354c:	709a      	strb	r2, [r3, #2]
      break;
 800354e:	bf00      	nop
  }

  return ret;
 8003550:	697b      	ldr	r3, [r7, #20]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop

0800355c <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 8003564:	2300      	movs	r3, #0
 8003566:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 8003568:	7a3b      	ldrb	r3, [r7, #8]
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 8003570:	f107 0208 	add.w	r2, r7, #8
 8003574:	2301      	movs	r3, #1
 8003576:	213e      	movs	r1, #62	@ 0x3e
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fc46 	bl	8002e0a <lis2duxs12_write_reg>
 800357e:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2019      	movs	r0, #25
 800358e:	4798      	blx	r3
  }

  return ret;
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b089      	sub	sp, #36	@ 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 80035a8:	f107 0210 	add.w	r2, r7, #16
 80035ac:	2306      	movs	r3, #6
 80035ae:	2128      	movs	r1, #40	@ 0x28
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff fc0d 	bl	8002dd0 <lis2duxs12_read_reg>
 80035b6:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e08f      	b.n	80036e2 <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 80035c2:	7fbb      	ldrb	r3, [r7, #30]
 80035c4:	3301      	adds	r3, #1
 80035c6:	3320      	adds	r3, #32
 80035c8:	443b      	add	r3, r7
 80035ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80035ce:	7ffb      	ldrb	r3, [r7, #31]
 80035d0:	b211      	sxth	r1, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	460a      	mov	r2, r1
 80035dc:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	7fba      	ldrb	r2, [r7, #30]
 80035f4:	3220      	adds	r2, #32
 80035f6:	443a      	add	r2, r7
 80035f8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80035fc:	4413      	add	r3, r2
 80035fe:	b29a      	uxth	r2, r3
 8003600:	7ffb      	ldrb	r3, [r7, #31]
 8003602:	b211      	sxth	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	460a      	mov	r2, r1
 800360e:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8003610:	7fbb      	ldrb	r3, [r7, #30]
 8003612:	3302      	adds	r3, #2
 8003614:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	785b      	ldrb	r3, [r3, #1]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d856      	bhi.n	80036cc <lis2duxs12_xl_data_get+0x130>
 800361e:	a201      	add	r2, pc, #4	@ (adr r2, 8003624 <lis2duxs12_xl_data_get+0x88>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	08003635 	.word	0x08003635
 8003628:	0800365b 	.word	0x0800365b
 800362c:	08003681 	.word	0x08003681
 8003630:	080036a7 	.word	0x080036a7
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8003634:	7ffb      	ldrb	r3, [r7, #31]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003642:	7ffc      	ldrb	r4, [r7, #31]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fbfd 	bl	8002e44 <lis2duxs12_from_fs2g_to_mg>
 800364a:	eef0 7a40 	vmov.f32	s15, s0
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	00a3      	lsls	r3, r4, #2
 8003652:	4413      	add	r3, r2
 8003654:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003658:	e040      	b.n	80036dc <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 800365a:	7ffb      	ldrb	r3, [r7, #31]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003668:	7ffc      	ldrb	r4, [r7, #31]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fc02 	bl	8002e74 <lis2duxs12_from_fs4g_to_mg>
 8003670:	eef0 7a40 	vmov.f32	s15, s0
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	00a3      	lsls	r3, r4, #2
 8003678:	4413      	add	r3, r2
 800367a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800367e:	e02d      	b.n	80036dc <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 8003680:	7ffb      	ldrb	r3, [r7, #31]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800368e:	7ffc      	ldrb	r4, [r7, #31]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fc07 	bl	8002ea4 <lis2duxs12_from_fs8g_to_mg>
 8003696:	eef0 7a40 	vmov.f32	s15, s0
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	00a3      	lsls	r3, r4, #2
 800369e:	4413      	add	r3, r2
 80036a0:	edc3 7a00 	vstr	s15, [r3]
        break;
 80036a4:	e01a      	b.n	80036dc <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 80036a6:	7ffb      	ldrb	r3, [r7, #31]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036b4:	7ffc      	ldrb	r4, [r7, #31]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fc0c 	bl	8002ed4 <lis2duxs12_from_fs16g_to_mg>
 80036bc:	eef0 7a40 	vmov.f32	s15, s0
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	00a3      	lsls	r3, r4, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	edc3 7a00 	vstr	s15, [r3]
        break;
 80036ca:	e007      	b.n	80036dc <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
        break;
 80036da:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 80036dc:	7ffb      	ldrb	r3, [r7, #31]
 80036de:	3301      	adds	r3, #1
 80036e0:	77fb      	strb	r3, [r7, #31]
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	f67f af6c 	bls.w	80035c2 <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 80036ea:	69bb      	ldr	r3, [r7, #24]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3724      	adds	r7, #36	@ 0x24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd90      	pop	{r4, r7, pc}

080036f4 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 80036fe:	f107 0208 	add.w	r2, r7, #8
 8003702:	2301      	movs	r3, #1
 8003704:	2133      	movs	r1, #51	@ 0x33
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff fb62 	bl	8002dd0 <lis2duxs12_read_reg>
 800370c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d122      	bne.n	800375a <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	b2da      	uxtb	r2, r3
 800371e:	7a3b      	ldrb	r3, [r7, #8]
 8003720:	f362 0301 	bfi	r3, r2, #0, #2
 8003724:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	7a3b      	ldrb	r3, [r7, #8]
 8003732:	f362 1386 	bfi	r3, r2, #6, #1
 8003736:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	785b      	ldrb	r3, [r3, #1]
 800373c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003740:	b2da      	uxtb	r2, r3
 8003742:	7a3b      	ldrb	r3, [r7, #8]
 8003744:	f362 1345 	bfi	r3, r2, #5, #1
 8003748:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800374a:	f107 0208 	add.w	r2, r7, #8
 800374e:	2301      	movs	r3, #1
 8003750:	2133      	movs	r1, #51	@ 0x33
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fb59 	bl	8002e0a <lis2duxs12_write_reg>
 8003758:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800375a:	68fb      	ldr	r3, [r7, #12]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800376e:	f107 0208 	add.w	r2, r7, #8
 8003772:	2301      	movs	r3, #1
 8003774:	2133      	movs	r1, #51	@ 0x33
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fb2a 	bl	8002dd0 <lis2duxs12_read_reg>
 800377c:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 800377e:	7a3b      	ldrb	r3, [r7, #8]
 8003780:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003784:	b2d9      	uxtb	r1, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	7853      	ldrb	r3, [r2, #1]
 800378a:	f361 0341 	bfi	r3, r1, #1, #1
 800378e:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 8003790:	7a3b      	ldrb	r3, [r7, #8]
 8003792:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003796:	b2d9      	uxtb	r1, r3
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	7853      	ldrb	r3, [r2, #1]
 800379c:	f361 0300 	bfi	r3, r1, #0, #1
 80037a0:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d00e      	beq.n	80037c8 <lis2duxs12_i3c_configure_get+0x64>
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	dc10      	bgt.n	80037d0 <lis2duxs12_i3c_configure_get+0x6c>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <lis2duxs12_i3c_configure_get+0x54>
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d004      	beq.n	80037c0 <lis2duxs12_i3c_configure_get+0x5c>
 80037b6:	e00b      	b.n	80037d0 <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
      break;
 80037be:	e00b      	b.n	80037d8 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]
      break;
 80037c6:	e007      	b.n	80037d8 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2202      	movs	r2, #2
 80037cc:	701a      	strb	r2, [r3, #0]
      break;
 80037ce:	e003      	b.n	80037d8 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2203      	movs	r2, #3
 80037d4:	701a      	strb	r2, [r3, #0]
      break;
 80037d6:	bf00      	nop
  }

  return ret;
 80037d8:	68fb      	ldr	r3, [r7, #12]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80037ee:	f107 0208 	add.w	r2, r7, #8
 80037f2:	2301      	movs	r3, #1
 80037f4:	213f      	movs	r1, #63	@ 0x3f
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff faea 	bl	8002dd0 <lis2duxs12_read_reg>
 80037fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10f      	bne.n	8003824 <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	7a3b      	ldrb	r3, [r7, #8]
 800380e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003812:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003814:	f107 0208 	add.w	r2, r7, #8
 8003818:	2301      	movs	r3, #1
 800381a:	213f      	movs	r1, #63	@ 0x3f
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff faf4 	bl	8002e0a <lis2duxs12_write_reg>
 8003822:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003824:	68fb      	ldr	r3, [r7, #12]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b08a      	sub	sp, #40	@ 0x28
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800383c:	f107 0220 	add.w	r2, r7, #32
 8003840:	2301      	movs	r3, #1
 8003842:	2113      	movs	r1, #19
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff fac3 	bl	8002dd0 <lis2duxs12_read_reg>
 800384a:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 800384c:	f107 021c 	add.w	r2, r7, #28
 8003850:	2301      	movs	r3, #1
 8003852:	2115      	movs	r1, #21
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff fabb 	bl	8002dd0 <lis2duxs12_read_reg>
 800385a:	4602      	mov	r2, r0
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	4413      	add	r3, r2
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8003862:	f107 0214 	add.w	r2, r7, #20
 8003866:	2301      	movs	r3, #1
 8003868:	2147      	movs	r1, #71	@ 0x47
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff fab0 	bl	8002dd0 <lis2duxs12_read_reg>
 8003870:	4602      	mov	r2, r0
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	4413      	add	r3, r2
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8003878:	f107 0218 	add.w	r2, r7, #24
 800387c:	2301      	movs	r3, #1
 800387e:	2116      	movs	r1, #22
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff faa5 	bl	8002dd0 <lis2duxs12_read_reg>
 8003886:	4602      	mov	r2, r0
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	4413      	add	r3, r2
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	f040 8081 	bne.w	8003998 <lis2duxs12_fifo_mode_set+0x16a>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 8003896:	793b      	ldrb	r3, [r7, #4]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d00e      	beq.n	80038ba <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 800389c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038a0:	f043 0308 	orr.w	r3, r3, #8
 80038a4:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 80038a8:	793b      	ldrb	r3, [r7, #4]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	7f3b      	ldrb	r3, [r7, #28]
 80038b2:	f362 0302 	bfi	r3, r2, #0, #3
 80038b6:	773b      	strb	r3, [r7, #28]
 80038b8:	e005      	b.n	80038c6 <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 80038ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038be:	f023 0308 	bic.w	r3, r3, #8
 80038c2:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 80038c6:	797b      	ldrb	r3, [r7, #5]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	7f3b      	ldrb	r3, [r7, #28]
 80038d0:	f362 1386 	bfi	r3, r2, #6, #1
 80038d4:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 80038d6:	79bb      	ldrb	r3, [r7, #6]
 80038d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	7e3b      	ldrb	r3, [r7, #24]
 80038e0:	f362 13c7 	bfi	r3, r2, #7, #1
 80038e4:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 80038e6:	7a3b      	ldrb	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00f      	beq.n	800390c <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 80038ec:	7a3b      	ldrb	r3, [r7, #8]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	7d3b      	ldrb	r3, [r7, #20]
 80038f6:	f362 03c4 	bfi	r3, r2, #3, #2
 80038fa:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 80038fc:	7a7b      	ldrb	r3, [r7, #9]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	b2da      	uxtb	r2, r3
 8003904:	7d3b      	ldrb	r3, [r7, #20]
 8003906:	f362 0302 	bfi	r3, r2, #0, #3
 800390a:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003912:	b2da      	uxtb	r2, r3
 8003914:	7f3b      	ldrb	r3, [r7, #28]
 8003916:	f362 13c7 	bfi	r3, r2, #7, #1
 800391a:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 800391c:	79bb      	ldrb	r3, [r7, #6]
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <lis2duxs12_fifo_mode_set+0x112>
    {
      fifo_ctrl.stop_on_fth = 1;
 8003928:	7f3b      	ldrb	r3, [r7, #28]
 800392a:	f043 0308 	orr.w	r3, r3, #8
 800392e:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 8003930:	79bb      	ldrb	r3, [r7, #6]
 8003932:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003936:	b2da      	uxtb	r2, r3
 8003938:	7e3b      	ldrb	r3, [r7, #24]
 800393a:	f362 0306 	bfi	r3, r2, #0, #7
 800393e:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8003940:	f107 0214 	add.w	r2, r7, #20
 8003944:	2301      	movs	r3, #1
 8003946:	2147      	movs	r1, #71	@ 0x47
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff fa5e 	bl	8002e0a <lis2duxs12_write_reg>
 800394e:	4602      	mov	r2, r0
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	4413      	add	r3, r2
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8003956:	f107 0218 	add.w	r2, r7, #24
 800395a:	2301      	movs	r3, #1
 800395c:	2116      	movs	r1, #22
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff fa53 	bl	8002e0a <lis2duxs12_write_reg>
 8003964:	4602      	mov	r2, r0
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	4413      	add	r3, r2
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 800396c:	f107 021c 	add.w	r2, r7, #28
 8003970:	2301      	movs	r3, #1
 8003972:	2115      	movs	r1, #21
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff fa48 	bl	8002e0a <lis2duxs12_write_reg>
 800397a:	4602      	mov	r2, r0
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	4413      	add	r3, r2
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003982:	f107 0220 	add.w	r2, r7, #32
 8003986:	2301      	movs	r3, #1
 8003988:	2113      	movs	r1, #19
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fa3d 	bl	8002e0a <lis2duxs12_write_reg>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	4413      	add	r3, r2
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800399a:	4618      	mov	r0, r3
 800399c:	3728      	adds	r7, #40	@ 0x28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	e067      	b.n	8003a90 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	7b1a      	ldrb	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a28      	ldr	r2, [pc, #160]	@ (8003a9c <LIS2MDL_RegisterBusIO+0xf8>)
 80039fc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <LIS2MDL_RegisterBusIO+0xfc>)
 8003a02:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e036      	b.n	8003a90 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4798      	blx	r3
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e02c      	b.n	8003a90 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d028      	beq.n	8003a90 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d123      	bne.n	8003a90 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d10d      	bne.n	8003a6c <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003a50:	2334      	movs	r3, #52	@ 0x34
 8003a52:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003a54:	7afb      	ldrb	r3, [r7, #11]
 8003a56:	461a      	mov	r2, r3
 8003a58:	2162      	movs	r1, #98	@ 0x62
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fb1b 	bl	8004096 <LIS2MDL_Write_Reg>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d014      	beq.n	8003a90 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	e012      	b.n	8003a92 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d101      	bne.n	8003a78 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	e00c      	b.n	8003a92 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3320      	adds	r3, #32
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 ff79 	bl	8004976 <lis2mdl_i2c_interface_set>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	e000      	b.n	8003a92 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8003a90:	68fb      	ldr	r3, [r7, #12]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	080040ed 	.word	0x080040ed
 8003aa0:	0800416f 	.word	0x0800416f

08003aa4 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d144      	bne.n	8003b3e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003ab4:	f107 0208 	add.w	r2, r7, #8
 8003ab8:	2301      	movs	r3, #1
 8003aba:	2162      	movs	r1, #98	@ 0x62
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fb97 	bl	80041f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8003acc:	e06c      	b.n	8003ba8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003ace:	f107 020c 	add.w	r2, r7, #12
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	2160      	movs	r1, #96	@ 0x60
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fb8a 	bl	80041f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	e05f      	b.n	8003ba8 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003ae8:	7a3b      	ldrb	r3, [r7, #8]
 8003aea:	f043 0310 	orr.w	r3, r3, #16
 8003aee:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003af0:	7a3b      	ldrb	r3, [r7, #8]
 8003af2:	f023 0302 	bic.w	r3, r3, #2
 8003af6:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003af8:	7b3b      	ldrb	r3, [r7, #12]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f362 0301 	bfi	r3, r2, #0, #2
 8003b00:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003b02:	7b3b      	ldrb	r3, [r7, #12]
 8003b04:	f043 030c 	orr.w	r3, r3, #12
 8003b08:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003b0a:	f107 0208 	add.w	r2, r7, #8
 8003b0e:	2301      	movs	r3, #1
 8003b10:	2162      	movs	r1, #98	@ 0x62
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fcab 	bl	800446e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	e041      	b.n	8003ba8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003b24:	f107 020c 	add.w	r2, r7, #12
 8003b28:	2301      	movs	r3, #1
 8003b2a:	2160      	movs	r1, #96	@ 0x60
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fc9e 	bl	800446e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d032      	beq.n	8003b9e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003b38:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3c:	e034      	b.n	8003ba8 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3320      	adds	r3, #32
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fe71 	bl	800482c <lis2mdl_block_data_update_set>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
 8003b54:	e028      	b.n	8003ba8 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3320      	adds	r3, #32
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fde0 	bl	8004722 <lis2mdl_operating_mode_set>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	e01c      	b.n	8003ba8 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3320      	adds	r3, #32
 8003b72:	2103      	movs	r1, #3
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fdfa 	bl	800476e <lis2mdl_data_rate_set>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003b80:	f04f 33ff 	mov.w	r3, #4294967295
 8003b84:	e010      	b.n	8003ba8 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3320      	adds	r3, #32
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fecc 	bl	800492a <lis2mdl_self_test_set>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9c:	e004      	b.n	8003ba8 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f8a5 	bl	8003d08 <LIS2MDL_MAG_Disable>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	e004      	b.n	8003bd4 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d10b      	bne.n	8003c06 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003bee:	2301      	movs	r3, #1
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	214f      	movs	r1, #79	@ 0x4f
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fafb 	bl	80041f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295
 8003c04:	e00c      	b.n	8003c20 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3320      	adds	r3, #32
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fe7b 	bl	8004908 <lis2mdl_device_id_get>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	e000      	b.n	8003c20 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2201      	movs	r2, #1
 8003c42:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2232      	movs	r2, #50	@ 0x32
 8003c5a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4a04      	ldr	r2, [pc, #16]	@ (8003c80 <LIS2MDL_GetCapabilities+0x58>)
 8003c70:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	42c80000 	.word	0x42c80000

08003c84 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e032      	b.n	8003d00 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d11d      	bne.n	8003cde <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003ca2:	f107 020c 	add.w	r2, r7, #12
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	2160      	movs	r1, #96	@ 0x60
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 faa0 	bl	80041f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	e021      	b.n	8003d00 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003cbc:	7b3b      	ldrb	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003cc4:	f107 020c 	add.w	r2, r7, #12
 8003cc8:	2301      	movs	r3, #1
 8003cca:	2160      	movs	r1, #96	@ 0x60
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fbce 	bl	800446e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00e      	beq.n	8003cf6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e010      	b.n	8003d00 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3320      	adds	r3, #32
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fd1c 	bl	8004722 <lis2mdl_operating_mode_set>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf4:	e004      	b.n	8003d00 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e033      	b.n	8003d86 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d11e      	bne.n	8003d64 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d26:	f107 020c 	add.w	r2, r7, #12
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	2160      	movs	r1, #96	@ 0x60
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa5e 	bl	80041f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	e022      	b.n	8003d86 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003d40:	7b3b      	ldrb	r3, [r7, #12]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f362 0301 	bfi	r3, r2, #0, #2
 8003d48:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d4a:	f107 020c 	add.w	r2, r7, #12
 8003d4e:	2301      	movs	r3, #1
 8003d50:	2160      	movs	r1, #96	@ 0x60
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fb8b 	bl	800446e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00e      	beq.n	8003d7c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	e010      	b.n	8003d86 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3320      	adds	r3, #32
 8003d68:	2102      	movs	r1, #2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fcd9 	bl	8004722 <lis2mdl_operating_mode_set>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	e004      	b.n	8003d86 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003d9e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3320      	adds	r3, #32
 8003dc2:	f107 020b 	add.w	r2, r7, #11
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fcf7 	bl	80047bc <lis2mdl_data_rate_get>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	e023      	b.n	8003e22 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003dda:	7afb      	ldrb	r3, [r7, #11]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d81b      	bhi.n	8003e18 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003de0:	a201      	add	r2, pc, #4	@ (adr r2, 8003de8 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e01 	.word	0x08003e01
 8003df0:	08003e09 	.word	0x08003e09
 8003df4:	08003e11 	.word	0x08003e11
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003dfc:	601a      	str	r2, [r3, #0]
      break;
 8003dfe:	e00f      	b.n	8003e20 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4a0b      	ldr	r2, [pc, #44]	@ (8003e30 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003e04:	601a      	str	r2, [r3, #0]
      break;
 8003e06:	e00b      	b.n	8003e20 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003e0c:	601a      	str	r2, [r3, #0]
      break;
 8003e0e:	e007      	b.n	8003e20 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	4a09      	ldr	r2, [pc, #36]	@ (8003e38 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003e14:	601a      	str	r2, [r3, #0]
      break;
 8003e16:	e003      	b.n	8003e20 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1c:	60fb      	str	r3, [r7, #12]
      break;
 8003e1e:	bf00      	nop
  }

  return ret;
 8003e20:	68fb      	ldr	r3, [r7, #12]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	41200000 	.word	0x41200000
 8003e30:	41a00000 	.word	0x41a00000
 8003e34:	42480000 	.word	0x42480000
 8003e38:	42c80000 	.word	0x42c80000

08003e3c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003e48:	edd7 7a00 	vldr	s15, [r7]
 8003e4c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	d801      	bhi.n	8003e5e <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e016      	b.n	8003e8c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003e5e:	edd7 7a00 	vldr	s15, [r7]
 8003e62:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	d801      	bhi.n	8003e74 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e00b      	b.n	8003e8c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003e74:	edd7 7a00 	vldr	s15, [r7]
 8003e78:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003f00 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e84:	d801      	bhi.n	8003e8a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e000      	b.n	8003e8c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003e8a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003e8c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d121      	bne.n	8003eda <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003e96:	f107 020c 	add.w	r2, r7, #12
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	2160      	movs	r1, #96	@ 0x60
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9a6 	bl	80041f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	e022      	b.n	8003ef6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	7b3b      	ldrb	r3, [r7, #12]
 8003eba:	f362 0383 	bfi	r3, r2, #2, #2
 8003ebe:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003ec0:	f107 020c 	add.w	r2, r7, #12
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	2160      	movs	r1, #96	@ 0x60
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fad0 	bl	800446e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00f      	beq.n	8003ef4 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	e00d      	b.n	8003ef6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3320      	adds	r3, #32
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fc43 	bl	800476e <lis2mdl_data_rate_set>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	e000      	b.n	8003ef6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	42480000 	.word	0x42480000

08003f04 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2232      	movs	r2, #50	@ 0x32
 8003f12:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3320      	adds	r3, #32
 8003f48:	f107 0208 	add.w	r2, r7, #8
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fc92 	bl	8004878 <lis2mdl_magnetic_raw_get>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	e00c      	b.n	8003f7a <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003f60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003f68:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003f70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b088      	sub	sp, #32
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d134      	bne.n	8004004 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003f9a:	f107 0218 	add.w	r2, r7, #24
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	2168      	movs	r1, #104	@ 0x68
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f924 	bl	80041f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	e06c      	b.n	800408e <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003fb4:	7e7b      	ldrb	r3, [r7, #25]
 8003fb6:	b21b      	sxth	r3, r3
 8003fb8:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003fba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	7e3a      	ldrb	r2, [r7, #24]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	b21b      	sxth	r3, r3
 8003fcc:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003fce:	7efb      	ldrb	r3, [r7, #27]
 8003fd0:	b21b      	sxth	r3, r3
 8003fd2:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003fd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	7eba      	ldrb	r2, [r7, #26]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003fe8:	7f7b      	ldrb	r3, [r7, #29]
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003fee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	7f3a      	ldrb	r2, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	b21b      	sxth	r3, r3
 8004000:	82bb      	strh	r3, [r7, #20]
 8004002:	e00d      	b.n	8004020 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3320      	adds	r3, #32
 8004008:	f107 0210 	add.w	r2, r7, #16
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fc32 	bl	8004878 <lis2mdl_magnetic_raw_get>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295
 800401e:	e036      	b.n	800408e <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff feb1 	bl	8003d8e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800402c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004038:	edd7 7a03 	vldr	s15, [r7, #12]
 800403c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004044:	ee17 2a90 	vmov	r2, s15
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800404c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004058:	edd7 7a03 	vldr	s15, [r7, #12]
 800405c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004064:	ee17 2a90 	vmov	r2, s15
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800406c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004078:	edd7 7a03 	vldr	s15, [r7, #12]
 800407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004084:	ee17 2a90 	vmov	r2, s15
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	70fb      	strb	r3, [r7, #3]
 80040a2:	4613      	mov	r3, r2
 80040a4:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d10b      	bne.n	80040c6 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80040ae:	1cba      	adds	r2, r7, #2
 80040b0:	78f9      	ldrb	r1, [r7, #3]
 80040b2:	2301      	movs	r3, #1
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f9da 	bl	800446e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80040c0:	f04f 33ff 	mov.w	r3, #4294967295
 80040c4:	e00e      	b.n	80040e4 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f103 0020 	add.w	r0, r3, #32
 80040cc:	1cba      	adds	r2, r7, #2
 80040ce:	78f9      	ldrb	r1, [r7, #3]
 80040d0:	2301      	movs	r3, #1
 80040d2:	f000 fb08 	bl	80046e6 <lis2mdl_write_reg>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80040dc:	f04f 33ff 	mov.w	r3, #4294967295
 80040e0:	e000      	b.n	80040e4 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	461a      	mov	r2, r3
 80040f8:	460b      	mov	r3, r1
 80040fa:	72fb      	strb	r3, [r7, #11]
 80040fc:	4613      	mov	r3, r2
 80040fe:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10e      	bne.n	800412a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	695c      	ldr	r4, [r3, #20]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	7b1b      	ldrb	r3, [r3, #12]
 8004114:	4618      	mov	r0, r3
 8004116:	7afb      	ldrb	r3, [r7, #11]
 8004118:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800411c:	b2db      	uxtb	r3, r3
 800411e:	4619      	mov	r1, r3
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	47a0      	blx	r4
 8004126:	4603      	mov	r3, r0
 8004128:	e01d      	b.n	8004166 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d10b      	bne.n	800414a <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	695c      	ldr	r4, [r3, #20]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	7b1b      	ldrb	r3, [r3, #12]
 800413a:	4618      	mov	r0, r3
 800413c:	7afb      	ldrb	r3, [r7, #11]
 800413e:	b299      	uxth	r1, r3
 8004140:	893b      	ldrh	r3, [r7, #8]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	47a0      	blx	r4
 8004146:	4603      	mov	r3, r0
 8004148:	e00d      	b.n	8004166 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	695c      	ldr	r4, [r3, #20]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	7b1b      	ldrb	r3, [r3, #12]
 8004152:	4618      	mov	r0, r3
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800415a:	b2db      	uxtb	r3, r3
 800415c:	4619      	mov	r1, r3
 800415e:	893b      	ldrh	r3, [r7, #8]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	47a0      	blx	r4
 8004164:	4603      	mov	r3, r0
  }
}
 8004166:	4618      	mov	r0, r3
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}

0800416e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800416e:	b590      	push	{r4, r7, lr}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	461a      	mov	r2, r3
 800417a:	460b      	mov	r3, r1
 800417c:	72fb      	strb	r3, [r7, #11]
 800417e:	4613      	mov	r3, r2
 8004180:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10e      	bne.n	80041ac <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	691c      	ldr	r4, [r3, #16]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	7b1b      	ldrb	r3, [r3, #12]
 8004196:	4618      	mov	r0, r3
 8004198:	7afb      	ldrb	r3, [r7, #11]
 800419a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	4619      	mov	r1, r3
 80041a2:	893b      	ldrh	r3, [r7, #8]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	47a0      	blx	r4
 80041a8:	4603      	mov	r3, r0
 80041aa:	e01d      	b.n	80041e8 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d10b      	bne.n	80041cc <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	691c      	ldr	r4, [r3, #16]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	7b1b      	ldrb	r3, [r3, #12]
 80041bc:	4618      	mov	r0, r3
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	b299      	uxth	r1, r3
 80041c2:	893b      	ldrh	r3, [r7, #8]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	47a0      	blx	r4
 80041c8:	4603      	mov	r3, r0
 80041ca:	e00d      	b.n	80041e8 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	691c      	ldr	r4, [r3, #16]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	7b1b      	ldrb	r3, [r3, #12]
 80041d4:	4618      	mov	r0, r3
 80041d6:	7afb      	ldrb	r3, [r7, #11]
 80041d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	4619      	mov	r1, r3
 80041e0:	893b      	ldrh	r3, [r7, #8]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	47a0      	blx	r4
 80041e6:	4603      	mov	r3, r0
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}

080041f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08c      	sub	sp, #48	@ 0x30
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	461a      	mov	r2, r3
 80041fc:	460b      	mov	r3, r1
 80041fe:	72fb      	strb	r3, [r7, #11]
 8004200:	4613      	mov	r3, r2
 8004202:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800420a:	2340      	movs	r3, #64	@ 0x40
 800420c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004210:	2300      	movs	r3, #0
 8004212:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004216:	233d      	movs	r3, #61	@ 0x3d
 8004218:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800421a:	2315      	movs	r3, #21
 800421c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004220:	2316      	movs	r3, #22
 8004222:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004226:	2317      	movs	r3, #23
 8004228:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 800422c:	2314      	movs	r3, #20
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004232:	2344      	movs	r3, #68	@ 0x44
 8004234:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004236:	2302      	movs	r3, #2
 8004238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800423c:	2339      	movs	r3, #57	@ 0x39
 800423e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004248:	2329      	movs	r3, #41	@ 0x29
 800424a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800424e:	231e      	movs	r3, #30
 8004250:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004260:	2310      	movs	r3, #16
 8004262:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800426c:	2340      	movs	r3, #64	@ 0x40
 800426e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f103 0020 	add.w	r0, r3, #32
 8004278:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800427c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004280:	2301      	movs	r3, #1
 8004282:	f000 fa30 	bl	80046e6 <lis2mdl_write_reg>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
 8004290:	e0e9      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f103 0020 	add.w	r0, r3, #32
 8004298:	f107 021f 	add.w	r2, r7, #31
 800429c:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80042a0:	2301      	movs	r3, #1
 80042a2:	f000 fa20 	bl	80046e6 <lis2mdl_write_reg>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295
 80042b0:	e0d9      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f103 0020 	add.w	r0, r3, #32
 80042b8:	f107 020b 	add.w	r2, r7, #11
 80042bc:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80042c0:	2301      	movs	r3, #1
 80042c2:	f000 fa10 	bl	80046e6 <lis2mdl_write_reg>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
 80042d0:	e0c9      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f103 0020 	add.w	r0, r3, #32
 80042d8:	f107 021d 	add.w	r2, r7, #29
 80042dc:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80042e0:	2301      	movs	r3, #1
 80042e2:	f000 fa00 	bl	80046e6 <lis2mdl_write_reg>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80042ec:	f04f 33ff 	mov.w	r3, #4294967295
 80042f0:	e0b9      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f103 0020 	add.w	r0, r3, #32
 80042f8:	f107 021e 	add.w	r2, r7, #30
 80042fc:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004300:	2301      	movs	r3, #1
 8004302:	f000 f9f0 	bl	80046e6 <lis2mdl_write_reg>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800430c:	f04f 33ff 	mov.w	r3, #4294967295
 8004310:	e0a9      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f103 0020 	add.w	r0, r3, #32
 8004318:	f107 0220 	add.w	r2, r7, #32
 800431c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004320:	2301      	movs	r3, #1
 8004322:	f000 f9e0 	bl	80046e6 <lis2mdl_write_reg>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295
 8004330:	e099      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f103 0020 	add.w	r0, r3, #32
 8004338:	f107 021c 	add.w	r2, r7, #28
 800433c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004340:	2301      	movs	r3, #1
 8004342:	f000 f9b2 	bl	80046aa <lis2mdl_read_reg>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800434c:	f04f 33ff 	mov.w	r3, #4294967295
 8004350:	e089      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004352:	7f3b      	ldrb	r3, [r7, #28]
 8004354:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004358:	429a      	cmp	r2, r3
 800435a:	d102      	bne.n	8004362 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800435c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004360:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f103 0020 	add.w	r0, r3, #32
 8004368:	f107 021c 	add.w	r2, r7, #28
 800436c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004370:	2301      	movs	r3, #1
 8004372:	f000 f9b8 	bl	80046e6 <lis2mdl_write_reg>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	e071      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f103 0020 	add.w	r0, r3, #32
 8004388:	f107 0214 	add.w	r2, r7, #20
 800438c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004390:	2306      	movs	r3, #6
 8004392:	f000 f98a 	bl	80046aa <lis2mdl_read_reg>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 800439c:	f04f 33ff 	mov.w	r3, #4294967295
 80043a0:	e061      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f103 0020 	add.w	r0, r3, #32
 80043a8:	f107 021b 	add.w	r2, r7, #27
 80043ac:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80043b0:	2301      	movs	r3, #1
 80043b2:	f000 f97a 	bl	80046aa <lis2mdl_read_reg>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80043bc:	f04f 33ff 	mov.w	r3, #4294967295
 80043c0:	e051      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80043c2:	7efa      	ldrb	r2, [r7, #27]
 80043c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043c8:	4013      	ands	r3, r2
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d1e6      	bne.n	80043a2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f103 0020 	add.w	r0, r3, #32
 80043da:	f107 021b 	add.w	r2, r7, #27
 80043de:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80043e2:	2301      	movs	r3, #1
 80043e4:	f000 f961 	bl	80046aa <lis2mdl_read_reg>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	e038      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80043f4:	7efa      	ldrb	r2, [r7, #27]
 80043f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043fa:	4013      	ands	r3, r2
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004402:	429a      	cmp	r2, r3
 8004404:	d1e6      	bne.n	80043d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f103 0020 	add.w	r0, r3, #32
 800440c:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004410:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004414:	2301      	movs	r3, #1
 8004416:	f000 f966 	bl	80046e6 <lis2mdl_write_reg>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
 8004424:	e01f      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f103 0020 	add.w	r0, r3, #32
 800442c:	893b      	ldrh	r3, [r7, #8]
 800442e:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	f000 f939 	bl	80046aa <lis2mdl_read_reg>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800443e:	f04f 33ff 	mov.w	r3, #4294967295
 8004442:	e010      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f103 0020 	add.w	r0, r3, #32
 800444a:	f107 0220 	add.w	r2, r7, #32
 800444e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004452:	2301      	movs	r3, #1
 8004454:	f000 f947 	bl	80046e6 <lis2mdl_write_reg>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	e000      	b.n	8004466 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3730      	adds	r7, #48	@ 0x30
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08c      	sub	sp, #48	@ 0x30
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	461a      	mov	r2, r3
 800447a:	460b      	mov	r3, r1
 800447c:	72fb      	strb	r3, [r7, #11]
 800447e:	4613      	mov	r3, r2
 8004480:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004488:	2340      	movs	r3, #64	@ 0x40
 800448a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800448e:	2300      	movs	r3, #0
 8004490:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004494:	233c      	movs	r3, #60	@ 0x3c
 8004496:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004498:	2315      	movs	r3, #21
 800449a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800449e:	2316      	movs	r3, #22
 80044a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80044a4:	2317      	movs	r3, #23
 80044a6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 80044ae:	2314      	movs	r3, #20
 80044b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80044b4:	2344      	movs	r3, #68	@ 0x44
 80044b6:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80044b8:	2339      	movs	r3, #57	@ 0x39
 80044ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 80044be:	2380      	movs	r3, #128	@ 0x80
 80044c0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80044c4:	2329      	movs	r3, #41	@ 0x29
 80044c6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80044ca:	231e      	movs	r3, #30
 80044cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80044d6:	2310      	movs	r3, #16
 80044d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80044e2:	2340      	movs	r3, #64	@ 0x40
 80044e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80044e8:	230e      	movs	r3, #14
 80044ea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f103 0020 	add.w	r0, r3, #32
 80044f4:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80044f8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80044fc:	2301      	movs	r3, #1
 80044fe:	f000 f8f2 	bl	80046e6 <lis2mdl_write_reg>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004508:	f04f 33ff 	mov.w	r3, #4294967295
 800450c:	e0c9      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f103 0020 	add.w	r0, r3, #32
 8004514:	f107 021f 	add.w	r2, r7, #31
 8004518:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800451c:	2301      	movs	r3, #1
 800451e:	f000 f8e2 	bl	80046e6 <lis2mdl_write_reg>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295
 800452c:	e0b9      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f103 0020 	add.w	r0, r3, #32
 8004534:	f107 020b 	add.w	r2, r7, #11
 8004538:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800453c:	2301      	movs	r3, #1
 800453e:	f000 f8d2 	bl	80046e6 <lis2mdl_write_reg>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
 800454c:	e0a9      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f103 0020 	add.w	r0, r3, #32
 8004554:	f107 021e 	add.w	r2, r7, #30
 8004558:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800455c:	2301      	movs	r3, #1
 800455e:	f000 f8c2 	bl	80046e6 <lis2mdl_write_reg>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295
 800456c:	e099      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f103 0020 	add.w	r0, r3, #32
 8004574:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8004578:	2301      	movs	r3, #1
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	f000 f8b3 	bl	80046e6 <lis2mdl_write_reg>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004586:	f04f 33ff 	mov.w	r3, #4294967295
 800458a:	e08a      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f103 0020 	add.w	r0, r3, #32
 8004592:	f107 021d 	add.w	r2, r7, #29
 8004596:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800459a:	2301      	movs	r3, #1
 800459c:	f000 f8a3 	bl	80046e6 <lis2mdl_write_reg>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	e07a      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f103 0020 	add.w	r0, r3, #32
 80045b2:	f107 0220 	add.w	r2, r7, #32
 80045b6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80045ba:	2301      	movs	r3, #1
 80045bc:	f000 f893 	bl	80046e6 <lis2mdl_write_reg>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80045c6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ca:	e06a      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f103 0020 	add.w	r0, r3, #32
 80045d2:	f107 021c 	add.w	r2, r7, #28
 80045d6:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80045da:	2301      	movs	r3, #1
 80045dc:	f000 f865 	bl	80046aa <lis2mdl_read_reg>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	e05a      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80045ec:	7f3b      	ldrb	r3, [r7, #28]
 80045ee:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d102      	bne.n	80045fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80045f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045fa:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f103 0020 	add.w	r0, r3, #32
 8004602:	f107 021c 	add.w	r2, r7, #28
 8004606:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800460a:	2301      	movs	r3, #1
 800460c:	f000 f86b 	bl	80046e6 <lis2mdl_write_reg>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004616:	f04f 33ff 	mov.w	r3, #4294967295
 800461a:	e042      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f103 0020 	add.w	r0, r3, #32
 8004622:	f107 0214 	add.w	r2, r7, #20
 8004626:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800462a:	2306      	movs	r3, #6
 800462c:	f000 f83d 	bl	80046aa <lis2mdl_read_reg>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	e032      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f103 0020 	add.w	r0, r3, #32
 8004642:	f107 021b 	add.w	r2, r7, #27
 8004646:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800464a:	2301      	movs	r3, #1
 800464c:	f000 f82d 	bl	80046aa <lis2mdl_read_reg>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	e022      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 800465c:	7efa      	ldrb	r2, [r7, #27]
 800465e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004662:	4013      	ands	r3, r2
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800466a:	429a      	cmp	r2, r3
 800466c:	d1e6      	bne.n	800463c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f103 0020 	add.w	r0, r3, #32
 8004674:	f107 021b 	add.w	r2, r7, #27
 8004678:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800467c:	2301      	movs	r3, #1
 800467e:	f000 f814 	bl	80046aa <lis2mdl_read_reg>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004688:	f04f 33ff 	mov.w	r3, #4294967295
 800468c:	e009      	b.n	80046a2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 800468e:	7efa      	ldrb	r2, [r7, #27]
 8004690:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004694:	4013      	ands	r3, r2
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800469c:	429a      	cmp	r2, r3
 800469e:	d1e6      	bne.n	800466e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3730      	adds	r7, #48	@ 0x30
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80046aa:	b590      	push	{r4, r7, lr}
 80046ac:	b087      	sub	sp, #28
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	461a      	mov	r2, r3
 80046b6:	460b      	mov	r3, r1
 80046b8:	72fb      	strb	r3, [r7, #11]
 80046ba:	4613      	mov	r3, r2
 80046bc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d102      	bne.n	80046ca <lis2mdl_read_reg+0x20>
  {
    return -1;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	e009      	b.n	80046de <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685c      	ldr	r4, [r3, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	68d8      	ldr	r0, [r3, #12]
 80046d2:	893b      	ldrh	r3, [r7, #8]
 80046d4:	7af9      	ldrb	r1, [r7, #11]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	47a0      	blx	r4
 80046da:	6178      	str	r0, [r7, #20]

  return ret;
 80046dc:	697b      	ldr	r3, [r7, #20]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}

080046e6 <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80046e6:	b590      	push	{r4, r7, lr}
 80046e8:	b087      	sub	sp, #28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	461a      	mov	r2, r3
 80046f2:	460b      	mov	r3, r1
 80046f4:	72fb      	strb	r3, [r7, #11]
 80046f6:	4613      	mov	r3, r2
 80046f8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <lis2mdl_write_reg+0x20>
  {
    return -1;
 8004700:	f04f 33ff 	mov.w	r3, #4294967295
 8004704:	e009      	b.n	800471a <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681c      	ldr	r4, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	68d8      	ldr	r0, [r3, #12]
 800470e:	893b      	ldrh	r3, [r7, #8]
 8004710:	7af9      	ldrb	r1, [r7, #11]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	47a0      	blx	r4
 8004716:	6178      	str	r0, [r7, #20]

  return ret;
 8004718:	697b      	ldr	r3, [r7, #20]
}
 800471a:	4618      	mov	r0, r3
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	bd90      	pop	{r4, r7, pc}

08004722 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800472e:	f107 0208 	add.w	r2, r7, #8
 8004732:	2301      	movs	r3, #1
 8004734:	2160      	movs	r1, #96	@ 0x60
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff ffb7 	bl	80046aa <lis2mdl_read_reg>
 800473c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10f      	bne.n	8004764 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	b2da      	uxtb	r2, r3
 800474c:	7a3b      	ldrb	r3, [r7, #8]
 800474e:	f362 0301 	bfi	r3, r2, #0, #2
 8004752:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004754:	f107 0208 	add.w	r2, r7, #8
 8004758:	2301      	movs	r3, #1
 800475a:	2160      	movs	r1, #96	@ 0x60
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff ffc2 	bl	80046e6 <lis2mdl_write_reg>
 8004762:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004764:	68fb      	ldr	r3, [r7, #12]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	460b      	mov	r3, r1
 8004778:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800477a:	f107 0208 	add.w	r2, r7, #8
 800477e:	2301      	movs	r3, #1
 8004780:	2160      	movs	r1, #96	@ 0x60
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff ff91 	bl	80046aa <lis2mdl_read_reg>
 8004788:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10f      	bne.n	80047b0 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	b2da      	uxtb	r2, r3
 8004798:	7a3b      	ldrb	r3, [r7, #8]
 800479a:	f362 0383 	bfi	r3, r2, #2, #2
 800479e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80047a0:	f107 0208 	add.w	r2, r7, #8
 80047a4:	2301      	movs	r3, #1
 80047a6:	2160      	movs	r1, #96	@ 0x60
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff9c 	bl	80046e6 <lis2mdl_write_reg>
 80047ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047b0:	68fb      	ldr	r3, [r7, #12]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80047c6:	f107 0208 	add.w	r2, r7, #8
 80047ca:	2301      	movs	r3, #1
 80047cc:	2160      	movs	r1, #96	@ 0x60
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff ff6b 	bl	80046aa <lis2mdl_read_reg>
 80047d4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80047d6:	7a3b      	ldrb	r3, [r7, #8]
 80047d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d81a      	bhi.n	8004818 <lis2mdl_data_rate_get+0x5c>
 80047e2:	a201      	add	r2, pc, #4	@ (adr r2, 80047e8 <lis2mdl_data_rate_get+0x2c>)
 80047e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	08004801 	.word	0x08004801
 80047f0:	08004809 	.word	0x08004809
 80047f4:	08004811 	.word	0x08004811
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
      break;
 80047fe:	e00f      	b.n	8004820 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
      break;
 8004806:	e00b      	b.n	8004820 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2202      	movs	r2, #2
 800480c:	701a      	strb	r2, [r3, #0]
      break;
 800480e:	e007      	b.n	8004820 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2203      	movs	r2, #3
 8004814:	701a      	strb	r2, [r3, #0]
      break;
 8004816:	e003      	b.n	8004820 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
      break;
 800481e:	bf00      	nop
  }

  return ret;
 8004820:	68fb      	ldr	r3, [r7, #12]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop

0800482c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004838:	f107 0208 	add.w	r2, r7, #8
 800483c:	2301      	movs	r3, #1
 800483e:	2162      	movs	r1, #98	@ 0x62
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff32 	bl	80046aa <lis2mdl_read_reg>
 8004846:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10f      	bne.n	800486e <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	b2da      	uxtb	r2, r3
 8004856:	7a3b      	ldrb	r3, [r7, #8]
 8004858:	f362 1304 	bfi	r3, r2, #4, #1
 800485c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800485e:	f107 0208 	add.w	r2, r7, #8
 8004862:	2301      	movs	r3, #1
 8004864:	2162      	movs	r1, #98	@ 0x62
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ff3d 	bl	80046e6 <lis2mdl_write_reg>
 800486c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800486e:	68fb      	ldr	r3, [r7, #12]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004882:	f107 020c 	add.w	r2, r7, #12
 8004886:	2306      	movs	r3, #6
 8004888:	2168      	movs	r1, #104	@ 0x68
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ff0d 	bl	80046aa <lis2mdl_read_reg>
 8004890:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004892:	7b7b      	ldrb	r3, [r7, #13]
 8004894:	b21a      	sxth	r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	7b3a      	ldrb	r2, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	b21a      	sxth	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80048b2:	7bfa      	ldrb	r2, [r7, #15]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	3302      	adds	r3, #2
 80048b8:	b212      	sxth	r2, r2
 80048ba:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	3302      	adds	r3, #2
 80048c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	7bba      	ldrb	r2, [r7, #14]
 80048cc:	4413      	add	r3, r2
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	3302      	adds	r3, #2
 80048d4:	b212      	sxth	r2, r2
 80048d6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80048d8:	7c7a      	ldrb	r2, [r7, #17]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	3304      	adds	r3, #4
 80048de:	b212      	sxth	r2, r2
 80048e0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	3304      	adds	r3, #4
 80048e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	7c3a      	ldrb	r2, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	3304      	adds	r3, #4
 80048fa:	b212      	sxth	r2, r2
 80048fc:	801a      	strh	r2, [r3, #0]

  return ret;
 80048fe:	697b      	ldr	r3, [r7, #20]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004912:	2301      	movs	r3, #1
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	214f      	movs	r1, #79	@ 0x4f
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff fec6 	bl	80046aa <lis2mdl_read_reg>
 800491e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004920:	68fb      	ldr	r3, [r7, #12]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004936:	f107 0208 	add.w	r2, r7, #8
 800493a:	2301      	movs	r3, #1
 800493c:	2162      	movs	r1, #98	@ 0x62
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff feb3 	bl	80046aa <lis2mdl_read_reg>
 8004944:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10f      	bne.n	800496c <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	b2da      	uxtb	r2, r3
 8004954:	7a3b      	ldrb	r3, [r7, #8]
 8004956:	f362 0341 	bfi	r3, r2, #1, #1
 800495a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800495c:	f107 0208 	add.w	r2, r7, #8
 8004960:	2301      	movs	r3, #1
 8004962:	2162      	movs	r1, #98	@ 0x62
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff febe 	bl	80046e6 <lis2mdl_write_reg>
 800496a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800496c:	68fb      	ldr	r3, [r7, #12]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004982:	f107 0208 	add.w	r2, r7, #8
 8004986:	2301      	movs	r3, #1
 8004988:	2162      	movs	r1, #98	@ 0x62
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fe8d 	bl	80046aa <lis2mdl_read_reg>
 8004990:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10f      	bne.n	80049b8 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	7a3b      	ldrb	r3, [r7, #8]
 80049a2:	f362 1345 	bfi	r3, r2, #5, #1
 80049a6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80049a8:	f107 0208 	add.w	r2, r7, #8
 80049ac:	2301      	movs	r3, #1
 80049ae:	2162      	movs	r1, #98	@ 0x62
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff fe98 	bl	80046e6 <lis2mdl_write_reg>
 80049b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	e04d      	b.n	8004a7c <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	7b1a      	ldrb	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a88 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a1a      	ldr	r2, [pc, #104]	@ (8004a8c <LSM6DSO16IS_RegisterBusIO+0xc8>)
 8004a22:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e020      	b.n	8004a7c <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4798      	blx	r3
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e016      	b.n	8004a7c <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d112      	bne.n	8004a7c <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10d      	bne.n	8004a7c <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004a60:	230c      	movs	r3, #12
 8004a62:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 8004a64:	7afb      	ldrb	r3, [r7, #11]
 8004a66:	461a      	mov	r2, r3
 8004a68:	2112      	movs	r1, #18
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fdbe 	bl	80055ec <LSM6DSO16IS_Write_Reg>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	08005ab5 	.word	0x08005ab5
 8004a8c:	08005aeb 	.word	0x08005aeb

08004a90 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fdc1 	bl	8005626 <LSM6DSO16IS_Set_Mem_Bank>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3320      	adds	r3, #32
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 fbdc 	bl	8006274 <lsm6dso16is_auto_increment_set>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 8004ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3320      	adds	r3, #32
 8004acc:	2101      	movs	r1, #1
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fbf6 	bl	80062c0 <lsm6dso16is_block_data_update_set>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3320      	adds	r3, #32
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 f910 	bl	8005d14 <lsm6dso16is_xl_data_rate_set>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295
 8004afe:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3320      	adds	r3, #32
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 f8a6 	bl	8005c58 <lsm6dso16is_xl_full_scale_set>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3320      	adds	r3, #32
 8004b24:	2100      	movs	r1, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 faa8 	bl	800607c <lsm6dso16is_gy_data_rate_set>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 8004b32:	f04f 33ff 	mov.w	r3, #4294967295
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3320      	adds	r3, #32
 8004b3c:	2103      	movs	r1, #3
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 fa10 	bl	8005f64 <lsm6dso16is_gy_full_scale_set>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f890 	bl	8004c9a <LSM6DSO16IS_ACC_Disable>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fad0 	bl	800512c <LSM6DSO16IS_GYRO_Disable>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3320      	adds	r3, #32
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 f808 	bl	8005bea <lsm6dso16is_device_id_get>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004c18:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	4a07      	ldr	r2, [pc, #28]	@ (8004c48 <LSM6DSO16IS_GetCapabilities+0x58>)
 8004c2a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4a06      	ldr	r2, [pc, #24]	@ (8004c48 <LSM6DSO16IS_GetCapabilities+0x58>)
 8004c30:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	45505000 	.word	0x45505000

08004c4c <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e013      	b.n	8004c90 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f103 0220 	add.w	r2, r3, #32
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f001 f84c 	bl	8005d14 <lsm6dso16is_xl_data_rate_set>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295
 8004c86:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e01e      	b.n	8004cf4 <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f103 0220 	add.w	r2, r3, #32
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3333      	adds	r3, #51	@ 0x33
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f001 f866 	bl	8005d94 <lsm6dso16is_xl_data_rate_get>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd2:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3320      	adds	r3, #32
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 f81a 	bl	8005d14 <lsm6dso16is_xl_data_rate_set>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8004ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cea:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3320      	adds	r3, #32
 8004d12:	f107 020b 	add.w	r2, r7, #11
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 ffc3 	bl	8005ca4 <lsm6dso16is_xl_full_scale_get>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295
 8004d28:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004d2a:	7afb      	ldrb	r3, [r7, #11]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d81b      	bhi.n	8004d68 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 8004d30:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d61 	.word	0x08004d61
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d59 	.word	0x08004d59
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d7c <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 8004d4c:	601a      	str	r2, [r3, #0]
      break;
 8004d4e:	e00f      	b.n	8004d70 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4a0b      	ldr	r2, [pc, #44]	@ (8004d80 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8004d54:	601a      	str	r2, [r3, #0]
      break;
 8004d56:	e00b      	b.n	8004d70 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d84 <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 8004d5c:	601a      	str	r2, [r3, #0]
      break;
 8004d5e:	e007      	b.n	8004d70 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	4a09      	ldr	r2, [pc, #36]	@ (8004d88 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8004d64:	601a      	str	r2, [r3, #0]
      break;
 8004d66:	e003      	b.n	8004d70 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8004d68:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6c:	60fb      	str	r3, [r7, #12]
      break;
 8004d6e:	bf00      	nop
  }

  return ret;
 8004d70:	68fb      	ldr	r3, [r7, #12]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	3d79db23 	.word	0x3d79db23
 8004d80:	3df9db23 	.word	0x3df9db23
 8004d84:	3e79db23 	.word	0x3e79db23
 8004d88:	3ef9db23 	.word	0x3ef9db23

08004d8c <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3320      	adds	r3, #32
 8004d9e:	f107 020b 	add.w	r2, r7, #11
 8004da2:	4611      	mov	r1, r2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fff5 	bl	8005d94 <lsm6dso16is_xl_data_rate_get>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295
 8004db4:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8004db6:	7afb      	ldrb	r3, [r7, #11]
 8004db8:	2b1b      	cmp	r3, #27
 8004dba:	d86c      	bhi.n	8004e96 <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 8004dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004e35 	.word	0x08004e35
 8004dc8:	08004e47 	.word	0x08004e47
 8004dcc:	08004e4f 	.word	0x08004e4f
 8004dd0:	08004e57 	.word	0x08004e57
 8004dd4:	08004e5f 	.word	0x08004e5f
 8004dd8:	08004e67 	.word	0x08004e67
 8004ddc:	08004e6f 	.word	0x08004e6f
 8004de0:	08004e77 	.word	0x08004e77
 8004de4:	08004e7f 	.word	0x08004e7f
 8004de8:	08004e87 	.word	0x08004e87
 8004dec:	08004e8f 	.word	0x08004e8f
 8004df0:	08004e97 	.word	0x08004e97
 8004df4:	08004e97 	.word	0x08004e97
 8004df8:	08004e97 	.word	0x08004e97
 8004dfc:	08004e97 	.word	0x08004e97
 8004e00:	08004e97 	.word	0x08004e97
 8004e04:	08004e97 	.word	0x08004e97
 8004e08:	08004e47 	.word	0x08004e47
 8004e0c:	08004e4f 	.word	0x08004e4f
 8004e10:	08004e57 	.word	0x08004e57
 8004e14:	08004e5f 	.word	0x08004e5f
 8004e18:	08004e67 	.word	0x08004e67
 8004e1c:	08004e6f 	.word	0x08004e6f
 8004e20:	08004e77 	.word	0x08004e77
 8004e24:	08004e7f 	.word	0x08004e7f
 8004e28:	08004e87 	.word	0x08004e87
 8004e2c:	08004e8f 	.word	0x08004e8f
 8004e30:	08004e3f 	.word	0x08004e3f
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
      break;
 8004e3c:	e02f      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	4a19      	ldr	r2, [pc, #100]	@ (8004ea8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 8004e42:	601a      	str	r2, [r3, #0]
      break;
 8004e44:	e02b      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	4a18      	ldr	r2, [pc, #96]	@ (8004eac <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 8004e4a:	601a      	str	r2, [r3, #0]
      break;
 8004e4c:	e027      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	4a17      	ldr	r2, [pc, #92]	@ (8004eb0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 8004e52:	601a      	str	r2, [r3, #0]
      break;
 8004e54:	e023      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 8004e5a:	601a      	str	r2, [r3, #0]
      break;
 8004e5c:	e01f      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	4a15      	ldr	r2, [pc, #84]	@ (8004eb8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 8004e62:	601a      	str	r2, [r3, #0]
      break;
 8004e64:	e01b      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	4a14      	ldr	r2, [pc, #80]	@ (8004ebc <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 8004e6a:	601a      	str	r2, [r3, #0]
      break;
 8004e6c:	e017      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	4a13      	ldr	r2, [pc, #76]	@ (8004ec0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 8004e72:	601a      	str	r2, [r3, #0]
      break;
 8004e74:	e013      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	4a12      	ldr	r2, [pc, #72]	@ (8004ec4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 8004e7a:	601a      	str	r2, [r3, #0]
      break;
 8004e7c:	e00f      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	4a11      	ldr	r2, [pc, #68]	@ (8004ec8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 8004e82:	601a      	str	r2, [r3, #0]
      break;
 8004e84:	e00b      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	4a10      	ldr	r2, [pc, #64]	@ (8004ecc <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 8004e8a:	601a      	str	r2, [r3, #0]
      break;
 8004e8c:	e007      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	4a0f      	ldr	r2, [pc, #60]	@ (8004ed0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 8004e92:	601a      	str	r2, [r3, #0]
      break;
 8004e94:	e003      	b.n	8004e9e <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9a:	60fb      	str	r3, [r7, #12]
      break;
 8004e9c:	bf00      	nop
  }

  return ret;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	3fcccccd 	.word	0x3fcccccd
 8004eac:	41480000 	.word	0x41480000
 8004eb0:	41d00000 	.word	0x41d00000
 8004eb4:	42500000 	.word	0x42500000
 8004eb8:	42d00000 	.word	0x42d00000
 8004ebc:	43500000 	.word	0x43500000
 8004ec0:	43d00000 	.word	0x43d00000
 8004ec4:	44504000 	.word	0x44504000
 8004ec8:	44d06000 	.word	0x44d06000
 8004ecc:	45505000 	.word	0x45505000
 8004ed0:	45d05800 	.word	0x45d05800

08004ed4 <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d106      	bne.n	8004ef8 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004eea:	ed97 0a00 	vldr	s0, [r7]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fbc0 	bl	8005674 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	e005      	b.n	8004f04 <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004ef8:	ed97 0a00 	vldr	s0, [r7]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fc47 	bl	8005790 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 8004f02:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f04:	68fb      	ldr	r3, [r7, #12]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3320      	adds	r3, #32
 8004f22:	f107 020b 	add.w	r2, r7, #11
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 febb 	bl	8005ca4 <lsm6dso16is_xl_full_scale_get>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8004f3a:	7afb      	ldrb	r3, [r7, #11]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d81b      	bhi.n	8004f78 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 8004f40:	a201      	add	r2, pc, #4	@ (adr r2, 8004f48 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f71 	.word	0x08004f71
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f69 	.word	0x08004f69
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	601a      	str	r2, [r3, #0]
      break;
 8004f5e:	e00f      	b.n	8004f80 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2204      	movs	r2, #4
 8004f64:	601a      	str	r2, [r3, #0]
      break;
 8004f66:	e00b      	b.n	8004f80 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	601a      	str	r2, [r3, #0]
      break;
 8004f6e:	e007      	b.n	8004f80 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2210      	movs	r2, #16
 8004f74:	601a      	str	r2, [r3, #0]
      break;
 8004f76:	e003      	b.n	8004f80 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7c:	60fb      	str	r3, [r7, #12]
      break;
 8004f7e:	bf00      	nop
  }

  return ret;
 8004f80:	68fb      	ldr	r3, [r7, #12]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop

08004f8c <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	dd0b      	ble.n	8004fb8 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	dd06      	ble.n	8004fb4 <LSM6DSO16IS_ACC_SetFullScale+0x28>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	dc01      	bgt.n	8004fb0 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 8004fac:	2303      	movs	r3, #3
 8004fae:	e004      	b.n	8004fba <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e002      	b.n	8004fba <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e000      	b.n	8004fba <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8004fb8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 8004fba:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3320      	adds	r3, #32
 8004fc0:	7afa      	ldrb	r2, [r7, #11]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fe47 	bl	8005c58 <lsm6dso16is_xl_full_scale_set>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3320      	adds	r3, #32
 8004ff2:	f107 020c 	add.w	r2, r7, #12
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f001 f9cf 	bl	800639c <lsm6dso16is_acceleration_raw_get>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295
 8005008:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 800500a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8005012:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 800501a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	809a      	strh	r2, [r3, #4]

  return ret;
 8005022:	697b      	ldr	r3, [r7, #20]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3320      	adds	r3, #32
 8005044:	f107 020c 	add.w	r2, r7, #12
 8005048:	4611      	mov	r1, r2
 800504a:	4618      	mov	r0, r3
 800504c:	f001 f9a6 	bl	800639c <lsm6dso16is_acceleration_raw_get>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
 800505a:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 800505c:	f107 0308 	add.w	r3, r7, #8
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff fe4c 	bl	8004d00 <LSM6DSO16IS_ACC_GetSensitivity>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8005074:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005078:	ee07 3a90 	vmov	s15, r3
 800507c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005080:	edd7 7a02 	vldr	s15, [r7, #8]
 8005084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800508c:	ee17 2a90 	vmov	r2, s15
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8005094:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005098:	ee07 3a90 	vmov	s15, r3
 800509c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80050a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ac:	ee17 2a90 	vmov	r2, s15
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 80050b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80050c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050cc:	ee17 2a90 	vmov	r2, s15
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	609a      	str	r2, [r3, #8]

  return ret;
 80050d4:	697b      	ldr	r3, [r7, #20]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d102      	bne.n	80050fa <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e013      	b.n	8005122 <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f103 0220 	add.w	r2, r3, #32
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f000 ffb7 	bl	800607c <lsm6dso16is_gy_data_rate_set>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8005114:	f04f 33ff 	mov.w	r3, #4294967295
 8005118:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8005122:	68fb      	ldr	r3, [r7, #12]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e01e      	b.n	8005186 <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f103 0220 	add.w	r2, r3, #32
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3334      	adds	r3, #52	@ 0x34
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 ffd1 	bl	80060fc <lsm6dso16is_gy_data_rate_get>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8005160:	f04f 33ff 	mov.w	r3, #4294967295
 8005164:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3320      	adds	r3, #32
 800516a:	2100      	movs	r1, #0
 800516c:	4618      	mov	r0, r3
 800516e:	f000 ff85 	bl	800607c <lsm6dso16is_gy_data_rate_set>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8005178:	f04f 33ff 	mov.w	r3, #4294967295
 800517c:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8005186:	68fb      	ldr	r3, [r7, #12]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3320      	adds	r3, #32
 80051a2:	f107 020b 	add.w	r2, r7, #11
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 ff0b 	bl	8005fc4 <lsm6dso16is_gy_full_scale_get>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80051b4:	f04f 33ff 	mov.w	r3, #4294967295
 80051b8:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d839      	bhi.n	8005234 <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 80051c0:	a201      	add	r2, pc, #4	@ (adr r2, 80051c8 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	08005215 	.word	0x08005215
 80051cc:	0800521d 	.word	0x0800521d
 80051d0:	08005225 	.word	0x08005225
 80051d4:	0800522d 	.word	0x0800522d
 80051d8:	08005235 	.word	0x08005235
 80051dc:	08005235 	.word	0x08005235
 80051e0:	08005235 	.word	0x08005235
 80051e4:	08005235 	.word	0x08005235
 80051e8:	08005235 	.word	0x08005235
 80051ec:	08005235 	.word	0x08005235
 80051f0:	08005235 	.word	0x08005235
 80051f4:	08005235 	.word	0x08005235
 80051f8:	08005235 	.word	0x08005235
 80051fc:	08005235 	.word	0x08005235
 8005200:	08005235 	.word	0x08005235
 8005204:	08005235 	.word	0x08005235
 8005208:	0800520d 	.word	0x0800520d
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	4a0e      	ldr	r2, [pc, #56]	@ (8005248 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8005210:	601a      	str	r2, [r3, #0]
      break;
 8005212:	e013      	b.n	800523c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	4a0d      	ldr	r2, [pc, #52]	@ (800524c <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8005218:	601a      	str	r2, [r3, #0]
      break;
 800521a:	e00f      	b.n	800523c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4a0c      	ldr	r2, [pc, #48]	@ (8005250 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8005220:	601a      	str	r2, [r3, #0]
      break;
 8005222:	e00b      	b.n	800523c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4a0b      	ldr	r2, [pc, #44]	@ (8005254 <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8005228:	601a      	str	r2, [r3, #0]
      break;
 800522a:	e007      	b.n	800523c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	4a0a      	ldr	r2, [pc, #40]	@ (8005258 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8005230:	601a      	str	r2, [r3, #0]
      break;
 8005232:	e003      	b.n	800523c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005234:	f04f 33ff 	mov.w	r3, #4294967295
 8005238:	60fb      	str	r3, [r7, #12]
      break;
 800523a:	bf00      	nop
  }

  return ret;
 800523c:	68fb      	ldr	r3, [r7, #12]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	408c0000 	.word	0x408c0000
 800524c:	410c0000 	.word	0x410c0000
 8005250:	418c0000 	.word	0x418c0000
 8005254:	420c0000 	.word	0x420c0000
 8005258:	428c0000 	.word	0x428c0000

0800525c <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3320      	adds	r3, #32
 800526e:	f107 020b 	add.w	r2, r7, #11
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f000 ff41 	bl	80060fc <lsm6dso16is_gy_data_rate_get>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005280:	f04f 33ff 	mov.w	r3, #4294967295
 8005284:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8005286:	7afb      	ldrb	r3, [r7, #11]
 8005288:	2b1a      	cmp	r3, #26
 800528a:	d866      	bhi.n	800535a <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 800528c:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	08005301 	.word	0x08005301
 8005298:	0800530b 	.word	0x0800530b
 800529c:	08005313 	.word	0x08005313
 80052a0:	0800531b 	.word	0x0800531b
 80052a4:	08005323 	.word	0x08005323
 80052a8:	0800532b 	.word	0x0800532b
 80052ac:	08005333 	.word	0x08005333
 80052b0:	0800533b 	.word	0x0800533b
 80052b4:	08005343 	.word	0x08005343
 80052b8:	0800534b 	.word	0x0800534b
 80052bc:	08005353 	.word	0x08005353
 80052c0:	0800535b 	.word	0x0800535b
 80052c4:	0800535b 	.word	0x0800535b
 80052c8:	0800535b 	.word	0x0800535b
 80052cc:	0800535b 	.word	0x0800535b
 80052d0:	0800535b 	.word	0x0800535b
 80052d4:	0800535b 	.word	0x0800535b
 80052d8:	0800530b 	.word	0x0800530b
 80052dc:	08005313 	.word	0x08005313
 80052e0:	0800531b 	.word	0x0800531b
 80052e4:	08005323 	.word	0x08005323
 80052e8:	0800532b 	.word	0x0800532b
 80052ec:	08005333 	.word	0x08005333
 80052f0:	0800533b 	.word	0x0800533b
 80052f4:	08005343 	.word	0x08005343
 80052f8:	0800534b 	.word	0x0800534b
 80052fc:	08005353 	.word	0x08005353
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
      break;
 8005308:	e02b      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	4a17      	ldr	r2, [pc, #92]	@ (800536c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 800530e:	601a      	str	r2, [r3, #0]
      break;
 8005310:	e027      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	4a16      	ldr	r2, [pc, #88]	@ (8005370 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 8005316:	601a      	str	r2, [r3, #0]
      break;
 8005318:	e023      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	4a15      	ldr	r2, [pc, #84]	@ (8005374 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 800531e:	601a      	str	r2, [r3, #0]
      break;
 8005320:	e01f      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	4a14      	ldr	r2, [pc, #80]	@ (8005378 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 8005326:	601a      	str	r2, [r3, #0]
      break;
 8005328:	e01b      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	4a13      	ldr	r2, [pc, #76]	@ (800537c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 800532e:	601a      	str	r2, [r3, #0]
      break;
 8005330:	e017      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	4a12      	ldr	r2, [pc, #72]	@ (8005380 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 8005336:	601a      	str	r2, [r3, #0]
      break;
 8005338:	e013      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	4a11      	ldr	r2, [pc, #68]	@ (8005384 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 800533e:	601a      	str	r2, [r3, #0]
      break;
 8005340:	e00f      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	4a10      	ldr	r2, [pc, #64]	@ (8005388 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 8005346:	601a      	str	r2, [r3, #0]
      break;
 8005348:	e00b      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	4a0f      	ldr	r2, [pc, #60]	@ (800538c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 800534e:	601a      	str	r2, [r3, #0]
      break;
 8005350:	e007      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	4a0e      	ldr	r2, [pc, #56]	@ (8005390 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 8005356:	601a      	str	r2, [r3, #0]
      break;
 8005358:	e003      	b.n	8005362 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	60fb      	str	r3, [r7, #12]
      break;
 8005360:	bf00      	nop
  }

  return ret;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	41480000 	.word	0x41480000
 8005370:	41d00000 	.word	0x41d00000
 8005374:	42500000 	.word	0x42500000
 8005378:	42d00000 	.word	0x42d00000
 800537c:	43500000 	.word	0x43500000
 8005380:	43d00000 	.word	0x43d00000
 8005384:	44504000 	.word	0x44504000
 8005388:	44d06000 	.word	0x44d06000
 800538c:	45505000 	.word	0x45505000
 8005390:	45d05800 	.word	0x45d05800

08005394 <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d106      	bne.n	80053b8 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80053aa:	ed97 0a00 	vldr	s0, [r7]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa70 	bl	8005894 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	e005      	b.n	80053c4 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80053b8:	ed97 0a00 	vldr	s0, [r7]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 faf7 	bl	80059b0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 80053c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053c4:	68fb      	ldr	r3, [r7, #12]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3320      	adds	r3, #32
 80053e2:	f107 020b 	add.w	r2, r7, #11
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fdeb 	bl	8005fc4 <lsm6dso16is_gy_full_scale_get>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80053f4:	f04f 33ff 	mov.w	r3, #4294967295
 80053f8:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 80053fa:	7afb      	ldrb	r3, [r7, #11]
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d83c      	bhi.n	800547a <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 8005400:	a201      	add	r2, pc, #4	@ (adr r2, 8005408 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	08005455 	.word	0x08005455
 800540c:	0800545d 	.word	0x0800545d
 8005410:	08005467 	.word	0x08005467
 8005414:	08005471 	.word	0x08005471
 8005418:	0800547b 	.word	0x0800547b
 800541c:	0800547b 	.word	0x0800547b
 8005420:	0800547b 	.word	0x0800547b
 8005424:	0800547b 	.word	0x0800547b
 8005428:	0800547b 	.word	0x0800547b
 800542c:	0800547b 	.word	0x0800547b
 8005430:	0800547b 	.word	0x0800547b
 8005434:	0800547b 	.word	0x0800547b
 8005438:	0800547b 	.word	0x0800547b
 800543c:	0800547b 	.word	0x0800547b
 8005440:	0800547b 	.word	0x0800547b
 8005444:	0800547b 	.word	0x0800547b
 8005448:	0800544d 	.word	0x0800544d
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	227d      	movs	r2, #125	@ 0x7d
 8005450:	601a      	str	r2, [r3, #0]
      break;
 8005452:	e016      	b.n	8005482 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	22fa      	movs	r2, #250	@ 0xfa
 8005458:	601a      	str	r2, [r3, #0]
      break;
 800545a:	e012      	b.n	8005482 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005462:	601a      	str	r2, [r3, #0]
      break;
 8005464:	e00d      	b.n	8005482 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800546c:	601a      	str	r2, [r3, #0]
      break;
 800546e:	e008      	b.n	8005482 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005476:	601a      	str	r2, [r3, #0]
      break;
 8005478:	e003      	b.n	8005482 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295
 800547e:	60fb      	str	r3, [r7, #12]
      break;
 8005480:	bf00      	nop
  }

  return ret;
 8005482:	68fb      	ldr	r3, [r7, #12]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b7d      	cmp	r3, #125	@ 0x7d
 800549e:	dd12      	ble.n	80054c6 <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2bfa      	cmp	r3, #250	@ 0xfa
 80054a4:	dd0d      	ble.n	80054c2 <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80054ac:	dd07      	ble.n	80054be <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054b4:	dc01      	bgt.n	80054ba <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e006      	b.n	80054c8 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 80054ba:	2303      	movs	r3, #3
 80054bc:	e004      	b.n	80054c8 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 80054be:	2301      	movs	r3, #1
 80054c0:	e002      	b.n	80054c8 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 80054c2:	2300      	movs	r3, #0
 80054c4:	e000      	b.n	80054c8 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 80054c6:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 80054c8:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3320      	adds	r3, #32
 80054ce:	7afa      	ldrb	r2, [r7, #11]
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fd46 	bl	8005f64 <lsm6dso16is_gy_full_scale_set>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80054e4:	68fb      	ldr	r3, [r7, #12]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3320      	adds	r3, #32
 8005500:	f107 020c 	add.w	r2, r7, #12
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f000 ff00 	bl	800630c <lsm6dso16is_angular_rate_raw_get>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005512:	f04f 33ff 	mov.w	r3, #4294967295
 8005516:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8005518:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8005520:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8005528:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	809a      	strh	r2, [r3, #4]

  return ret;
 8005530:	697b      	ldr	r3, [r7, #20]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3320      	adds	r3, #32
 8005552:	f107 020c 	add.w	r2, r7, #12
 8005556:	4611      	mov	r1, r2
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fed7 	bl	800630c <lsm6dso16is_angular_rate_raw_get>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8005564:	f04f 33ff 	mov.w	r3, #4294967295
 8005568:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 800556a:	f107 0308 	add.w	r3, r7, #8
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fe0d 	bl	8005190 <LSM6DSO16IS_GYRO_GetSensitivity>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
 8005580:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8005582:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800558e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800559a:	ee17 2a90 	vmov	r2, s15
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 80055a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80055b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ba:	ee17 2a90 	vmov	r2, s15
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 80055c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055da:	ee17 2a90 	vmov	r2, s15
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	609a      	str	r2, [r3, #8]

  return ret;
 80055e2:	697b      	ldr	r3, [r7, #20]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
 80055f8:	4613      	mov	r3, r2
 80055fa:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f103 0020 	add.w	r0, r3, #32
 8005606:	1cba      	adds	r2, r7, #2
 8005608:	78f9      	ldrb	r1, [r7, #3]
 800560a:	2301      	movs	r3, #1
 800560c:	f000 faa6 	bl	8005b5c <lsm6dso16is_write_reg>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8005616:	f04f 33ff 	mov.w	r3, #4294967295
 800561a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800561c:	68fb      	ldr	r3, [r7, #12]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	460b      	mov	r3, r1
 8005630:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d006      	beq.n	800564a <LSM6DSO16IS_Set_Mem_Bank+0x24>
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d101      	bne.n	8005646 <LSM6DSO16IS_Set_Mem_Bank+0x20>
 8005642:	2303      	movs	r3, #3
 8005644:	e002      	b.n	800564c <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <LSM6DSO16IS_Set_Mem_Bank+0x26>
 800564a:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 800564c:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3320      	adds	r3, #32
 8005652:	7afa      	ldrb	r2, [r7, #11]
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fa9e 	bl	8005b98 <lsm6dso16is_mem_bank_set>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 8005662:	f04f 33ff 	mov.w	r3, #4294967295
 8005666:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8005684:	edd7 7a00 	vldr	s15, [r7]
 8005688:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800568c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	d801      	bhi.n	800569a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 8005696:	2301      	movs	r3, #1
 8005698:	e058      	b.n	800574c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800569a:	edd7 7a00 	vldr	s15, [r7]
 800569e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80056a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056aa:	d801      	bhi.n	80056b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e04d      	b.n	800574c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80056b0:	edd7 7a00 	vldr	s15, [r7]
 80056b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005774 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 80056b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c0:	d801      	bhi.n	80056c6 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 80056c2:	2303      	movs	r3, #3
 80056c4:	e042      	b.n	800574c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80056c6:	edd7 7a00 	vldr	s15, [r7]
 80056ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005778 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 80056ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d6:	d801      	bhi.n	80056dc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 80056d8:	2304      	movs	r3, #4
 80056da:	e037      	b.n	800574c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80056dc:	edd7 7a00 	vldr	s15, [r7]
 80056e0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800577c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 80056e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ec:	d801      	bhi.n	80056f2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 80056ee:	2305      	movs	r3, #5
 80056f0:	e02c      	b.n	800574c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80056f2:	edd7 7a00 	vldr	s15, [r7]
 80056f6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8005780 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80056fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005702:	d801      	bhi.n	8005708 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 8005704:	2306      	movs	r3, #6
 8005706:	e021      	b.n	800574c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8005708:	edd7 7a00 	vldr	s15, [r7]
 800570c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005784 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005718:	d801      	bhi.n	800571e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 800571a:	2307      	movs	r3, #7
 800571c:	e016      	b.n	800574c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800571e:	edd7 7a00 	vldr	s15, [r7]
 8005722:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005788 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800572a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572e:	d801      	bhi.n	8005734 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8005730:	2308      	movs	r3, #8
 8005732:	e00b      	b.n	800574c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8005734:	edd7 7a00 	vldr	s15, [r7]
 8005738:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800578c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 800573c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005744:	d801      	bhi.n	800574a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 8005746:	2309      	movs	r3, #9
 8005748:	e000      	b.n	800574c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800574a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 800574c:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3320      	adds	r3, #32
 8005752:	7afa      	ldrb	r2, [r7, #11]
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fadc 	bl	8005d14 <lsm6dso16is_xl_data_rate_set>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 8005762:	f04f 33ff 	mov.w	r3, #4294967295
 8005766:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005768:	68fb      	ldr	r3, [r7, #12]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	42500000 	.word	0x42500000
 8005778:	42d00000 	.word	0x42d00000
 800577c:	43500000 	.word	0x43500000
 8005780:	43d00000 	.word	0x43d00000
 8005784:	44504000 	.word	0x44504000
 8005788:	44d06000 	.word	0x44d06000
 800578c:	45505000 	.word	0x45505000

08005790 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 800579c:	edd7 7a00 	vldr	s15, [r7]
 80057a0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80057a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ac:	d801      	bhi.n	80057b2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e058      	b.n	8005864 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80057b2:	edd7 7a00 	vldr	s15, [r7]
 80057b6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80057ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c2:	d801      	bhi.n	80057c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e04d      	b.n	8005864 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80057c8:	edd7 7a00 	vldr	s15, [r7]
 80057cc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005878 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80057d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d8:	d801      	bhi.n	80057de <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80057da:	2303      	movs	r3, #3
 80057dc:	e042      	b.n	8005864 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80057de:	edd7 7a00 	vldr	s15, [r7]
 80057e2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800587c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 80057e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ee:	d801      	bhi.n	80057f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 80057f0:	2304      	movs	r3, #4
 80057f2:	e037      	b.n	8005864 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80057f4:	edd7 7a00 	vldr	s15, [r7]
 80057f8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005880 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80057fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005804:	d801      	bhi.n	800580a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005806:	2305      	movs	r3, #5
 8005808:	e02c      	b.n	8005864 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800580a:	edd7 7a00 	vldr	s15, [r7]
 800580e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005884 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8005812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581a:	d801      	bhi.n	8005820 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 800581c:	2306      	movs	r3, #6
 800581e:	e021      	b.n	8005864 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005820:	edd7 7a00 	vldr	s15, [r7]
 8005824:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005888 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8005828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	d801      	bhi.n	8005836 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005832:	2307      	movs	r3, #7
 8005834:	e016      	b.n	8005864 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005836:	edd7 7a00 	vldr	s15, [r7]
 800583a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800588c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800583e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005846:	d801      	bhi.n	800584c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005848:	2308      	movs	r3, #8
 800584a:	e00b      	b.n	8005864 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800584c:	edd7 7a00 	vldr	s15, [r7]
 8005850:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8005890 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585c:	d801      	bhi.n	8005862 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800585e:	2309      	movs	r3, #9
 8005860:	e000      	b.n	8005864 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005862:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	42500000 	.word	0x42500000
 800587c:	42d00000 	.word	0x42d00000
 8005880:	43500000 	.word	0x43500000
 8005884:	43d00000 	.word	0x43d00000
 8005888:	44504000 	.word	0x44504000
 800588c:	44d06000 	.word	0x44d06000
 8005890:	45505000 	.word	0x45505000

08005894 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 80058a4:	edd7 7a00 	vldr	s15, [r7]
 80058a8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80058ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b4:	d801      	bhi.n	80058ba <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e058      	b.n	800596c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80058ba:	edd7 7a00 	vldr	s15, [r7]
 80058be:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80058c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ca:	d801      	bhi.n	80058d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e04d      	b.n	800596c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80058d0:	edd7 7a00 	vldr	s15, [r7]
 80058d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005994 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80058d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e0:	d801      	bhi.n	80058e6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 80058e2:	2303      	movs	r3, #3
 80058e4:	e042      	b.n	800596c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80058e6:	edd7 7a00 	vldr	s15, [r7]
 80058ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005998 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80058ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f6:	d801      	bhi.n	80058fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 80058f8:	2304      	movs	r3, #4
 80058fa:	e037      	b.n	800596c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80058fc:	edd7 7a00 	vldr	s15, [r7]
 8005900:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800599c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590c:	d801      	bhi.n	8005912 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 800590e:	2305      	movs	r3, #5
 8005910:	e02c      	b.n	800596c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8005912:	edd7 7a00 	vldr	s15, [r7]
 8005916:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80059a0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800591a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800591e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005922:	d801      	bhi.n	8005928 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8005924:	2306      	movs	r3, #6
 8005926:	e021      	b.n	800596c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8005928:	edd7 7a00 	vldr	s15, [r7]
 800592c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80059a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005938:	d801      	bhi.n	800593e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 800593a:	2307      	movs	r3, #7
 800593c:	e016      	b.n	800596c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800593e:	edd7 7a00 	vldr	s15, [r7]
 8005942:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80059a8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800594a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594e:	d801      	bhi.n	8005954 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8005950:	2308      	movs	r3, #8
 8005952:	e00b      	b.n	800596c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8005954:	edd7 7a00 	vldr	s15, [r7]
 8005958:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80059ac <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 800595c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005964:	d801      	bhi.n	800596a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 8005966:	2309      	movs	r3, #9
 8005968:	e000      	b.n	800596c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800596a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 800596c:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3320      	adds	r3, #32
 8005972:	7afa      	ldrb	r2, [r7, #11]
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fb80 	bl	800607c <lsm6dso16is_gy_data_rate_set>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005988:	68fb      	ldr	r3, [r7, #12]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	42500000 	.word	0x42500000
 8005998:	42d00000 	.word	0x42d00000
 800599c:	43500000 	.word	0x43500000
 80059a0:	43d00000 	.word	0x43d00000
 80059a4:	44504000 	.word	0x44504000
 80059a8:	44d06000 	.word	0x44d06000
 80059ac:	45505000 	.word	0x45505000

080059b0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 80059bc:	edd7 7a00 	vldr	s15, [r7]
 80059c0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80059c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059cc:	d801      	bhi.n	80059d2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e058      	b.n	8005a84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80059d2:	edd7 7a00 	vldr	s15, [r7]
 80059d6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80059da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e2:	d801      	bhi.n	80059e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e04d      	b.n	8005a84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80059e8:	edd7 7a00 	vldr	s15, [r7]
 80059ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005a98 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80059f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f8:	d801      	bhi.n	80059fe <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80059fa:	2303      	movs	r3, #3
 80059fc:	e042      	b.n	8005a84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80059fe:	edd7 7a00 	vldr	s15, [r7]
 8005a02:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005a9c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0e:	d801      	bhi.n	8005a14 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005a10:	2304      	movs	r3, #4
 8005a12:	e037      	b.n	8005a84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a14:	edd7 7a00 	vldr	s15, [r7]
 8005a18:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005aa0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a24:	d801      	bhi.n	8005a2a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005a26:	2305      	movs	r3, #5
 8005a28:	e02c      	b.n	8005a84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a2a:	edd7 7a00 	vldr	s15, [r7]
 8005a2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005aa4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3a:	d801      	bhi.n	8005a40 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005a3c:	2306      	movs	r3, #6
 8005a3e:	e021      	b.n	8005a84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a40:	edd7 7a00 	vldr	s15, [r7]
 8005a44:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005aa8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a50:	d801      	bhi.n	8005a56 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005a52:	2307      	movs	r3, #7
 8005a54:	e016      	b.n	8005a84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a56:	edd7 7a00 	vldr	s15, [r7]
 8005a5a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005aac <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a66:	d801      	bhi.n	8005a6c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005a68:	2308      	movs	r3, #8
 8005a6a:	e00b      	b.n	8005a84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a6c:	edd7 7a00 	vldr	s15, [r7]
 8005a70:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8005ab0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7c:	d801      	bhi.n	8005a82 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005a7e:	2309      	movs	r3, #9
 8005a80:	e000      	b.n	8005a84 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005a82:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	42500000 	.word	0x42500000
 8005a9c:	42d00000 	.word	0x42d00000
 8005aa0:	43500000 	.word	0x43500000
 8005aa4:	43d00000 	.word	0x43d00000
 8005aa8:	44504000 	.word	0x44504000
 8005aac:	44d06000 	.word	0x44d06000
 8005ab0:	45505000 	.word	0x45505000

08005ab4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	72fb      	strb	r3, [r7, #11]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	695c      	ldr	r4, [r3, #20]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	7b1b      	ldrb	r3, [r3, #12]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	b299      	uxth	r1, r3
 8005ada:	893b      	ldrh	r3, [r7, #8]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	47a0      	blx	r4
 8005ae0:	4603      	mov	r3, r0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd90      	pop	{r4, r7, pc}

08005aea <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005aea:	b590      	push	{r4, r7, lr}
 8005aec:	b087      	sub	sp, #28
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	461a      	mov	r2, r3
 8005af6:	460b      	mov	r3, r1
 8005af8:	72fb      	strb	r3, [r7, #11]
 8005afa:	4613      	mov	r3, r2
 8005afc:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	691c      	ldr	r4, [r3, #16]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	7b1b      	ldrb	r3, [r3, #12]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	7afb      	ldrb	r3, [r7, #11]
 8005b0e:	b299      	uxth	r1, r3
 8005b10:	893b      	ldrh	r3, [r7, #8]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	47a0      	blx	r4
 8005b16:	4603      	mov	r3, r0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd90      	pop	{r4, r7, pc}

08005b20 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8005b20:	b590      	push	{r4, r7, lr}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	72fb      	strb	r3, [r7, #11]
 8005b30:	4613      	mov	r3, r2
 8005b32:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 8005b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3e:	e009      	b.n	8005b54 <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685c      	ldr	r4, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68d8      	ldr	r0, [r3, #12]
 8005b48:	893b      	ldrh	r3, [r7, #8]
 8005b4a:	7af9      	ldrb	r1, [r7, #11]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	47a0      	blx	r4
 8005b50:	6178      	str	r0, [r7, #20]

  return ret;
 8005b52:	697b      	ldr	r3, [r7, #20]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd90      	pop	{r4, r7, pc}

08005b5c <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	461a      	mov	r2, r3
 8005b68:	460b      	mov	r3, r1
 8005b6a:	72fb      	strb	r3, [r7, #11]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7a:	e009      	b.n	8005b90 <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681c      	ldr	r4, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68d8      	ldr	r0, [r3, #12]
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	7af9      	ldrb	r1, [r7, #11]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	47a0      	blx	r4
 8005b8c:	6178      	str	r0, [r7, #20]

  return ret;
 8005b8e:	697b      	ldr	r3, [r7, #20]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd90      	pop	{r4, r7, pc}

08005b98 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d101      	bne.n	8005bb2 <lsm6dso16is_mem_bank_set+0x1a>
 8005bae:	2201      	movs	r2, #1
 8005bb0:	e000      	b.n	8005bb4 <lsm6dso16is_mem_bank_set+0x1c>
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	7a3b      	ldrb	r3, [r7, #8]
 8005bb6:	f362 1386 	bfi	r3, r2, #6, #1
 8005bba:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d101      	bne.n	8005bc6 <lsm6dso16is_mem_bank_set+0x2e>
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	e000      	b.n	8005bc8 <lsm6dso16is_mem_bank_set+0x30>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	7a3b      	ldrb	r3, [r7, #8]
 8005bca:	f362 13c7 	bfi	r3, r2, #7, #1
 8005bce:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8005bd0:	f107 0208 	add.w	r2, r7, #8
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff ffbf 	bl	8005b5c <lsm6dso16is_write_reg>
 8005bde:	60f8      	str	r0, [r7, #12]

  return ret;
 8005be0:	68fb      	ldr	r3, [r7, #12]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	210f      	movs	r1, #15
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ff90 	bl	8005b20 <lsm6dso16is_read_reg>
 8005c00:	60f8      	str	r0, [r7, #12]

  return ret;
 8005c02:	68fb      	ldr	r3, [r7, #12]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8005c18:	f107 0208 	add.w	r2, r7, #8
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	2115      	movs	r1, #21
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ff7d 	bl	8005b20 <lsm6dso16is_read_reg>
 8005c26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	7a3b      	ldrb	r3, [r7, #8]
 8005c38:	f362 1304 	bfi	r3, r2, #4, #1
 8005c3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8005c3e:	f107 0208 	add.w	r2, r7, #8
 8005c42:	2301      	movs	r3, #1
 8005c44:	2115      	movs	r1, #21
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff ff88 	bl	8005b5c <lsm6dso16is_write_reg>
 8005c4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005c64:	f107 0208 	add.w	r2, r7, #8
 8005c68:	2301      	movs	r3, #1
 8005c6a:	2110      	movs	r1, #16
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ff57 	bl	8005b20 <lsm6dso16is_read_reg>
 8005c72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10f      	bne.n	8005c9a <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	7a3b      	ldrb	r3, [r7, #8]
 8005c84:	f362 0383 	bfi	r3, r2, #2, #2
 8005c88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005c8a:	f107 0208 	add.w	r2, r7, #8
 8005c8e:	2301      	movs	r3, #1
 8005c90:	2110      	movs	r1, #16
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ff62 	bl	8005b5c <lsm6dso16is_write_reg>
 8005c98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005cae:	f107 0208 	add.w	r2, r7, #8
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	2110      	movs	r1, #16
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff ff32 	bl	8005b20 <lsm6dso16is_read_reg>
 8005cbc:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 8005cbe:	7a3b      	ldrb	r3, [r7, #8]
 8005cc0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d81a      	bhi.n	8005d00 <lsm6dso16is_xl_full_scale_get+0x5c>
 8005cca:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <lsm6dso16is_xl_full_scale_get+0x2c>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005ce1 	.word	0x08005ce1
 8005cd4:	08005cf9 	.word	0x08005cf9
 8005cd8:	08005ce9 	.word	0x08005ce9
 8005cdc:	08005cf1 	.word	0x08005cf1
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
      break;
 8005ce6:	e00f      	b.n	8005d08 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2202      	movs	r2, #2
 8005cec:	701a      	strb	r2, [r3, #0]
      break;
 8005cee:	e00b      	b.n	8005d08 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	701a      	strb	r2, [r3, #0]
      break;
 8005cf6:	e007      	b.n	8005d08 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
      break;
 8005cfe:	e003      	b.n	8005d08 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
      break;
 8005d06:	bf00      	nop
  }
  return ret;
 8005d08:	68fb      	ldr	r3, [r7, #12]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop

08005d14 <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005d20:	f107 0208 	add.w	r2, r7, #8
 8005d24:	2301      	movs	r3, #1
 8005d26:	2110      	movs	r1, #16
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff fef9 	bl	8005b20 <lsm6dso16is_read_reg>
 8005d2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d128      	bne.n	8005d88 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8005d40:	2101      	movs	r1, #1
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff ff62 	bl	8005c0c <lsm6dso16is_xl_hm_mode_set>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e007      	b.n	8005d62 <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8005d52:	2100      	movs	r1, #0
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ff59 	bl	8005c0c <lsm6dso16is_xl_hm_mode_set>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	7a3b      	ldrb	r3, [r7, #8]
 8005d6c:	f362 1307 	bfi	r3, r2, #4, #4
 8005d70:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005d72:	f107 0208 	add.w	r2, r7, #8
 8005d76:	2301      	movs	r3, #1
 8005d78:	2110      	movs	r1, #16
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff feee 	bl	8005b5c <lsm6dso16is_write_reg>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005d88:	68fb      	ldr	r3, [r7, #12]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005d9e:	f107 0210 	add.w	r2, r7, #16
 8005da2:	2301      	movs	r3, #1
 8005da4:	2110      	movs	r1, #16
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff feba 	bl	8005b20 <lsm6dso16is_read_reg>
 8005dac:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8005dae:	f107 020c 	add.w	r2, r7, #12
 8005db2:	2301      	movs	r3, #1
 8005db4:	2115      	movs	r1, #21
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff feb2 	bl	8005b20 <lsm6dso16is_read_reg>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 8005dc4:	7b3b      	ldrb	r3, [r7, #12]
 8005dc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	7c3a      	ldrb	r2, [r7, #16]
 8005dd0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	2b1b      	cmp	r3, #27
 8005dda:	f200 8093 	bhi.w	8005f04 <lsm6dso16is_xl_data_rate_get+0x170>
 8005dde:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <lsm6dso16is_xl_data_rate_get+0x50>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e55 	.word	0x08005e55
 8005de8:	08005e5d 	.word	0x08005e5d
 8005dec:	08005e65 	.word	0x08005e65
 8005df0:	08005e6d 	.word	0x08005e6d
 8005df4:	08005e75 	.word	0x08005e75
 8005df8:	08005e7d 	.word	0x08005e7d
 8005dfc:	08005e85 	.word	0x08005e85
 8005e00:	08005e8d 	.word	0x08005e8d
 8005e04:	08005e95 	.word	0x08005e95
 8005e08:	08005e9d 	.word	0x08005e9d
 8005e0c:	08005ea5 	.word	0x08005ea5
 8005e10:	08005f05 	.word	0x08005f05
 8005e14:	08005f05 	.word	0x08005f05
 8005e18:	08005f05 	.word	0x08005f05
 8005e1c:	08005f05 	.word	0x08005f05
 8005e20:	08005f05 	.word	0x08005f05
 8005e24:	08005f05 	.word	0x08005f05
 8005e28:	08005ead 	.word	0x08005ead
 8005e2c:	08005eb5 	.word	0x08005eb5
 8005e30:	08005ebd 	.word	0x08005ebd
 8005e34:	08005ec5 	.word	0x08005ec5
 8005e38:	08005ecd 	.word	0x08005ecd
 8005e3c:	08005ed5 	.word	0x08005ed5
 8005e40:	08005edd 	.word	0x08005edd
 8005e44:	08005ee5 	.word	0x08005ee5
 8005e48:	08005eed 	.word	0x08005eed
 8005e4c:	08005ef5 	.word	0x08005ef5
 8005e50:	08005efd 	.word	0x08005efd
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]
      break;
 8005e5a:	e057      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]
      break;
 8005e62:	e053      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2202      	movs	r2, #2
 8005e68:	701a      	strb	r2, [r3, #0]
      break;
 8005e6a:	e04f      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	701a      	strb	r2, [r3, #0]
      break;
 8005e72:	e04b      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2204      	movs	r2, #4
 8005e78:	701a      	strb	r2, [r3, #0]
      break;
 8005e7a:	e047      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2205      	movs	r2, #5
 8005e80:	701a      	strb	r2, [r3, #0]
      break;
 8005e82:	e043      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2206      	movs	r2, #6
 8005e88:	701a      	strb	r2, [r3, #0]
      break;
 8005e8a:	e03f      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2207      	movs	r2, #7
 8005e90:	701a      	strb	r2, [r3, #0]
      break;
 8005e92:	e03b      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2208      	movs	r2, #8
 8005e98:	701a      	strb	r2, [r3, #0]
      break;
 8005e9a:	e037      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2209      	movs	r2, #9
 8005ea0:	701a      	strb	r2, [r3, #0]
      break;
 8005ea2:	e033      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	220a      	movs	r2, #10
 8005ea8:	701a      	strb	r2, [r3, #0]
      break;
 8005eaa:	e02f      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2211      	movs	r2, #17
 8005eb0:	701a      	strb	r2, [r3, #0]
      break;
 8005eb2:	e02b      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2212      	movs	r2, #18
 8005eb8:	701a      	strb	r2, [r3, #0]
      break;
 8005eba:	e027      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2213      	movs	r2, #19
 8005ec0:	701a      	strb	r2, [r3, #0]
      break;
 8005ec2:	e023      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2214      	movs	r2, #20
 8005ec8:	701a      	strb	r2, [r3, #0]
      break;
 8005eca:	e01f      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2215      	movs	r2, #21
 8005ed0:	701a      	strb	r2, [r3, #0]
      break;
 8005ed2:	e01b      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2216      	movs	r2, #22
 8005ed8:	701a      	strb	r2, [r3, #0]
      break;
 8005eda:	e017      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2217      	movs	r2, #23
 8005ee0:	701a      	strb	r2, [r3, #0]
      break;
 8005ee2:	e013      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2218      	movs	r2, #24
 8005ee8:	701a      	strb	r2, [r3, #0]
      break;
 8005eea:	e00f      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2219      	movs	r2, #25
 8005ef0:	701a      	strb	r2, [r3, #0]
      break;
 8005ef2:	e00b      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	221a      	movs	r2, #26
 8005ef8:	701a      	strb	r2, [r3, #0]
      break;
 8005efa:	e007      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	221b      	movs	r2, #27
 8005f00:	701a      	strb	r2, [r3, #0]
      break;
 8005f02:	e003      	b.n	8005f0c <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
      break;
 8005f0a:	bf00      	nop
  }

  return ret;
 8005f0c:	697b      	ldr	r3, [r7, #20]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop

08005f18 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8005f24:	f107 0208 	add.w	r2, r7, #8
 8005f28:	2301      	movs	r3, #1
 8005f2a:	2116      	movs	r1, #22
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fdf7 	bl	8005b20 <lsm6dso16is_read_reg>
 8005f32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	7a3b      	ldrb	r3, [r7, #8]
 8005f44:	f362 13c7 	bfi	r3, r2, #7, #1
 8005f48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8005f4a:	f107 0208 	add.w	r2, r7, #8
 8005f4e:	2301      	movs	r3, #1
 8005f50:	2116      	movs	r1, #22
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fe02 	bl	8005b5c <lsm6dso16is_write_reg>
 8005f58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005f70:	f107 0208 	add.w	r2, r7, #8
 8005f74:	2301      	movs	r3, #1
 8005f76:	2111      	movs	r1, #17
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff fdd1 	bl	8005b20 <lsm6dso16is_read_reg>
 8005f7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d119      	bne.n	8005fba <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	7a3b      	ldrb	r3, [r7, #8]
 8005f90:	f362 0383 	bfi	r3, r2, #2, #2
 8005f94:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	091b      	lsrs	r3, r3, #4
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	7a3b      	ldrb	r3, [r7, #8]
 8005fa4:	f362 0341 	bfi	r3, r2, #1, #1
 8005fa8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005faa:	f107 0208 	add.w	r2, r7, #8
 8005fae:	2301      	movs	r3, #1
 8005fb0:	2111      	movs	r1, #17
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fdd2 	bl	8005b5c <lsm6dso16is_write_reg>
 8005fb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005fba:	68fb      	ldr	r3, [r7, #12]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005fce:	f107 0208 	add.w	r2, r7, #8
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	2111      	movs	r1, #17
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fda2 	bl	8005b20 <lsm6dso16is_read_reg>
 8005fdc:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 8005fde:	7a3b      	ldrb	r3, [r7, #8]
 8005fe0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	7a3a      	ldrb	r2, [r7, #8]
 8005fea:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	2b10      	cmp	r3, #16
 8005ff4:	d838      	bhi.n	8006068 <lsm6dso16is_gy_full_scale_get+0xa4>
 8005ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ffc <lsm6dso16is_gy_full_scale_get+0x38>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	08006049 	.word	0x08006049
 8006000:	08006051 	.word	0x08006051
 8006004:	08006059 	.word	0x08006059
 8006008:	08006061 	.word	0x08006061
 800600c:	08006069 	.word	0x08006069
 8006010:	08006069 	.word	0x08006069
 8006014:	08006069 	.word	0x08006069
 8006018:	08006069 	.word	0x08006069
 800601c:	08006069 	.word	0x08006069
 8006020:	08006069 	.word	0x08006069
 8006024:	08006069 	.word	0x08006069
 8006028:	08006069 	.word	0x08006069
 800602c:	08006069 	.word	0x08006069
 8006030:	08006069 	.word	0x08006069
 8006034:	08006069 	.word	0x08006069
 8006038:	08006069 	.word	0x08006069
 800603c:	08006041 	.word	0x08006041
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2210      	movs	r2, #16
 8006044:	701a      	strb	r2, [r3, #0]
      break;
 8006046:	e013      	b.n	8006070 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	701a      	strb	r2, [r3, #0]
      break;
 800604e:	e00f      	b.n	8006070 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2201      	movs	r2, #1
 8006054:	701a      	strb	r2, [r3, #0]
      break;
 8006056:	e00b      	b.n	8006070 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2202      	movs	r2, #2
 800605c:	701a      	strb	r2, [r3, #0]
      break;
 800605e:	e007      	b.n	8006070 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2203      	movs	r2, #3
 8006064:	701a      	strb	r2, [r3, #0]
      break;
 8006066:	e003      	b.n	8006070 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2210      	movs	r2, #16
 800606c:	701a      	strb	r2, [r3, #0]
      break;
 800606e:	bf00      	nop
  }
  return ret;
 8006070:	68fb      	ldr	r3, [r7, #12]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop

0800607c <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006088:	f107 0208 	add.w	r2, r7, #8
 800608c:	2301      	movs	r3, #1
 800608e:	2111      	movs	r1, #17
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff fd45 	bl	8005b20 <lsm6dso16is_read_reg>
 8006096:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d128      	bne.n	80060f0 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 80060a8:	2101      	movs	r1, #1
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff ff34 	bl	8005f18 <lsm6dso16is_gy_hm_mode_set>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e007      	b.n	80060ca <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 80060ba:	2100      	movs	r1, #0
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ff2b 	bl	8005f18 <lsm6dso16is_gy_hm_mode_set>
 80060c2:	4602      	mov	r2, r0
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	7a3b      	ldrb	r3, [r7, #8]
 80060d4:	f362 1307 	bfi	r3, r2, #4, #4
 80060d8:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80060da:	f107 0208 	add.w	r2, r7, #8
 80060de:	2301      	movs	r3, #1
 80060e0:	2111      	movs	r1, #17
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fd3a 	bl	8005b5c <lsm6dso16is_write_reg>
 80060e8:	4602      	mov	r2, r0
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80060f0:	68fb      	ldr	r3, [r7, #12]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006106:	f107 0210 	add.w	r2, r7, #16
 800610a:	2301      	movs	r3, #1
 800610c:	2111      	movs	r1, #17
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fd06 	bl	8005b20 <lsm6dso16is_read_reg>
 8006114:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8006116:	f107 020c 	add.w	r2, r7, #12
 800611a:	2301      	movs	r3, #1
 800611c:	2116      	movs	r1, #22
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff fcfe 	bl	8005b20 <lsm6dso16is_read_reg>
 8006124:	4602      	mov	r2, r0
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	4413      	add	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 800612c:	7b3b      	ldrb	r3, [r7, #12]
 800612e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006132:	b2db      	uxtb	r3, r3
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	7c3a      	ldrb	r2, [r7, #16]
 8006138:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	4313      	orrs	r3, r2
 8006140:	2b1a      	cmp	r3, #26
 8006142:	f200 808d 	bhi.w	8006260 <lsm6dso16is_gy_data_rate_get+0x164>
 8006146:	a201      	add	r2, pc, #4	@ (adr r2, 800614c <lsm6dso16is_gy_data_rate_get+0x50>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	080061b9 	.word	0x080061b9
 8006150:	080061c1 	.word	0x080061c1
 8006154:	080061c9 	.word	0x080061c9
 8006158:	080061d1 	.word	0x080061d1
 800615c:	080061d9 	.word	0x080061d9
 8006160:	080061e1 	.word	0x080061e1
 8006164:	080061e9 	.word	0x080061e9
 8006168:	080061f1 	.word	0x080061f1
 800616c:	080061f9 	.word	0x080061f9
 8006170:	08006201 	.word	0x08006201
 8006174:	08006209 	.word	0x08006209
 8006178:	08006261 	.word	0x08006261
 800617c:	08006261 	.word	0x08006261
 8006180:	08006261 	.word	0x08006261
 8006184:	08006261 	.word	0x08006261
 8006188:	08006261 	.word	0x08006261
 800618c:	08006261 	.word	0x08006261
 8006190:	08006211 	.word	0x08006211
 8006194:	08006219 	.word	0x08006219
 8006198:	08006221 	.word	0x08006221
 800619c:	08006229 	.word	0x08006229
 80061a0:	08006231 	.word	0x08006231
 80061a4:	08006239 	.word	0x08006239
 80061a8:	08006241 	.word	0x08006241
 80061ac:	08006249 	.word	0x08006249
 80061b0:	08006251 	.word	0x08006251
 80061b4:	08006259 	.word	0x08006259
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2200      	movs	r2, #0
 80061bc:	701a      	strb	r2, [r3, #0]
      break;
 80061be:	e053      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]
      break;
 80061c6:	e04f      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2202      	movs	r2, #2
 80061cc:	701a      	strb	r2, [r3, #0]
      break;
 80061ce:	e04b      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2203      	movs	r2, #3
 80061d4:	701a      	strb	r2, [r3, #0]
      break;
 80061d6:	e047      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2204      	movs	r2, #4
 80061dc:	701a      	strb	r2, [r3, #0]
      break;
 80061de:	e043      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2205      	movs	r2, #5
 80061e4:	701a      	strb	r2, [r3, #0]
      break;
 80061e6:	e03f      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2206      	movs	r2, #6
 80061ec:	701a      	strb	r2, [r3, #0]
      break;
 80061ee:	e03b      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2207      	movs	r2, #7
 80061f4:	701a      	strb	r2, [r3, #0]
      break;
 80061f6:	e037      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2208      	movs	r2, #8
 80061fc:	701a      	strb	r2, [r3, #0]
      break;
 80061fe:	e033      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2209      	movs	r2, #9
 8006204:	701a      	strb	r2, [r3, #0]
      break;
 8006206:	e02f      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	220a      	movs	r2, #10
 800620c:	701a      	strb	r2, [r3, #0]
      break;
 800620e:	e02b      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2211      	movs	r2, #17
 8006214:	701a      	strb	r2, [r3, #0]
      break;
 8006216:	e027      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2212      	movs	r2, #18
 800621c:	701a      	strb	r2, [r3, #0]
      break;
 800621e:	e023      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2213      	movs	r2, #19
 8006224:	701a      	strb	r2, [r3, #0]
      break;
 8006226:	e01f      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2214      	movs	r2, #20
 800622c:	701a      	strb	r2, [r3, #0]
      break;
 800622e:	e01b      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2215      	movs	r2, #21
 8006234:	701a      	strb	r2, [r3, #0]
      break;
 8006236:	e017      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2216      	movs	r2, #22
 800623c:	701a      	strb	r2, [r3, #0]
      break;
 800623e:	e013      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2217      	movs	r2, #23
 8006244:	701a      	strb	r2, [r3, #0]
      break;
 8006246:	e00f      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2218      	movs	r2, #24
 800624c:	701a      	strb	r2, [r3, #0]
      break;
 800624e:	e00b      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2219      	movs	r2, #25
 8006254:	701a      	strb	r2, [r3, #0]
      break;
 8006256:	e007      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	221a      	movs	r2, #26
 800625c:	701a      	strb	r2, [r3, #0]
      break;
 800625e:	e003      	b.n	8006268 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
      break;
 8006266:	bf00      	nop
  }

  return ret;
 8006268:	697b      	ldr	r3, [r7, #20]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop

08006274 <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006280:	f107 0208 	add.w	r2, r7, #8
 8006284:	2301      	movs	r3, #1
 8006286:	2112      	movs	r1, #18
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fc49 	bl	8005b20 <lsm6dso16is_read_reg>
 800628e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10f      	bne.n	80062b6 <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8006296:	78fb      	ldrb	r3, [r7, #3]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	b2da      	uxtb	r2, r3
 800629e:	7a3b      	ldrb	r3, [r7, #8]
 80062a0:	f362 0382 	bfi	r3, r2, #2, #1
 80062a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80062a6:	f107 0208 	add.w	r2, r7, #8
 80062aa:	2301      	movs	r3, #1
 80062ac:	2112      	movs	r1, #18
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fc54 	bl	8005b5c <lsm6dso16is_write_reg>
 80062b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80062b6:	68fb      	ldr	r3, [r7, #12]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80062cc:	f107 0208 	add.w	r2, r7, #8
 80062d0:	2301      	movs	r3, #1
 80062d2:	2112      	movs	r1, #18
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff fc23 	bl	8005b20 <lsm6dso16is_read_reg>
 80062da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10f      	bne.n	8006302 <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80062e2:	78fb      	ldrb	r3, [r7, #3]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	7a3b      	ldrb	r3, [r7, #8]
 80062ec:	f362 1386 	bfi	r3, r2, #6, #1
 80062f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80062f2:	f107 0208 	add.w	r2, r7, #8
 80062f6:	2301      	movs	r3, #1
 80062f8:	2112      	movs	r1, #18
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff fc2e 	bl	8005b5c <lsm6dso16is_write_reg>
 8006300:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006302:	68fb      	ldr	r3, [r7, #12]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 8006316:	f107 020c 	add.w	r2, r7, #12
 800631a:	2306      	movs	r3, #6
 800631c:	2122      	movs	r1, #34	@ 0x22
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fbfe 	bl	8005b20 <lsm6dso16is_read_reg>
 8006324:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006326:	7b7b      	ldrb	r3, [r7, #13]
 8006328:	b21a      	sxth	r2, r3
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006334:	b29b      	uxth	r3, r3
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	b29b      	uxth	r3, r3
 800633a:	7b3a      	ldrb	r2, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	b29b      	uxth	r3, r3
 8006340:	b21a      	sxth	r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006346:	7bfa      	ldrb	r2, [r7, #15]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	3302      	adds	r3, #2
 800634c:	b212      	sxth	r2, r2
 800634e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	3302      	adds	r3, #2
 8006354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006358:	b29b      	uxth	r3, r3
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	b29b      	uxth	r3, r3
 800635e:	7bba      	ldrb	r2, [r7, #14]
 8006360:	4413      	add	r3, r2
 8006362:	b29a      	uxth	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	3302      	adds	r3, #2
 8006368:	b212      	sxth	r2, r2
 800636a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800636c:	7c7a      	ldrb	r2, [r7, #17]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	3304      	adds	r3, #4
 8006372:	b212      	sxth	r2, r2
 8006374:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	3304      	adds	r3, #4
 800637a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800637e:	b29b      	uxth	r3, r3
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	b29b      	uxth	r3, r3
 8006384:	7c3a      	ldrb	r2, [r7, #16]
 8006386:	4413      	add	r3, r2
 8006388:	b29a      	uxth	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	3304      	adds	r3, #4
 800638e:	b212      	sxth	r2, r2
 8006390:	801a      	strh	r2, [r3, #0]

  return ret;
 8006392:	697b      	ldr	r3, [r7, #20]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 80063a6:	f107 020c 	add.w	r2, r7, #12
 80063aa:	2306      	movs	r3, #6
 80063ac:	2128      	movs	r1, #40	@ 0x28
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fbb6 	bl	8005b20 <lsm6dso16is_read_reg>
 80063b4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80063b6:	7b7b      	ldrb	r3, [r7, #13]
 80063b8:	b21a      	sxth	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	7b3a      	ldrb	r2, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	b21a      	sxth	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80063d6:	7bfa      	ldrb	r2, [r7, #15]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	3302      	adds	r3, #2
 80063dc:	b212      	sxth	r2, r2
 80063de:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	3302      	adds	r3, #2
 80063e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	7bba      	ldrb	r2, [r7, #14]
 80063f0:	4413      	add	r3, r2
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	3302      	adds	r3, #2
 80063f8:	b212      	sxth	r2, r2
 80063fa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80063fc:	7c7a      	ldrb	r2, [r7, #17]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	3304      	adds	r3, #4
 8006402:	b212      	sxth	r2, r2
 8006404:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	3304      	adds	r3, #4
 800640a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800640e:	b29b      	uxth	r3, r3
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	b29b      	uxth	r3, r3
 8006414:	7c3a      	ldrb	r2, [r7, #16]
 8006416:	4413      	add	r3, r2
 8006418:	b29a      	uxth	r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	3304      	adds	r3, #4
 800641e:	b212      	sxth	r2, r2
 8006420:	801a      	strh	r2, [r3, #0]

  return ret;
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	e05d      	b.n	8006504 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	7b1a      	ldrb	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	699a      	ldr	r2, [r3, #24]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a23      	ldr	r2, [pc, #140]	@ (8006510 <LSM6DSV16X_RegisterBusIO+0xe4>)
 8006484:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a22      	ldr	r2, [pc, #136]	@ (8006514 <LSM6DSV16X_RegisterBusIO+0xe8>)
 800648a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 80064a2:	f04f 33ff 	mov.w	r3, #4294967295
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	e02c      	b.n	8006504 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4798      	blx	r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 80064b6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e022      	b.n	8006504 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d11e      	bne.n	8006504 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d119      	bne.n	8006504 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 80064d0:	2304      	movs	r3, #4
 80064d2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	461a      	mov	r2, r3
 80064d8:	2112      	movs	r1, #18
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 ff18 	bl	8007310 <LSM6DSV16X_Write_Reg>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 80064e6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ea:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 80064ec:	7afb      	ldrb	r3, [r7, #11]
 80064ee:	461a      	mov	r2, r3
 80064f0:	2103      	movs	r1, #3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 ff0c 	bl	8007310 <LSM6DSV16X_Write_Reg>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006502:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006504:	68fb      	ldr	r3, [r7, #12]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	08007851 	.word	0x08007851
 8006514:	08007887 	.word	0x08007887

08006518 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8006520:	2100      	movs	r1, #0
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 ff0f 	bl	8007346 <LSM6DSV16X_Set_Mem_Bank>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 800652e:	f04f 33ff 	mov.w	r3, #4294967295
 8006532:	e070      	b.n	8006616 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3320      	adds	r3, #32
 8006538:	2101      	movs	r1, #1
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fcfe 	bl	8007f3c <lsm6dsv16x_auto_increment_set>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 8006546:	f04f 33ff 	mov.w	r3, #4294967295
 800654a:	e064      	b.n	8006616 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3320      	adds	r3, #32
 8006550:	2101      	movs	r1, #1
 8006552:	4618      	mov	r0, r3
 8006554:	f001 fd18 	bl	8007f88 <lsm6dsv16x_block_data_update_set>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800655e:	f04f 33ff 	mov.w	r3, #4294967295
 8006562:	e058      	b.n	8006616 <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3320      	adds	r3, #32
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f001 feae 	bl	80082cc <lsm6dsv16x_fifo_mode_set>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	e04c      	b.n	8006616 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2206      	movs	r2, #6
 8006580:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3320      	adds	r3, #32
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f001 fa14 	bl	80079b8 <lsm6dsv16x_xl_data_rate_set>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 8006596:	f04f 33ff 	mov.w	r3, #4294967295
 800659a:	e03c      	b.n	8006616 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3320      	adds	r3, #32
 80065a0:	2100      	movs	r1, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fd94 	bl	80080d0 <lsm6dsv16x_xl_full_scale_set>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	e030      	b.n	8006616 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2206      	movs	r2, #6
 80065b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3320      	adds	r3, #32
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 fb5a 	bl	8007c7c <lsm6dsv16x_gy_data_rate_set>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295
 80065d2:	e020      	b.n	8006616 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3320      	adds	r3, #32
 80065d8:	2104      	movs	r1, #4
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 fcfa 	bl	8007fd4 <lsm6dsv16x_gy_full_scale_set>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ea:	e014      	b.n	8006616 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 80065ec:	7b3b      	ldrb	r3, [r7, #12]
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3320      	adds	r3, #32
 80065f8:	7b39      	ldrb	r1, [r7, #12]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fe8c 	bl	8008318 <lsm6dsv16x_ah_qvar_mode_set>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295
 800660a:	e004      	b.n	8006616 <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f898 	bl	800675c <LSM6DSV16X_ACC_Disable>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 8006632:	f04f 33ff 	mov.w	r3, #4294967295
 8006636:	e025      	b.n	8006684 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fb6a 	bl	8006d12 <LSM6DSV16X_GYRO_Disable>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8006644:	f04f 33ff 	mov.w	r3, #4294967295
 8006648:	e01c      	b.n	8006684 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 800665a:	7b3b      	ldrb	r3, [r7, #12]
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3320      	adds	r3, #32
 8006666:	7b39      	ldrb	r1, [r7, #12]
 8006668:	4618      	mov	r0, r3
 800666a:	f001 fe55 	bl	8008318 <lsm6dsv16x_ah_qvar_mode_set>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 8006674:	f04f 33ff 	mov.w	r3, #4294967295
 8006678:	e004      	b.n	8006684 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3320      	adds	r3, #32
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f97a 	bl	8007996 <lsm6dsv16x_device_id_get>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ac:	e000      	b.n	80066b0 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2201      	movs	r2, #1
 80066c6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2201      	movs	r2, #1
 80066cc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2200      	movs	r2, #0
 80066d2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2201      	movs	r2, #1
 80066d8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80066e0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2210      	movs	r2, #16
 80066e6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	4a07      	ldr	r2, [pc, #28]	@ (8006710 <LSM6DSV16X_GetCapabilities+0x58>)
 80066f2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	4a06      	ldr	r2, [pc, #24]	@ (8006710 <LSM6DSV16X_GetCapabilities+0x58>)
 80066f8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	45f00000 	.word	0x45f00000

08006714 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	e014      	b.n	8006754 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f103 0220 	add.w	r2, r3, #32
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f001 f93d 	bl	80079b8 <lsm6dsv16x_xl_data_rate_set>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8006744:	f04f 33ff 	mov.w	r3, #4294967295
 8006748:	e004      	b.n	8006754 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e01f      	b.n	80067b2 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f103 0220 	add.w	r2, r3, #32
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3333      	adds	r3, #51	@ 0x33
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f001 f96c 	bl	8007a5c <lsm6dsv16x_xl_data_rate_get>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295
 800678e:	e010      	b.n	80067b2 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3320      	adds	r3, #32
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f001 f90e 	bl	80079b8 <lsm6dsv16x_xl_data_rate_set>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 80067a2:	f04f 33ff 	mov.w	r3, #4294967295
 80067a6:	e004      	b.n	80067b2 <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3320      	adds	r3, #32
 80067ce:	f107 020b 	add.w	r2, r7, #11
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 fca1 	bl	800811c <lsm6dsv16x_xl_full_scale_get>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80067e0:	f04f 33ff 	mov.w	r3, #4294967295
 80067e4:	e023      	b.n	800682e <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d81b      	bhi.n	8006824 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 80067ec:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006805 	.word	0x08006805
 80067f8:	0800680d 	.word	0x0800680d
 80067fc:	08006815 	.word	0x08006815
 8006800:	0800681d 	.word	0x0800681d
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	4a0c      	ldr	r2, [pc, #48]	@ (8006838 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 8006808:	601a      	str	r2, [r3, #0]
      break;
 800680a:	e00f      	b.n	800682c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	4a0b      	ldr	r2, [pc, #44]	@ (800683c <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 8006810:	601a      	str	r2, [r3, #0]
      break;
 8006812:	e00b      	b.n	800682c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	4a0a      	ldr	r2, [pc, #40]	@ (8006840 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 8006818:	601a      	str	r2, [r3, #0]
      break;
 800681a:	e007      	b.n	800682c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	4a09      	ldr	r2, [pc, #36]	@ (8006844 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 8006820:	601a      	str	r2, [r3, #0]
      break;
 8006822:	e003      	b.n	800682c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	60fb      	str	r3, [r7, #12]
      break;
 800682a:	bf00      	nop
  }

  return ret;
 800682c:	68fb      	ldr	r3, [r7, #12]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	3d79db23 	.word	0x3d79db23
 800683c:	3df9db23 	.word	0x3df9db23
 8006840:	3e79db23 	.word	0x3e79db23
 8006844:	3ef9db23 	.word	0x3ef9db23

08006848 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3320      	adds	r3, #32
 800685a:	f107 020b 	add.w	r2, r7, #11
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f001 f8fb 	bl	8007a5c <lsm6dsv16x_xl_data_rate_get>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800686c:	f04f 33ff 	mov.w	r3, #4294967295
 8006870:	e0ea      	b.n	8006a48 <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8006872:	7afb      	ldrb	r3, [r7, #11]
 8006874:	2b2c      	cmp	r3, #44	@ 0x2c
 8006876:	f200 80e2 	bhi.w	8006a3e <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 800687a:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	08006935 	.word	0x08006935
 8006884:	0800693f 	.word	0x0800693f
 8006888:	08006947 	.word	0x08006947
 800688c:	08006957 	.word	0x08006957
 8006890:	0800696f 	.word	0x0800696f
 8006894:	08006987 	.word	0x08006987
 8006898:	0800699f 	.word	0x0800699f
 800689c:	080069b7 	.word	0x080069b7
 80068a0:	080069cf 	.word	0x080069cf
 80068a4:	080069e7 	.word	0x080069e7
 80068a8:	080069ff 	.word	0x080069ff
 80068ac:	08006a17 	.word	0x08006a17
 80068b0:	08006a2f 	.word	0x08006a2f
 80068b4:	08006a3f 	.word	0x08006a3f
 80068b8:	08006a3f 	.word	0x08006a3f
 80068bc:	08006a3f 	.word	0x08006a3f
 80068c0:	08006a3f 	.word	0x08006a3f
 80068c4:	08006a3f 	.word	0x08006a3f
 80068c8:	08006a3f 	.word	0x08006a3f
 80068cc:	0800695f 	.word	0x0800695f
 80068d0:	08006977 	.word	0x08006977
 80068d4:	0800698f 	.word	0x0800698f
 80068d8:	080069a7 	.word	0x080069a7
 80068dc:	080069bf 	.word	0x080069bf
 80068e0:	080069d7 	.word	0x080069d7
 80068e4:	080069ef 	.word	0x080069ef
 80068e8:	08006a07 	.word	0x08006a07
 80068ec:	08006a1f 	.word	0x08006a1f
 80068f0:	08006a37 	.word	0x08006a37
 80068f4:	08006a3f 	.word	0x08006a3f
 80068f8:	08006a3f 	.word	0x08006a3f
 80068fc:	08006a3f 	.word	0x08006a3f
 8006900:	08006a3f 	.word	0x08006a3f
 8006904:	08006a3f 	.word	0x08006a3f
 8006908:	08006a3f 	.word	0x08006a3f
 800690c:	0800694f 	.word	0x0800694f
 8006910:	08006967 	.word	0x08006967
 8006914:	0800697f 	.word	0x0800697f
 8006918:	08006997 	.word	0x08006997
 800691c:	080069af 	.word	0x080069af
 8006920:	080069c7 	.word	0x080069c7
 8006924:	080069df 	.word	0x080069df
 8006928:	080069f7 	.word	0x080069f7
 800692c:	08006a0f 	.word	0x08006a0f
 8006930:	08006a27 	.word	0x08006a27
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
      break;
 800693c:	e083      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	4a43      	ldr	r2, [pc, #268]	@ (8006a50 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 8006942:	601a      	str	r2, [r3, #0]
      break;
 8006944:	e07f      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	4a42      	ldr	r2, [pc, #264]	@ (8006a54 <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 800694a:	601a      	str	r2, [r3, #0]
      break;
 800694c:	e07b      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	4a41      	ldr	r2, [pc, #260]	@ (8006a58 <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 8006952:	601a      	str	r2, [r3, #0]
      break;
 8006954:	e077      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	4a40      	ldr	r2, [pc, #256]	@ (8006a5c <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 800695a:	601a      	str	r2, [r3, #0]
      break;
 800695c:	e073      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	4a3f      	ldr	r2, [pc, #252]	@ (8006a60 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 8006962:	601a      	str	r2, [r3, #0]
      break;
 8006964:	e06f      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	4a3e      	ldr	r2, [pc, #248]	@ (8006a64 <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 800696a:	601a      	str	r2, [r3, #0]
      break;
 800696c:	e06b      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	4a3d      	ldr	r2, [pc, #244]	@ (8006a68 <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 8006972:	601a      	str	r2, [r3, #0]
      break;
 8006974:	e067      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	4a3c      	ldr	r2, [pc, #240]	@ (8006a6c <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 800697a:	601a      	str	r2, [r3, #0]
      break;
 800697c:	e063      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	4a3b      	ldr	r2, [pc, #236]	@ (8006a70 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 8006982:	601a      	str	r2, [r3, #0]
      break;
 8006984:	e05f      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	4a3a      	ldr	r2, [pc, #232]	@ (8006a74 <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 800698a:	601a      	str	r2, [r3, #0]
      break;
 800698c:	e05b      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	4a39      	ldr	r2, [pc, #228]	@ (8006a78 <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 8006992:	601a      	str	r2, [r3, #0]
      break;
 8006994:	e057      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	4a38      	ldr	r2, [pc, #224]	@ (8006a7c <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 800699a:	601a      	str	r2, [r3, #0]
      break;
 800699c:	e053      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	4a37      	ldr	r2, [pc, #220]	@ (8006a80 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 80069a2:	601a      	str	r2, [r3, #0]
      break;
 80069a4:	e04f      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	4a36      	ldr	r2, [pc, #216]	@ (8006a84 <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 80069aa:	601a      	str	r2, [r3, #0]
      break;
 80069ac:	e04b      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	4a35      	ldr	r2, [pc, #212]	@ (8006a88 <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 80069b2:	601a      	str	r2, [r3, #0]
      break;
 80069b4:	e047      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	4a34      	ldr	r2, [pc, #208]	@ (8006a8c <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 80069ba:	601a      	str	r2, [r3, #0]
      break;
 80069bc:	e043      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	4a33      	ldr	r2, [pc, #204]	@ (8006a90 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 80069c2:	601a      	str	r2, [r3, #0]
      break;
 80069c4:	e03f      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	4a32      	ldr	r2, [pc, #200]	@ (8006a94 <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 80069ca:	601a      	str	r2, [r3, #0]
      break;
 80069cc:	e03b      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	4a31      	ldr	r2, [pc, #196]	@ (8006a98 <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 80069d2:	601a      	str	r2, [r3, #0]
      break;
 80069d4:	e037      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	4a30      	ldr	r2, [pc, #192]	@ (8006a9c <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 80069da:	601a      	str	r2, [r3, #0]
      break;
 80069dc:	e033      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa0 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 80069e2:	601a      	str	r2, [r3, #0]
      break;
 80069e4:	e02f      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	4a2e      	ldr	r2, [pc, #184]	@ (8006aa4 <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 80069ea:	601a      	str	r2, [r3, #0]
      break;
 80069ec:	e02b      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	4a2d      	ldr	r2, [pc, #180]	@ (8006aa8 <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 80069f2:	601a      	str	r2, [r3, #0]
      break;
 80069f4:	e027      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	4a2c      	ldr	r2, [pc, #176]	@ (8006aac <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 80069fa:	601a      	str	r2, [r3, #0]
      break;
 80069fc:	e023      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab0 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 8006a02:	601a      	str	r2, [r3, #0]
      break;
 8006a04:	e01f      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab4 <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 8006a0a:	601a      	str	r2, [r3, #0]
      break;
 8006a0c:	e01b      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	4a29      	ldr	r2, [pc, #164]	@ (8006ab8 <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 8006a12:	601a      	str	r2, [r3, #0]
      break;
 8006a14:	e017      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	4a28      	ldr	r2, [pc, #160]	@ (8006abc <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 8006a1a:	601a      	str	r2, [r3, #0]
      break;
 8006a1c:	e013      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	4a27      	ldr	r2, [pc, #156]	@ (8006ac0 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 8006a22:	601a      	str	r2, [r3, #0]
      break;
 8006a24:	e00f      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	4a26      	ldr	r2, [pc, #152]	@ (8006ac4 <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 8006a2a:	601a      	str	r2, [r3, #0]
      break;
 8006a2c:	e00b      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	4a25      	ldr	r2, [pc, #148]	@ (8006ac8 <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 8006a32:	601a      	str	r2, [r3, #0]
      break;
 8006a34:	e007      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	4a24      	ldr	r2, [pc, #144]	@ (8006acc <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 8006a3a:	601a      	str	r2, [r3, #0]
      break;
 8006a3c:	e003      	b.n	8006a46 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a42:	60fb      	str	r3, [r7, #12]
      break;
 8006a44:	bf00      	nop
  }

  return ret;
 8006a46:	68fb      	ldr	r3, [r7, #12]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	3ff00000 	.word	0x3ff00000
 8006a54:	40f00000 	.word	0x40f00000
 8006a58:	41480000 	.word	0x41480000
 8006a5c:	41700000 	.word	0x41700000
 8006a60:	417a0000 	.word	0x417a0000
 8006a64:	41c80000 	.word	0x41c80000
 8006a68:	41f00000 	.word	0x41f00000
 8006a6c:	41fa0000 	.word	0x41fa0000
 8006a70:	42480000 	.word	0x42480000
 8006a74:	42700000 	.word	0x42700000
 8006a78:	427a0000 	.word	0x427a0000
 8006a7c:	42c80000 	.word	0x42c80000
 8006a80:	42f00000 	.word	0x42f00000
 8006a84:	42fa0000 	.word	0x42fa0000
 8006a88:	43480000 	.word	0x43480000
 8006a8c:	43700000 	.word	0x43700000
 8006a90:	437a0000 	.word	0x437a0000
 8006a94:	43c80000 	.word	0x43c80000
 8006a98:	43f00000 	.word	0x43f00000
 8006a9c:	43fa0000 	.word	0x43fa0000
 8006aa0:	44480000 	.word	0x44480000
 8006aa4:	44700000 	.word	0x44700000
 8006aa8:	447a0000 	.word	0x447a0000
 8006aac:	44c80000 	.word	0x44c80000
 8006ab0:	44f00000 	.word	0x44f00000
 8006ab4:	44fa0000 	.word	0x44fa0000
 8006ab8:	45480000 	.word	0x45480000
 8006abc:	45700000 	.word	0x45700000
 8006ac0:	457a0000 	.word	0x457a0000
 8006ac4:	45c80000 	.word	0x45c80000
 8006ac8:	45f00000 	.word	0x45f00000
 8006acc:	45fa0000 	.word	0x45fa0000

08006ad0 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d106      	bne.n	8006af4 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006ae6:	ed97 0a00 	vldr	s0, [r7]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fc52 	bl	8007394 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 8006af0:	4603      	mov	r3, r0
 8006af2:	e005      	b.n	8006b00 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006af4:	ed97 0a00 	vldr	s0, [r7]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fced 	bl	80074d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 8006afe:	4603      	mov	r3, r0
  }
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3320      	adds	r3, #32
 8006b1a:	f107 020b 	add.w	r2, r7, #11
 8006b1e:	4611      	mov	r1, r2
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 fafb 	bl	800811c <lsm6dsv16x_xl_full_scale_get>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8006b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b30:	e023      	b.n	8006b7a <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d81b      	bhi.n	8006b70 <LSM6DSV16X_ACC_GetFullScale+0x68>
 8006b38:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b51 	.word	0x08006b51
 8006b44:	08006b59 	.word	0x08006b59
 8006b48:	08006b61 	.word	0x08006b61
 8006b4c:	08006b69 	.word	0x08006b69
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2202      	movs	r2, #2
 8006b54:	601a      	str	r2, [r3, #0]
      break;
 8006b56:	e00f      	b.n	8006b78 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2204      	movs	r2, #4
 8006b5c:	601a      	str	r2, [r3, #0]
      break;
 8006b5e:	e00b      	b.n	8006b78 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2208      	movs	r2, #8
 8006b64:	601a      	str	r2, [r3, #0]
      break;
 8006b66:	e007      	b.n	8006b78 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2210      	movs	r2, #16
 8006b6c:	601a      	str	r2, [r3, #0]
      break;
 8006b6e:	e003      	b.n	8006b78 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8006b70:	f04f 33ff 	mov.w	r3, #4294967295
 8006b74:	60fb      	str	r3, [r7, #12]
      break;
 8006b76:	bf00      	nop
  }

  return ret;
 8006b78:	68fb      	ldr	r3, [r7, #12]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop

08006b84 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	dd0b      	ble.n	8006bac <LSM6DSV16X_ACC_SetFullScale+0x28>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	dd06      	ble.n	8006ba8 <LSM6DSV16X_ACC_SetFullScale+0x24>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	dc01      	bgt.n	8006ba4 <LSM6DSV16X_ACC_SetFullScale+0x20>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e004      	b.n	8006bae <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e002      	b.n	8006bae <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8006bac:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 8006bae:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3320      	adds	r3, #32
 8006bb4:	7bfa      	ldrb	r2, [r7, #15]
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 fa89 	bl	80080d0 <lsm6dsv16x_xl_full_scale_set>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 8006bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc8:	e000      	b.n	8006bcc <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3320      	adds	r3, #32
 8006be2:	f107 0208 	add.w	r2, r7, #8
 8006be6:	4611      	mov	r1, r2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 fb22 	bl	8008232 <lsm6dsv16x_acceleration_raw_get>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8006bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf8:	e00c      	b.n	8006c14 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8006bfa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006c02:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006c0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8006c26:	f04f 0300 	mov.w	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3320      	adds	r3, #32
 8006c30:	f107 0210 	add.w	r2, r7, #16
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 fafb 	bl	8008232 <lsm6dsv16x_acceleration_raw_get>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8006c42:	f04f 33ff 	mov.w	r3, #4294967295
 8006c46:	e03c      	b.n	8006cc2 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8006c48:	f107 030c 	add.w	r3, r7, #12
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff fdb4 	bl	80067bc <LSM6DSV16X_ACC_GetSensitivity>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5e:	e030      	b.n	8006cc2 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006c60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c78:	ee17 2a90 	vmov	r2, s15
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006c80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c84:	ee07 3a90 	vmov	s15, r3
 8006c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c98:	ee17 2a90 	vmov	r2, s15
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006ca0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cb8:	ee17 2a90 	vmov	r2, s15
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e014      	b.n	8006d0a <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f103 0220 	add.w	r2, r3, #32
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f000 ffc4 	bl	8007c7c <lsm6dsv16x_gy_data_rate_set>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfe:	e004      	b.n	8006d0a <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	e01f      	b.n	8006d68 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f103 0220 	add.w	r2, r3, #32
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	3334      	adds	r3, #52	@ 0x34
 8006d32:	4619      	mov	r1, r3
 8006d34:	4610      	mov	r0, r2
 8006d36:	f000 fff1 	bl	8007d1c <lsm6dsv16x_gy_data_rate_get>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8006d40:	f04f 33ff 	mov.w	r3, #4294967295
 8006d44:	e010      	b.n	8006d68 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3320      	adds	r3, #32
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 ff95 	bl	8007c7c <lsm6dsv16x_gy_data_rate_set>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8006d58:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5c:	e004      	b.n	8006d68 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3320      	adds	r3, #32
 8006d82:	f107 020b 	add.w	r2, r7, #11
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 f949 	bl	8008020 <lsm6dsv16x_gy_full_scale_get>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8006d94:	f04f 33ff 	mov.w	r3, #4294967295
 8006d98:	e03d      	b.n	8006e16 <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
 8006d9c:	2b0c      	cmp	r3, #12
 8006d9e:	d835      	bhi.n	8006e0c <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 8006da0:	a201      	add	r2, pc, #4	@ (adr r2, 8006da8 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006ddd 	.word	0x08006ddd
 8006dac:	08006de5 	.word	0x08006de5
 8006db0:	08006ded 	.word	0x08006ded
 8006db4:	08006df5 	.word	0x08006df5
 8006db8:	08006dfd 	.word	0x08006dfd
 8006dbc:	08006e0d 	.word	0x08006e0d
 8006dc0:	08006e0d 	.word	0x08006e0d
 8006dc4:	08006e0d 	.word	0x08006e0d
 8006dc8:	08006e0d 	.word	0x08006e0d
 8006dcc:	08006e0d 	.word	0x08006e0d
 8006dd0:	08006e0d 	.word	0x08006e0d
 8006dd4:	08006e0d 	.word	0x08006e0d
 8006dd8:	08006e05 	.word	0x08006e05
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	4a10      	ldr	r2, [pc, #64]	@ (8006e20 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8006de0:	601a      	str	r2, [r3, #0]
      break;
 8006de2:	e017      	b.n	8006e14 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	4a0f      	ldr	r2, [pc, #60]	@ (8006e24 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 8006de8:	601a      	str	r2, [r3, #0]
      break;
 8006dea:	e013      	b.n	8006e14 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	4a0e      	ldr	r2, [pc, #56]	@ (8006e28 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 8006df0:	601a      	str	r2, [r3, #0]
      break;
 8006df2:	e00f      	b.n	8006e14 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	4a0d      	ldr	r2, [pc, #52]	@ (8006e2c <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 8006df8:	601a      	str	r2, [r3, #0]
      break;
 8006dfa:	e00b      	b.n	8006e14 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8006e30 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 8006e00:	601a      	str	r2, [r3, #0]
      break;
 8006e02:	e007      	b.n	8006e14 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	4a0b      	ldr	r2, [pc, #44]	@ (8006e34 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8006e08:	601a      	str	r2, [r3, #0]
      break;
 8006e0a:	e003      	b.n	8006e14 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 8006e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e10:	60fb      	str	r3, [r7, #12]
      break;
 8006e12:	bf00      	nop
  }

  return ret;
 8006e14:	68fb      	ldr	r3, [r7, #12]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	408c0000 	.word	0x408c0000
 8006e24:	410c0000 	.word	0x410c0000
 8006e28:	418c0000 	.word	0x418c0000
 8006e2c:	420c0000 	.word	0x420c0000
 8006e30:	428c0000 	.word	0x428c0000
 8006e34:	430c0000 	.word	0x430c0000

08006e38 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3320      	adds	r3, #32
 8006e4a:	f107 020b 	add.w	r2, r7, #11
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 ff63 	bl	8007d1c <lsm6dsv16x_gy_data_rate_get>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e60:	e0ea      	b.n	8007038 <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	2b2c      	cmp	r3, #44	@ 0x2c
 8006e66:	f200 80e2 	bhi.w	800702e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 8006e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006f25 	.word	0x08006f25
 8006e74:	08006f2f 	.word	0x08006f2f
 8006e78:	08006f37 	.word	0x08006f37
 8006e7c:	08006f47 	.word	0x08006f47
 8006e80:	08006f5f 	.word	0x08006f5f
 8006e84:	08006f77 	.word	0x08006f77
 8006e88:	08006f8f 	.word	0x08006f8f
 8006e8c:	08006fa7 	.word	0x08006fa7
 8006e90:	08006fbf 	.word	0x08006fbf
 8006e94:	08006fd7 	.word	0x08006fd7
 8006e98:	08006fef 	.word	0x08006fef
 8006e9c:	08007007 	.word	0x08007007
 8006ea0:	0800701f 	.word	0x0800701f
 8006ea4:	0800702f 	.word	0x0800702f
 8006ea8:	0800702f 	.word	0x0800702f
 8006eac:	0800702f 	.word	0x0800702f
 8006eb0:	0800702f 	.word	0x0800702f
 8006eb4:	0800702f 	.word	0x0800702f
 8006eb8:	0800702f 	.word	0x0800702f
 8006ebc:	08006f4f 	.word	0x08006f4f
 8006ec0:	08006f67 	.word	0x08006f67
 8006ec4:	08006f7f 	.word	0x08006f7f
 8006ec8:	08006f97 	.word	0x08006f97
 8006ecc:	08006faf 	.word	0x08006faf
 8006ed0:	08006fc7 	.word	0x08006fc7
 8006ed4:	08006fdf 	.word	0x08006fdf
 8006ed8:	08006ff7 	.word	0x08006ff7
 8006edc:	0800700f 	.word	0x0800700f
 8006ee0:	08007027 	.word	0x08007027
 8006ee4:	0800702f 	.word	0x0800702f
 8006ee8:	0800702f 	.word	0x0800702f
 8006eec:	0800702f 	.word	0x0800702f
 8006ef0:	0800702f 	.word	0x0800702f
 8006ef4:	0800702f 	.word	0x0800702f
 8006ef8:	0800702f 	.word	0x0800702f
 8006efc:	08006f3f 	.word	0x08006f3f
 8006f00:	08006f57 	.word	0x08006f57
 8006f04:	08006f6f 	.word	0x08006f6f
 8006f08:	08006f87 	.word	0x08006f87
 8006f0c:	08006f9f 	.word	0x08006f9f
 8006f10:	08006fb7 	.word	0x08006fb7
 8006f14:	08006fcf 	.word	0x08006fcf
 8006f18:	08006fe7 	.word	0x08006fe7
 8006f1c:	08006fff 	.word	0x08006fff
 8006f20:	08007017 	.word	0x08007017
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
      break;
 8006f2c:	e083      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	4a43      	ldr	r2, [pc, #268]	@ (8007040 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 8006f32:	601a      	str	r2, [r3, #0]
      break;
 8006f34:	e07f      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	4a42      	ldr	r2, [pc, #264]	@ (8007044 <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 8006f3a:	601a      	str	r2, [r3, #0]
      break;
 8006f3c:	e07b      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	4a41      	ldr	r2, [pc, #260]	@ (8007048 <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 8006f42:	601a      	str	r2, [r3, #0]
      break;
 8006f44:	e077      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	4a40      	ldr	r2, [pc, #256]	@ (800704c <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 8006f4a:	601a      	str	r2, [r3, #0]
      break;
 8006f4c:	e073      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	4a3f      	ldr	r2, [pc, #252]	@ (8007050 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 8006f52:	601a      	str	r2, [r3, #0]
      break;
 8006f54:	e06f      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	4a3e      	ldr	r2, [pc, #248]	@ (8007054 <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 8006f5a:	601a      	str	r2, [r3, #0]
      break;
 8006f5c:	e06b      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	4a3d      	ldr	r2, [pc, #244]	@ (8007058 <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 8006f62:	601a      	str	r2, [r3, #0]
      break;
 8006f64:	e067      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	4a3c      	ldr	r2, [pc, #240]	@ (800705c <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 8006f6a:	601a      	str	r2, [r3, #0]
      break;
 8006f6c:	e063      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	4a3b      	ldr	r2, [pc, #236]	@ (8007060 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 8006f72:	601a      	str	r2, [r3, #0]
      break;
 8006f74:	e05f      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	4a3a      	ldr	r2, [pc, #232]	@ (8007064 <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 8006f7a:	601a      	str	r2, [r3, #0]
      break;
 8006f7c:	e05b      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	4a39      	ldr	r2, [pc, #228]	@ (8007068 <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 8006f82:	601a      	str	r2, [r3, #0]
      break;
 8006f84:	e057      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	4a38      	ldr	r2, [pc, #224]	@ (800706c <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 8006f8a:	601a      	str	r2, [r3, #0]
      break;
 8006f8c:	e053      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	4a37      	ldr	r2, [pc, #220]	@ (8007070 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 8006f92:	601a      	str	r2, [r3, #0]
      break;
 8006f94:	e04f      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	4a36      	ldr	r2, [pc, #216]	@ (8007074 <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 8006f9a:	601a      	str	r2, [r3, #0]
      break;
 8006f9c:	e04b      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	4a35      	ldr	r2, [pc, #212]	@ (8007078 <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 8006fa2:	601a      	str	r2, [r3, #0]
      break;
 8006fa4:	e047      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	4a34      	ldr	r2, [pc, #208]	@ (800707c <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 8006faa:	601a      	str	r2, [r3, #0]
      break;
 8006fac:	e043      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	4a33      	ldr	r2, [pc, #204]	@ (8007080 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 8006fb2:	601a      	str	r2, [r3, #0]
      break;
 8006fb4:	e03f      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	4a32      	ldr	r2, [pc, #200]	@ (8007084 <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 8006fba:	601a      	str	r2, [r3, #0]
      break;
 8006fbc:	e03b      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	4a31      	ldr	r2, [pc, #196]	@ (8007088 <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 8006fc2:	601a      	str	r2, [r3, #0]
      break;
 8006fc4:	e037      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	4a30      	ldr	r2, [pc, #192]	@ (800708c <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 8006fca:	601a      	str	r2, [r3, #0]
      break;
 8006fcc:	e033      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8007090 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 8006fd2:	601a      	str	r2, [r3, #0]
      break;
 8006fd4:	e02f      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8007094 <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 8006fda:	601a      	str	r2, [r3, #0]
      break;
 8006fdc:	e02b      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8007098 <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 8006fe2:	601a      	str	r2, [r3, #0]
      break;
 8006fe4:	e027      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800709c <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 8006fea:	601a      	str	r2, [r3, #0]
      break;
 8006fec:	e023      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80070a0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 8006ff2:	601a      	str	r2, [r3, #0]
      break;
 8006ff4:	e01f      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80070a4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 8006ffa:	601a      	str	r2, [r3, #0]
      break;
 8006ffc:	e01b      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	4a29      	ldr	r2, [pc, #164]	@ (80070a8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 8007002:	601a      	str	r2, [r3, #0]
      break;
 8007004:	e017      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	4a28      	ldr	r2, [pc, #160]	@ (80070ac <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 800700a:	601a      	str	r2, [r3, #0]
      break;
 800700c:	e013      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	4a27      	ldr	r2, [pc, #156]	@ (80070b0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 8007012:	601a      	str	r2, [r3, #0]
      break;
 8007014:	e00f      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	4a26      	ldr	r2, [pc, #152]	@ (80070b4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 800701a:	601a      	str	r2, [r3, #0]
      break;
 800701c:	e00b      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	4a25      	ldr	r2, [pc, #148]	@ (80070b8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 8007022:	601a      	str	r2, [r3, #0]
      break;
 8007024:	e007      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	4a24      	ldr	r2, [pc, #144]	@ (80070bc <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 800702a:	601a      	str	r2, [r3, #0]
      break;
 800702c:	e003      	b.n	8007036 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 800702e:	f04f 33ff 	mov.w	r3, #4294967295
 8007032:	60fb      	str	r3, [r7, #12]
      break;
 8007034:	bf00      	nop
  }

  return ret;
 8007036:	68fb      	ldr	r3, [r7, #12]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	3ff00000 	.word	0x3ff00000
 8007044:	40f00000 	.word	0x40f00000
 8007048:	41480000 	.word	0x41480000
 800704c:	41700000 	.word	0x41700000
 8007050:	417a0000 	.word	0x417a0000
 8007054:	41c80000 	.word	0x41c80000
 8007058:	41f00000 	.word	0x41f00000
 800705c:	41fa0000 	.word	0x41fa0000
 8007060:	42480000 	.word	0x42480000
 8007064:	42700000 	.word	0x42700000
 8007068:	427a0000 	.word	0x427a0000
 800706c:	42c80000 	.word	0x42c80000
 8007070:	42f00000 	.word	0x42f00000
 8007074:	42fa0000 	.word	0x42fa0000
 8007078:	43480000 	.word	0x43480000
 800707c:	43700000 	.word	0x43700000
 8007080:	437a0000 	.word	0x437a0000
 8007084:	43c80000 	.word	0x43c80000
 8007088:	43f00000 	.word	0x43f00000
 800708c:	43fa0000 	.word	0x43fa0000
 8007090:	44480000 	.word	0x44480000
 8007094:	44700000 	.word	0x44700000
 8007098:	447a0000 	.word	0x447a0000
 800709c:	44c80000 	.word	0x44c80000
 80070a0:	44f00000 	.word	0x44f00000
 80070a4:	44fa0000 	.word	0x44fa0000
 80070a8:	45480000 	.word	0x45480000
 80070ac:	45700000 	.word	0x45700000
 80070b0:	457a0000 	.word	0x457a0000
 80070b4:	45c80000 	.word	0x45c80000
 80070b8:	45f00000 	.word	0x45f00000
 80070bc:	45fa0000 	.word	0x45fa0000

080070c0 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d106      	bne.n	80070e4 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80070d6:	ed97 0a00 	vldr	s0, [r7]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa94 	bl	8007608 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 80070e0:	4603      	mov	r3, r0
 80070e2:	e005      	b.n	80070f0 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80070e4:	ed97 0a00 	vldr	s0, [r7]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb23 	bl	8007734 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 80070ee:	4603      	mov	r3, r0
  }
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3320      	adds	r3, #32
 800710a:	f107 020b 	add.w	r2, r7, #11
 800710e:	4611      	mov	r1, r2
 8007110:	4618      	mov	r0, r3
 8007112:	f000 ff85 	bl	8008020 <lsm6dsv16x_gy_full_scale_get>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800711c:	f04f 33ff 	mov.w	r3, #4294967295
 8007120:	e041      	b.n	80071a6 <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d839      	bhi.n	800719c <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8007128:	a201      	add	r2, pc, #4	@ (adr r2, 8007130 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007165 	.word	0x08007165
 8007134:	0800716d 	.word	0x0800716d
 8007138:	08007175 	.word	0x08007175
 800713c:	0800717f 	.word	0x0800717f
 8007140:	08007189 	.word	0x08007189
 8007144:	0800719d 	.word	0x0800719d
 8007148:	0800719d 	.word	0x0800719d
 800714c:	0800719d 	.word	0x0800719d
 8007150:	0800719d 	.word	0x0800719d
 8007154:	0800719d 	.word	0x0800719d
 8007158:	0800719d 	.word	0x0800719d
 800715c:	0800719d 	.word	0x0800719d
 8007160:	08007193 	.word	0x08007193
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	227d      	movs	r2, #125	@ 0x7d
 8007168:	601a      	str	r2, [r3, #0]
      break;
 800716a:	e01b      	b.n	80071a4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	22fa      	movs	r2, #250	@ 0xfa
 8007170:	601a      	str	r2, [r3, #0]
      break;
 8007172:	e017      	b.n	80071a4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800717a:	601a      	str	r2, [r3, #0]
      break;
 800717c:	e012      	b.n	80071a4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007184:	601a      	str	r2, [r3, #0]
      break;
 8007186:	e00d      	b.n	80071a4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800718e:	601a      	str	r2, [r3, #0]
      break;
 8007190:	e008      	b.n	80071a4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007198:	601a      	str	r2, [r3, #0]
      break;
 800719a:	e003      	b.n	80071a4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
 80071a0:	60fb      	str	r3, [r7, #12]
      break;
 80071a2:	bf00      	nop
  }

  return ret;
 80071a4:	68fb      	ldr	r3, [r7, #12]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop

080071b0 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b7d      	cmp	r3, #125	@ 0x7d
 80071be:	dd18      	ble.n	80071f2 <LSM6DSV16X_GYRO_SetFullScale+0x42>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2bfa      	cmp	r3, #250	@ 0xfa
 80071c4:	dd13      	ble.n	80071ee <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80071cc:	dd0d      	ble.n	80071ea <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071d4:	dd07      	ble.n	80071e6 <LSM6DSV16X_GYRO_SetFullScale+0x36>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80071dc:	dc01      	bgt.n	80071e2 <LSM6DSV16X_GYRO_SetFullScale+0x32>
 80071de:	2304      	movs	r3, #4
 80071e0:	e008      	b.n	80071f4 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 80071e2:	230c      	movs	r3, #12
 80071e4:	e006      	b.n	80071f4 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 80071e6:	2303      	movs	r3, #3
 80071e8:	e004      	b.n	80071f4 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e002      	b.n	80071f4 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 80071f2:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 80071f4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3320      	adds	r3, #32
 80071fa:	7bfa      	ldrb	r2, [r7, #15]
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fee8 	bl	8007fd4 <lsm6dsv16x_gy_full_scale_set>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 800720a:	f04f 33ff 	mov.w	r3, #4294967295
 800720e:	e000      	b.n	8007212 <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3320      	adds	r3, #32
 8007228:	f107 0208 	add.w	r2, r7, #8
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f000 ffb2 	bl	8008198 <lsm6dsv16x_angular_rate_raw_get>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	e00c      	b.n	800725a <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8007240:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007248:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007250:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b086      	sub	sp, #24
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3320      	adds	r3, #32
 8007276:	f107 0210 	add.w	r2, r7, #16
 800727a:	4611      	mov	r1, r2
 800727c:	4618      	mov	r0, r3
 800727e:	f000 ff8b 	bl	8008198 <lsm6dsv16x_angular_rate_raw_get>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8007288:	f04f 33ff 	mov.w	r3, #4294967295
 800728c:	e03c      	b.n	8007308 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 800728e:	f107 030c 	add.w	r3, r7, #12
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff fd6b 	bl	8006d70 <LSM6DSV16X_GYRO_GetSensitivity>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 80072a0:	f04f 33ff 	mov.w	r3, #4294967295
 80072a4:	e030      	b.n	8007308 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80072a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072be:	ee17 2a90 	vmov	r2, s15
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80072c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80072d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072de:	ee17 2a90 	vmov	r2, s15
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80072e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80072f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072fe:	ee17 2a90 	vmov	r2, s15
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
 800731c:	4613      	mov	r3, r2
 800731e:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f103 0020 	add.w	r0, r3, #32
 8007326:	1cba      	adds	r2, r7, #2
 8007328:	78f9      	ldrb	r1, [r7, #3]
 800732a:	2301      	movs	r3, #1
 800732c:	f000 fae4 	bl	80078f8 <lsm6dsv16x_write_reg>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8007336:	f04f 33ff 	mov.w	r3, #4294967295
 800733a:	e000      	b.n	800733e <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d006      	beq.n	800736a <LSM6DSV16X_Set_Mem_Bank+0x24>
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	2b02      	cmp	r3, #2
 8007360:	d101      	bne.n	8007366 <LSM6DSV16X_Set_Mem_Bank+0x20>
 8007362:	2302      	movs	r3, #2
 8007364:	e002      	b.n	800736c <LSM6DSV16X_Set_Mem_Bank+0x26>
 8007366:	2300      	movs	r3, #0
 8007368:	e000      	b.n	800736c <LSM6DSV16X_Set_Mem_Bank+0x26>
 800736a:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 800736c:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3320      	adds	r3, #32
 8007372:	7afa      	ldrb	r2, [r7, #11]
 8007374:	4611      	mov	r1, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fadc 	bl	8007934 <lsm6dsv16x_mem_bank_set>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 8007382:	f04f 33ff 	mov.w	r3, #4294967295
 8007386:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007388:	68fb      	ldr	r3, [r7, #12]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80073a0:	edd7 7a00 	vldr	s15, [r7]
 80073a4:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 80073a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b0:	d801      	bhi.n	80073b6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e06e      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80073b6:	edd7 7a00 	vldr	s15, [r7]
 80073ba:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80073be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c6:	d801      	bhi.n	80073cc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e063      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80073cc:	edd7 7a00 	vldr	s15, [r7]
 80073d0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80073d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073dc:	d801      	bhi.n	80073e2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80073de:	2303      	movs	r3, #3
 80073e0:	e058      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80073e2:	edd7 7a00 	vldr	s15, [r7]
 80073e6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80073ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f2:	d801      	bhi.n	80073f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 80073f4:	2304      	movs	r3, #4
 80073f6:	e04d      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80073f8:	edd7 7a00 	vldr	s15, [r7]
 80073fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80074bc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8007400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007408:	d801      	bhi.n	800740e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800740a:	2305      	movs	r3, #5
 800740c:	e042      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800740e:	edd7 7a00 	vldr	s15, [r7]
 8007412:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80074c0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8007416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800741a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741e:	d801      	bhi.n	8007424 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8007420:	2306      	movs	r3, #6
 8007422:	e037      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007424:	edd7 7a00 	vldr	s15, [r7]
 8007428:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80074c4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 800742c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	d801      	bhi.n	800743a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8007436:	2307      	movs	r3, #7
 8007438:	e02c      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800743a:	edd7 7a00 	vldr	s15, [r7]
 800743e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80074c8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8007442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744a:	d801      	bhi.n	8007450 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800744c:	2308      	movs	r3, #8
 800744e:	e021      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007450:	edd7 7a00 	vldr	s15, [r7]
 8007454:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80074cc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8007458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800745c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007460:	d801      	bhi.n	8007466 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007462:	2309      	movs	r3, #9
 8007464:	e016      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007466:	edd7 7a00 	vldr	s15, [r7]
 800746a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80074d0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800746e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007476:	d801      	bhi.n	800747c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8007478:	230a      	movs	r3, #10
 800747a:	e00b      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800747c:	edd7 7a00 	vldr	s15, [r7]
 8007480:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80074d4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8007484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800748c:	d801      	bhi.n	8007492 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 800748e:	230b      	movs	r3, #11
 8007490:	e000      	b.n	8007494 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007492:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8007494:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3320      	adds	r3, #32
 800749a:	7bfa      	ldrb	r2, [r7, #15]
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fa8a 	bl	80079b8 <lsm6dsv16x_xl_data_rate_set>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
 80074ae:	e000      	b.n	80074b2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	42700000 	.word	0x42700000
 80074c0:	42f00000 	.word	0x42f00000
 80074c4:	43700000 	.word	0x43700000
 80074c8:	43f00000 	.word	0x43f00000
 80074cc:	44700000 	.word	0x44700000
 80074d0:	44f00000 	.word	0x44f00000
 80074d4:	45700000 	.word	0x45700000

080074d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80074e4:	edd7 7a00 	vldr	s15, [r7]
 80074e8:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 80074ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f4:	d801      	bhi.n	80074fa <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e06e      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80074fa:	edd7 7a00 	vldr	s15, [r7]
 80074fe:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8007502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750a:	d801      	bhi.n	8007510 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 800750c:	2302      	movs	r3, #2
 800750e:	e063      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007510:	edd7 7a00 	vldr	s15, [r7]
 8007514:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8007518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800751c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007520:	d801      	bhi.n	8007526 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8007522:	2303      	movs	r3, #3
 8007524:	e058      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007526:	edd7 7a00 	vldr	s15, [r7]
 800752a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800752e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007536:	d801      	bhi.n	800753c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007538:	2304      	movs	r3, #4
 800753a:	e04d      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800753c:	edd7 7a00 	vldr	s15, [r7]
 8007540:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80075ec <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8007544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754c:	d801      	bhi.n	8007552 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800754e:	2305      	movs	r3, #5
 8007550:	e042      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007552:	edd7 7a00 	vldr	s15, [r7]
 8007556:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80075f0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 800755a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800755e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007562:	d801      	bhi.n	8007568 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007564:	2306      	movs	r3, #6
 8007566:	e037      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007568:	edd7 7a00 	vldr	s15, [r7]
 800756c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80075f4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8007570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007578:	d801      	bhi.n	800757e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800757a:	2307      	movs	r3, #7
 800757c:	e02c      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800757e:	edd7 7a00 	vldr	s15, [r7]
 8007582:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80075f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8007586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800758a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758e:	d801      	bhi.n	8007594 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007590:	2308      	movs	r3, #8
 8007592:	e021      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007594:	edd7 7a00 	vldr	s15, [r7]
 8007598:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80075fc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 800759c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a4:	d801      	bhi.n	80075aa <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80075a6:	2309      	movs	r3, #9
 80075a8:	e016      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80075aa:	edd7 7a00 	vldr	s15, [r7]
 80075ae:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007600 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 80075b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ba:	d801      	bhi.n	80075c0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80075bc:	230a      	movs	r3, #10
 80075be:	e00b      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80075c0:	edd7 7a00 	vldr	s15, [r7]
 80075c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007604 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 80075c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d0:	d801      	bhi.n	80075d6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 80075d2:	230b      	movs	r3, #11
 80075d4:	e000      	b.n	80075d8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80075d6:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	42700000 	.word	0x42700000
 80075f0:	42f00000 	.word	0x42f00000
 80075f4:	43700000 	.word	0x43700000
 80075f8:	43f00000 	.word	0x43f00000
 80075fc:	44700000 	.word	0x44700000
 8007600:	44f00000 	.word	0x44f00000
 8007604:	45700000 	.word	0x45700000

08007608 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8007614:	edd7 7a00 	vldr	s15, [r7]
 8007618:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800761c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007624:	d801      	bhi.n	800762a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8007626:	2302      	movs	r3, #2
 8007628:	e063      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800762a:	edd7 7a00 	vldr	s15, [r7]
 800762e:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8007632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763a:	d801      	bhi.n	8007640 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800763c:	2303      	movs	r3, #3
 800763e:	e058      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8007640:	edd7 7a00 	vldr	s15, [r7]
 8007644:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8007648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800764c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007650:	d801      	bhi.n	8007656 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8007652:	2304      	movs	r3, #4
 8007654:	e04d      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8007656:	edd7 7a00 	vldr	s15, [r7]
 800765a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007718 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800765e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007666:	d801      	bhi.n	800766c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8007668:	2305      	movs	r3, #5
 800766a:	e042      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800766c:	edd7 7a00 	vldr	s15, [r7]
 8007670:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800771c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767c:	d801      	bhi.n	8007682 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800767e:	2306      	movs	r3, #6
 8007680:	e037      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8007682:	edd7 7a00 	vldr	s15, [r7]
 8007686:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007720 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 800768a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007692:	d801      	bhi.n	8007698 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8007694:	2307      	movs	r3, #7
 8007696:	e02c      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8007698:	edd7 7a00 	vldr	s15, [r7]
 800769c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007724 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 80076a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a8:	d801      	bhi.n	80076ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80076aa:	2308      	movs	r3, #8
 80076ac:	e021      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80076ae:	edd7 7a00 	vldr	s15, [r7]
 80076b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007728 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 80076b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076be:	d801      	bhi.n	80076c4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80076c0:	2309      	movs	r3, #9
 80076c2:	e016      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80076c4:	edd7 7a00 	vldr	s15, [r7]
 80076c8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800772c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 80076cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d4:	d801      	bhi.n	80076da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80076d6:	230a      	movs	r3, #10
 80076d8:	e00b      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80076da:	edd7 7a00 	vldr	s15, [r7]
 80076de:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007730 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 80076e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ea:	d801      	bhi.n	80076f0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 80076ec:	230b      	movs	r3, #11
 80076ee:	e000      	b.n	80076f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80076f0:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80076f2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3320      	adds	r3, #32
 80076f8:	7bfa      	ldrb	r2, [r7, #15]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fabd 	bl	8007c7c <lsm6dsv16x_gy_data_rate_set>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 8007708:	f04f 33ff 	mov.w	r3, #4294967295
 800770c:	e000      	b.n	8007710 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	42700000 	.word	0x42700000
 800771c:	42f00000 	.word	0x42f00000
 8007720:	43700000 	.word	0x43700000
 8007724:	43f00000 	.word	0x43f00000
 8007728:	44700000 	.word	0x44700000
 800772c:	44f00000 	.word	0x44f00000
 8007730:	45700000 	.word	0x45700000

08007734 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8007740:	edd7 7a00 	vldr	s15, [r7]
 8007744:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8007748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007750:	d801      	bhi.n	8007756 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007752:	2302      	movs	r3, #2
 8007754:	e063      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8007756:	edd7 7a00 	vldr	s15, [r7]
 800775a:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800775e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007766:	d801      	bhi.n	800776c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8007768:	2303      	movs	r3, #3
 800776a:	e058      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800776c:	edd7 7a00 	vldr	s15, [r7]
 8007770:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8007774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777c:	d801      	bhi.n	8007782 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800777e:	2304      	movs	r3, #4
 8007780:	e04d      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8007782:	edd7 7a00 	vldr	s15, [r7]
 8007786:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007834 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800778a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800778e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007792:	d801      	bhi.n	8007798 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007794:	2305      	movs	r3, #5
 8007796:	e042      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8007798:	edd7 7a00 	vldr	s15, [r7]
 800779c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007838 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 80077a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a8:	d801      	bhi.n	80077ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80077aa:	2306      	movs	r3, #6
 80077ac:	e037      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80077ae:	edd7 7a00 	vldr	s15, [r7]
 80077b2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800783c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 80077b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077be:	d801      	bhi.n	80077c4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80077c0:	2307      	movs	r3, #7
 80077c2:	e02c      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80077c4:	edd7 7a00 	vldr	s15, [r7]
 80077c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007840 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 80077cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d4:	d801      	bhi.n	80077da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80077d6:	2308      	movs	r3, #8
 80077d8:	e021      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80077da:	edd7 7a00 	vldr	s15, [r7]
 80077de:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007844 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 80077e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ea:	d801      	bhi.n	80077f0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80077ec:	2309      	movs	r3, #9
 80077ee:	e016      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80077f0:	edd7 7a00 	vldr	s15, [r7]
 80077f4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007848 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 80077f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007800:	d801      	bhi.n	8007806 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007802:	230a      	movs	r3, #10
 8007804:	e00b      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8007806:	edd7 7a00 	vldr	s15, [r7]
 800780a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800784c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 800780e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007816:	d801      	bhi.n	800781c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007818:	230b      	movs	r3, #11
 800781a:	e000      	b.n	800781e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800781c:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	42700000 	.word	0x42700000
 8007838:	42f00000 	.word	0x42f00000
 800783c:	43700000 	.word	0x43700000
 8007840:	43f00000 	.word	0x43f00000
 8007844:	44700000 	.word	0x44700000
 8007848:	44f00000 	.word	0x44f00000
 800784c:	45700000 	.word	0x45700000

08007850 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	461a      	mov	r2, r3
 800785c:	460b      	mov	r3, r1
 800785e:	72fb      	strb	r3, [r7, #11]
 8007860:	4613      	mov	r3, r2
 8007862:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	695c      	ldr	r4, [r3, #20]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	7b1b      	ldrb	r3, [r3, #12]
 8007870:	4618      	mov	r0, r3
 8007872:	7afb      	ldrb	r3, [r7, #11]
 8007874:	b299      	uxth	r1, r3
 8007876:	893b      	ldrh	r3, [r7, #8]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	47a0      	blx	r4
 800787c:	4603      	mov	r3, r0
}
 800787e:	4618      	mov	r0, r3
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	bd90      	pop	{r4, r7, pc}

08007886 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007886:	b590      	push	{r4, r7, lr}
 8007888:	b087      	sub	sp, #28
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	461a      	mov	r2, r3
 8007892:	460b      	mov	r3, r1
 8007894:	72fb      	strb	r3, [r7, #11]
 8007896:	4613      	mov	r3, r2
 8007898:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	691c      	ldr	r4, [r3, #16]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	7b1b      	ldrb	r3, [r3, #12]
 80078a6:	4618      	mov	r0, r3
 80078a8:	7afb      	ldrb	r3, [r7, #11]
 80078aa:	b299      	uxth	r1, r3
 80078ac:	893b      	ldrh	r3, [r7, #8]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	47a0      	blx	r4
 80078b2:	4603      	mov	r3, r0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd90      	pop	{r4, r7, pc}

080078bc <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80078bc:	b590      	push	{r4, r7, lr}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	607a      	str	r2, [r7, #4]
 80078c6:	461a      	mov	r2, r3
 80078c8:	460b      	mov	r3, r1
 80078ca:	72fb      	strb	r3, [r7, #11]
 80078cc:	4613      	mov	r3, r2
 80078ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
 80078da:	e009      	b.n	80078f0 <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685c      	ldr	r4, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68d8      	ldr	r0, [r3, #12]
 80078e4:	893b      	ldrh	r3, [r7, #8]
 80078e6:	7af9      	ldrb	r1, [r7, #11]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	47a0      	blx	r4
 80078ec:	6178      	str	r0, [r7, #20]

  return ret;
 80078ee:	697b      	ldr	r3, [r7, #20]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd90      	pop	{r4, r7, pc}

080078f8 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80078f8:	b590      	push	{r4, r7, lr}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	461a      	mov	r2, r3
 8007904:	460b      	mov	r3, r1
 8007906:	72fb      	strb	r3, [r7, #11]
 8007908:	4613      	mov	r3, r2
 800790a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 8007912:	f04f 33ff 	mov.w	r3, #4294967295
 8007916:	e009      	b.n	800792c <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681c      	ldr	r4, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	68d8      	ldr	r0, [r3, #12]
 8007920:	893b      	ldrh	r3, [r7, #8]
 8007922:	7af9      	ldrb	r1, [r7, #11]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	47a0      	blx	r4
 8007928:	6178      	str	r0, [r7, #20]

  return ret;
 800792a:	697b      	ldr	r3, [r7, #20]
}
 800792c:	4618      	mov	r0, r3
 800792e:	371c      	adds	r7, #28
 8007930:	46bd      	mov	sp, r7
 8007932:	bd90      	pop	{r4, r7, pc}

08007934 <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8007940:	f107 0208 	add.w	r2, r7, #8
 8007944:	2301      	movs	r3, #1
 8007946:	2101      	movs	r1, #1
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff ffb7 	bl	80078bc <lsm6dsv16x_read_reg>
 800794e:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	e019      	b.n	800798e <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	7a3b      	ldrb	r3, [r7, #8]
 8007966:	f362 1386 	bfi	r3, r2, #6, #1
 800796a:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	7a3b      	ldrb	r3, [r7, #8]
 8007976:	f362 13c7 	bfi	r3, r2, #7, #1
 800797a:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800797c:	f107 0208 	add.w	r2, r7, #8
 8007980:	2301      	movs	r3, #1
 8007982:	2101      	movs	r1, #1
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff ffb7 	bl	80078f8 <lsm6dsv16x_write_reg>
 800798a:	60f8      	str	r0, [r7, #12]

  return ret;
 800798c:	68fb      	ldr	r3, [r7, #12]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 80079a0:	2301      	movs	r3, #1
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	210f      	movs	r1, #15
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff ff88 	bl	80078bc <lsm6dsv16x_read_reg>
 80079ac:	60f8      	str	r0, [r7, #12]

  return ret;
 80079ae:	68fb      	ldr	r3, [r7, #12]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80079c4:	f107 0210 	add.w	r2, r7, #16
 80079c8:	2301      	movs	r3, #1
 80079ca:	2110      	movs	r1, #16
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ff75 	bl	80078bc <lsm6dsv16x_read_reg>
 80079d2:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	e039      	b.n	8007a52 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	7c3b      	ldrb	r3, [r7, #16]
 80079e8:	f362 0303 	bfi	r3, r2, #0, #4
 80079ec:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80079ee:	f107 0210 	add.w	r2, r7, #16
 80079f2:	2301      	movs	r3, #1
 80079f4:	2110      	movs	r1, #16
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ff7e 	bl	80078f8 <lsm6dsv16x_write_reg>
 80079fc:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	e024      	b.n	8007a52 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8007a0e:	7cfb      	ldrb	r3, [r7, #19]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d01d      	beq.n	8007a50 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8007a14:	f107 020c 	add.w	r2, r7, #12
 8007a18:	2301      	movs	r3, #1
 8007a1a:	2162      	movs	r1, #98	@ 0x62
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff ff4d 	bl	80078bc <lsm6dsv16x_read_reg>
 8007a22:	4602      	mov	r2, r0
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	4413      	add	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8007a2a:	7cfb      	ldrb	r3, [r7, #19]
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	7b3b      	ldrb	r3, [r7, #12]
 8007a34:	f362 0301 	bfi	r3, r2, #0, #2
 8007a38:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8007a3a:	f107 020c 	add.w	r2, r7, #12
 8007a3e:	2301      	movs	r3, #1
 8007a40:	2162      	movs	r1, #98	@ 0x62
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff ff58 	bl	80078f8 <lsm6dsv16x_write_reg>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007a50:	697b      	ldr	r3, [r7, #20]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8007a66:	f107 0210 	add.w	r2, r7, #16
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	2110      	movs	r1, #16
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff ff24 	bl	80078bc <lsm6dsv16x_read_reg>
 8007a74:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8007a76:	f107 020c 	add.w	r2, r7, #12
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	2162      	movs	r1, #98	@ 0x62
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff ff1c 	bl	80078bc <lsm6dsv16x_read_reg>
 8007a84:	4602      	mov	r2, r0
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	4413      	add	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	e0ed      	b.n	8007c72 <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8007a96:	7b3b      	ldrb	r3, [r7, #12]
 8007a98:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 8007aa0:	7c3b      	ldrb	r3, [r7, #16]
 8007aa2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b0c      	cmp	r3, #12
 8007aaa:	f200 80dd 	bhi.w	8007c68 <lsm6dsv16x_xl_data_rate_get+0x20c>
 8007aae:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <lsm6dsv16x_xl_data_rate_get+0x58>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007ae9 	.word	0x08007ae9
 8007ab8:	08007af1 	.word	0x08007af1
 8007abc:	08007af9 	.word	0x08007af9
 8007ac0:	08007b01 	.word	0x08007b01
 8007ac4:	08007b25 	.word	0x08007b25
 8007ac8:	08007b49 	.word	0x08007b49
 8007acc:	08007b6d 	.word	0x08007b6d
 8007ad0:	08007b91 	.word	0x08007b91
 8007ad4:	08007bb5 	.word	0x08007bb5
 8007ad8:	08007bd9 	.word	0x08007bd9
 8007adc:	08007bfd 	.word	0x08007bfd
 8007ae0:	08007c21 	.word	0x08007c21
 8007ae4:	08007c45 	.word	0x08007c45
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]
      break;
 8007aee:	e0bf      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2201      	movs	r2, #1
 8007af4:	701a      	strb	r2, [r3, #0]
      break;
 8007af6:	e0bb      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2202      	movs	r2, #2
 8007afc:	701a      	strb	r2, [r3, #0]
      break;
 8007afe:	e0b7      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8007b00:	7cfb      	ldrb	r3, [r7, #19]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d005      	beq.n	8007b12 <lsm6dsv16x_xl_data_rate_get+0xb6>
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d007      	beq.n	8007b1a <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	701a      	strb	r2, [r3, #0]
          break;
 8007b10:	e007      	b.n	8007b22 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2213      	movs	r2, #19
 8007b16:	701a      	strb	r2, [r3, #0]
          break;
 8007b18:	e003      	b.n	8007b22 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2223      	movs	r2, #35	@ 0x23
 8007b1e:	701a      	strb	r2, [r3, #0]
          break;
 8007b20:	bf00      	nop
      }
      break;
 8007b22:	e0a5      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8007b24:	7cfb      	ldrb	r3, [r7, #19]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d005      	beq.n	8007b36 <lsm6dsv16x_xl_data_rate_get+0xda>
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d007      	beq.n	8007b3e <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2204      	movs	r2, #4
 8007b32:	701a      	strb	r2, [r3, #0]
          break;
 8007b34:	e007      	b.n	8007b46 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2214      	movs	r2, #20
 8007b3a:	701a      	strb	r2, [r3, #0]
          break;
 8007b3c:	e003      	b.n	8007b46 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2224      	movs	r2, #36	@ 0x24
 8007b42:	701a      	strb	r2, [r3, #0]
          break;
 8007b44:	bf00      	nop
      }
      break;
 8007b46:	e093      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8007b48:	7cfb      	ldrb	r3, [r7, #19]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d005      	beq.n	8007b5a <lsm6dsv16x_xl_data_rate_get+0xfe>
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d007      	beq.n	8007b62 <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2205      	movs	r2, #5
 8007b56:	701a      	strb	r2, [r3, #0]
          break;
 8007b58:	e007      	b.n	8007b6a <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2215      	movs	r2, #21
 8007b5e:	701a      	strb	r2, [r3, #0]
          break;
 8007b60:	e003      	b.n	8007b6a <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2225      	movs	r2, #37	@ 0x25
 8007b66:	701a      	strb	r2, [r3, #0]
          break;
 8007b68:	bf00      	nop
      }
      break;
 8007b6a:	e081      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8007b6c:	7cfb      	ldrb	r3, [r7, #19]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d005      	beq.n	8007b7e <lsm6dsv16x_xl_data_rate_get+0x122>
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d007      	beq.n	8007b86 <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2206      	movs	r2, #6
 8007b7a:	701a      	strb	r2, [r3, #0]
          break;
 8007b7c:	e007      	b.n	8007b8e <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2216      	movs	r2, #22
 8007b82:	701a      	strb	r2, [r3, #0]
          break;
 8007b84:	e003      	b.n	8007b8e <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2226      	movs	r2, #38	@ 0x26
 8007b8a:	701a      	strb	r2, [r3, #0]
          break;
 8007b8c:	bf00      	nop
      }
      break;
 8007b8e:	e06f      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8007b90:	7cfb      	ldrb	r3, [r7, #19]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d005      	beq.n	8007ba2 <lsm6dsv16x_xl_data_rate_get+0x146>
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d007      	beq.n	8007baa <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2207      	movs	r2, #7
 8007b9e:	701a      	strb	r2, [r3, #0]
          break;
 8007ba0:	e007      	b.n	8007bb2 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2217      	movs	r2, #23
 8007ba6:	701a      	strb	r2, [r3, #0]
          break;
 8007ba8:	e003      	b.n	8007bb2 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2227      	movs	r2, #39	@ 0x27
 8007bae:	701a      	strb	r2, [r3, #0]
          break;
 8007bb0:	bf00      	nop
      }
      break;
 8007bb2:	e05d      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8007bb4:	7cfb      	ldrb	r3, [r7, #19]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d005      	beq.n	8007bc6 <lsm6dsv16x_xl_data_rate_get+0x16a>
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d007      	beq.n	8007bce <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	701a      	strb	r2, [r3, #0]
          break;
 8007bc4:	e007      	b.n	8007bd6 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2218      	movs	r2, #24
 8007bca:	701a      	strb	r2, [r3, #0]
          break;
 8007bcc:	e003      	b.n	8007bd6 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2228      	movs	r2, #40	@ 0x28
 8007bd2:	701a      	strb	r2, [r3, #0]
          break;
 8007bd4:	bf00      	nop
      }
      break;
 8007bd6:	e04b      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8007bd8:	7cfb      	ldrb	r3, [r7, #19]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d005      	beq.n	8007bea <lsm6dsv16x_xl_data_rate_get+0x18e>
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d007      	beq.n	8007bf2 <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2209      	movs	r2, #9
 8007be6:	701a      	strb	r2, [r3, #0]
          break;
 8007be8:	e007      	b.n	8007bfa <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2219      	movs	r2, #25
 8007bee:	701a      	strb	r2, [r3, #0]
          break;
 8007bf0:	e003      	b.n	8007bfa <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2229      	movs	r2, #41	@ 0x29
 8007bf6:	701a      	strb	r2, [r3, #0]
          break;
 8007bf8:	bf00      	nop
      }
      break;
 8007bfa:	e039      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8007bfc:	7cfb      	ldrb	r3, [r7, #19]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d005      	beq.n	8007c0e <lsm6dsv16x_xl_data_rate_get+0x1b2>
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d007      	beq.n	8007c16 <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	220a      	movs	r2, #10
 8007c0a:	701a      	strb	r2, [r3, #0]
          break;
 8007c0c:	e007      	b.n	8007c1e <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	221a      	movs	r2, #26
 8007c12:	701a      	strb	r2, [r3, #0]
          break;
 8007c14:	e003      	b.n	8007c1e <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	222a      	movs	r2, #42	@ 0x2a
 8007c1a:	701a      	strb	r2, [r3, #0]
          break;
 8007c1c:	bf00      	nop
      }
      break;
 8007c1e:	e027      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8007c20:	7cfb      	ldrb	r3, [r7, #19]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d005      	beq.n	8007c32 <lsm6dsv16x_xl_data_rate_get+0x1d6>
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d007      	beq.n	8007c3a <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	220b      	movs	r2, #11
 8007c2e:	701a      	strb	r2, [r3, #0]
          break;
 8007c30:	e007      	b.n	8007c42 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	221b      	movs	r2, #27
 8007c36:	701a      	strb	r2, [r3, #0]
          break;
 8007c38:	e003      	b.n	8007c42 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	222b      	movs	r2, #43	@ 0x2b
 8007c3e:	701a      	strb	r2, [r3, #0]
          break;
 8007c40:	bf00      	nop
      }
      break;
 8007c42:	e015      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8007c44:	7cfb      	ldrb	r3, [r7, #19]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d005      	beq.n	8007c56 <lsm6dsv16x_xl_data_rate_get+0x1fa>
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d007      	beq.n	8007c5e <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	220c      	movs	r2, #12
 8007c52:	701a      	strb	r2, [r3, #0]
          break;
 8007c54:	e007      	b.n	8007c66 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	221c      	movs	r2, #28
 8007c5a:	701a      	strb	r2, [r3, #0]
          break;
 8007c5c:	e003      	b.n	8007c66 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	222c      	movs	r2, #44	@ 0x2c
 8007c62:	701a      	strb	r2, [r3, #0]
          break;
 8007c64:	bf00      	nop
      }
      break;
 8007c66:	e003      	b.n	8007c70 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
      break;
 8007c6e:	bf00      	nop
  }

  return ret;
 8007c70:	697b      	ldr	r3, [r7, #20]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop

08007c7c <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8007c88:	f107 0210 	add.w	r2, r7, #16
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	2111      	movs	r1, #17
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fe13 	bl	80078bc <lsm6dsv16x_read_reg>
 8007c96:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	f003 030f 	and.w	r3, r3, #15
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	7c3b      	ldrb	r3, [r7, #16]
 8007ca2:	f362 0303 	bfi	r3, r2, #0, #4
 8007ca6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8007ca8:	f107 0210 	add.w	r2, r7, #16
 8007cac:	2301      	movs	r3, #1
 8007cae:	2111      	movs	r1, #17
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff fe21 	bl	80078f8 <lsm6dsv16x_write_reg>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	4413      	add	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	e024      	b.n	8007d12 <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	091b      	lsrs	r3, r3, #4
 8007ccc:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8007cce:	7cfb      	ldrb	r3, [r7, #19]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01d      	beq.n	8007d10 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8007cd4:	f107 020c 	add.w	r2, r7, #12
 8007cd8:	2301      	movs	r3, #1
 8007cda:	2162      	movs	r1, #98	@ 0x62
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff fded 	bl	80078bc <lsm6dsv16x_read_reg>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8007cea:	7cfb      	ldrb	r3, [r7, #19]
 8007cec:	f003 0303 	and.w	r3, r3, #3
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	7b3b      	ldrb	r3, [r7, #12]
 8007cf4:	f362 0301 	bfi	r3, r2, #0, #2
 8007cf8:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8007cfa:	f107 020c 	add.w	r2, r7, #12
 8007cfe:	2301      	movs	r3, #1
 8007d00:	2162      	movs	r1, #98	@ 0x62
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff fdf8 	bl	80078f8 <lsm6dsv16x_write_reg>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007d10:	697b      	ldr	r3, [r7, #20]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8007d26:	f107 0210 	add.w	r2, r7, #16
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	2111      	movs	r1, #17
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff fdc4 	bl	80078bc <lsm6dsv16x_read_reg>
 8007d34:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8007d36:	f107 020c 	add.w	r2, r7, #12
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	2162      	movs	r1, #98	@ 0x62
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff fdbc 	bl	80078bc <lsm6dsv16x_read_reg>
 8007d44:	4602      	mov	r2, r0
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	4413      	add	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	e0ed      	b.n	8007f32 <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8007d56:	7b3b      	ldrb	r3, [r7, #12]
 8007d58:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 8007d60:	7c3b      	ldrb	r3, [r7, #16]
 8007d62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b0c      	cmp	r3, #12
 8007d6a:	f200 80dd 	bhi.w	8007f28 <lsm6dsv16x_gy_data_rate_get+0x20c>
 8007d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d74 <lsm6dsv16x_gy_data_rate_get+0x58>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007da9 	.word	0x08007da9
 8007d78:	08007db1 	.word	0x08007db1
 8007d7c:	08007db9 	.word	0x08007db9
 8007d80:	08007dc1 	.word	0x08007dc1
 8007d84:	08007de5 	.word	0x08007de5
 8007d88:	08007e09 	.word	0x08007e09
 8007d8c:	08007e2d 	.word	0x08007e2d
 8007d90:	08007e51 	.word	0x08007e51
 8007d94:	08007e75 	.word	0x08007e75
 8007d98:	08007e99 	.word	0x08007e99
 8007d9c:	08007ebd 	.word	0x08007ebd
 8007da0:	08007ee1 	.word	0x08007ee1
 8007da4:	08007f05 	.word	0x08007f05
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]
      break;
 8007dae:	e0bf      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2201      	movs	r2, #1
 8007db4:	701a      	strb	r2, [r3, #0]
      break;
 8007db6:	e0bb      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	701a      	strb	r2, [r3, #0]
      break;
 8007dbe:	e0b7      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8007dc0:	7cfb      	ldrb	r3, [r7, #19]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d005      	beq.n	8007dd2 <lsm6dsv16x_gy_data_rate_get+0xb6>
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d007      	beq.n	8007dda <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2203      	movs	r2, #3
 8007dce:	701a      	strb	r2, [r3, #0]
          break;
 8007dd0:	e007      	b.n	8007de2 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2213      	movs	r2, #19
 8007dd6:	701a      	strb	r2, [r3, #0]
          break;
 8007dd8:	e003      	b.n	8007de2 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2223      	movs	r2, #35	@ 0x23
 8007dde:	701a      	strb	r2, [r3, #0]
          break;
 8007de0:	bf00      	nop
      }
      break;
 8007de2:	e0a5      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8007de4:	7cfb      	ldrb	r3, [r7, #19]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d005      	beq.n	8007df6 <lsm6dsv16x_gy_data_rate_get+0xda>
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d007      	beq.n	8007dfe <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2204      	movs	r2, #4
 8007df2:	701a      	strb	r2, [r3, #0]
          break;
 8007df4:	e007      	b.n	8007e06 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2214      	movs	r2, #20
 8007dfa:	701a      	strb	r2, [r3, #0]
          break;
 8007dfc:	e003      	b.n	8007e06 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2224      	movs	r2, #36	@ 0x24
 8007e02:	701a      	strb	r2, [r3, #0]
          break;
 8007e04:	bf00      	nop
      }
      break;
 8007e06:	e093      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8007e08:	7cfb      	ldrb	r3, [r7, #19]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d005      	beq.n	8007e1a <lsm6dsv16x_gy_data_rate_get+0xfe>
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d007      	beq.n	8007e22 <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2205      	movs	r2, #5
 8007e16:	701a      	strb	r2, [r3, #0]
          break;
 8007e18:	e007      	b.n	8007e2a <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2215      	movs	r2, #21
 8007e1e:	701a      	strb	r2, [r3, #0]
          break;
 8007e20:	e003      	b.n	8007e2a <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2225      	movs	r2, #37	@ 0x25
 8007e26:	701a      	strb	r2, [r3, #0]
          break;
 8007e28:	bf00      	nop
      }
      break;
 8007e2a:	e081      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8007e2c:	7cfb      	ldrb	r3, [r7, #19]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d005      	beq.n	8007e3e <lsm6dsv16x_gy_data_rate_get+0x122>
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d007      	beq.n	8007e46 <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2206      	movs	r2, #6
 8007e3a:	701a      	strb	r2, [r3, #0]
          break;
 8007e3c:	e007      	b.n	8007e4e <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2216      	movs	r2, #22
 8007e42:	701a      	strb	r2, [r3, #0]
          break;
 8007e44:	e003      	b.n	8007e4e <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2226      	movs	r2, #38	@ 0x26
 8007e4a:	701a      	strb	r2, [r3, #0]
          break;
 8007e4c:	bf00      	nop
      }
      break;
 8007e4e:	e06f      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8007e50:	7cfb      	ldrb	r3, [r7, #19]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d005      	beq.n	8007e62 <lsm6dsv16x_gy_data_rate_get+0x146>
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d007      	beq.n	8007e6a <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2207      	movs	r2, #7
 8007e5e:	701a      	strb	r2, [r3, #0]
          break;
 8007e60:	e007      	b.n	8007e72 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2217      	movs	r2, #23
 8007e66:	701a      	strb	r2, [r3, #0]
          break;
 8007e68:	e003      	b.n	8007e72 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2227      	movs	r2, #39	@ 0x27
 8007e6e:	701a      	strb	r2, [r3, #0]
          break;
 8007e70:	bf00      	nop
      }
      break;
 8007e72:	e05d      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8007e74:	7cfb      	ldrb	r3, [r7, #19]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d005      	beq.n	8007e86 <lsm6dsv16x_gy_data_rate_get+0x16a>
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d007      	beq.n	8007e8e <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2208      	movs	r2, #8
 8007e82:	701a      	strb	r2, [r3, #0]
          break;
 8007e84:	e007      	b.n	8007e96 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2218      	movs	r2, #24
 8007e8a:	701a      	strb	r2, [r3, #0]
          break;
 8007e8c:	e003      	b.n	8007e96 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2228      	movs	r2, #40	@ 0x28
 8007e92:	701a      	strb	r2, [r3, #0]
          break;
 8007e94:	bf00      	nop
      }
      break;
 8007e96:	e04b      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8007e98:	7cfb      	ldrb	r3, [r7, #19]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d005      	beq.n	8007eaa <lsm6dsv16x_gy_data_rate_get+0x18e>
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d007      	beq.n	8007eb2 <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2209      	movs	r2, #9
 8007ea6:	701a      	strb	r2, [r3, #0]
          break;
 8007ea8:	e007      	b.n	8007eba <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2219      	movs	r2, #25
 8007eae:	701a      	strb	r2, [r3, #0]
          break;
 8007eb0:	e003      	b.n	8007eba <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2229      	movs	r2, #41	@ 0x29
 8007eb6:	701a      	strb	r2, [r3, #0]
          break;
 8007eb8:	bf00      	nop
      }
      break;
 8007eba:	e039      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8007ebc:	7cfb      	ldrb	r3, [r7, #19]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d005      	beq.n	8007ece <lsm6dsv16x_gy_data_rate_get+0x1b2>
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d007      	beq.n	8007ed6 <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	220a      	movs	r2, #10
 8007eca:	701a      	strb	r2, [r3, #0]
          break;
 8007ecc:	e007      	b.n	8007ede <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	221a      	movs	r2, #26
 8007ed2:	701a      	strb	r2, [r3, #0]
          break;
 8007ed4:	e003      	b.n	8007ede <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	222a      	movs	r2, #42	@ 0x2a
 8007eda:	701a      	strb	r2, [r3, #0]
          break;
 8007edc:	bf00      	nop
      }
      break;
 8007ede:	e027      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8007ee0:	7cfb      	ldrb	r3, [r7, #19]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d005      	beq.n	8007ef2 <lsm6dsv16x_gy_data_rate_get+0x1d6>
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d007      	beq.n	8007efa <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	220b      	movs	r2, #11
 8007eee:	701a      	strb	r2, [r3, #0]
          break;
 8007ef0:	e007      	b.n	8007f02 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	221b      	movs	r2, #27
 8007ef6:	701a      	strb	r2, [r3, #0]
          break;
 8007ef8:	e003      	b.n	8007f02 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	222b      	movs	r2, #43	@ 0x2b
 8007efe:	701a      	strb	r2, [r3, #0]
          break;
 8007f00:	bf00      	nop
      }
      break;
 8007f02:	e015      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8007f04:	7cfb      	ldrb	r3, [r7, #19]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d005      	beq.n	8007f16 <lsm6dsv16x_gy_data_rate_get+0x1fa>
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d007      	beq.n	8007f1e <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	220c      	movs	r2, #12
 8007f12:	701a      	strb	r2, [r3, #0]
          break;
 8007f14:	e007      	b.n	8007f26 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	221c      	movs	r2, #28
 8007f1a:	701a      	strb	r2, [r3, #0]
          break;
 8007f1c:	e003      	b.n	8007f26 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	222c      	movs	r2, #44	@ 0x2c
 8007f22:	701a      	strb	r2, [r3, #0]
          break;
 8007f24:	bf00      	nop
      }
      break;
 8007f26:	e003      	b.n	8007f30 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
      break;
 8007f2e:	bf00      	nop
  }

  return ret;
 8007f30:	697b      	ldr	r3, [r7, #20]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop

08007f3c <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8007f48:	f107 0208 	add.w	r2, r7, #8
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	2112      	movs	r1, #18
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff fcb3 	bl	80078bc <lsm6dsv16x_read_reg>
 8007f56:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10f      	bne.n	8007f7e <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	7a3b      	ldrb	r3, [r7, #8]
 8007f68:	f362 0382 	bfi	r3, r2, #2, #1
 8007f6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8007f6e:	f107 0208 	add.w	r2, r7, #8
 8007f72:	2301      	movs	r3, #1
 8007f74:	2112      	movs	r1, #18
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fcbe 	bl	80078f8 <lsm6dsv16x_write_reg>
 8007f7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8007f94:	f107 0208 	add.w	r2, r7, #8
 8007f98:	2301      	movs	r3, #1
 8007f9a:	2112      	movs	r1, #18
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fc8d 	bl	80078bc <lsm6dsv16x_read_reg>
 8007fa2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10f      	bne.n	8007fca <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	7a3b      	ldrb	r3, [r7, #8]
 8007fb4:	f362 1386 	bfi	r3, r2, #6, #1
 8007fb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8007fba:	f107 0208 	add.w	r2, r7, #8
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	2112      	movs	r1, #18
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7ff fc98 	bl	80078f8 <lsm6dsv16x_write_reg>
 8007fc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007fca:	68fb      	ldr	r3, [r7, #12]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8007fe0:	f107 0208 	add.w	r2, r7, #8
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	2115      	movs	r1, #21
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fc67 	bl	80078bc <lsm6dsv16x_read_reg>
 8007fee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10f      	bne.n	8008016 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	f003 030f 	and.w	r3, r3, #15
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	7a3b      	ldrb	r3, [r7, #8]
 8008000:	f362 0303 	bfi	r3, r2, #0, #4
 8008004:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8008006:	f107 0208 	add.w	r2, r7, #8
 800800a:	2301      	movs	r3, #1
 800800c:	2115      	movs	r1, #21
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fc72 	bl	80078f8 <lsm6dsv16x_write_reg>
 8008014:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008016:	68fb      	ldr	r3, [r7, #12]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800802a:	f107 0208 	add.w	r2, r7, #8
 800802e:	2301      	movs	r3, #1
 8008030:	2115      	movs	r1, #21
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7ff fc42 	bl	80078bc <lsm6dsv16x_read_reg>
 8008038:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	e040      	b.n	80080c6 <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 8008044:	7a3b      	ldrb	r3, [r7, #8]
 8008046:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b0c      	cmp	r3, #12
 800804e:	d835      	bhi.n	80080bc <lsm6dsv16x_gy_full_scale_get+0x9c>
 8008050:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <lsm6dsv16x_gy_full_scale_get+0x38>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	0800808d 	.word	0x0800808d
 800805c:	08008095 	.word	0x08008095
 8008060:	0800809d 	.word	0x0800809d
 8008064:	080080a5 	.word	0x080080a5
 8008068:	080080ad 	.word	0x080080ad
 800806c:	080080bd 	.word	0x080080bd
 8008070:	080080bd 	.word	0x080080bd
 8008074:	080080bd 	.word	0x080080bd
 8008078:	080080bd 	.word	0x080080bd
 800807c:	080080bd 	.word	0x080080bd
 8008080:	080080bd 	.word	0x080080bd
 8008084:	080080bd 	.word	0x080080bd
 8008088:	080080b5 	.word	0x080080b5
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
      break;
 8008092:	e017      	b.n	80080c4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2201      	movs	r2, #1
 8008098:	701a      	strb	r2, [r3, #0]
      break;
 800809a:	e013      	b.n	80080c4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2202      	movs	r2, #2
 80080a0:	701a      	strb	r2, [r3, #0]
      break;
 80080a2:	e00f      	b.n	80080c4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2203      	movs	r2, #3
 80080a8:	701a      	strb	r2, [r3, #0]
      break;
 80080aa:	e00b      	b.n	80080c4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2204      	movs	r2, #4
 80080b0:	701a      	strb	r2, [r3, #0]
      break;
 80080b2:	e007      	b.n	80080c4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	220c      	movs	r2, #12
 80080b8:	701a      	strb	r2, [r3, #0]
      break;
 80080ba:	e003      	b.n	80080c4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2200      	movs	r2, #0
 80080c0:	701a      	strb	r2, [r3, #0]
      break;
 80080c2:	bf00      	nop
  }

  return ret;
 80080c4:	68fb      	ldr	r3, [r7, #12]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop

080080d0 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80080dc:	f107 0208 	add.w	r2, r7, #8
 80080e0:	2301      	movs	r3, #1
 80080e2:	2117      	movs	r1, #23
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff fbe9 	bl	80078bc <lsm6dsv16x_read_reg>
 80080ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10f      	bne.n	8008112 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	f003 0303 	and.w	r3, r3, #3
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	7a3b      	ldrb	r3, [r7, #8]
 80080fc:	f362 0301 	bfi	r3, r2, #0, #2
 8008100:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8008102:	f107 0208 	add.w	r2, r7, #8
 8008106:	2301      	movs	r3, #1
 8008108:	2117      	movs	r1, #23
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff fbf4 	bl	80078f8 <lsm6dsv16x_write_reg>
 8008110:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008112:	68fb      	ldr	r3, [r7, #12]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8008126:	f107 0208 	add.w	r2, r7, #8
 800812a:	2301      	movs	r3, #1
 800812c:	2117      	movs	r1, #23
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff fbc4 	bl	80078bc <lsm6dsv16x_read_reg>
 8008134:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	e026      	b.n	800818e <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 8008140:	7a3b      	ldrb	r3, [r7, #8]
 8008142:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b03      	cmp	r3, #3
 800814a:	d81b      	bhi.n	8008184 <lsm6dsv16x_xl_full_scale_get+0x68>
 800814c:	a201      	add	r2, pc, #4	@ (adr r2, 8008154 <lsm6dsv16x_xl_full_scale_get+0x38>)
 800814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008152:	bf00      	nop
 8008154:	08008165 	.word	0x08008165
 8008158:	0800816d 	.word	0x0800816d
 800815c:	08008175 	.word	0x08008175
 8008160:	0800817d 	.word	0x0800817d
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2200      	movs	r2, #0
 8008168:	701a      	strb	r2, [r3, #0]
      break;
 800816a:	e00f      	b.n	800818c <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2201      	movs	r2, #1
 8008170:	701a      	strb	r2, [r3, #0]
      break;
 8008172:	e00b      	b.n	800818c <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2202      	movs	r2, #2
 8008178:	701a      	strb	r2, [r3, #0]
      break;
 800817a:	e007      	b.n	800818c <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2203      	movs	r2, #3
 8008180:	701a      	strb	r2, [r3, #0]
      break;
 8008182:	e003      	b.n	800818c <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	bf00      	nop
  }

  return ret;
 800818c:	68fb      	ldr	r3, [r7, #12]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop

08008198 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 80081a2:	f107 020c 	add.w	r2, r7, #12
 80081a6:	2306      	movs	r3, #6
 80081a8:	2122      	movs	r1, #34	@ 0x22
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff fb86 	bl	80078bc <lsm6dsv16x_read_reg>
 80081b0:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	e036      	b.n	800822a <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 80081bc:	7b7b      	ldrb	r3, [r7, #13]
 80081be:	b21a      	sxth	r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	7b3a      	ldrb	r2, [r7, #12]
 80081d2:	4413      	add	r3, r2
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	b21a      	sxth	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80081dc:	7bfa      	ldrb	r2, [r7, #15]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	3302      	adds	r3, #2
 80081e2:	b212      	sxth	r2, r2
 80081e4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	3302      	adds	r3, #2
 80081ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	7bba      	ldrb	r2, [r7, #14]
 80081f6:	4413      	add	r3, r2
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	3302      	adds	r3, #2
 80081fe:	b212      	sxth	r2, r2
 8008200:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008202:	7c7a      	ldrb	r2, [r7, #17]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	3304      	adds	r3, #4
 8008208:	b212      	sxth	r2, r2
 800820a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	3304      	adds	r3, #4
 8008210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008214:	b29b      	uxth	r3, r3
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	b29b      	uxth	r3, r3
 800821a:	7c3a      	ldrb	r2, [r7, #16]
 800821c:	4413      	add	r3, r2
 800821e:	b29a      	uxth	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	3304      	adds	r3, #4
 8008224:	b212      	sxth	r2, r2
 8008226:	801a      	strh	r2, [r3, #0]

  return ret;
 8008228:	697b      	ldr	r3, [r7, #20]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 800823c:	f107 020c 	add.w	r2, r7, #12
 8008240:	2306      	movs	r3, #6
 8008242:	2128      	movs	r1, #40	@ 0x28
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff fb39 	bl	80078bc <lsm6dsv16x_read_reg>
 800824a:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	e036      	b.n	80082c4 <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8008256:	7b7b      	ldrb	r3, [r7, #13]
 8008258:	b21a      	sxth	r2, r3
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008264:	b29b      	uxth	r3, r3
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	b29b      	uxth	r3, r3
 800826a:	7b3a      	ldrb	r2, [r7, #12]
 800826c:	4413      	add	r3, r2
 800826e:	b29b      	uxth	r3, r3
 8008270:	b21a      	sxth	r2, r3
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008276:	7bfa      	ldrb	r2, [r7, #15]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	3302      	adds	r3, #2
 800827c:	b212      	sxth	r2, r2
 800827e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	3302      	adds	r3, #2
 8008284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008288:	b29b      	uxth	r3, r3
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	b29b      	uxth	r3, r3
 800828e:	7bba      	ldrb	r2, [r7, #14]
 8008290:	4413      	add	r3, r2
 8008292:	b29a      	uxth	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	3302      	adds	r3, #2
 8008298:	b212      	sxth	r2, r2
 800829a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800829c:	7c7a      	ldrb	r2, [r7, #17]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	3304      	adds	r3, #4
 80082a2:	b212      	sxth	r2, r2
 80082a4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	3304      	adds	r3, #4
 80082aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	7c3a      	ldrb	r2, [r7, #16]
 80082b6:	4413      	add	r3, r2
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	3304      	adds	r3, #4
 80082be:	b212      	sxth	r2, r2
 80082c0:	801a      	strh	r2, [r3, #0]

  return ret;
 80082c2:	697b      	ldr	r3, [r7, #20]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80082d8:	f107 0208 	add.w	r2, r7, #8
 80082dc:	2301      	movs	r3, #1
 80082de:	210a      	movs	r1, #10
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff faeb 	bl	80078bc <lsm6dsv16x_read_reg>
 80082e6:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10f      	bne.n	800830e <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	f003 0307 	and.w	r3, r3, #7
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	7a3b      	ldrb	r3, [r7, #8]
 80082f8:	f362 0302 	bfi	r3, r2, #0, #3
 80082fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80082fe:	f107 0208 	add.w	r2, r7, #8
 8008302:	2301      	movs	r3, #1
 8008304:	210a      	movs	r1, #10
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff faf6 	bl	80078f8 <lsm6dsv16x_write_reg>
 800830c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800830e:	68fb      	ldr	r3, [r7, #12]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8008322:	f107 0208 	add.w	r2, r7, #8
 8008326:	2301      	movs	r3, #1
 8008328:	2116      	movs	r1, #22
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7ff fac6 	bl	80078bc <lsm6dsv16x_read_reg>
 8008330:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10f      	bne.n	8008358 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8008338:	783b      	ldrb	r3, [r7, #0]
 800833a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800833e:	b2da      	uxtb	r2, r3
 8008340:	7a3b      	ldrb	r3, [r7, #8]
 8008342:	f362 13c7 	bfi	r3, r2, #7, #1
 8008346:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8008348:	f107 0208 	add.w	r2, r7, #8
 800834c:	2301      	movs	r3, #1
 800834e:	2116      	movs	r1, #22
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff fad1 	bl	80078f8 <lsm6dsv16x_write_reg>
 8008356:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008358:	68fb      	ldr	r3, [r7, #12]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08e      	sub	sp, #56	@ 0x38
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800836e:	2300      	movs	r3, #0
 8008370:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8008372:	2301      	movs	r3, #1
 8008374:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b03      	cmp	r3, #3
 800837e:	f200 80d4 	bhi.w	800852a <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 8008382:	a201      	add	r2, pc, #4	@ (adr r2, 8008388 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	08008399 	.word	0x08008399
 800838c:	080083ff 	.word	0x080083ff
 8008390:	08008463 	.word	0x08008463
 8008394:	080084c7 	.word	0x080084c7
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8008398:	6838      	ldr	r0, [r7, #0]
 800839a:	f000 fa25 	bl	80087e8 <LIS2MDL_0_Probe>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 80083a4:	f04f 33ff 	mov.w	r3, #4294967295
 80083a8:	e101      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80083aa:	4a83      	ldr	r2, [pc, #524]	@ (80085b8 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	4981      	ldr	r1, [pc, #516]	@ (80085bc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083bc:	f107 010c 	add.w	r1, r7, #12
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80083ca:	f06f 0306 	mvn.w	r3, #6
 80083ce:	e0ee      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 80083d0:	7b3b      	ldrb	r3, [r7, #12]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d103      	bne.n	80083de <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 80083d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d8:	f043 0302 	orr.w	r3, r3, #2
 80083dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 80083de:	7b7b      	ldrb	r3, [r7, #13]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d103      	bne.n	80083ec <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	f040 809f 	bne.w	8008532 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	f043 0304 	orr.w	r3, r3, #4
 80083fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 80083fc:	e099      	b.n	8008532 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 80083fe:	6838      	ldr	r0, [r7, #0]
 8008400:	f000 fa9a 	bl	8008938 <LSM6DSV16X_0_Probe>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800840a:	f04f 33ff 	mov.w	r3, #4294967295
 800840e:	e0ce      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008410:	4a69      	ldr	r2, [pc, #420]	@ (80085b8 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	4968      	ldr	r1, [pc, #416]	@ (80085bc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008422:	f107 010c 	add.w	r1, r7, #12
 8008426:	4610      	mov	r0, r2
 8008428:	4798      	blx	r3
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008430:	f06f 0306 	mvn.w	r3, #6
 8008434:	e0bb      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 8008436:	7b3b      	ldrb	r3, [r7, #12]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d103      	bne.n	8008444 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800843c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843e:	f043 0302 	orr.w	r3, r3, #2
 8008442:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8008444:	7b7b      	ldrb	r3, [r7, #13]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d103      	bne.n	8008452 <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844c:	f043 0301 	orr.w	r3, r3, #1
 8008450:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d16e      	bne.n	8008536 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 8008458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845a:	f043 0304 	orr.w	r3, r3, #4
 800845e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008460:	e069      	b.n	8008536 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 8008462:	6838      	ldr	r0, [r7, #0]
 8008464:	f000 fb34 	bl	8008ad0 <LIS2DUXS12_0_Probe>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800846e:	f04f 33ff 	mov.w	r3, #4294967295
 8008472:	e09c      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008474:	4a50      	ldr	r2, [pc, #320]	@ (80085b8 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	494f      	ldr	r1, [pc, #316]	@ (80085bc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008486:	f107 010c 	add.w	r1, r7, #12
 800848a:	4610      	mov	r0, r2
 800848c:	4798      	blx	r3
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008494:	f06f 0306 	mvn.w	r3, #6
 8008498:	e089      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800849a:	7b3b      	ldrb	r3, [r7, #12]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d103      	bne.n	80084a8 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 80084a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a2:	f043 0302 	orr.w	r3, r3, #2
 80084a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 80084a8:	7b7b      	ldrb	r3, [r7, #13]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d103      	bne.n	80084b6 <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 80084ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b0:	f043 0301 	orr.w	r3, r3, #1
 80084b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d13e      	bne.n	800853a <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 80084bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084be:	f043 0304 	orr.w	r3, r3, #4
 80084c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 80084c4:	e039      	b.n	800853a <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 80084c6:	6838      	ldr	r0, [r7, #0]
 80084c8:	f000 fbb8 	bl	8008c3c <LSM6DSO16IS_0_Probe>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 80084d2:	f04f 33ff 	mov.w	r3, #4294967295
 80084d6:	e06a      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80084d8:	4a37      	ldr	r2, [pc, #220]	@ (80085b8 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	4936      	ldr	r1, [pc, #216]	@ (80085bc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80084ea:	f107 010c 	add.w	r1, r7, #12
 80084ee:	4610      	mov	r0, r2
 80084f0:	4798      	blx	r3
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80084f8:	f06f 0306 	mvn.w	r3, #6
 80084fc:	e057      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 80084fe:	7b3b      	ldrb	r3, [r7, #12]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d103      	bne.n	800850c <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	f043 0302 	orr.w	r3, r3, #2
 800850a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800850c:	7b7b      	ldrb	r3, [r7, #13]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d103      	bne.n	800851a <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 8008512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008514:	f043 0301 	orr.w	r3, r3, #1
 8008518:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d10e      	bne.n	800853e <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 8008520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008522:	f043 0304 	orr.w	r3, r3, #4
 8008526:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008528:	e009      	b.n	800853e <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800852a:	f06f 0301 	mvn.w	r3, #1
 800852e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8008530:	e006      	b.n	8008540 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 8008532:	bf00      	nop
 8008534:	e004      	b.n	8008540 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 8008536:	bf00      	nop
 8008538:	e002      	b.n	8008540 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800853a:	bf00      	nop
 800853c:	e000      	b.n	8008540 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800853e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 8008546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008548:	e031      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800854a:	2300      	movs	r3, #0
 800854c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800854e:	e02a      	b.n	80085a6 <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	4013      	ands	r3, r2
 8008556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008558:	429a      	cmp	r2, r3
 800855a:	d11e      	bne.n	800859a <IKS4A1_MOTION_SENSOR_Init+0x236>
 800855c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	4013      	ands	r3, r2
 8008562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008564:	429a      	cmp	r2, r3
 8008566:	d118      	bne.n	800859a <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008568:	4a15      	ldr	r2, [pc, #84]	@ (80085c0 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008570:	4814      	ldr	r0, [pc, #80]	@ (80085c4 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	4613      	mov	r3, r2
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	4413      	add	r3, r2
 800857a:	440b      	add	r3, r1
 800857c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	490e      	ldr	r1, [pc, #56]	@ (80085bc <IKS4A1_MOTION_SENSOR_Init+0x258>)
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800858a:	4610      	mov	r0, r2
 800858c:	4798      	blx	r3
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008594:	f06f 0304 	mvn.w	r3, #4
 8008598:	e009      	b.n	80085ae <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 80085a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a2:	3301      	adds	r3, #1
 80085a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d9d1      	bls.n	8008550 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 80085ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3738      	adds	r7, #56	@ 0x38
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	24001718 	.word	0x24001718
 80085bc:	240016d8 	.word	0x240016d8
 80085c0:	24000124 	.word	0x24000124
 80085c4:	240016e8 	.word	0x240016e8

080085c8 <IKS4A1_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d903      	bls.n	80085e0 <IKS4A1_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80085d8:	f06f 0301 	mvn.w	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	e028      	b.n	8008632 <IKS4A1_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80085e0:	4a16      	ldr	r2, [pc, #88]	@ (800863c <IKS4A1_MOTION_SENSOR_Enable+0x74>)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	4013      	ands	r3, r2
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d11c      	bne.n	800862c <IKS4A1_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80085f2:	4a13      	ldr	r2, [pc, #76]	@ (8008640 <IKS4A1_MOTION_SENSOR_Enable+0x78>)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085fa:	4812      	ldr	r0, [pc, #72]	@ (8008644 <IKS4A1_MOTION_SENSOR_Enable+0x7c>)
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	4613      	mov	r3, r2
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	4413      	add	r3, r2
 8008604:	440b      	add	r3, r1
 8008606:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	490e      	ldr	r1, [pc, #56]	@ (8008648 <IKS4A1_MOTION_SENSOR_Enable+0x80>)
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008614:	4610      	mov	r0, r2
 8008616:	4798      	blx	r3
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <IKS4A1_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800861e:	f06f 0304 	mvn.w	r3, #4
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e005      	b.n	8008632 <IKS4A1_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e002      	b.n	8008632 <IKS4A1_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800862c:	f06f 0301 	mvn.w	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008632:	68fb      	ldr	r3, [r7, #12]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	24001728 	.word	0x24001728
 8008640:	24000124 	.word	0x24000124
 8008644:	240016e8 	.word	0x240016e8
 8008648:	240016d8 	.word	0x240016d8

0800864c <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b03      	cmp	r3, #3
 800865c:	d903      	bls.n	8008666 <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800865e:	f06f 0301 	mvn.w	r3, #1
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	e029      	b.n	80086ba <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008666:	4a17      	ldr	r2, [pc, #92]	@ (80086c4 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	4013      	ands	r3, r2
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	429a      	cmp	r2, r3
 8008676:	d11d      	bne.n	80086b4 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008678:	4a13      	ldr	r2, [pc, #76]	@ (80086c8 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008680:	4812      	ldr	r0, [pc, #72]	@ (80086cc <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	4613      	mov	r3, r2
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	4413      	add	r3, r2
 800868a:	440b      	add	r3, r1
 800868c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	490f      	ldr	r1, [pc, #60]	@ (80086d0 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086a6:	f06f 0304 	mvn.w	r3, #4
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	e005      	b.n	80086ba <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	e002      	b.n	80086ba <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80086b4:	f06f 0301 	mvn.w	r3, #1
 80086b8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80086ba:	697b      	ldr	r3, [r7, #20]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	24001728 	.word	0x24001728
 80086c8:	24000124 	.word	0x24000124
 80086cc:	240016e8 	.word	0x240016e8
 80086d0:	240016d8 	.word	0x240016d8

080086d4 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d903      	bls.n	80086f0 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80086e8:	f06f 0301 	mvn.w	r3, #1
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	e02a      	b.n	8008746 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80086f0:	4a17      	ldr	r2, [pc, #92]	@ (8008750 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	4013      	ands	r3, r2
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d11e      	bne.n	8008740 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8008702:	4a14      	ldr	r2, [pc, #80]	@ (8008754 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800870a:	4813      	ldr	r0, [pc, #76]	@ (8008758 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4613      	mov	r3, r2
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4413      	add	r3, r2
 8008714:	440b      	add	r3, r1
 8008716:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	490f      	ldr	r1, [pc, #60]	@ (800875c <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008724:	ed97 0a01 	vldr	s0, [r7, #4]
 8008728:	4610      	mov	r0, r2
 800872a:	4798      	blx	r3
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008732:	f06f 0304 	mvn.w	r3, #4
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	e005      	b.n	8008746 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]
 800873e:	e002      	b.n	8008746 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008740:	f06f 0301 	mvn.w	r3, #1
 8008744:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008746:	697b      	ldr	r3, [r7, #20]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	24001728 	.word	0x24001728
 8008754:	24000124 	.word	0x24000124
 8008758:	240016e8 	.word	0x240016e8
 800875c:	240016d8 	.word	0x240016d8

08008760 <IKS4A1_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b03      	cmp	r3, #3
 8008770:	d903      	bls.n	800877a <IKS4A1_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008772:	f06f 0301 	mvn.w	r3, #1
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	e029      	b.n	80087ce <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800877a:	4a17      	ldr	r2, [pc, #92]	@ (80087d8 <IKS4A1_MOTION_SENSOR_SetFullScale+0x78>)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4013      	ands	r3, r2
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	429a      	cmp	r2, r3
 800878a:	d11d      	bne.n	80087c8 <IKS4A1_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800878c:	4a13      	ldr	r2, [pc, #76]	@ (80087dc <IKS4A1_MOTION_SENSOR_SetFullScale+0x7c>)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008794:	4812      	ldr	r0, [pc, #72]	@ (80087e0 <IKS4A1_MOTION_SENSOR_SetFullScale+0x80>)
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4613      	mov	r3, r2
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	4413      	add	r3, r2
 800879e:	440b      	add	r3, r1
 80087a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	490f      	ldr	r1, [pc, #60]	@ (80087e4 <IKS4A1_MOTION_SENSOR_SetFullScale+0x84>)
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4610      	mov	r0, r2
 80087b2:	4798      	blx	r3
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <IKS4A1_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80087ba:	f06f 0304 	mvn.w	r3, #4
 80087be:	617b      	str	r3, [r7, #20]
 80087c0:	e005      	b.n	80087ce <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	e002      	b.n	80087ce <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80087c8:	f06f 0301 	mvn.w	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80087ce:	697b      	ldr	r3, [r7, #20]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	24001728 	.word	0x24001728
 80087dc:	24000124 	.word	0x24000124
 80087e0:	240016e8 	.word	0x240016e8
 80087e4:	240016d8 	.word	0x240016d8

080087e8 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b094      	sub	sp, #80	@ 0x50
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 80087f0:	2300      	movs	r3, #0
 80087f2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 80087f4:	2300      	movs	r3, #0
 80087f6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 80087f8:	233d      	movs	r3, #61	@ 0x3d
 80087fa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 80087fe:	4b40      	ldr	r3, [pc, #256]	@ (8008900 <LIS2MDL_0_Probe+0x118>)
 8008800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 8008802:	4b40      	ldr	r3, [pc, #256]	@ (8008904 <LIS2MDL_0_Probe+0x11c>)
 8008804:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 8008806:	4b40      	ldr	r3, [pc, #256]	@ (8008908 <LIS2MDL_0_Probe+0x120>)
 8008808:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800880a:	4b40      	ldr	r3, [pc, #256]	@ (800890c <LIS2MDL_0_Probe+0x124>)
 800880c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800880e:	4b40      	ldr	r3, [pc, #256]	@ (8008910 <LIS2MDL_0_Probe+0x128>)
 8008810:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 8008812:	4b40      	ldr	r3, [pc, #256]	@ (8008914 <LIS2MDL_0_Probe+0x12c>)
 8008814:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8008816:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800881a:	4619      	mov	r1, r3
 800881c:	483e      	ldr	r0, [pc, #248]	@ (8008918 <LIS2MDL_0_Probe+0x130>)
 800881e:	f7fb f8c1 	bl	80039a4 <LIS2MDL_RegisterBusIO>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008828:	f06f 0306 	mvn.w	r3, #6
 800882c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800882e:	e061      	b.n	80088f4 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008830:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008834:	4619      	mov	r1, r3
 8008836:	4838      	ldr	r0, [pc, #224]	@ (8008918 <LIS2MDL_0_Probe+0x130>)
 8008838:	f7fb f9d0 	bl	8003bdc <LIS2MDL_ReadID>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008842:	f06f 0306 	mvn.w	r3, #6
 8008846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008848:	e054      	b.n	80088f4 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800884a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800884e:	2b40      	cmp	r3, #64	@ 0x40
 8008850:	d003      	beq.n	800885a <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008852:	f06f 0306 	mvn.w	r3, #6
 8008856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008858:	e04c      	b.n	80088f4 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800885a:	f107 030c 	add.w	r3, r7, #12
 800885e:	4619      	mov	r1, r3
 8008860:	482d      	ldr	r0, [pc, #180]	@ (8008918 <LIS2MDL_0_Probe+0x130>)
 8008862:	f7fb f9e1 	bl	8003c28 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008866:	7b7b      	ldrb	r3, [r7, #13]
 8008868:	461a      	mov	r2, r3
 800886a:	7b3b      	ldrb	r3, [r7, #12]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	431a      	orrs	r2, r3
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4313      	orrs	r3, r2
 8008876:	4a29      	ldr	r2, [pc, #164]	@ (800891c <LIS2MDL_0_Probe+0x134>)
 8008878:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800887a:	4b29      	ldr	r3, [pc, #164]	@ (8008920 <LIS2MDL_0_Probe+0x138>)
 800887c:	4a26      	ldr	r2, [pc, #152]	@ (8008918 <LIS2MDL_0_Probe+0x130>)
 800887e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8008880:	4b28      	ldr	r3, [pc, #160]	@ (8008924 <LIS2MDL_0_Probe+0x13c>)
 8008882:	4a29      	ldr	r2, [pc, #164]	@ (8008928 <LIS2MDL_0_Probe+0x140>)
 8008884:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8008886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d11d      	bne.n	80088c8 <LIS2MDL_0_Probe+0xe0>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	d018      	beq.n	80088c8 <LIS2MDL_0_Probe+0xe0>
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d115      	bne.n	80088c8 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800889c:	4b23      	ldr	r3, [pc, #140]	@ (800892c <LIS2MDL_0_Probe+0x144>)
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	4a23      	ldr	r2, [pc, #140]	@ (8008930 <LIS2MDL_0_Probe+0x148>)
 80088a2:	4924      	ldr	r1, [pc, #144]	@ (8008934 <LIS2MDL_0_Probe+0x14c>)
 80088a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 80088a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008924 <LIS2MDL_0_Probe+0x13c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008920 <LIS2MDL_0_Probe+0x138>)
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	4610      	mov	r0, r2
 80088b4:	4798      	blx	r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80088bc:	f06f 0304 	mvn.w	r3, #4
 80088c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088c2:	e001      	b.n	80088c8 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80088c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d107      	bne.n	80088de <LIS2MDL_0_Probe+0xf6>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80088d8:	f06f 0304 	mvn.w	r3, #4
 80088dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80088de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d107      	bne.n	80088f4 <LIS2MDL_0_Probe+0x10c>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80088ee:	f06f 0304 	mvn.w	r3, #4
 80088f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 80088f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3750      	adds	r7, #80	@ 0x50
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	08001985 	.word	0x08001985
 8008904:	08001a01 	.word	0x08001a01
 8008908:	08001ab5 	.word	0x08001ab5
 800890c:	08001a51 	.word	0x08001a51
 8008910:	08001b19 	.word	0x08001b19
 8008914:	0800913d 	.word	0x0800913d
 8008918:	24001738 	.word	0x24001738
 800891c:	24001728 	.word	0x24001728
 8008920:	240016d8 	.word	0x240016d8
 8008924:	24001718 	.word	0x24001718
 8008928:	24000040 	.word	0x24000040
 800892c:	24000124 	.word	0x24000124
 8008930:	240016e8 	.word	0x240016e8
 8008934:	24000050 	.word	0x24000050

08008938 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b094      	sub	sp, #80	@ 0x50
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 8008940:	2300      	movs	r3, #0
 8008942:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 8008944:	2300      	movs	r3, #0
 8008946:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 8008948:	23d7      	movs	r3, #215	@ 0xd7
 800894a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800894e:	4b51      	ldr	r3, [pc, #324]	@ (8008a94 <LSM6DSV16X_0_Probe+0x15c>)
 8008950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 8008952:	4b51      	ldr	r3, [pc, #324]	@ (8008a98 <LSM6DSV16X_0_Probe+0x160>)
 8008954:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 8008956:	4b51      	ldr	r3, [pc, #324]	@ (8008a9c <LSM6DSV16X_0_Probe+0x164>)
 8008958:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800895a:	4b51      	ldr	r3, [pc, #324]	@ (8008aa0 <LSM6DSV16X_0_Probe+0x168>)
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800895e:	4b51      	ldr	r3, [pc, #324]	@ (8008aa4 <LSM6DSV16X_0_Probe+0x16c>)
 8008960:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 8008962:	4b51      	ldr	r3, [pc, #324]	@ (8008aa8 <LSM6DSV16X_0_Probe+0x170>)
 8008964:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 8008966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800896a:	4619      	mov	r1, r3
 800896c:	484f      	ldr	r0, [pc, #316]	@ (8008aac <LSM6DSV16X_0_Probe+0x174>)
 800896e:	f7fd fd5d 	bl	800642c <LSM6DSV16X_RegisterBusIO>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008978:	f06f 0306 	mvn.w	r3, #6
 800897c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800897e:	e084      	b.n	8008a8a <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8008980:	2100      	movs	r1, #0
 8008982:	484a      	ldr	r0, [pc, #296]	@ (8008aac <LSM6DSV16X_0_Probe+0x174>)
 8008984:	f7fe fcdf 	bl	8007346 <LSM6DSV16X_Set_Mem_Bank>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800898e:	f06f 0306 	mvn.w	r3, #6
 8008992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008994:	e079      	b.n	8008a8a <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 8008996:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800899a:	4619      	mov	r1, r3
 800899c:	4843      	ldr	r0, [pc, #268]	@ (8008aac <LSM6DSV16X_0_Probe+0x174>)
 800899e:	f7fd fe75 	bl	800668c <LSM6DSV16X_ReadID>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80089a8:	f06f 0306 	mvn.w	r3, #6
 80089ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089ae:	e06c      	b.n	8008a8a <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 80089b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089b4:	2b70      	cmp	r3, #112	@ 0x70
 80089b6:	d003      	beq.n	80089c0 <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80089b8:	f06f 0306 	mvn.w	r3, #6
 80089bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089be:	e064      	b.n	8008a8a <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 80089c0:	f107 030c 	add.w	r3, r7, #12
 80089c4:	4619      	mov	r1, r3
 80089c6:	4839      	ldr	r0, [pc, #228]	@ (8008aac <LSM6DSV16X_0_Probe+0x174>)
 80089c8:	f7fd fe76 	bl	80066b8 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80089cc:	7b7b      	ldrb	r3, [r7, #13]
 80089ce:	461a      	mov	r2, r3
 80089d0:	7b3b      	ldrb	r3, [r7, #12]
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	431a      	orrs	r2, r3
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4313      	orrs	r3, r2
 80089dc:	4a34      	ldr	r2, [pc, #208]	@ (8008ab0 <LSM6DSV16X_0_Probe+0x178>)
 80089de:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 80089e0:	4b34      	ldr	r3, [pc, #208]	@ (8008ab4 <LSM6DSV16X_0_Probe+0x17c>)
 80089e2:	4a32      	ldr	r2, [pc, #200]	@ (8008aac <LSM6DSV16X_0_Probe+0x174>)
 80089e4:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 80089e6:	4b34      	ldr	r3, [pc, #208]	@ (8008ab8 <LSM6DSV16X_0_Probe+0x180>)
 80089e8:	4a34      	ldr	r2, [pc, #208]	@ (8008abc <LSM6DSV16X_0_Probe+0x184>)
 80089ea:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80089ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d11e      	bne.n	8008a30 <LSM6DSV16X_0_Probe+0xf8>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d019      	beq.n	8008a30 <LSM6DSV16X_0_Probe+0xf8>
 80089fc:	7b7b      	ldrb	r3, [r7, #13]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d116      	bne.n	8008a30 <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008a02:	4b2f      	ldr	r3, [pc, #188]	@ (8008ac0 <LSM6DSV16X_0_Probe+0x188>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	4a2f      	ldr	r2, [pc, #188]	@ (8008ac4 <LSM6DSV16X_0_Probe+0x18c>)
 8008a08:	3303      	adds	r3, #3
 8008a0a:	492f      	ldr	r1, [pc, #188]	@ (8008ac8 <LSM6DSV16X_0_Probe+0x190>)
 8008a0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 8008a10:	4b29      	ldr	r3, [pc, #164]	@ (8008ab8 <LSM6DSV16X_0_Probe+0x180>)
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a27      	ldr	r2, [pc, #156]	@ (8008ab4 <LSM6DSV16X_0_Probe+0x17c>)
 8008a18:	6852      	ldr	r2, [r2, #4]
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	4798      	blx	r3
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a24:	f06f 0304 	mvn.w	r3, #4
 8008a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a2a:	e001      	b.n	8008a30 <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d11e      	bne.n	8008a74 <LSM6DSV16X_0_Probe+0x13c>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d019      	beq.n	8008a74 <LSM6DSV16X_0_Probe+0x13c>
 8008a40:	7b3b      	ldrb	r3, [r7, #12]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d116      	bne.n	8008a74 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008a46:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac0 <LSM6DSV16X_0_Probe+0x188>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ac4 <LSM6DSV16X_0_Probe+0x18c>)
 8008a4c:	3303      	adds	r3, #3
 8008a4e:	491f      	ldr	r1, [pc, #124]	@ (8008acc <LSM6DSV16X_0_Probe+0x194>)
 8008a50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 8008a54:	4b18      	ldr	r3, [pc, #96]	@ (8008ab8 <LSM6DSV16X_0_Probe+0x180>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a16      	ldr	r2, [pc, #88]	@ (8008ab4 <LSM6DSV16X_0_Probe+0x17c>)
 8008a5c:	6852      	ldr	r2, [r2, #4]
 8008a5e:	4610      	mov	r0, r2
 8008a60:	4798      	blx	r3
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a68:	f06f 0304 	mvn.w	r3, #4
 8008a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a6e:	e001      	b.n	8008a74 <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d107      	bne.n	8008a8a <LSM6DSV16X_0_Probe+0x152>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a84:	f06f 0304 	mvn.w	r3, #4
 8008a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8008a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3750      	adds	r7, #80	@ 0x50
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	08001985 	.word	0x08001985
 8008a98:	08001a01 	.word	0x08001a01
 8008a9c:	08001ab5 	.word	0x08001ab5
 8008aa0:	08001a51 	.word	0x08001a51
 8008aa4:	08001b19 	.word	0x08001b19
 8008aa8:	0800913d 	.word	0x0800913d
 8008aac:	2400176c 	.word	0x2400176c
 8008ab0:	24001728 	.word	0x24001728
 8008ab4:	240016d8 	.word	0x240016d8
 8008ab8:	24001718 	.word	0x24001718
 8008abc:	240000cc 	.word	0x240000cc
 8008ac0:	24000124 	.word	0x24000124
 8008ac4:	240016e8 	.word	0x240016e8
 8008ac8:	24000100 	.word	0x24000100
 8008acc:	240000dc 	.word	0x240000dc

08008ad0 <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b094      	sub	sp, #80	@ 0x50
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 8008adc:	2300      	movs	r3, #0
 8008ade:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 8008ae0:	2333      	movs	r3, #51	@ 0x33
 8008ae2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 8008ae6:	4b47      	ldr	r3, [pc, #284]	@ (8008c04 <LIS2DUXS12_0_Probe+0x134>)
 8008ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 8008aea:	4b47      	ldr	r3, [pc, #284]	@ (8008c08 <LIS2DUXS12_0_Probe+0x138>)
 8008aec:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 8008aee:	4b47      	ldr	r3, [pc, #284]	@ (8008c0c <LIS2DUXS12_0_Probe+0x13c>)
 8008af0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 8008af2:	4b47      	ldr	r3, [pc, #284]	@ (8008c10 <LIS2DUXS12_0_Probe+0x140>)
 8008af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 8008af6:	4b47      	ldr	r3, [pc, #284]	@ (8008c14 <LIS2DUXS12_0_Probe+0x144>)
 8008af8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 8008afa:	4b47      	ldr	r3, [pc, #284]	@ (8008c18 <LIS2DUXS12_0_Probe+0x148>)
 8008afc:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 8008afe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008b02:	4619      	mov	r1, r3
 8008b04:	4845      	ldr	r0, [pc, #276]	@ (8008c1c <LIS2DUXS12_0_Probe+0x14c>)
 8008b06:	f7f9 fa77 	bl	8001ff8 <LIS2DUXS12_RegisterBusIO>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b10:	f06f 0306 	mvn.w	r3, #6
 8008b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b16:	e070      	b.n	8008bfa <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4840      	ldr	r0, [pc, #256]	@ (8008c1c <LIS2DUXS12_0_Probe+0x14c>)
 8008b1c:	f7f9 fee0 	bl	80028e0 <LIS2DUXS12_Set_Mem_Bank>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b26:	f06f 0306 	mvn.w	r3, #6
 8008b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b2c:	e065      	b.n	8008bfa <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 8008b2e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008b32:	4619      	mov	r1, r3
 8008b34:	4839      	ldr	r0, [pc, #228]	@ (8008c1c <LIS2DUXS12_0_Probe+0x14c>)
 8008b36:	f7f9 fbba 	bl	80022ae <LIS2DUXS12_ReadID>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b40:	f06f 0306 	mvn.w	r3, #6
 8008b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b46:	e058      	b.n	8008bfa <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 8008b48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b4c:	2b47      	cmp	r3, #71	@ 0x47
 8008b4e:	d003      	beq.n	8008b58 <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b50:	f06f 0306 	mvn.w	r3, #6
 8008b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b56:	e050      	b.n	8008bfa <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 8008b58:	f107 030c 	add.w	r3, r7, #12
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	482f      	ldr	r0, [pc, #188]	@ (8008c1c <LIS2DUXS12_0_Probe+0x14c>)
 8008b60:	f7f9 fbc0 	bl	80022e4 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008b64:	7b7b      	ldrb	r3, [r7, #13]
 8008b66:	461a      	mov	r2, r3
 8008b68:	7b3b      	ldrb	r3, [r7, #12]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4313      	orrs	r3, r2
 8008b74:	4a2a      	ldr	r2, [pc, #168]	@ (8008c20 <LIS2DUXS12_0_Probe+0x150>)
 8008b76:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 8008b78:	4b2a      	ldr	r3, [pc, #168]	@ (8008c24 <LIS2DUXS12_0_Probe+0x154>)
 8008b7a:	4a28      	ldr	r2, [pc, #160]	@ (8008c1c <LIS2DUXS12_0_Probe+0x14c>)
 8008b7c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 8008b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8008c28 <LIS2DUXS12_0_Probe+0x158>)
 8008b80:	4a2a      	ldr	r2, [pc, #168]	@ (8008c2c <LIS2DUXS12_0_Probe+0x15c>)
 8008b82:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <LIS2DUXS12_0_Probe+0xd0>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <LIS2DUXS12_0_Probe+0xd0>
 8008b94:	7b7b      	ldrb	r3, [r7, #13]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d102      	bne.n	8008ba0 <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b9a:	f06f 0304 	mvn.w	r3, #4
 8008b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d11e      	bne.n	8008be4 <LIS2DUXS12_0_Probe+0x114>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f003 0302 	and.w	r3, r3, #2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d019      	beq.n	8008be4 <LIS2DUXS12_0_Probe+0x114>
 8008bb0:	7b3b      	ldrb	r3, [r7, #12]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d116      	bne.n	8008be4 <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8008c30 <LIS2DUXS12_0_Probe+0x160>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	4a1e      	ldr	r2, [pc, #120]	@ (8008c34 <LIS2DUXS12_0_Probe+0x164>)
 8008bbc:	3306      	adds	r3, #6
 8008bbe:	491e      	ldr	r1, [pc, #120]	@ (8008c38 <LIS2DUXS12_0_Probe+0x168>)
 8008bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 8008bc4:	4b18      	ldr	r3, [pc, #96]	@ (8008c28 <LIS2DUXS12_0_Probe+0x158>)
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a16      	ldr	r2, [pc, #88]	@ (8008c24 <LIS2DUXS12_0_Probe+0x154>)
 8008bcc:	6892      	ldr	r2, [r2, #8]
 8008bce:	4610      	mov	r0, r2
 8008bd0:	4798      	blx	r3
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bd8:	f06f 0304 	mvn.w	r3, #4
 8008bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bde:	e001      	b.n	8008be4 <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008be0:	2300      	movs	r3, #0
 8008be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d107      	bne.n	8008bfa <LIS2DUXS12_0_Probe+0x12a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bf4:	f06f 0304 	mvn.w	r3, #4
 8008bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8008bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3750      	adds	r7, #80	@ 0x50
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	08001985 	.word	0x08001985
 8008c08:	08001a01 	.word	0x08001a01
 8008c0c:	08001ab5 	.word	0x08001ab5
 8008c10:	08001a51 	.word	0x08001a51
 8008c14:	08001b19 	.word	0x08001b19
 8008c18:	0800913d 	.word	0x0800913d
 8008c1c:	240017a4 	.word	0x240017a4
 8008c20:	24001728 	.word	0x24001728
 8008c24:	240016d8 	.word	0x240016d8
 8008c28:	24001718 	.word	0x24001718
 8008c2c:	2400000c 	.word	0x2400000c
 8008c30:	24000124 	.word	0x24000124
 8008c34:	240016e8 	.word	0x240016e8
 8008c38:	2400001c 	.word	0x2400001c

08008c3c <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b094      	sub	sp, #80	@ 0x50
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 8008c44:	2300      	movs	r3, #0
 8008c46:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 8008c48:	2300      	movs	r3, #0
 8008c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 8008c4c:	23d5      	movs	r3, #213	@ 0xd5
 8008c4e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 8008c52:	4b51      	ldr	r3, [pc, #324]	@ (8008d98 <LSM6DSO16IS_0_Probe+0x15c>)
 8008c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 8008c56:	4b51      	ldr	r3, [pc, #324]	@ (8008d9c <LSM6DSO16IS_0_Probe+0x160>)
 8008c58:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 8008c5a:	4b51      	ldr	r3, [pc, #324]	@ (8008da0 <LSM6DSO16IS_0_Probe+0x164>)
 8008c5c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 8008c5e:	4b51      	ldr	r3, [pc, #324]	@ (8008da4 <LSM6DSO16IS_0_Probe+0x168>)
 8008c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 8008c62:	4b51      	ldr	r3, [pc, #324]	@ (8008da8 <LSM6DSO16IS_0_Probe+0x16c>)
 8008c64:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 8008c66:	4b51      	ldr	r3, [pc, #324]	@ (8008dac <LSM6DSO16IS_0_Probe+0x170>)
 8008c68:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 8008c6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008c6e:	4619      	mov	r1, r3
 8008c70:	484f      	ldr	r0, [pc, #316]	@ (8008db0 <LSM6DSO16IS_0_Probe+0x174>)
 8008c72:	f7fb fea7 	bl	80049c4 <LSM6DSO16IS_RegisterBusIO>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c7c:	f06f 0306 	mvn.w	r3, #6
 8008c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c82:	e084      	b.n	8008d8e <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8008c84:	2100      	movs	r1, #0
 8008c86:	484a      	ldr	r0, [pc, #296]	@ (8008db0 <LSM6DSO16IS_0_Probe+0x174>)
 8008c88:	f7fc fccd 	bl	8005626 <LSM6DSO16IS_Set_Mem_Bank>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c92:	f06f 0306 	mvn.w	r3, #6
 8008c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c98:	e079      	b.n	8008d8e <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 8008c9a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4843      	ldr	r0, [pc, #268]	@ (8008db0 <LSM6DSO16IS_0_Probe+0x174>)
 8008ca2:	f7fb ff8d 	bl	8004bc0 <LSM6DSO16IS_ReadID>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008cac:	f06f 0306 	mvn.w	r3, #6
 8008cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cb2:	e06c      	b.n	8008d8e <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 8008cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008cb8:	2b22      	cmp	r3, #34	@ 0x22
 8008cba:	d003      	beq.n	8008cc4 <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008cbc:	f06f 0306 	mvn.w	r3, #6
 8008cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cc2:	e064      	b.n	8008d8e <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 8008cc4:	f107 030c 	add.w	r3, r7, #12
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4839      	ldr	r0, [pc, #228]	@ (8008db0 <LSM6DSO16IS_0_Probe+0x174>)
 8008ccc:	f7fb ff90 	bl	8004bf0 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008cd0:	7b7b      	ldrb	r3, [r7, #13]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	7b3b      	ldrb	r3, [r7, #12]
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	4a34      	ldr	r2, [pc, #208]	@ (8008db4 <LSM6DSO16IS_0_Probe+0x178>)
 8008ce2:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 8008ce4:	4b34      	ldr	r3, [pc, #208]	@ (8008db8 <LSM6DSO16IS_0_Probe+0x17c>)
 8008ce6:	4a32      	ldr	r2, [pc, #200]	@ (8008db0 <LSM6DSO16IS_0_Probe+0x174>)
 8008ce8:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 8008cea:	4b34      	ldr	r3, [pc, #208]	@ (8008dbc <LSM6DSO16IS_0_Probe+0x180>)
 8008cec:	4a34      	ldr	r2, [pc, #208]	@ (8008dc0 <LSM6DSO16IS_0_Probe+0x184>)
 8008cee:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d11e      	bne.n	8008d34 <LSM6DSO16IS_0_Probe+0xf8>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d019      	beq.n	8008d34 <LSM6DSO16IS_0_Probe+0xf8>
 8008d00:	7b7b      	ldrb	r3, [r7, #13]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d116      	bne.n	8008d34 <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008d06:	4b2f      	ldr	r3, [pc, #188]	@ (8008dc4 <LSM6DSO16IS_0_Probe+0x188>)
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8008dc8 <LSM6DSO16IS_0_Probe+0x18c>)
 8008d0c:	3309      	adds	r3, #9
 8008d0e:	492f      	ldr	r1, [pc, #188]	@ (8008dcc <LSM6DSO16IS_0_Probe+0x190>)
 8008d10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 8008d14:	4b29      	ldr	r3, [pc, #164]	@ (8008dbc <LSM6DSO16IS_0_Probe+0x180>)
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a27      	ldr	r2, [pc, #156]	@ (8008db8 <LSM6DSO16IS_0_Probe+0x17c>)
 8008d1c:	68d2      	ldr	r2, [r2, #12]
 8008d1e:	4610      	mov	r0, r2
 8008d20:	4798      	blx	r3
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d28:	f06f 0304 	mvn.w	r3, #4
 8008d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d2e:	e001      	b.n	8008d34 <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008d30:	2300      	movs	r3, #0
 8008d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d11e      	bne.n	8008d78 <LSM6DSO16IS_0_Probe+0x13c>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d019      	beq.n	8008d78 <LSM6DSO16IS_0_Probe+0x13c>
 8008d44:	7b3b      	ldrb	r3, [r7, #12]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d116      	bne.n	8008d78 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008dc4 <LSM6DSO16IS_0_Probe+0x188>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8008dc8 <LSM6DSO16IS_0_Probe+0x18c>)
 8008d50:	3309      	adds	r3, #9
 8008d52:	491f      	ldr	r1, [pc, #124]	@ (8008dd0 <LSM6DSO16IS_0_Probe+0x194>)
 8008d54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 8008d58:	4b18      	ldr	r3, [pc, #96]	@ (8008dbc <LSM6DSO16IS_0_Probe+0x180>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a16      	ldr	r2, [pc, #88]	@ (8008db8 <LSM6DSO16IS_0_Probe+0x17c>)
 8008d60:	68d2      	ldr	r2, [r2, #12]
 8008d62:	4610      	mov	r0, r2
 8008d64:	4798      	blx	r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d6c:	f06f 0304 	mvn.w	r3, #4
 8008d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d72:	e001      	b.n	8008d78 <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008d74:	2300      	movs	r3, #0
 8008d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d107      	bne.n	8008d8e <LSM6DSO16IS_0_Probe+0x152>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f003 0304 	and.w	r3, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d88:	f06f 0304 	mvn.w	r3, #4
 8008d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8008d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3750      	adds	r7, #80	@ 0x50
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	08001985 	.word	0x08001985
 8008d9c:	08001a01 	.word	0x08001a01
 8008da0:	08001ab5 	.word	0x08001ab5
 8008da4:	08001a51 	.word	0x08001a51
 8008da8:	08001b19 	.word	0x08001b19
 8008dac:	0800913d 	.word	0x0800913d
 8008db0:	240017e0 	.word	0x240017e0
 8008db4:	24001728 	.word	0x24001728
 8008db8:	240016d8 	.word	0x240016d8
 8008dbc:	24001718 	.word	0x24001718
 8008dc0:	24000074 	.word	0x24000074
 8008dc4:	24000124 	.word	0x24000124
 8008dc8:	240016e8 	.word	0x240016e8
 8008dcc:	240000a8 	.word	0x240000a8
 8008dd0:	24000084 	.word	0x24000084

08008dd4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08c      	sub	sp, #48	@ 0x30
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d009      	beq.n	8008dfc <BSP_LED_Init+0x28>
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d006      	beq.n	8008dfc <BSP_LED_Init+0x28>
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d003      	beq.n	8008dfc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008df4:	f06f 0301 	mvn.w	r3, #1
 8008df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dfa:	e055      	b.n	8008ea8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10f      	bne.n	8008e22 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8008e02:	4b2c      	ldr	r3, [pc, #176]	@ (8008eb4 <BSP_LED_Init+0xe0>)
 8008e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e08:	4a2a      	ldr	r2, [pc, #168]	@ (8008eb4 <BSP_LED_Init+0xe0>)
 8008e0a:	f043 0302 	orr.w	r3, r3, #2
 8008e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e12:	4b28      	ldr	r3, [pc, #160]	@ (8008eb4 <BSP_LED_Init+0xe0>)
 8008e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	e021      	b.n	8008e66 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d10f      	bne.n	8008e48 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8008e28:	4b22      	ldr	r3, [pc, #136]	@ (8008eb4 <BSP_LED_Init+0xe0>)
 8008e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e2e:	4a21      	ldr	r2, [pc, #132]	@ (8008eb4 <BSP_LED_Init+0xe0>)
 8008e30:	f043 0310 	orr.w	r3, r3, #16
 8008e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e38:	4b1e      	ldr	r3, [pc, #120]	@ (8008eb4 <BSP_LED_Init+0xe0>)
 8008e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e3e:	f003 0310 	and.w	r3, r3, #16
 8008e42:	613b      	str	r3, [r7, #16]
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	e00e      	b.n	8008e66 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8008e48:	4b1a      	ldr	r3, [pc, #104]	@ (8008eb4 <BSP_LED_Init+0xe0>)
 8008e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e4e:	4a19      	ldr	r2, [pc, #100]	@ (8008eb4 <BSP_LED_Init+0xe0>)
 8008e50:	f043 0302 	orr.w	r3, r3, #2
 8008e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e58:	4b16      	ldr	r3, [pc, #88]	@ (8008eb4 <BSP_LED_Init+0xe0>)
 8008e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	4a13      	ldr	r2, [pc, #76]	@ (8008eb8 <BSP_LED_Init+0xe4>)
 8008e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e6e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8008e70:	2301      	movs	r3, #1
 8008e72:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8008ebc <BSP_LED_Init+0xe8>)
 8008e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e84:	f107 0218 	add.w	r2, r7, #24
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fc58 	bl	8009740 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	4a0a      	ldr	r2, [pc, #40]	@ (8008ebc <BSP_LED_Init+0xe8>)
 8008e94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	4a07      	ldr	r2, [pc, #28]	@ (8008eb8 <BSP_LED_Init+0xe4>)
 8008e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	f000 ff0e 	bl	8009cc4 <HAL_GPIO_WritePin>
  }

  return ret;
 8008ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3730      	adds	r7, #48	@ 0x30
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	58024400 	.word	0x58024400
 8008eb8:	0801c57c 	.word	0x0801c57c
 8008ebc:	24000144 	.word	0x24000144

08008ec0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	460a      	mov	r2, r1
 8008eca:	71fb      	strb	r3, [r7, #7]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8008ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8008f8c <BSP_PB_Init+0xcc>)
 8008ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8008f8c <BSP_PB_Init+0xcc>)
 8008ed8:	f043 0304 	orr.w	r3, r3, #4
 8008edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8008f8c <BSP_PB_Init+0xcc>)
 8008ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	60bb      	str	r3, [r7, #8]
 8008eec:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8008eee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008ef2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8008efc:	79bb      	ldrb	r3, [r7, #6]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10c      	bne.n	8008f1c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008f02:	2300      	movs	r3, #0
 8008f04:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	4a21      	ldr	r2, [pc, #132]	@ (8008f90 <BSP_PB_Init+0xd0>)
 8008f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f0e:	f107 020c 	add.w	r2, r7, #12
 8008f12:	4611      	mov	r1, r2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fc13 	bl	8009740 <HAL_GPIO_Init>
 8008f1a:	e031      	b.n	8008f80 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008f1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8008f20:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	4a1a      	ldr	r2, [pc, #104]	@ (8008f90 <BSP_PB_Init+0xd0>)
 8008f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f2a:	f107 020c 	add.w	r2, r7, #12
 8008f2e:	4611      	mov	r1, r2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fc05 	bl	8009740 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	4a16      	ldr	r2, [pc, #88]	@ (8008f94 <BSP_PB_Init+0xd4>)
 8008f3c:	441a      	add	r2, r3
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	4915      	ldr	r1, [pc, #84]	@ (8008f98 <BSP_PB_Init+0xd8>)
 8008f42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f46:	4619      	mov	r1, r3
 8008f48:	4610      	mov	r0, r2
 8008f4a:	f000 fbb4 	bl	80096b6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	4a10      	ldr	r2, [pc, #64]	@ (8008f94 <BSP_PB_Init+0xd4>)
 8008f54:	1898      	adds	r0, r3, r2
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	4a10      	ldr	r2, [pc, #64]	@ (8008f9c <BSP_PB_Init+0xdc>)
 8008f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	2100      	movs	r1, #0
 8008f62:	f000 fb89 	bl	8009678 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008f66:	2028      	movs	r0, #40	@ 0x28
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8008fa0 <BSP_PB_Init+0xe0>)
 8008f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f70:	2200      	movs	r2, #0
 8008f72:	4619      	mov	r1, r3
 8008f74:	f000 f9e1 	bl	800933a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8008f78:	2328      	movs	r3, #40	@ 0x28
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 f9f7 	bl	800936e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3720      	adds	r7, #32
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	58024400 	.word	0x58024400
 8008f90:	24000150 	.word	0x24000150
 8008f94:	24001818 	.word	0x24001818
 8008f98:	0801c584 	.word	0x0801c584
 8008f9c:	24000154 	.word	0x24000154
 8008fa0:	24000158 	.word	0x24000158

08008fa4 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: Wakeup Push Button
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	4a06      	ldr	r2, [pc, #24]	@ (8008fcc <BSP_PB_GetState+0x28>)
 8008fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008fba:	4611      	mov	r1, r2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 fe69 	bl	8009c94 <HAL_GPIO_ReadPin>
 8008fc2:	4603      	mov	r3, r0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	24000150 	.word	0x24000150

08008fd0 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8008fd8:	4b09      	ldr	r3, [pc, #36]	@ (8009000 <__io_putchar+0x30>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	2394      	movs	r3, #148	@ 0x94
 8008fe0:	fb02 f303 	mul.w	r3, r2, r3
 8008fe4:	4a07      	ldr	r2, [pc, #28]	@ (8009004 <__io_putchar+0x34>)
 8008fe6:	1898      	adds	r0, r3, r2
 8008fe8:	1d39      	adds	r1, r7, #4
 8008fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f004 fab6 	bl	800d560 <HAL_UART_Transmit>
  return ch;
 8008ff4:	687b      	ldr	r3, [r7, #4]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	240018b4 	.word	0x240018b4
 8009004:	24001820 	.word	0x24001820

08009008 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800900c:	2000      	movs	r0, #0
 800900e:	f005 fcc5 	bl	800e99c <BSP_PB_Callback>
}
 8009012:	bf00      	nop
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800901e:	2003      	movs	r0, #3
 8009020:	f000 f980 	bl	8009324 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009024:	f002 fab4 	bl	800b590 <HAL_RCC_GetSysClockFreq>
 8009028:	4602      	mov	r2, r0
 800902a:	4b15      	ldr	r3, [pc, #84]	@ (8009080 <HAL_Init+0x68>)
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	0a1b      	lsrs	r3, r3, #8
 8009030:	f003 030f 	and.w	r3, r3, #15
 8009034:	4913      	ldr	r1, [pc, #76]	@ (8009084 <HAL_Init+0x6c>)
 8009036:	5ccb      	ldrb	r3, [r1, r3]
 8009038:	f003 031f 	and.w	r3, r3, #31
 800903c:	fa22 f303 	lsr.w	r3, r2, r3
 8009040:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009042:	4b0f      	ldr	r3, [pc, #60]	@ (8009080 <HAL_Init+0x68>)
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	4a0e      	ldr	r2, [pc, #56]	@ (8009084 <HAL_Init+0x6c>)
 800904c:	5cd3      	ldrb	r3, [r2, r3]
 800904e:	f003 031f 	and.w	r3, r3, #31
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	fa22 f303 	lsr.w	r3, r2, r3
 8009058:	4a0b      	ldr	r2, [pc, #44]	@ (8009088 <HAL_Init+0x70>)
 800905a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800905c:	4a0b      	ldr	r2, [pc, #44]	@ (800908c <HAL_Init+0x74>)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009062:	2000      	movs	r0, #0
 8009064:	f000 f814 	bl	8009090 <HAL_InitTick>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e002      	b.n	8009078 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009072:	f7f8 fba7 	bl	80017c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	58024400 	.word	0x58024400
 8009084:	0801c56c 	.word	0x0801c56c
 8009088:	24000008 	.word	0x24000008
 800908c:	24000004 	.word	0x24000004

08009090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009098:	4b15      	ldr	r3, [pc, #84]	@ (80090f0 <HAL_InitTick+0x60>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e021      	b.n	80090e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80090a4:	4b13      	ldr	r3, [pc, #76]	@ (80090f4 <HAL_InitTick+0x64>)
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	4b11      	ldr	r3, [pc, #68]	@ (80090f0 <HAL_InitTick+0x60>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80090b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80090b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f965 	bl	800938a <HAL_SYSTICK_Config>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e00e      	b.n	80090e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b0f      	cmp	r3, #15
 80090ce:	d80a      	bhi.n	80090e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80090d0:	2200      	movs	r2, #0
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	f000 f92f 	bl	800933a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80090dc:	4a06      	ldr	r2, [pc, #24]	@ (80090f8 <HAL_InitTick+0x68>)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	e000      	b.n	80090e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	24000160 	.word	0x24000160
 80090f4:	24000004 	.word	0x24000004
 80090f8:	2400015c 	.word	0x2400015c

080090fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009100:	4b06      	ldr	r3, [pc, #24]	@ (800911c <HAL_IncTick+0x20>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	461a      	mov	r2, r3
 8009106:	4b06      	ldr	r3, [pc, #24]	@ (8009120 <HAL_IncTick+0x24>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4413      	add	r3, r2
 800910c:	4a04      	ldr	r2, [pc, #16]	@ (8009120 <HAL_IncTick+0x24>)
 800910e:	6013      	str	r3, [r2, #0]
}
 8009110:	bf00      	nop
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	24000160 	.word	0x24000160
 8009120:	240018b8 	.word	0x240018b8

08009124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0
  return uwTick;
 8009128:	4b03      	ldr	r3, [pc, #12]	@ (8009138 <HAL_GetTick+0x14>)
 800912a:	681b      	ldr	r3, [r3, #0]
}
 800912c:	4618      	mov	r0, r3
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	240018b8 	.word	0x240018b8

0800913c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009144:	f7ff ffee 	bl	8009124 <HAL_GetTick>
 8009148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	d005      	beq.n	8009162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009156:	4b0a      	ldr	r3, [pc, #40]	@ (8009180 <HAL_Delay+0x44>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009162:	bf00      	nop
 8009164:	f7ff ffde 	bl	8009124 <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	429a      	cmp	r2, r3
 8009172:	d8f7      	bhi.n	8009164 <HAL_Delay+0x28>
  {
  }
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	24000160 	.word	0x24000160

08009184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f003 0307 	and.w	r3, r3, #7
 8009192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009194:	4b0b      	ldr	r3, [pc, #44]	@ (80091c4 <__NVIC_SetPriorityGrouping+0x40>)
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80091a0:	4013      	ands	r3, r2
 80091a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80091ac:	4b06      	ldr	r3, [pc, #24]	@ (80091c8 <__NVIC_SetPriorityGrouping+0x44>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091b2:	4a04      	ldr	r2, [pc, #16]	@ (80091c4 <__NVIC_SetPriorityGrouping+0x40>)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	60d3      	str	r3, [r2, #12]
}
 80091b8:	bf00      	nop
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	e000ed00 	.word	0xe000ed00
 80091c8:	05fa0000 	.word	0x05fa0000

080091cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091d0:	4b04      	ldr	r3, [pc, #16]	@ (80091e4 <__NVIC_GetPriorityGrouping+0x18>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	0a1b      	lsrs	r3, r3, #8
 80091d6:	f003 0307 	and.w	r3, r3, #7
}
 80091da:	4618      	mov	r0, r3
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	e000ed00 	.word	0xe000ed00

080091e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80091f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	db0b      	blt.n	8009212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	f003 021f 	and.w	r2, r3, #31
 8009200:	4907      	ldr	r1, [pc, #28]	@ (8009220 <__NVIC_EnableIRQ+0x38>)
 8009202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009206:	095b      	lsrs	r3, r3, #5
 8009208:	2001      	movs	r0, #1
 800920a:	fa00 f202 	lsl.w	r2, r0, r2
 800920e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	e000e100 	.word	0xe000e100

08009224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	6039      	str	r1, [r7, #0]
 800922e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009234:	2b00      	cmp	r3, #0
 8009236:	db0a      	blt.n	800924e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	b2da      	uxtb	r2, r3
 800923c:	490c      	ldr	r1, [pc, #48]	@ (8009270 <__NVIC_SetPriority+0x4c>)
 800923e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009242:	0112      	lsls	r2, r2, #4
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	440b      	add	r3, r1
 8009248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800924c:	e00a      	b.n	8009264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	b2da      	uxtb	r2, r3
 8009252:	4908      	ldr	r1, [pc, #32]	@ (8009274 <__NVIC_SetPriority+0x50>)
 8009254:	88fb      	ldrh	r3, [r7, #6]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	3b04      	subs	r3, #4
 800925c:	0112      	lsls	r2, r2, #4
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	440b      	add	r3, r1
 8009262:	761a      	strb	r2, [r3, #24]
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	e000e100 	.word	0xe000e100
 8009274:	e000ed00 	.word	0xe000ed00

08009278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009278:	b480      	push	{r7}
 800927a:	b089      	sub	sp, #36	@ 0x24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	f1c3 0307 	rsb	r3, r3, #7
 8009292:	2b04      	cmp	r3, #4
 8009294:	bf28      	it	cs
 8009296:	2304      	movcs	r3, #4
 8009298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	3304      	adds	r3, #4
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d902      	bls.n	80092a8 <NVIC_EncodePriority+0x30>
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	3b03      	subs	r3, #3
 80092a6:	e000      	b.n	80092aa <NVIC_EncodePriority+0x32>
 80092a8:	2300      	movs	r3, #0
 80092aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092ac:	f04f 32ff 	mov.w	r2, #4294967295
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	fa02 f303 	lsl.w	r3, r2, r3
 80092b6:	43da      	mvns	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	401a      	ands	r2, r3
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092c0:	f04f 31ff 	mov.w	r1, #4294967295
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ca:	43d9      	mvns	r1, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092d0:	4313      	orrs	r3, r2
         );
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3724      	adds	r7, #36	@ 0x24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092f0:	d301      	bcc.n	80092f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80092f2:	2301      	movs	r3, #1
 80092f4:	e00f      	b.n	8009316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80092f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009320 <SysTick_Config+0x40>)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80092fe:	210f      	movs	r1, #15
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	f7ff ff8e 	bl	8009224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009308:	4b05      	ldr	r3, [pc, #20]	@ (8009320 <SysTick_Config+0x40>)
 800930a:	2200      	movs	r2, #0
 800930c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800930e:	4b04      	ldr	r3, [pc, #16]	@ (8009320 <SysTick_Config+0x40>)
 8009310:	2207      	movs	r2, #7
 8009312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	e000e010 	.word	0xe000e010

08009324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff29 	bl	8009184 <__NVIC_SetPriorityGrouping>
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	4603      	mov	r3, r0
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	607a      	str	r2, [r7, #4]
 8009346:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009348:	f7ff ff40 	bl	80091cc <__NVIC_GetPriorityGrouping>
 800934c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	6978      	ldr	r0, [r7, #20]
 8009354:	f7ff ff90 	bl	8009278 <NVIC_EncodePriority>
 8009358:	4602      	mov	r2, r0
 800935a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800935e:	4611      	mov	r1, r2
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff ff5f 	bl	8009224 <__NVIC_SetPriority>
}
 8009366:	bf00      	nop
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	4603      	mov	r3, r0
 8009376:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff ff33 	bl	80091e8 <__NVIC_EnableIRQ>
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff ffa4 	bl	80092e0 <SysTick_Config>
 8009398:	4603      	mov	r3, r0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80093a8:	f3bf 8f5f 	dmb	sy
}
 80093ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80093ae:	4b07      	ldr	r3, [pc, #28]	@ (80093cc <HAL_MPU_Disable+0x28>)
 80093b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b2:	4a06      	ldr	r2, [pc, #24]	@ (80093cc <HAL_MPU_Disable+0x28>)
 80093b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80093ba:	4b05      	ldr	r3, [pc, #20]	@ (80093d0 <HAL_MPU_Disable+0x2c>)
 80093bc:	2200      	movs	r2, #0
 80093be:	605a      	str	r2, [r3, #4]
}
 80093c0:	bf00      	nop
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	e000ed00 	.word	0xe000ed00
 80093d0:	e000ed90 	.word	0xe000ed90

080093d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80093dc:	4a0b      	ldr	r2, [pc, #44]	@ (800940c <HAL_MPU_Enable+0x38>)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f043 0301 	orr.w	r3, r3, #1
 80093e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80093e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009410 <HAL_MPU_Enable+0x3c>)
 80093e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ea:	4a09      	ldr	r2, [pc, #36]	@ (8009410 <HAL_MPU_Enable+0x3c>)
 80093ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80093f2:	f3bf 8f4f 	dsb	sy
}
 80093f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80093f8:	f3bf 8f6f 	isb	sy
}
 80093fc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80093fe:	bf00      	nop
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	e000ed90 	.word	0xe000ed90
 8009410:	e000ed00 	.word	0xe000ed00

08009414 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	785a      	ldrb	r2, [r3, #1]
 8009420:	4b1b      	ldr	r3, [pc, #108]	@ (8009490 <HAL_MPU_ConfigRegion+0x7c>)
 8009422:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8009424:	4b1a      	ldr	r3, [pc, #104]	@ (8009490 <HAL_MPU_ConfigRegion+0x7c>)
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	4a19      	ldr	r2, [pc, #100]	@ (8009490 <HAL_MPU_ConfigRegion+0x7c>)
 800942a:	f023 0301 	bic.w	r3, r3, #1
 800942e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8009430:	4a17      	ldr	r2, [pc, #92]	@ (8009490 <HAL_MPU_ConfigRegion+0x7c>)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	7b1b      	ldrb	r3, [r3, #12]
 800943c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	7adb      	ldrb	r3, [r3, #11]
 8009442:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009444:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	7a9b      	ldrb	r3, [r3, #10]
 800944a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800944c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	7b5b      	ldrb	r3, [r3, #13]
 8009452:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009454:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	7b9b      	ldrb	r3, [r3, #14]
 800945a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800945c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	7bdb      	ldrb	r3, [r3, #15]
 8009462:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009464:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	7a5b      	ldrb	r3, [r3, #9]
 800946a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800946c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	7a1b      	ldrb	r3, [r3, #8]
 8009472:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009474:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	7812      	ldrb	r2, [r2, #0]
 800947a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800947c:	4a04      	ldr	r2, [pc, #16]	@ (8009490 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800947e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009480:	6113      	str	r3, [r2, #16]
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	e000ed90 	.word	0xe000ed90

08009494 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e054      	b.n	8009550 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	7f5b      	ldrb	r3, [r3, #29]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d105      	bne.n	80094bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7f8 f99e 	bl	80017f8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2202      	movs	r2, #2
 80094c0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	791b      	ldrb	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10c      	bne.n	80094e4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a22      	ldr	r2, [pc, #136]	@ (8009558 <HAL_CRC_Init+0xc4>)
 80094d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 0218 	bic.w	r2, r2, #24
 80094e0:	609a      	str	r2, [r3, #8]
 80094e2:	e00c      	b.n	80094fe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6899      	ldr	r1, [r3, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	461a      	mov	r2, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f834 	bl	800955c <HAL_CRCEx_Polynomial_Set>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e028      	b.n	8009550 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	795b      	ldrb	r3, [r3, #5]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d105      	bne.n	8009512 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f04f 32ff 	mov.w	r2, #4294967295
 800950e:	611a      	str	r2, [r3, #16]
 8009510:	e004      	b.n	800951c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	6912      	ldr	r2, [r2, #16]
 800951a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	695a      	ldr	r2, [r3, #20]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	699a      	ldr	r2, [r3, #24]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	430a      	orrs	r2, r1
 8009546:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	04c11db7 	.word	0x04c11db7

0800955c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800955c:	b480      	push	{r7}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800956c:	231f      	movs	r3, #31
 800956e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d102      	bne.n	8009580 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	75fb      	strb	r3, [r7, #23]
 800957e:	e063      	b.n	8009648 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009580:	bf00      	nop
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	1e5a      	subs	r2, r3, #1
 8009586:	613a      	str	r2, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d009      	beq.n	80095a0 <HAL_CRCEx_Polynomial_Set+0x44>
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f003 031f 	and.w	r3, r3, #31
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0f0      	beq.n	8009582 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b18      	cmp	r3, #24
 80095a4:	d846      	bhi.n	8009634 <HAL_CRCEx_Polynomial_Set+0xd8>
 80095a6:	a201      	add	r2, pc, #4	@ (adr r2, 80095ac <HAL_CRCEx_Polynomial_Set+0x50>)
 80095a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ac:	0800963b 	.word	0x0800963b
 80095b0:	08009635 	.word	0x08009635
 80095b4:	08009635 	.word	0x08009635
 80095b8:	08009635 	.word	0x08009635
 80095bc:	08009635 	.word	0x08009635
 80095c0:	08009635 	.word	0x08009635
 80095c4:	08009635 	.word	0x08009635
 80095c8:	08009635 	.word	0x08009635
 80095cc:	08009629 	.word	0x08009629
 80095d0:	08009635 	.word	0x08009635
 80095d4:	08009635 	.word	0x08009635
 80095d8:	08009635 	.word	0x08009635
 80095dc:	08009635 	.word	0x08009635
 80095e0:	08009635 	.word	0x08009635
 80095e4:	08009635 	.word	0x08009635
 80095e8:	08009635 	.word	0x08009635
 80095ec:	0800961d 	.word	0x0800961d
 80095f0:	08009635 	.word	0x08009635
 80095f4:	08009635 	.word	0x08009635
 80095f8:	08009635 	.word	0x08009635
 80095fc:	08009635 	.word	0x08009635
 8009600:	08009635 	.word	0x08009635
 8009604:	08009635 	.word	0x08009635
 8009608:	08009635 	.word	0x08009635
 800960c:	08009611 	.word	0x08009611
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	2b06      	cmp	r3, #6
 8009614:	d913      	bls.n	800963e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800961a:	e010      	b.n	800963e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	2b07      	cmp	r3, #7
 8009620:	d90f      	bls.n	8009642 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009626:	e00c      	b.n	8009642 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2b0f      	cmp	r3, #15
 800962c:	d90b      	bls.n	8009646 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009632:	e008      	b.n	8009646 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	75fb      	strb	r3, [r7, #23]
        break;
 8009638:	e006      	b.n	8009648 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800963a:	bf00      	nop
 800963c:	e004      	b.n	8009648 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800963e:	bf00      	nop
 8009640:	e002      	b.n	8009648 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009642:	bf00      	nop
 8009644:	e000      	b.n	8009648 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009646:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10d      	bne.n	800966a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f023 0118 	bic.w	r1, r3, #24
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	430a      	orrs	r2, r1
 8009668:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
}
 800966c:	4618      	mov	r0, r3
 800966e:	371c      	adds	r7, #28
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009678:	b480      	push	{r7}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	460b      	mov	r3, r1
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e00a      	b.n	80096aa <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8009694:	7afb      	ldrb	r3, [r7, #11]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	605a      	str	r2, [r3, #4]
      break;
 80096a0:	e002      	b.n	80096a8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	75fb      	strb	r3, [r7, #23]
      break;
 80096a6:	bf00      	nop
  }

  return status;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	371c      	adds	r7, #28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e003      	b.n	80096d2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80096d0:	2300      	movs	r3, #0
  }
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
	...

080096e0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	0c1b      	lsrs	r3, r3, #16
 80096ee:	f003 0303 	and.w	r3, r3, #3
 80096f2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 031f 	and.w	r3, r3, #31
 80096fc:	2201      	movs	r2, #1
 80096fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009702:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	011a      	lsls	r2, r3, #4
 8009708:	4b0c      	ldr	r3, [pc, #48]	@ (800973c <HAL_EXTI_IRQHandler+0x5c>)
 800970a:	4413      	add	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	4013      	ands	r3, r2
 8009716:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d009      	beq.n	8009732 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	4798      	blx	r3
    }
  }
}
 8009732:	bf00      	nop
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	58000088 	.word	0x58000088

08009740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009740:	b480      	push	{r7}
 8009742:	b089      	sub	sp, #36	@ 0x24
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800974a:	2300      	movs	r3, #0
 800974c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800974e:	4b86      	ldr	r3, [pc, #536]	@ (8009968 <HAL_GPIO_Init+0x228>)
 8009750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009752:	e18c      	b.n	8009a6e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	2101      	movs	r1, #1
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	fa01 f303 	lsl.w	r3, r1, r3
 8009760:	4013      	ands	r3, r2
 8009762:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 817e 	beq.w	8009a68 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f003 0303 	and.w	r3, r3, #3
 8009774:	2b01      	cmp	r3, #1
 8009776:	d005      	beq.n	8009784 <HAL_GPIO_Init+0x44>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f003 0303 	and.w	r3, r3, #3
 8009780:	2b02      	cmp	r3, #2
 8009782:	d130      	bne.n	80097e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	2203      	movs	r2, #3
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	43db      	mvns	r3, r3
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	4013      	ands	r3, r2
 800979a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	fa02 f303 	lsl.w	r3, r2, r3
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80097ba:	2201      	movs	r2, #1
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	fa02 f303 	lsl.w	r3, r2, r3
 80097c2:	43db      	mvns	r3, r3
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	4013      	ands	r3, r2
 80097c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	091b      	lsrs	r3, r3, #4
 80097d0:	f003 0201 	and.w	r2, r3, #1
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	4313      	orrs	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d017      	beq.n	8009822 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	2203      	movs	r2, #3
 80097fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009802:	43db      	mvns	r3, r3
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	4013      	ands	r3, r2
 8009808:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	689a      	ldr	r2, [r3, #8]
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	005b      	lsls	r3, r3, #1
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	4313      	orrs	r3, r2
 800981a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	2b02      	cmp	r3, #2
 800982c:	d123      	bne.n	8009876 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	08da      	lsrs	r2, r3, #3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	3208      	adds	r2, #8
 8009836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	220f      	movs	r2, #15
 8009846:	fa02 f303 	lsl.w	r3, r2, r3
 800984a:	43db      	mvns	r3, r3
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	4013      	ands	r3, r2
 8009850:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	691a      	ldr	r2, [r3, #16]
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	fa02 f303 	lsl.w	r3, r2, r3
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	4313      	orrs	r3, r2
 8009866:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	08da      	lsrs	r2, r3, #3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3208      	adds	r2, #8
 8009870:	69b9      	ldr	r1, [r7, #24]
 8009872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	2203      	movs	r2, #3
 8009882:	fa02 f303 	lsl.w	r3, r2, r3
 8009886:	43db      	mvns	r3, r3
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	4013      	ands	r3, r2
 800988c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f003 0203 	and.w	r2, r3, #3
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	fa02 f303 	lsl.w	r3, r2, r3
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 80d8 	beq.w	8009a68 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098b8:	4b2c      	ldr	r3, [pc, #176]	@ (800996c <HAL_GPIO_Init+0x22c>)
 80098ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098be:	4a2b      	ldr	r2, [pc, #172]	@ (800996c <HAL_GPIO_Init+0x22c>)
 80098c0:	f043 0302 	orr.w	r3, r3, #2
 80098c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80098c8:	4b28      	ldr	r3, [pc, #160]	@ (800996c <HAL_GPIO_Init+0x22c>)
 80098ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80098d6:	4a26      	ldr	r2, [pc, #152]	@ (8009970 <HAL_GPIO_Init+0x230>)
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	089b      	lsrs	r3, r3, #2
 80098dc:	3302      	adds	r3, #2
 80098de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	220f      	movs	r2, #15
 80098ee:	fa02 f303 	lsl.w	r3, r2, r3
 80098f2:	43db      	mvns	r3, r3
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	4013      	ands	r3, r2
 80098f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009974 <HAL_GPIO_Init+0x234>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d04a      	beq.n	8009998 <HAL_GPIO_Init+0x258>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a1c      	ldr	r2, [pc, #112]	@ (8009978 <HAL_GPIO_Init+0x238>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d02b      	beq.n	8009962 <HAL_GPIO_Init+0x222>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a1b      	ldr	r2, [pc, #108]	@ (800997c <HAL_GPIO_Init+0x23c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d025      	beq.n	800995e <HAL_GPIO_Init+0x21e>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a1a      	ldr	r2, [pc, #104]	@ (8009980 <HAL_GPIO_Init+0x240>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d01f      	beq.n	800995a <HAL_GPIO_Init+0x21a>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a19      	ldr	r2, [pc, #100]	@ (8009984 <HAL_GPIO_Init+0x244>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d019      	beq.n	8009956 <HAL_GPIO_Init+0x216>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a18      	ldr	r2, [pc, #96]	@ (8009988 <HAL_GPIO_Init+0x248>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d013      	beq.n	8009952 <HAL_GPIO_Init+0x212>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a17      	ldr	r2, [pc, #92]	@ (800998c <HAL_GPIO_Init+0x24c>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00d      	beq.n	800994e <HAL_GPIO_Init+0x20e>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a16      	ldr	r2, [pc, #88]	@ (8009990 <HAL_GPIO_Init+0x250>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d007      	beq.n	800994a <HAL_GPIO_Init+0x20a>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a15      	ldr	r2, [pc, #84]	@ (8009994 <HAL_GPIO_Init+0x254>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d101      	bne.n	8009946 <HAL_GPIO_Init+0x206>
 8009942:	2309      	movs	r3, #9
 8009944:	e029      	b.n	800999a <HAL_GPIO_Init+0x25a>
 8009946:	230a      	movs	r3, #10
 8009948:	e027      	b.n	800999a <HAL_GPIO_Init+0x25a>
 800994a:	2307      	movs	r3, #7
 800994c:	e025      	b.n	800999a <HAL_GPIO_Init+0x25a>
 800994e:	2306      	movs	r3, #6
 8009950:	e023      	b.n	800999a <HAL_GPIO_Init+0x25a>
 8009952:	2305      	movs	r3, #5
 8009954:	e021      	b.n	800999a <HAL_GPIO_Init+0x25a>
 8009956:	2304      	movs	r3, #4
 8009958:	e01f      	b.n	800999a <HAL_GPIO_Init+0x25a>
 800995a:	2303      	movs	r3, #3
 800995c:	e01d      	b.n	800999a <HAL_GPIO_Init+0x25a>
 800995e:	2302      	movs	r3, #2
 8009960:	e01b      	b.n	800999a <HAL_GPIO_Init+0x25a>
 8009962:	2301      	movs	r3, #1
 8009964:	e019      	b.n	800999a <HAL_GPIO_Init+0x25a>
 8009966:	bf00      	nop
 8009968:	58000080 	.word	0x58000080
 800996c:	58024400 	.word	0x58024400
 8009970:	58000400 	.word	0x58000400
 8009974:	58020000 	.word	0x58020000
 8009978:	58020400 	.word	0x58020400
 800997c:	58020800 	.word	0x58020800
 8009980:	58020c00 	.word	0x58020c00
 8009984:	58021000 	.word	0x58021000
 8009988:	58021400 	.word	0x58021400
 800998c:	58021800 	.word	0x58021800
 8009990:	58021c00 	.word	0x58021c00
 8009994:	58022400 	.word	0x58022400
 8009998:	2300      	movs	r3, #0
 800999a:	69fa      	ldr	r2, [r7, #28]
 800999c:	f002 0203 	and.w	r2, r2, #3
 80099a0:	0092      	lsls	r2, r2, #2
 80099a2:	4093      	lsls	r3, r2
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80099aa:	4938      	ldr	r1, [pc, #224]	@ (8009a8c <HAL_GPIO_Init+0x34c>)
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	089b      	lsrs	r3, r3, #2
 80099b0:	3302      	adds	r3, #2
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80099b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	43db      	mvns	r3, r3
 80099c4:	69ba      	ldr	r2, [r7, #24]
 80099c6:	4013      	ands	r3, r2
 80099c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	4313      	orrs	r3, r2
 80099dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80099de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80099e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	43db      	mvns	r3, r3
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	4013      	ands	r3, r2
 80099f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009a0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	43db      	mvns	r3, r3
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	4013      	ands	r3, r2
 8009a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	43db      	mvns	r3, r3
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	fa22 f303 	lsr.w	r3, r2, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f47f ae6b 	bne.w	8009754 <HAL_GPIO_Init+0x14>
  }
}
 8009a7e:	bf00      	nop
 8009a80:	bf00      	nop
 8009a82:	3724      	adds	r7, #36	@ 0x24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	58000400 	.word	0x58000400

08009a90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b087      	sub	sp, #28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009a9e:	4b72      	ldr	r3, [pc, #456]	@ (8009c68 <HAL_GPIO_DeInit+0x1d8>)
 8009aa0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009aa2:	e0d3      	b.n	8009c4c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	4013      	ands	r3, r2
 8009ab0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 80c6 	beq.w	8009c46 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009aba:	4a6c      	ldr	r2, [pc, #432]	@ (8009c6c <HAL_GPIO_DeInit+0x1dc>)
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	089b      	lsrs	r3, r3, #2
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	220f      	movs	r2, #15
 8009ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a64      	ldr	r2, [pc, #400]	@ (8009c70 <HAL_GPIO_DeInit+0x1e0>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d031      	beq.n	8009b48 <HAL_GPIO_DeInit+0xb8>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a63      	ldr	r2, [pc, #396]	@ (8009c74 <HAL_GPIO_DeInit+0x1e4>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d02b      	beq.n	8009b44 <HAL_GPIO_DeInit+0xb4>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a62      	ldr	r2, [pc, #392]	@ (8009c78 <HAL_GPIO_DeInit+0x1e8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d025      	beq.n	8009b40 <HAL_GPIO_DeInit+0xb0>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a61      	ldr	r2, [pc, #388]	@ (8009c7c <HAL_GPIO_DeInit+0x1ec>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d01f      	beq.n	8009b3c <HAL_GPIO_DeInit+0xac>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a60      	ldr	r2, [pc, #384]	@ (8009c80 <HAL_GPIO_DeInit+0x1f0>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d019      	beq.n	8009b38 <HAL_GPIO_DeInit+0xa8>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a5f      	ldr	r2, [pc, #380]	@ (8009c84 <HAL_GPIO_DeInit+0x1f4>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d013      	beq.n	8009b34 <HAL_GPIO_DeInit+0xa4>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a5e      	ldr	r2, [pc, #376]	@ (8009c88 <HAL_GPIO_DeInit+0x1f8>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00d      	beq.n	8009b30 <HAL_GPIO_DeInit+0xa0>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a5d      	ldr	r2, [pc, #372]	@ (8009c8c <HAL_GPIO_DeInit+0x1fc>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d007      	beq.n	8009b2c <HAL_GPIO_DeInit+0x9c>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a5c      	ldr	r2, [pc, #368]	@ (8009c90 <HAL_GPIO_DeInit+0x200>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d101      	bne.n	8009b28 <HAL_GPIO_DeInit+0x98>
 8009b24:	2309      	movs	r3, #9
 8009b26:	e010      	b.n	8009b4a <HAL_GPIO_DeInit+0xba>
 8009b28:	230a      	movs	r3, #10
 8009b2a:	e00e      	b.n	8009b4a <HAL_GPIO_DeInit+0xba>
 8009b2c:	2307      	movs	r3, #7
 8009b2e:	e00c      	b.n	8009b4a <HAL_GPIO_DeInit+0xba>
 8009b30:	2306      	movs	r3, #6
 8009b32:	e00a      	b.n	8009b4a <HAL_GPIO_DeInit+0xba>
 8009b34:	2305      	movs	r3, #5
 8009b36:	e008      	b.n	8009b4a <HAL_GPIO_DeInit+0xba>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	e006      	b.n	8009b4a <HAL_GPIO_DeInit+0xba>
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e004      	b.n	8009b4a <HAL_GPIO_DeInit+0xba>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e002      	b.n	8009b4a <HAL_GPIO_DeInit+0xba>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e000      	b.n	8009b4a <HAL_GPIO_DeInit+0xba>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	f002 0203 	and.w	r2, r2, #3
 8009b50:	0092      	lsls	r2, r2, #2
 8009b52:	4093      	lsls	r3, r2
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d136      	bne.n	8009bc8 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	43db      	mvns	r3, r3
 8009b62:	401a      	ands	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	43db      	mvns	r3, r3
 8009b70:	401a      	ands	r2, r3
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	43db      	mvns	r3, r3
 8009b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b84:	4013      	ands	r3, r2
 8009b86:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	43db      	mvns	r3, r3
 8009b92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b96:	4013      	ands	r3, r2
 8009b98:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f003 0303 	and.w	r3, r3, #3
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	220f      	movs	r2, #15
 8009ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009baa:	4a30      	ldr	r2, [pc, #192]	@ (8009c6c <HAL_GPIO_DeInit+0x1dc>)
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	089b      	lsrs	r3, r3, #2
 8009bb0:	3302      	adds	r3, #2
 8009bb2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	43da      	mvns	r2, r3
 8009bba:	482c      	ldr	r0, [pc, #176]	@ (8009c6c <HAL_GPIO_DeInit+0x1dc>)
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	089b      	lsrs	r3, r3, #2
 8009bc0:	400a      	ands	r2, r1
 8009bc2:	3302      	adds	r3, #2
 8009bc4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	2103      	movs	r1, #3
 8009bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	08da      	lsrs	r2, r3, #3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3208      	adds	r2, #8
 8009be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f003 0307 	and.w	r3, r3, #7
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	220f      	movs	r2, #15
 8009bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf6:	43db      	mvns	r3, r3
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	08d2      	lsrs	r2, r2, #3
 8009bfc:	4019      	ands	r1, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3208      	adds	r2, #8
 8009c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68da      	ldr	r2, [r3, #12]
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	2103      	movs	r1, #3
 8009c10:	fa01 f303 	lsl.w	r3, r1, r3
 8009c14:	43db      	mvns	r3, r3
 8009c16:	401a      	ands	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	2101      	movs	r1, #1
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	fa01 f303 	lsl.w	r3, r1, r3
 8009c28:	43db      	mvns	r3, r3
 8009c2a:	401a      	ands	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	2103      	movs	r1, #3
 8009c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c3e:	43db      	mvns	r3, r3
 8009c40:	401a      	ands	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	fa22 f303 	lsr.w	r3, r2, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f47f af25 	bne.w	8009aa4 <HAL_GPIO_DeInit+0x14>
  }
}
 8009c5a:	bf00      	nop
 8009c5c:	bf00      	nop
 8009c5e:	371c      	adds	r7, #28
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	58000080 	.word	0x58000080
 8009c6c:	58000400 	.word	0x58000400
 8009c70:	58020000 	.word	0x58020000
 8009c74:	58020400 	.word	0x58020400
 8009c78:	58020800 	.word	0x58020800
 8009c7c:	58020c00 	.word	0x58020c00
 8009c80:	58021000 	.word	0x58021000
 8009c84:	58021400 	.word	0x58021400
 8009c88:	58021800 	.word	0x58021800
 8009c8c:	58021c00 	.word	0x58021c00
 8009c90:	58022400 	.word	0x58022400

08009c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691a      	ldr	r2, [r3, #16]
 8009ca4:	887b      	ldrh	r3, [r7, #2]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009cac:	2301      	movs	r3, #1
 8009cae:	73fb      	strb	r3, [r7, #15]
 8009cb0:	e001      	b.n	8009cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	807b      	strh	r3, [r7, #2]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009cd4:	787b      	ldrb	r3, [r7, #1]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cda:	887a      	ldrh	r2, [r7, #2]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009ce0:	e003      	b.n	8009cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009ce2:	887b      	ldrh	r3, [r7, #2]
 8009ce4:	041a      	lsls	r2, r3, #16
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	619a      	str	r2, [r3, #24]
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e08b      	b.n	8009e22 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d106      	bne.n	8009d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f8b5 	bl	8009e8e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2224      	movs	r2, #36	@ 0x24
 8009d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0201 	bic.w	r2, r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009d48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	689a      	ldr	r2, [r3, #8]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009d58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d107      	bne.n	8009d72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	689a      	ldr	r2, [r3, #8]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d6e:	609a      	str	r2, [r3, #8]
 8009d70:	e006      	b.n	8009d80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689a      	ldr	r2, [r3, #8]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009d7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d108      	bne.n	8009d9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d96:	605a      	str	r2, [r3, #4]
 8009d98:	e007      	b.n	8009daa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009da8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6859      	ldr	r1, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	4b1d      	ldr	r3, [pc, #116]	@ (8009e2c <HAL_I2C_Init+0x134>)
 8009db6:	430b      	orrs	r3, r1
 8009db8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009dc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	691a      	ldr	r2, [r3, #16]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	69d9      	ldr	r1, [r3, #28]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a1a      	ldr	r2, [r3, #32]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f042 0201 	orr.w	r2, r2, #1
 8009e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	02008000 	.word	0x02008000

08009e30 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e021      	b.n	8009e86 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2224      	movs	r2, #36	@ 0x24
 8009e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 0201 	bic.w	r2, r2, #1
 8009e58:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f821 	bl	8009ea2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
	...

08009eb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	817b      	strh	r3, [r7, #10]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	813b      	strh	r3, [r7, #8]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	f040 80f9 	bne.w	800a0d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <HAL_I2C_Mem_Write+0x34>
 8009ee6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d105      	bne.n	8009ef8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ef2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e0ed      	b.n	800a0d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d101      	bne.n	8009f06 <HAL_I2C_Mem_Write+0x4e>
 8009f02:	2302      	movs	r3, #2
 8009f04:	e0e6      	b.n	800a0d4 <HAL_I2C_Mem_Write+0x21c>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009f0e:	f7ff f909 	bl	8009124 <HAL_GetTick>
 8009f12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	2319      	movs	r3, #25
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 fadd 	bl	800a4e0 <I2C_WaitOnFlagUntilTimeout>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e0d1      	b.n	800a0d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2221      	movs	r2, #33	@ 0x21
 8009f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2240      	movs	r2, #64	@ 0x40
 8009f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6a3a      	ldr	r2, [r7, #32]
 8009f4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f58:	88f8      	ldrh	r0, [r7, #6]
 8009f5a:	893a      	ldrh	r2, [r7, #8]
 8009f5c:	8979      	ldrh	r1, [r7, #10]
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	4603      	mov	r3, r0
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 f9ed 	bl	800a348 <I2C_RequestMemoryWrite>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e0a9      	b.n	800a0d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2bff      	cmp	r3, #255	@ 0xff
 8009f88:	d90e      	bls.n	8009fa8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	22ff      	movs	r2, #255	@ 0xff
 8009f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	8979      	ldrh	r1, [r7, #10]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 fc61 	bl	800a868 <I2C_TransferConfig>
 8009fa6:	e00f      	b.n	8009fc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	8979      	ldrh	r1, [r7, #10]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 fc50 	bl	800a868 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 fae0 	bl	800a592 <I2C_WaitOnTXISFlagUntilTimeout>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e07b      	b.n	800a0d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe0:	781a      	ldrb	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a004:	3b01      	subs	r3, #1
 800a006:	b29a      	uxth	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a010:	b29b      	uxth	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d034      	beq.n	800a080 <HAL_I2C_Mem_Write+0x1c8>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d130      	bne.n	800a080 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a024:	2200      	movs	r2, #0
 800a026:	2180      	movs	r1, #128	@ 0x80
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 fa59 	bl	800a4e0 <I2C_WaitOnFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e04d      	b.n	800a0d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	2bff      	cmp	r3, #255	@ 0xff
 800a040:	d90e      	bls.n	800a060 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	22ff      	movs	r2, #255	@ 0xff
 800a046:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	8979      	ldrh	r1, [r7, #10]
 800a050:	2300      	movs	r3, #0
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 fc05 	bl	800a868 <I2C_TransferConfig>
 800a05e:	e00f      	b.n	800a080 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	8979      	ldrh	r1, [r7, #10]
 800a072:	2300      	movs	r3, #0
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 fbf4 	bl	800a868 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a084:	b29b      	uxth	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d19e      	bne.n	8009fc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 fac6 	bl	800a620 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e01a      	b.n	800a0d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6859      	ldr	r1, [r3, #4]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a0dc <HAL_I2C_Mem_Write+0x224>)
 800a0b2:	400b      	ands	r3, r1
 800a0b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e000      	b.n	800a0d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a0d2:	2302      	movs	r3, #2
  }
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	fe00e800 	.word	0xfe00e800

0800a0e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	817b      	strh	r3, [r7, #10]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	813b      	strh	r3, [r7, #8]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b20      	cmp	r3, #32
 800a104:	f040 80fd 	bne.w	800a302 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <HAL_I2C_Mem_Read+0x34>
 800a10e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a11a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e0f1      	b.n	800a304 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_I2C_Mem_Read+0x4e>
 800a12a:	2302      	movs	r3, #2
 800a12c:	e0ea      	b.n	800a304 <HAL_I2C_Mem_Read+0x224>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a136:	f7fe fff5 	bl	8009124 <HAL_GetTick>
 800a13a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	2319      	movs	r3, #25
 800a142:	2201      	movs	r2, #1
 800a144:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 f9c9 	bl	800a4e0 <I2C_WaitOnFlagUntilTimeout>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e0d5      	b.n	800a304 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2222      	movs	r2, #34	@ 0x22
 800a15c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2240      	movs	r2, #64	@ 0x40
 800a164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a3a      	ldr	r2, [r7, #32]
 800a172:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a178:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a180:	88f8      	ldrh	r0, [r7, #6]
 800a182:	893a      	ldrh	r2, [r7, #8]
 800a184:	8979      	ldrh	r1, [r7, #10]
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4603      	mov	r3, r0
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 f92d 	bl	800a3f0 <I2C_RequestMemoryRead>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e0ad      	b.n	800a304 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	2bff      	cmp	r3, #255	@ 0xff
 800a1b0:	d90e      	bls.n	800a1d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	22ff      	movs	r2, #255	@ 0xff
 800a1b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	8979      	ldrh	r1, [r7, #10]
 800a1c0:	4b52      	ldr	r3, [pc, #328]	@ (800a30c <HAL_I2C_Mem_Read+0x22c>)
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fb4d 	bl	800a868 <I2C_TransferConfig>
 800a1ce:	e00f      	b.n	800a1f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	8979      	ldrh	r1, [r7, #10]
 800a1e2:	4b4a      	ldr	r3, [pc, #296]	@ (800a30c <HAL_I2C_Mem_Read+0x22c>)
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 fb3c 	bl	800a868 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2104      	movs	r1, #4
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f000 f970 	bl	800a4e0 <I2C_WaitOnFlagUntilTimeout>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e07c      	b.n	800a304 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a214:	b2d2      	uxtb	r2, r2
 800a216:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a226:	3b01      	subs	r3, #1
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a232:	b29b      	uxth	r3, r3
 800a234:	3b01      	subs	r3, #1
 800a236:	b29a      	uxth	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a240:	b29b      	uxth	r3, r3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d034      	beq.n	800a2b0 <HAL_I2C_Mem_Read+0x1d0>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d130      	bne.n	800a2b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a254:	2200      	movs	r2, #0
 800a256:	2180      	movs	r1, #128	@ 0x80
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 f941 	bl	800a4e0 <I2C_WaitOnFlagUntilTimeout>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e04d      	b.n	800a304 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2bff      	cmp	r3, #255	@ 0xff
 800a270:	d90e      	bls.n	800a290 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	22ff      	movs	r2, #255	@ 0xff
 800a276:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	8979      	ldrh	r1, [r7, #10]
 800a280:	2300      	movs	r3, #0
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 faed 	bl	800a868 <I2C_TransferConfig>
 800a28e:	e00f      	b.n	800a2b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a294:	b29a      	uxth	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	8979      	ldrh	r1, [r7, #10]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 fadc 	bl	800a868 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d19a      	bne.n	800a1f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 f9ae 	bl	800a620 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e01a      	b.n	800a304 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6859      	ldr	r1, [r3, #4]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a310 <HAL_I2C_Mem_Read+0x230>)
 800a2e2:	400b      	ands	r3, r1
 800a2e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e000      	b.n	800a304 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a302:	2302      	movs	r3, #2
  }
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	80002400 	.word	0x80002400
 800a310:	fe00e800 	.word	0xfe00e800

0800a314 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a322:	b2db      	uxtb	r3, r3
}
 800a324:	4618      	mov	r0, r3
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af02      	add	r7, sp, #8
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	4608      	mov	r0, r1
 800a352:	4611      	mov	r1, r2
 800a354:	461a      	mov	r2, r3
 800a356:	4603      	mov	r3, r0
 800a358:	817b      	strh	r3, [r7, #10]
 800a35a:	460b      	mov	r3, r1
 800a35c:	813b      	strh	r3, [r7, #8]
 800a35e:	4613      	mov	r3, r2
 800a360:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a362:	88fb      	ldrh	r3, [r7, #6]
 800a364:	b2da      	uxtb	r2, r3
 800a366:	8979      	ldrh	r1, [r7, #10]
 800a368:	4b20      	ldr	r3, [pc, #128]	@ (800a3ec <I2C_RequestMemoryWrite+0xa4>)
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 fa79 	bl	800a868 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	69b9      	ldr	r1, [r7, #24]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 f909 	bl	800a592 <I2C_WaitOnTXISFlagUntilTimeout>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e02c      	b.n	800a3e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d105      	bne.n	800a39c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a390:	893b      	ldrh	r3, [r7, #8]
 800a392:	b2da      	uxtb	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	629a      	str	r2, [r3, #40]	@ 0x28
 800a39a:	e015      	b.n	800a3c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a39c:	893b      	ldrh	r3, [r7, #8]
 800a39e:	0a1b      	lsrs	r3, r3, #8
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	69b9      	ldr	r1, [r7, #24]
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 f8ef 	bl	800a592 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e012      	b.n	800a3e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a3be:	893b      	ldrh	r3, [r7, #8]
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2180      	movs	r1, #128	@ 0x80
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 f884 	bl	800a4e0 <I2C_WaitOnFlagUntilTimeout>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e000      	b.n	800a3e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	80002000 	.word	0x80002000

0800a3f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	4603      	mov	r3, r0
 800a400:	817b      	strh	r3, [r7, #10]
 800a402:	460b      	mov	r3, r1
 800a404:	813b      	strh	r3, [r7, #8]
 800a406:	4613      	mov	r3, r2
 800a408:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	8979      	ldrh	r1, [r7, #10]
 800a410:	4b20      	ldr	r3, [pc, #128]	@ (800a494 <I2C_RequestMemoryRead+0xa4>)
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	2300      	movs	r3, #0
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 fa26 	bl	800a868 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a41c:	69fa      	ldr	r2, [r7, #28]
 800a41e:	69b9      	ldr	r1, [r7, #24]
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 f8b6 	bl	800a592 <I2C_WaitOnTXISFlagUntilTimeout>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e02c      	b.n	800a48a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a430:	88fb      	ldrh	r3, [r7, #6]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d105      	bne.n	800a442 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a436:	893b      	ldrh	r3, [r7, #8]
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a440:	e015      	b.n	800a46e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a442:	893b      	ldrh	r3, [r7, #8]
 800a444:	0a1b      	lsrs	r3, r3, #8
 800a446:	b29b      	uxth	r3, r3
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a450:	69fa      	ldr	r2, [r7, #28]
 800a452:	69b9      	ldr	r1, [r7, #24]
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f000 f89c 	bl	800a592 <I2C_WaitOnTXISFlagUntilTimeout>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e012      	b.n	800a48a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a464:	893b      	ldrh	r3, [r7, #8]
 800a466:	b2da      	uxtb	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	2200      	movs	r2, #0
 800a476:	2140      	movs	r1, #64	@ 0x40
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 f831 	bl	800a4e0 <I2C_WaitOnFlagUntilTimeout>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d001      	beq.n	800a488 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e000      	b.n	800a48a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	80002000 	.word	0x80002000

0800a498 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d103      	bne.n	800a4b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d007      	beq.n	800a4d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	699a      	ldr	r2, [r3, #24]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0201 	orr.w	r2, r2, #1
 800a4d2:	619a      	str	r2, [r3, #24]
  }
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4f0:	e03b      	b.n	800a56a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4f2:	69ba      	ldr	r2, [r7, #24]
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 f8d6 	bl	800a6a8 <I2C_IsErrorOccurred>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e041      	b.n	800a58a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50c:	d02d      	beq.n	800a56a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a50e:	f7fe fe09 	bl	8009124 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d302      	bcc.n	800a524 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d122      	bne.n	800a56a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	699a      	ldr	r2, [r3, #24]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	4013      	ands	r3, r2
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	429a      	cmp	r2, r3
 800a532:	bf0c      	ite	eq
 800a534:	2301      	moveq	r3, #1
 800a536:	2300      	movne	r3, #0
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	79fb      	ldrb	r3, [r7, #7]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d113      	bne.n	800a56a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a546:	f043 0220 	orr.w	r2, r3, #32
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e00f      	b.n	800a58a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	699a      	ldr	r2, [r3, #24]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	4013      	ands	r3, r2
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	429a      	cmp	r2, r3
 800a578:	bf0c      	ite	eq
 800a57a:	2301      	moveq	r3, #1
 800a57c:	2300      	movne	r3, #0
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	461a      	mov	r2, r3
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	429a      	cmp	r2, r3
 800a586:	d0b4      	beq.n	800a4f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	60b9      	str	r1, [r7, #8]
 800a59c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a59e:	e033      	b.n	800a608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	68b9      	ldr	r1, [r7, #8]
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f000 f87f 	bl	800a6a8 <I2C_IsErrorOccurred>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e031      	b.n	800a618 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ba:	d025      	beq.n	800a608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5bc:	f7fe fdb2 	bl	8009124 <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d302      	bcc.n	800a5d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d11a      	bne.n	800a608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d013      	beq.n	800a608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5e4:	f043 0220 	orr.w	r2, r3, #32
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e007      	b.n	800a618 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b02      	cmp	r3, #2
 800a614:	d1c4      	bne.n	800a5a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a62c:	e02f      	b.n	800a68e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 f838 	bl	800a6a8 <I2C_IsErrorOccurred>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e02d      	b.n	800a69e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a642:	f7fe fd6f 	bl	8009124 <HAL_GetTick>
 800a646:	4602      	mov	r2, r0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d302      	bcc.n	800a658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d11a      	bne.n	800a68e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	f003 0320 	and.w	r3, r3, #32
 800a662:	2b20      	cmp	r3, #32
 800a664:	d013      	beq.n	800a68e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a66a:	f043 0220 	orr.w	r2, r3, #32
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2220      	movs	r2, #32
 800a676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e007      	b.n	800a69e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	f003 0320 	and.w	r3, r3, #32
 800a698:	2b20      	cmp	r3, #32
 800a69a:	d1c8      	bne.n	800a62e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
	...

0800a6a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08a      	sub	sp, #40	@ 0x28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	f003 0310 	and.w	r3, r3, #16
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d068      	beq.n	800a7a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2210      	movs	r2, #16
 800a6da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a6dc:	e049      	b.n	800a772 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e4:	d045      	beq.n	800a772 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a6e6:	f7fe fd1d 	bl	8009124 <HAL_GetTick>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d302      	bcc.n	800a6fc <I2C_IsErrorOccurred+0x54>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d13a      	bne.n	800a772 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a706:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a70e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a71a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a71e:	d121      	bne.n	800a764 <I2C_IsErrorOccurred+0xbc>
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a726:	d01d      	beq.n	800a764 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a728:	7cfb      	ldrb	r3, [r7, #19]
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	d01a      	beq.n	800a764 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	685a      	ldr	r2, [r3, #4]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a73c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a73e:	f7fe fcf1 	bl	8009124 <HAL_GetTick>
 800a742:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a744:	e00e      	b.n	800a764 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a746:	f7fe fced 	bl	8009124 <HAL_GetTick>
 800a74a:	4602      	mov	r2, r0
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	2b19      	cmp	r3, #25
 800a752:	d907      	bls.n	800a764 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	f043 0320 	orr.w	r3, r3, #32
 800a75a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a762:	e006      	b.n	800a772 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b20      	cmp	r3, #32
 800a770:	d1e9      	bne.n	800a746 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	f003 0320 	and.w	r3, r3, #32
 800a77c:	2b20      	cmp	r3, #32
 800a77e:	d003      	beq.n	800a788 <I2C_IsErrorOccurred+0xe0>
 800a780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0aa      	beq.n	800a6de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d103      	bne.n	800a798 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2220      	movs	r2, #32
 800a796:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	f043 0304 	orr.w	r3, r3, #4
 800a79e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00b      	beq.n	800a7d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	f043 0301 	orr.w	r3, r3, #1
 800a7be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a7c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00b      	beq.n	800a7f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	f043 0308 	orr.w	r3, r3, #8
 800a7e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a7ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00b      	beq.n	800a814 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	f043 0302 	orr.w	r3, r3, #2
 800a802:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a80c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d01c      	beq.n	800a856 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7ff fe3b 	bl	800a498 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	6859      	ldr	r1, [r3, #4]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	4b0d      	ldr	r3, [pc, #52]	@ (800a864 <I2C_IsErrorOccurred+0x1bc>)
 800a82e:	400b      	ands	r3, r1
 800a830:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	431a      	orrs	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2220      	movs	r2, #32
 800a842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a856:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3728      	adds	r7, #40	@ 0x28
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	fe00e800 	.word	0xfe00e800

0800a868 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	607b      	str	r3, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	817b      	strh	r3, [r7, #10]
 800a876:	4613      	mov	r3, r2
 800a878:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a87a:	897b      	ldrh	r3, [r7, #10]
 800a87c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a880:	7a7b      	ldrb	r3, [r7, #9]
 800a882:	041b      	lsls	r3, r3, #16
 800a884:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a888:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	4313      	orrs	r3, r2
 800a892:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a896:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	0d5b      	lsrs	r3, r3, #21
 800a8a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a8a6:	4b08      	ldr	r3, [pc, #32]	@ (800a8c8 <I2C_TransferConfig+0x60>)
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	43db      	mvns	r3, r3
 800a8ac:	ea02 0103 	and.w	r1, r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a8ba:	bf00      	nop
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	03ff63ff 	.word	0x03ff63ff

0800a8cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	d138      	bne.n	800a954 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d101      	bne.n	800a8f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e032      	b.n	800a956 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2224      	movs	r2, #36	@ 0x24
 800a8fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 0201 	bic.w	r2, r2, #1
 800a90e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a91e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6819      	ldr	r1, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	430a      	orrs	r2, r1
 800a92e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f042 0201 	orr.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2220      	movs	r2, #32
 800a944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	e000      	b.n	800a956 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a954:	2302      	movs	r3, #2
  }
}
 800a956:	4618      	mov	r0, r3
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a962:	b480      	push	{r7}
 800a964:	b085      	sub	sp, #20
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a972:	b2db      	uxtb	r3, r3
 800a974:	2b20      	cmp	r3, #32
 800a976:	d139      	bne.n	800a9ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a982:	2302      	movs	r3, #2
 800a984:	e033      	b.n	800a9ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2224      	movs	r2, #36	@ 0x24
 800a992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f022 0201 	bic.w	r2, r2, #1
 800a9a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a9b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	021b      	lsls	r3, r3, #8
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f042 0201 	orr.w	r2, r2, #1
 800a9d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e000      	b.n	800a9ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a9ec:	2302      	movs	r3, #2
  }
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
	...

0800a9fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800aa04:	4b19      	ldr	r3, [pc, #100]	@ (800aa6c <HAL_PWREx_ConfigSupply+0x70>)
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b04      	cmp	r3, #4
 800aa0e:	d00a      	beq.n	800aa26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800aa10:	4b16      	ldr	r3, [pc, #88]	@ (800aa6c <HAL_PWREx_ConfigSupply+0x70>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d001      	beq.n	800aa22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e01f      	b.n	800aa62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	e01d      	b.n	800aa62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aa26:	4b11      	ldr	r3, [pc, #68]	@ (800aa6c <HAL_PWREx_ConfigSupply+0x70>)
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f023 0207 	bic.w	r2, r3, #7
 800aa2e:	490f      	ldr	r1, [pc, #60]	@ (800aa6c <HAL_PWREx_ConfigSupply+0x70>)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800aa36:	f7fe fb75 	bl	8009124 <HAL_GetTick>
 800aa3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa3c:	e009      	b.n	800aa52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aa3e:	f7fe fb71 	bl	8009124 <HAL_GetTick>
 800aa42:	4602      	mov	r2, r0
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa4c:	d901      	bls.n	800aa52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e007      	b.n	800aa62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa52:	4b06      	ldr	r3, [pc, #24]	@ (800aa6c <HAL_PWREx_ConfigSupply+0x70>)
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa5e:	d1ee      	bne.n	800aa3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	58024800 	.word	0x58024800

0800aa70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08c      	sub	sp, #48	@ 0x30
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e3c8      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 8087 	beq.w	800ab9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa90:	4b88      	ldr	r3, [pc, #544]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa9a:	4b86      	ldr	r3, [pc, #536]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa2:	2b10      	cmp	r3, #16
 800aaa4:	d007      	beq.n	800aab6 <HAL_RCC_OscConfig+0x46>
 800aaa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa8:	2b18      	cmp	r3, #24
 800aaaa:	d110      	bne.n	800aace <HAL_RCC_OscConfig+0x5e>
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d10b      	bne.n	800aace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aab6:	4b7f      	ldr	r3, [pc, #508]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d06c      	beq.n	800ab9c <HAL_RCC_OscConfig+0x12c>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d168      	bne.n	800ab9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e3a2      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aad6:	d106      	bne.n	800aae6 <HAL_RCC_OscConfig+0x76>
 800aad8:	4b76      	ldr	r3, [pc, #472]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a75      	ldr	r2, [pc, #468]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800aade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aae2:	6013      	str	r3, [r2, #0]
 800aae4:	e02e      	b.n	800ab44 <HAL_RCC_OscConfig+0xd4>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10c      	bne.n	800ab08 <HAL_RCC_OscConfig+0x98>
 800aaee:	4b71      	ldr	r3, [pc, #452]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a70      	ldr	r2, [pc, #448]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800aaf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	4b6e      	ldr	r3, [pc, #440]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a6d      	ldr	r2, [pc, #436]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	e01d      	b.n	800ab44 <HAL_RCC_OscConfig+0xd4>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab10:	d10c      	bne.n	800ab2c <HAL_RCC_OscConfig+0xbc>
 800ab12:	4b68      	ldr	r3, [pc, #416]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a67      	ldr	r2, [pc, #412]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ab1c:	6013      	str	r3, [r2, #0]
 800ab1e:	4b65      	ldr	r3, [pc, #404]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a64      	ldr	r2, [pc, #400]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab28:	6013      	str	r3, [r2, #0]
 800ab2a:	e00b      	b.n	800ab44 <HAL_RCC_OscConfig+0xd4>
 800ab2c:	4b61      	ldr	r3, [pc, #388]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a60      	ldr	r2, [pc, #384]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	4b5e      	ldr	r3, [pc, #376]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a5d      	ldr	r2, [pc, #372]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d013      	beq.n	800ab74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab4c:	f7fe faea 	bl	8009124 <HAL_GetTick>
 800ab50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab52:	e008      	b.n	800ab66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab54:	f7fe fae6 	bl	8009124 <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	2b64      	cmp	r3, #100	@ 0x64
 800ab60:	d901      	bls.n	800ab66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ab62:	2303      	movs	r3, #3
 800ab64:	e356      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab66:	4b53      	ldr	r3, [pc, #332]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0f0      	beq.n	800ab54 <HAL_RCC_OscConfig+0xe4>
 800ab72:	e014      	b.n	800ab9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab74:	f7fe fad6 	bl	8009124 <HAL_GetTick>
 800ab78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab7a:	e008      	b.n	800ab8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab7c:	f7fe fad2 	bl	8009124 <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b64      	cmp	r3, #100	@ 0x64
 800ab88:	d901      	bls.n	800ab8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e342      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab8e:	4b49      	ldr	r3, [pc, #292]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1f0      	bne.n	800ab7c <HAL_RCC_OscConfig+0x10c>
 800ab9a:	e000      	b.n	800ab9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0302 	and.w	r3, r3, #2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f000 808c 	beq.w	800acc4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abac:	4b41      	ldr	r3, [pc, #260]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800abb6:	4b3f      	ldr	r3, [pc, #252]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800abb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d007      	beq.n	800abd2 <HAL_RCC_OscConfig+0x162>
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	2b18      	cmp	r3, #24
 800abc6:	d137      	bne.n	800ac38 <HAL_RCC_OscConfig+0x1c8>
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	f003 0303 	and.w	r3, r3, #3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d132      	bne.n	800ac38 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abd2:	4b38      	ldr	r3, [pc, #224]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 0304 	and.w	r3, r3, #4
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d005      	beq.n	800abea <HAL_RCC_OscConfig+0x17a>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e314      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800abea:	4b32      	ldr	r3, [pc, #200]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f023 0219 	bic.w	r2, r3, #25
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	492f      	ldr	r1, [pc, #188]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800abf8:	4313      	orrs	r3, r2
 800abfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abfc:	f7fe fa92 	bl	8009124 <HAL_GetTick>
 800ac00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac02:	e008      	b.n	800ac16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac04:	f7fe fa8e 	bl	8009124 <HAL_GetTick>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d901      	bls.n	800ac16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e2fe      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac16:	4b27      	ldr	r3, [pc, #156]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0304 	and.w	r3, r3, #4
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0f0      	beq.n	800ac04 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac22:	4b24      	ldr	r3, [pc, #144]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	061b      	lsls	r3, r3, #24
 800ac30:	4920      	ldr	r1, [pc, #128]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac32:	4313      	orrs	r3, r2
 800ac34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac36:	e045      	b.n	800acc4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d026      	beq.n	800ac8e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac40:	4b1c      	ldr	r3, [pc, #112]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f023 0219 	bic.w	r2, r3, #25
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	4919      	ldr	r1, [pc, #100]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac52:	f7fe fa67 	bl	8009124 <HAL_GetTick>
 800ac56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac58:	e008      	b.n	800ac6c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac5a:	f7fe fa63 	bl	8009124 <HAL_GetTick>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d901      	bls.n	800ac6c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	e2d3      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac6c:	4b11      	ldr	r3, [pc, #68]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0304 	and.w	r3, r3, #4
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d0f0      	beq.n	800ac5a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac78:	4b0e      	ldr	r3, [pc, #56]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	061b      	lsls	r3, r3, #24
 800ac86:	490b      	ldr	r1, [pc, #44]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	604b      	str	r3, [r1, #4]
 800ac8c:	e01a      	b.n	800acc4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac8e:	4b09      	ldr	r3, [pc, #36]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a08      	ldr	r2, [pc, #32]	@ (800acb4 <HAL_RCC_OscConfig+0x244>)
 800ac94:	f023 0301 	bic.w	r3, r3, #1
 800ac98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac9a:	f7fe fa43 	bl	8009124 <HAL_GetTick>
 800ac9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aca0:	e00a      	b.n	800acb8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aca2:	f7fe fa3f 	bl	8009124 <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d903      	bls.n	800acb8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e2af      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
 800acb4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800acb8:	4b96      	ldr	r3, [pc, #600]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0304 	and.w	r3, r3, #4
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1ee      	bne.n	800aca2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0310 	and.w	r3, r3, #16
 800accc:	2b00      	cmp	r3, #0
 800acce:	d06a      	beq.n	800ada6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acd0:	4b90      	ldr	r3, [pc, #576]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acd8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800acda:	4b8e      	ldr	r3, [pc, #568]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800acdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acde:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	2b08      	cmp	r3, #8
 800ace4:	d007      	beq.n	800acf6 <HAL_RCC_OscConfig+0x286>
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	2b18      	cmp	r3, #24
 800acea:	d11b      	bne.n	800ad24 <HAL_RCC_OscConfig+0x2b4>
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f003 0303 	and.w	r3, r3, #3
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d116      	bne.n	800ad24 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acf6:	4b87      	ldr	r3, [pc, #540]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d005      	beq.n	800ad0e <HAL_RCC_OscConfig+0x29e>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	2b80      	cmp	r3, #128	@ 0x80
 800ad08:	d001      	beq.n	800ad0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e282      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad0e:	4b81      	ldr	r3, [pc, #516]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	061b      	lsls	r3, r3, #24
 800ad1c:	497d      	ldr	r1, [pc, #500]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad22:	e040      	b.n	800ada6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	69db      	ldr	r3, [r3, #28]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d023      	beq.n	800ad74 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ad2c:	4b79      	ldr	r3, [pc, #484]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a78      	ldr	r2, [pc, #480]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad38:	f7fe f9f4 	bl	8009124 <HAL_GetTick>
 800ad3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad3e:	e008      	b.n	800ad52 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad40:	f7fe f9f0 	bl	8009124 <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d901      	bls.n	800ad52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e260      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad52:	4b70      	ldr	r3, [pc, #448]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0f0      	beq.n	800ad40 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad5e:	4b6d      	ldr	r3, [pc, #436]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	061b      	lsls	r3, r3, #24
 800ad6c:	4969      	ldr	r1, [pc, #420]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	60cb      	str	r3, [r1, #12]
 800ad72:	e018      	b.n	800ada6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ad74:	4b67      	ldr	r3, [pc, #412]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a66      	ldr	r2, [pc, #408]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad80:	f7fe f9d0 	bl	8009124 <HAL_GetTick>
 800ad84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad86:	e008      	b.n	800ad9a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad88:	f7fe f9cc 	bl	8009124 <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d901      	bls.n	800ad9a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e23c      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad9a:	4b5e      	ldr	r3, [pc, #376]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1f0      	bne.n	800ad88 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0308 	and.w	r3, r3, #8
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d036      	beq.n	800ae20 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d019      	beq.n	800adee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adba:	4b56      	ldr	r3, [pc, #344]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800adbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adbe:	4a55      	ldr	r2, [pc, #340]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800adc0:	f043 0301 	orr.w	r3, r3, #1
 800adc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adc6:	f7fe f9ad 	bl	8009124 <HAL_GetTick>
 800adca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800adcc:	e008      	b.n	800ade0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adce:	f7fe f9a9 	bl	8009124 <HAL_GetTick>
 800add2:	4602      	mov	r2, r0
 800add4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	2b02      	cmp	r3, #2
 800adda:	d901      	bls.n	800ade0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800addc:	2303      	movs	r3, #3
 800adde:	e219      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ade0:	4b4c      	ldr	r3, [pc, #304]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ade2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d0f0      	beq.n	800adce <HAL_RCC_OscConfig+0x35e>
 800adec:	e018      	b.n	800ae20 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800adee:	4b49      	ldr	r3, [pc, #292]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800adf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adf2:	4a48      	ldr	r2, [pc, #288]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800adf4:	f023 0301 	bic.w	r3, r3, #1
 800adf8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adfa:	f7fe f993 	bl	8009124 <HAL_GetTick>
 800adfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae00:	e008      	b.n	800ae14 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae02:	f7fe f98f 	bl	8009124 <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d901      	bls.n	800ae14 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ae10:	2303      	movs	r3, #3
 800ae12:	e1ff      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae14:	4b3f      	ldr	r3, [pc, #252]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ae16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae18:	f003 0302 	and.w	r3, r3, #2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1f0      	bne.n	800ae02 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0320 	and.w	r3, r3, #32
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d036      	beq.n	800ae9a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d019      	beq.n	800ae68 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ae34:	4b37      	ldr	r3, [pc, #220]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a36      	ldr	r2, [pc, #216]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ae3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ae3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae40:	f7fe f970 	bl	8009124 <HAL_GetTick>
 800ae44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae46:	e008      	b.n	800ae5a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae48:	f7fe f96c 	bl	8009124 <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d901      	bls.n	800ae5a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ae56:	2303      	movs	r3, #3
 800ae58:	e1dc      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae5a:	4b2e      	ldr	r3, [pc, #184]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0f0      	beq.n	800ae48 <HAL_RCC_OscConfig+0x3d8>
 800ae66:	e018      	b.n	800ae9a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ae68:	4b2a      	ldr	r3, [pc, #168]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a29      	ldr	r2, [pc, #164]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ae6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae74:	f7fe f956 	bl	8009124 <HAL_GetTick>
 800ae78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae7a:	e008      	b.n	800ae8e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae7c:	f7fe f952 	bl	8009124 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d901      	bls.n	800ae8e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e1c2      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae8e:	4b21      	ldr	r3, [pc, #132]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1f0      	bne.n	800ae7c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0304 	and.w	r3, r3, #4
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8086 	beq.w	800afb4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aea8:	4b1b      	ldr	r3, [pc, #108]	@ (800af18 <HAL_RCC_OscConfig+0x4a8>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a1a      	ldr	r2, [pc, #104]	@ (800af18 <HAL_RCC_OscConfig+0x4a8>)
 800aeae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aeb4:	f7fe f936 	bl	8009124 <HAL_GetTick>
 800aeb8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aeba:	e008      	b.n	800aece <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aebc:	f7fe f932 	bl	8009124 <HAL_GetTick>
 800aec0:	4602      	mov	r2, r0
 800aec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	2b64      	cmp	r3, #100	@ 0x64
 800aec8:	d901      	bls.n	800aece <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e1a2      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aece:	4b12      	ldr	r3, [pc, #72]	@ (800af18 <HAL_RCC_OscConfig+0x4a8>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0f0      	beq.n	800aebc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d106      	bne.n	800aef0 <HAL_RCC_OscConfig+0x480>
 800aee2:	4b0c      	ldr	r3, [pc, #48]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800aee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aee6:	4a0b      	ldr	r2, [pc, #44]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800aee8:	f043 0301 	orr.w	r3, r3, #1
 800aeec:	6713      	str	r3, [r2, #112]	@ 0x70
 800aeee:	e032      	b.n	800af56 <HAL_RCC_OscConfig+0x4e6>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d111      	bne.n	800af1c <HAL_RCC_OscConfig+0x4ac>
 800aef8:	4b06      	ldr	r3, [pc, #24]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800aefa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aefc:	4a05      	ldr	r2, [pc, #20]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800aefe:	f023 0301 	bic.w	r3, r3, #1
 800af02:	6713      	str	r3, [r2, #112]	@ 0x70
 800af04:	4b03      	ldr	r3, [pc, #12]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800af06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af08:	4a02      	ldr	r2, [pc, #8]	@ (800af14 <HAL_RCC_OscConfig+0x4a4>)
 800af0a:	f023 0304 	bic.w	r3, r3, #4
 800af0e:	6713      	str	r3, [r2, #112]	@ 0x70
 800af10:	e021      	b.n	800af56 <HAL_RCC_OscConfig+0x4e6>
 800af12:	bf00      	nop
 800af14:	58024400 	.word	0x58024400
 800af18:	58024800 	.word	0x58024800
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	2b05      	cmp	r3, #5
 800af22:	d10c      	bne.n	800af3e <HAL_RCC_OscConfig+0x4ce>
 800af24:	4b83      	ldr	r3, [pc, #524]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800af26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af28:	4a82      	ldr	r2, [pc, #520]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800af2a:	f043 0304 	orr.w	r3, r3, #4
 800af2e:	6713      	str	r3, [r2, #112]	@ 0x70
 800af30:	4b80      	ldr	r3, [pc, #512]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800af32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af34:	4a7f      	ldr	r2, [pc, #508]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	6713      	str	r3, [r2, #112]	@ 0x70
 800af3c:	e00b      	b.n	800af56 <HAL_RCC_OscConfig+0x4e6>
 800af3e:	4b7d      	ldr	r3, [pc, #500]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800af40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af42:	4a7c      	ldr	r2, [pc, #496]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800af44:	f023 0301 	bic.w	r3, r3, #1
 800af48:	6713      	str	r3, [r2, #112]	@ 0x70
 800af4a:	4b7a      	ldr	r3, [pc, #488]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800af4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af4e:	4a79      	ldr	r2, [pc, #484]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800af50:	f023 0304 	bic.w	r3, r3, #4
 800af54:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d015      	beq.n	800af8a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af5e:	f7fe f8e1 	bl	8009124 <HAL_GetTick>
 800af62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af64:	e00a      	b.n	800af7c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af66:	f7fe f8dd 	bl	8009124 <HAL_GetTick>
 800af6a:	4602      	mov	r2, r0
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af74:	4293      	cmp	r3, r2
 800af76:	d901      	bls.n	800af7c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	e14b      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af7c:	4b6d      	ldr	r3, [pc, #436]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800af7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af80:	f003 0302 	and.w	r3, r3, #2
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0ee      	beq.n	800af66 <HAL_RCC_OscConfig+0x4f6>
 800af88:	e014      	b.n	800afb4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af8a:	f7fe f8cb 	bl	8009124 <HAL_GetTick>
 800af8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af90:	e00a      	b.n	800afa8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af92:	f7fe f8c7 	bl	8009124 <HAL_GetTick>
 800af96:	4602      	mov	r2, r0
 800af98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d901      	bls.n	800afa8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e135      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800afa8:	4b62      	ldr	r3, [pc, #392]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800afaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afac:	f003 0302 	and.w	r3, r3, #2
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1ee      	bne.n	800af92 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 812a 	beq.w	800b212 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800afbe:	4b5d      	ldr	r3, [pc, #372]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800afc6:	2b18      	cmp	r3, #24
 800afc8:	f000 80ba 	beq.w	800b140 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	f040 8095 	bne.w	800b100 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afd6:	4b57      	ldr	r3, [pc, #348]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a56      	ldr	r2, [pc, #344]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800afdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800afe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe2:	f7fe f89f 	bl	8009124 <HAL_GetTick>
 800afe6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afe8:	e008      	b.n	800affc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afea:	f7fe f89b 	bl	8009124 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d901      	bls.n	800affc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800aff8:	2303      	movs	r3, #3
 800affa:	e10b      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800affc:	4b4d      	ldr	r3, [pc, #308]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1f0      	bne.n	800afea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b008:	4b4a      	ldr	r3, [pc, #296]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b00a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b00c:	4b4a      	ldr	r3, [pc, #296]	@ (800b138 <HAL_RCC_OscConfig+0x6c8>)
 800b00e:	4013      	ands	r3, r2
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b018:	0112      	lsls	r2, r2, #4
 800b01a:	430a      	orrs	r2, r1
 800b01c:	4945      	ldr	r1, [pc, #276]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	628b      	str	r3, [r1, #40]	@ 0x28
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b026:	3b01      	subs	r3, #1
 800b028:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b030:	3b01      	subs	r3, #1
 800b032:	025b      	lsls	r3, r3, #9
 800b034:	b29b      	uxth	r3, r3
 800b036:	431a      	orrs	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03c:	3b01      	subs	r3, #1
 800b03e:	041b      	lsls	r3, r3, #16
 800b040:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b044:	431a      	orrs	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b04a:	3b01      	subs	r3, #1
 800b04c:	061b      	lsls	r3, r3, #24
 800b04e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b052:	4938      	ldr	r1, [pc, #224]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b054:	4313      	orrs	r3, r2
 800b056:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b058:	4b36      	ldr	r3, [pc, #216]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05c:	4a35      	ldr	r2, [pc, #212]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b05e:	f023 0301 	bic.w	r3, r3, #1
 800b062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b064:	4b33      	ldr	r3, [pc, #204]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b068:	4b34      	ldr	r3, [pc, #208]	@ (800b13c <HAL_RCC_OscConfig+0x6cc>)
 800b06a:	4013      	ands	r3, r2
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b070:	00d2      	lsls	r2, r2, #3
 800b072:	4930      	ldr	r1, [pc, #192]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b074:	4313      	orrs	r3, r2
 800b076:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b078:	4b2e      	ldr	r3, [pc, #184]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b07a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b07c:	f023 020c 	bic.w	r2, r3, #12
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b084:	492b      	ldr	r1, [pc, #172]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b086:	4313      	orrs	r3, r2
 800b088:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b08a:	4b2a      	ldr	r3, [pc, #168]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b08e:	f023 0202 	bic.w	r2, r3, #2
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b096:	4927      	ldr	r1, [pc, #156]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b098:	4313      	orrs	r3, r2
 800b09a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b09c:	4b25      	ldr	r3, [pc, #148]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a0:	4a24      	ldr	r2, [pc, #144]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b0a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0a8:	4b22      	ldr	r3, [pc, #136]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ac:	4a21      	ldr	r2, [pc, #132]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b0b4:	4b1f      	ldr	r3, [pc, #124]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b8:	4a1e      	ldr	r2, [pc, #120]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b0be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b0c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0c6:	f043 0301 	orr.w	r3, r3, #1
 800b0ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0cc:	4b19      	ldr	r3, [pc, #100]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a18      	ldr	r2, [pc, #96]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b0d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0d8:	f7fe f824 	bl	8009124 <HAL_GetTick>
 800b0dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0de:	e008      	b.n	800b0f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0e0:	f7fe f820 	bl	8009124 <HAL_GetTick>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d901      	bls.n	800b0f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e090      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0f2:	4b10      	ldr	r3, [pc, #64]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d0f0      	beq.n	800b0e0 <HAL_RCC_OscConfig+0x670>
 800b0fe:	e088      	b.n	800b212 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b100:	4b0c      	ldr	r3, [pc, #48]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a0b      	ldr	r2, [pc, #44]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b10a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b10c:	f7fe f80a 	bl	8009124 <HAL_GetTick>
 800b110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b112:	e008      	b.n	800b126 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b114:	f7fe f806 	bl	8009124 <HAL_GetTick>
 800b118:	4602      	mov	r2, r0
 800b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d901      	bls.n	800b126 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b122:	2303      	movs	r3, #3
 800b124:	e076      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b126:	4b03      	ldr	r3, [pc, #12]	@ (800b134 <HAL_RCC_OscConfig+0x6c4>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1f0      	bne.n	800b114 <HAL_RCC_OscConfig+0x6a4>
 800b132:	e06e      	b.n	800b212 <HAL_RCC_OscConfig+0x7a2>
 800b134:	58024400 	.word	0x58024400
 800b138:	fffffc0c 	.word	0xfffffc0c
 800b13c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b140:	4b36      	ldr	r3, [pc, #216]	@ (800b21c <HAL_RCC_OscConfig+0x7ac>)
 800b142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b144:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b146:	4b35      	ldr	r3, [pc, #212]	@ (800b21c <HAL_RCC_OscConfig+0x7ac>)
 800b148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b14a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b150:	2b01      	cmp	r3, #1
 800b152:	d031      	beq.n	800b1b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	f003 0203 	and.w	r2, r3, #3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b15e:	429a      	cmp	r2, r3
 800b160:	d12a      	bne.n	800b1b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	091b      	lsrs	r3, r3, #4
 800b166:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b16e:	429a      	cmp	r2, r3
 800b170:	d122      	bne.n	800b1b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b17c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b17e:	429a      	cmp	r2, r3
 800b180:	d11a      	bne.n	800b1b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	0a5b      	lsrs	r3, r3, #9
 800b186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b18e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b190:	429a      	cmp	r2, r3
 800b192:	d111      	bne.n	800b1b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	0c1b      	lsrs	r3, r3, #16
 800b198:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d108      	bne.n	800b1b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	0e1b      	lsrs	r3, r3, #24
 800b1aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d001      	beq.n	800b1bc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e02b      	b.n	800b214 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b1bc:	4b17      	ldr	r3, [pc, #92]	@ (800b21c <HAL_RCC_OscConfig+0x7ac>)
 800b1be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c0:	08db      	lsrs	r3, r3, #3
 800b1c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d01f      	beq.n	800b212 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b1d2:	4b12      	ldr	r3, [pc, #72]	@ (800b21c <HAL_RCC_OscConfig+0x7ac>)
 800b1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d6:	4a11      	ldr	r2, [pc, #68]	@ (800b21c <HAL_RCC_OscConfig+0x7ac>)
 800b1d8:	f023 0301 	bic.w	r3, r3, #1
 800b1dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b1de:	f7fd ffa1 	bl	8009124 <HAL_GetTick>
 800b1e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b1e4:	bf00      	nop
 800b1e6:	f7fd ff9d 	bl	8009124 <HAL_GetTick>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d0f9      	beq.n	800b1e6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b21c <HAL_RCC_OscConfig+0x7ac>)
 800b1f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b220 <HAL_RCC_OscConfig+0x7b0>)
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b1fe:	00d2      	lsls	r2, r2, #3
 800b200:	4906      	ldr	r1, [pc, #24]	@ (800b21c <HAL_RCC_OscConfig+0x7ac>)
 800b202:	4313      	orrs	r3, r2
 800b204:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b206:	4b05      	ldr	r3, [pc, #20]	@ (800b21c <HAL_RCC_OscConfig+0x7ac>)
 800b208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20a:	4a04      	ldr	r2, [pc, #16]	@ (800b21c <HAL_RCC_OscConfig+0x7ac>)
 800b20c:	f043 0301 	orr.w	r3, r3, #1
 800b210:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3730      	adds	r7, #48	@ 0x30
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	58024400 	.word	0x58024400
 800b220:	ffff0007 	.word	0xffff0007

0800b224 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d101      	bne.n	800b238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e19c      	b.n	800b572 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b238:	4b8a      	ldr	r3, [pc, #552]	@ (800b464 <HAL_RCC_ClockConfig+0x240>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 030f 	and.w	r3, r3, #15
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d910      	bls.n	800b268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b246:	4b87      	ldr	r3, [pc, #540]	@ (800b464 <HAL_RCC_ClockConfig+0x240>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f023 020f 	bic.w	r2, r3, #15
 800b24e:	4985      	ldr	r1, [pc, #532]	@ (800b464 <HAL_RCC_ClockConfig+0x240>)
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	4313      	orrs	r3, r2
 800b254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b256:	4b83      	ldr	r3, [pc, #524]	@ (800b464 <HAL_RCC_ClockConfig+0x240>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 030f 	and.w	r3, r3, #15
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	429a      	cmp	r2, r3
 800b262:	d001      	beq.n	800b268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	e184      	b.n	800b572 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	d010      	beq.n	800b296 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	691a      	ldr	r2, [r3, #16]
 800b278:	4b7b      	ldr	r3, [pc, #492]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b280:	429a      	cmp	r2, r3
 800b282:	d908      	bls.n	800b296 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b284:	4b78      	ldr	r3, [pc, #480]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b286:	699b      	ldr	r3, [r3, #24]
 800b288:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	4975      	ldr	r1, [pc, #468]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b292:	4313      	orrs	r3, r2
 800b294:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 0308 	and.w	r3, r3, #8
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d010      	beq.n	800b2c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	695a      	ldr	r2, [r3, #20]
 800b2a6:	4b70      	ldr	r3, [pc, #448]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d908      	bls.n	800b2c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2b2:	4b6d      	ldr	r3, [pc, #436]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	496a      	ldr	r1, [pc, #424]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0310 	and.w	r3, r3, #16
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d010      	beq.n	800b2f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	699a      	ldr	r2, [r3, #24]
 800b2d4:	4b64      	ldr	r3, [pc, #400]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d908      	bls.n	800b2f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2e0:	4b61      	ldr	r3, [pc, #388]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	495e      	ldr	r1, [pc, #376]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0320 	and.w	r3, r3, #32
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d010      	beq.n	800b320 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	69da      	ldr	r2, [r3, #28]
 800b302:	4b59      	ldr	r3, [pc, #356]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d908      	bls.n	800b320 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b30e:	4b56      	ldr	r3, [pc, #344]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	4953      	ldr	r1, [pc, #332]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b31c:	4313      	orrs	r3, r2
 800b31e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0302 	and.w	r3, r3, #2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d010      	beq.n	800b34e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68da      	ldr	r2, [r3, #12]
 800b330:	4b4d      	ldr	r3, [pc, #308]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	f003 030f 	and.w	r3, r3, #15
 800b338:	429a      	cmp	r2, r3
 800b33a:	d908      	bls.n	800b34e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b33c:	4b4a      	ldr	r3, [pc, #296]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	f023 020f 	bic.w	r2, r3, #15
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	4947      	ldr	r1, [pc, #284]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b34a:	4313      	orrs	r3, r2
 800b34c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b00      	cmp	r3, #0
 800b358:	d055      	beq.n	800b406 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b35a:	4b43      	ldr	r3, [pc, #268]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b35c:	699b      	ldr	r3, [r3, #24]
 800b35e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	4940      	ldr	r1, [pc, #256]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b368:	4313      	orrs	r3, r2
 800b36a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	2b02      	cmp	r3, #2
 800b372:	d107      	bne.n	800b384 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b374:	4b3c      	ldr	r3, [pc, #240]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d121      	bne.n	800b3c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	e0f6      	b.n	800b572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	2b03      	cmp	r3, #3
 800b38a:	d107      	bne.n	800b39c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b38c:	4b36      	ldr	r3, [pc, #216]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d115      	bne.n	800b3c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e0ea      	b.n	800b572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d107      	bne.n	800b3b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b3a4:	4b30      	ldr	r3, [pc, #192]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d109      	bne.n	800b3c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e0de      	b.n	800b572 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3b4:	4b2c      	ldr	r3, [pc, #176]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 0304 	and.w	r3, r3, #4
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e0d6      	b.n	800b572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b3c4:	4b28      	ldr	r3, [pc, #160]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	f023 0207 	bic.w	r2, r3, #7
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	4925      	ldr	r1, [pc, #148]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3d6:	f7fd fea5 	bl	8009124 <HAL_GetTick>
 800b3da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3dc:	e00a      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3de:	f7fd fea1 	bl	8009124 <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d901      	bls.n	800b3f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e0be      	b.n	800b572 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	429a      	cmp	r2, r3
 800b404:	d1eb      	bne.n	800b3de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 0302 	and.w	r3, r3, #2
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d010      	beq.n	800b434 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	68da      	ldr	r2, [r3, #12]
 800b416:	4b14      	ldr	r3, [pc, #80]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	f003 030f 	and.w	r3, r3, #15
 800b41e:	429a      	cmp	r2, r3
 800b420:	d208      	bcs.n	800b434 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b422:	4b11      	ldr	r3, [pc, #68]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	f023 020f 	bic.w	r2, r3, #15
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	490e      	ldr	r1, [pc, #56]	@ (800b468 <HAL_RCC_ClockConfig+0x244>)
 800b430:	4313      	orrs	r3, r2
 800b432:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b434:	4b0b      	ldr	r3, [pc, #44]	@ (800b464 <HAL_RCC_ClockConfig+0x240>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 030f 	and.w	r3, r3, #15
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d214      	bcs.n	800b46c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b442:	4b08      	ldr	r3, [pc, #32]	@ (800b464 <HAL_RCC_ClockConfig+0x240>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f023 020f 	bic.w	r2, r3, #15
 800b44a:	4906      	ldr	r1, [pc, #24]	@ (800b464 <HAL_RCC_ClockConfig+0x240>)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	4313      	orrs	r3, r2
 800b450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b452:	4b04      	ldr	r3, [pc, #16]	@ (800b464 <HAL_RCC_ClockConfig+0x240>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 030f 	and.w	r3, r3, #15
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d005      	beq.n	800b46c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	e086      	b.n	800b572 <HAL_RCC_ClockConfig+0x34e>
 800b464:	52002000 	.word	0x52002000
 800b468:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0304 	and.w	r3, r3, #4
 800b474:	2b00      	cmp	r3, #0
 800b476:	d010      	beq.n	800b49a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	691a      	ldr	r2, [r3, #16]
 800b47c:	4b3f      	ldr	r3, [pc, #252]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b484:	429a      	cmp	r2, r3
 800b486:	d208      	bcs.n	800b49a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b488:	4b3c      	ldr	r3, [pc, #240]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	4939      	ldr	r1, [pc, #228]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b496:	4313      	orrs	r3, r2
 800b498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0308 	and.w	r3, r3, #8
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d010      	beq.n	800b4c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	695a      	ldr	r2, [r3, #20]
 800b4aa:	4b34      	ldr	r3, [pc, #208]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b4ac:	69db      	ldr	r3, [r3, #28]
 800b4ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d208      	bcs.n	800b4c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4b6:	4b31      	ldr	r3, [pc, #196]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b4b8:	69db      	ldr	r3, [r3, #28]
 800b4ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	492e      	ldr	r1, [pc, #184]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0310 	and.w	r3, r3, #16
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d010      	beq.n	800b4f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	699a      	ldr	r2, [r3, #24]
 800b4d8:	4b28      	ldr	r3, [pc, #160]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d208      	bcs.n	800b4f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b4e4:	4b25      	ldr	r3, [pc, #148]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	4922      	ldr	r1, [pc, #136]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0320 	and.w	r3, r3, #32
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d010      	beq.n	800b524 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	69da      	ldr	r2, [r3, #28]
 800b506:	4b1d      	ldr	r3, [pc, #116]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b508:	6a1b      	ldr	r3, [r3, #32]
 800b50a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b50e:	429a      	cmp	r2, r3
 800b510:	d208      	bcs.n	800b524 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b512:	4b1a      	ldr	r3, [pc, #104]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	4917      	ldr	r1, [pc, #92]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b520:	4313      	orrs	r3, r2
 800b522:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b524:	f000 f834 	bl	800b590 <HAL_RCC_GetSysClockFreq>
 800b528:	4602      	mov	r2, r0
 800b52a:	4b14      	ldr	r3, [pc, #80]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	0a1b      	lsrs	r3, r3, #8
 800b530:	f003 030f 	and.w	r3, r3, #15
 800b534:	4912      	ldr	r1, [pc, #72]	@ (800b580 <HAL_RCC_ClockConfig+0x35c>)
 800b536:	5ccb      	ldrb	r3, [r1, r3]
 800b538:	f003 031f 	and.w	r3, r3, #31
 800b53c:	fa22 f303 	lsr.w	r3, r2, r3
 800b540:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b542:	4b0e      	ldr	r3, [pc, #56]	@ (800b57c <HAL_RCC_ClockConfig+0x358>)
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	f003 030f 	and.w	r3, r3, #15
 800b54a:	4a0d      	ldr	r2, [pc, #52]	@ (800b580 <HAL_RCC_ClockConfig+0x35c>)
 800b54c:	5cd3      	ldrb	r3, [r2, r3]
 800b54e:	f003 031f 	and.w	r3, r3, #31
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	fa22 f303 	lsr.w	r3, r2, r3
 800b558:	4a0a      	ldr	r2, [pc, #40]	@ (800b584 <HAL_RCC_ClockConfig+0x360>)
 800b55a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b55c:	4a0a      	ldr	r2, [pc, #40]	@ (800b588 <HAL_RCC_ClockConfig+0x364>)
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b562:	4b0a      	ldr	r3, [pc, #40]	@ (800b58c <HAL_RCC_ClockConfig+0x368>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4618      	mov	r0, r3
 800b568:	f7fd fd92 	bl	8009090 <HAL_InitTick>
 800b56c:	4603      	mov	r3, r0
 800b56e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b570:	7bfb      	ldrb	r3, [r7, #15]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	58024400 	.word	0x58024400
 800b580:	0801c56c 	.word	0x0801c56c
 800b584:	24000008 	.word	0x24000008
 800b588:	24000004 	.word	0x24000004
 800b58c:	2400015c 	.word	0x2400015c

0800b590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b590:	b480      	push	{r7}
 800b592:	b089      	sub	sp, #36	@ 0x24
 800b594:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b596:	4bb3      	ldr	r3, [pc, #716]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b59e:	2b18      	cmp	r3, #24
 800b5a0:	f200 8155 	bhi.w	800b84e <HAL_RCC_GetSysClockFreq+0x2be>
 800b5a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5ac <HAL_RCC_GetSysClockFreq+0x1c>)
 800b5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5aa:	bf00      	nop
 800b5ac:	0800b611 	.word	0x0800b611
 800b5b0:	0800b84f 	.word	0x0800b84f
 800b5b4:	0800b84f 	.word	0x0800b84f
 800b5b8:	0800b84f 	.word	0x0800b84f
 800b5bc:	0800b84f 	.word	0x0800b84f
 800b5c0:	0800b84f 	.word	0x0800b84f
 800b5c4:	0800b84f 	.word	0x0800b84f
 800b5c8:	0800b84f 	.word	0x0800b84f
 800b5cc:	0800b637 	.word	0x0800b637
 800b5d0:	0800b84f 	.word	0x0800b84f
 800b5d4:	0800b84f 	.word	0x0800b84f
 800b5d8:	0800b84f 	.word	0x0800b84f
 800b5dc:	0800b84f 	.word	0x0800b84f
 800b5e0:	0800b84f 	.word	0x0800b84f
 800b5e4:	0800b84f 	.word	0x0800b84f
 800b5e8:	0800b84f 	.word	0x0800b84f
 800b5ec:	0800b63d 	.word	0x0800b63d
 800b5f0:	0800b84f 	.word	0x0800b84f
 800b5f4:	0800b84f 	.word	0x0800b84f
 800b5f8:	0800b84f 	.word	0x0800b84f
 800b5fc:	0800b84f 	.word	0x0800b84f
 800b600:	0800b84f 	.word	0x0800b84f
 800b604:	0800b84f 	.word	0x0800b84f
 800b608:	0800b84f 	.word	0x0800b84f
 800b60c:	0800b643 	.word	0x0800b643
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b610:	4b94      	ldr	r3, [pc, #592]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 0320 	and.w	r3, r3, #32
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d009      	beq.n	800b630 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b61c:	4b91      	ldr	r3, [pc, #580]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	08db      	lsrs	r3, r3, #3
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	4a90      	ldr	r2, [pc, #576]	@ (800b868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b628:	fa22 f303 	lsr.w	r3, r2, r3
 800b62c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b62e:	e111      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b630:	4b8d      	ldr	r3, [pc, #564]	@ (800b868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b632:	61bb      	str	r3, [r7, #24]
      break;
 800b634:	e10e      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b636:	4b8d      	ldr	r3, [pc, #564]	@ (800b86c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b638:	61bb      	str	r3, [r7, #24]
      break;
 800b63a:	e10b      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b63c:	4b8c      	ldr	r3, [pc, #560]	@ (800b870 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b63e:	61bb      	str	r3, [r7, #24]
      break;
 800b640:	e108      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b642:	4b88      	ldr	r3, [pc, #544]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b646:	f003 0303 	and.w	r3, r3, #3
 800b64a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b64c:	4b85      	ldr	r3, [pc, #532]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b650:	091b      	lsrs	r3, r3, #4
 800b652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b656:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b658:	4b82      	ldr	r3, [pc, #520]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65c:	f003 0301 	and.w	r3, r3, #1
 800b660:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b662:	4b80      	ldr	r3, [pc, #512]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b666:	08db      	lsrs	r3, r3, #3
 800b668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	fb02 f303 	mul.w	r3, r2, r3
 800b672:	ee07 3a90 	vmov	s15, r3
 800b676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	2b00      	cmp	r3, #0
 800b682:	f000 80e1 	beq.w	800b848 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	2b02      	cmp	r3, #2
 800b68a:	f000 8083 	beq.w	800b794 <HAL_RCC_GetSysClockFreq+0x204>
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	2b02      	cmp	r3, #2
 800b692:	f200 80a1 	bhi.w	800b7d8 <HAL_RCC_GetSysClockFreq+0x248>
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d003      	beq.n	800b6a4 <HAL_RCC_GetSysClockFreq+0x114>
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d056      	beq.n	800b750 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b6a2:	e099      	b.n	800b7d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6a4:	4b6f      	ldr	r3, [pc, #444]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0320 	and.w	r3, r3, #32
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d02d      	beq.n	800b70c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6b0:	4b6c      	ldr	r3, [pc, #432]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	08db      	lsrs	r3, r3, #3
 800b6b6:	f003 0303 	and.w	r3, r3, #3
 800b6ba:	4a6b      	ldr	r2, [pc, #428]	@ (800b868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6da:	4b62      	ldr	r3, [pc, #392]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b706:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b70a:	e087      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	ee07 3a90 	vmov	s15, r3
 800b712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b716:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b878 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b71e:	4b51      	ldr	r3, [pc, #324]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b72e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b732:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b73e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b74a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b74e:	e065      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	ee07 3a90 	vmov	s15, r3
 800b756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b87c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b762:	4b40      	ldr	r3, [pc, #256]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b76a:	ee07 3a90 	vmov	s15, r3
 800b76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b772:	ed97 6a02 	vldr	s12, [r7, #8]
 800b776:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b78e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b792:	e043      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	ee07 3a90 	vmov	s15, r3
 800b79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b79e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b880 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7a6:	4b2f      	ldr	r3, [pc, #188]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7d6:	e021      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	ee07 3a90 	vmov	s15, r3
 800b7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b87c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ea:	4b1e      	ldr	r3, [pc, #120]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b80a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b81a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b81c:	4b11      	ldr	r3, [pc, #68]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b81e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b820:	0a5b      	lsrs	r3, r3, #9
 800b822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b826:	3301      	adds	r3, #1
 800b828:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b834:	edd7 6a07 	vldr	s13, [r7, #28]
 800b838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b83c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b840:	ee17 3a90 	vmov	r3, s15
 800b844:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b846:	e005      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	61bb      	str	r3, [r7, #24]
      break;
 800b84c:	e002      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b84e:	4b07      	ldr	r3, [pc, #28]	@ (800b86c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b850:	61bb      	str	r3, [r7, #24]
      break;
 800b852:	bf00      	nop
  }

  return sysclockfreq;
 800b854:	69bb      	ldr	r3, [r7, #24]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3724      	adds	r7, #36	@ 0x24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	58024400 	.word	0x58024400
 800b868:	03d09000 	.word	0x03d09000
 800b86c:	003d0900 	.word	0x003d0900
 800b870:	007a1200 	.word	0x007a1200
 800b874:	46000000 	.word	0x46000000
 800b878:	4c742400 	.word	0x4c742400
 800b87c:	4a742400 	.word	0x4a742400
 800b880:	4af42400 	.word	0x4af42400

0800b884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b88a:	f7ff fe81 	bl	800b590 <HAL_RCC_GetSysClockFreq>
 800b88e:	4602      	mov	r2, r0
 800b890:	4b10      	ldr	r3, [pc, #64]	@ (800b8d4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b892:	699b      	ldr	r3, [r3, #24]
 800b894:	0a1b      	lsrs	r3, r3, #8
 800b896:	f003 030f 	and.w	r3, r3, #15
 800b89a:	490f      	ldr	r1, [pc, #60]	@ (800b8d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b89c:	5ccb      	ldrb	r3, [r1, r3]
 800b89e:	f003 031f 	and.w	r3, r3, #31
 800b8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b8d4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	f003 030f 	and.w	r3, r3, #15
 800b8b0:	4a09      	ldr	r2, [pc, #36]	@ (800b8d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8b2:	5cd3      	ldrb	r3, [r2, r3]
 800b8b4:	f003 031f 	and.w	r3, r3, #31
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b8be:	4a07      	ldr	r2, [pc, #28]	@ (800b8dc <HAL_RCC_GetHCLKFreq+0x58>)
 800b8c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b8c2:	4a07      	ldr	r2, [pc, #28]	@ (800b8e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b8c8:	4b04      	ldr	r3, [pc, #16]	@ (800b8dc <HAL_RCC_GetHCLKFreq+0x58>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	58024400 	.word	0x58024400
 800b8d8:	0801c56c 	.word	0x0801c56c
 800b8dc:	24000008 	.word	0x24000008
 800b8e0:	24000004 	.word	0x24000004

0800b8e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b8e8:	f7ff ffcc 	bl	800b884 <HAL_RCC_GetHCLKFreq>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	4b06      	ldr	r3, [pc, #24]	@ (800b908 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8f0:	69db      	ldr	r3, [r3, #28]
 800b8f2:	091b      	lsrs	r3, r3, #4
 800b8f4:	f003 0307 	and.w	r3, r3, #7
 800b8f8:	4904      	ldr	r1, [pc, #16]	@ (800b90c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8fa:	5ccb      	ldrb	r3, [r1, r3]
 800b8fc:	f003 031f 	and.w	r3, r3, #31
 800b900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b904:	4618      	mov	r0, r3
 800b906:	bd80      	pop	{r7, pc}
 800b908:	58024400 	.word	0x58024400
 800b90c:	0801c56c 	.word	0x0801c56c

0800b910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b914:	f7ff ffb6 	bl	800b884 <HAL_RCC_GetHCLKFreq>
 800b918:	4602      	mov	r2, r0
 800b91a:	4b06      	ldr	r3, [pc, #24]	@ (800b934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b91c:	69db      	ldr	r3, [r3, #28]
 800b91e:	0a1b      	lsrs	r3, r3, #8
 800b920:	f003 0307 	and.w	r3, r3, #7
 800b924:	4904      	ldr	r1, [pc, #16]	@ (800b938 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b926:	5ccb      	ldrb	r3, [r1, r3]
 800b928:	f003 031f 	and.w	r3, r3, #31
 800b92c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b930:	4618      	mov	r0, r3
 800b932:	bd80      	pop	{r7, pc}
 800b934:	58024400 	.word	0x58024400
 800b938:	0801c56c 	.word	0x0801c56c

0800b93c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b93c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b940:	b0c6      	sub	sp, #280	@ 0x118
 800b942:	af00      	add	r7, sp, #0
 800b944:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b948:	2300      	movs	r3, #0
 800b94a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b94e:	2300      	movs	r3, #0
 800b950:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b960:	2500      	movs	r5, #0
 800b962:	ea54 0305 	orrs.w	r3, r4, r5
 800b966:	d049      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b96c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b96e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b972:	d02f      	beq.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b974:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b978:	d828      	bhi.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b97a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b97e:	d01a      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b980:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b984:	d822      	bhi.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b986:	2b00      	cmp	r3, #0
 800b988:	d003      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b98a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b98e:	d007      	beq.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b990:	e01c      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b992:	4bab      	ldr	r3, [pc, #684]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b996:	4aaa      	ldr	r2, [pc, #680]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b99c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b99e:	e01a      	b.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	2102      	movs	r1, #2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f001 fc25 	bl	800d1f8 <RCCEx_PLL2_Config>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9b4:	e00f      	b.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ba:	3328      	adds	r3, #40	@ 0x28
 800b9bc:	2102      	movs	r1, #2
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f001 fccc 	bl	800d35c <RCCEx_PLL3_Config>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9ca:	e004      	b.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9d2:	e000      	b.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b9d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10a      	bne.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b9de:	4b98      	ldr	r3, [pc, #608]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9ec:	4a94      	ldr	r2, [pc, #592]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9ee:	430b      	orrs	r3, r1
 800b9f0:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9f2:	e003      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ba08:	f04f 0900 	mov.w	r9, #0
 800ba0c:	ea58 0309 	orrs.w	r3, r8, r9
 800ba10:	d047      	beq.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba18:	2b04      	cmp	r3, #4
 800ba1a:	d82a      	bhi.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ba1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ba24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ba1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba22:	bf00      	nop
 800ba24:	0800ba39 	.word	0x0800ba39
 800ba28:	0800ba47 	.word	0x0800ba47
 800ba2c:	0800ba5d 	.word	0x0800ba5d
 800ba30:	0800ba7b 	.word	0x0800ba7b
 800ba34:	0800ba7b 	.word	0x0800ba7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba38:	4b81      	ldr	r3, [pc, #516]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3c:	4a80      	ldr	r2, [pc, #512]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba44:	e01a      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f001 fbd2 	bl	800d1f8 <RCCEx_PLL2_Config>
 800ba54:	4603      	mov	r3, r0
 800ba56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba5a:	e00f      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba60:	3328      	adds	r3, #40	@ 0x28
 800ba62:	2100      	movs	r1, #0
 800ba64:	4618      	mov	r0, r3
 800ba66:	f001 fc79 	bl	800d35c <RCCEx_PLL3_Config>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba70:	e004      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba78:	e000      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ba7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba84:	4b6e      	ldr	r3, [pc, #440]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba88:	f023 0107 	bic.w	r1, r3, #7
 800ba8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba92:	4a6b      	ldr	r2, [pc, #428]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba94:	430b      	orrs	r3, r1
 800ba96:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba98:	e003      	b.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800baa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800baae:	f04f 0b00 	mov.w	fp, #0
 800bab2:	ea5a 030b 	orrs.w	r3, sl, fp
 800bab6:	d05b      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800babc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bac0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bac4:	d03b      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bac6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800baca:	d834      	bhi.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bacc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bad0:	d037      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bad2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bad6:	d82e      	bhi.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bad8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800badc:	d033      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bade:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bae2:	d828      	bhi.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bae8:	d01a      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800baea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800baee:	d822      	bhi.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d003      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800baf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800baf8:	d007      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bafa:	e01c      	b.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bafc:	4b50      	ldr	r3, [pc, #320]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb00:	4a4f      	ldr	r2, [pc, #316]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb08:	e01e      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb0e:	3308      	adds	r3, #8
 800bb10:	2100      	movs	r1, #0
 800bb12:	4618      	mov	r0, r3
 800bb14:	f001 fb70 	bl	800d1f8 <RCCEx_PLL2_Config>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bb1e:	e013      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb24:	3328      	adds	r3, #40	@ 0x28
 800bb26:	2100      	movs	r1, #0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f001 fc17 	bl	800d35c <RCCEx_PLL3_Config>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb34:	e008      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb3c:	e004      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb3e:	bf00      	nop
 800bb40:	e002      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb42:	bf00      	nop
 800bb44:	e000      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10b      	bne.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bb50:	4b3b      	ldr	r3, [pc, #236]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb54:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb60:	4a37      	ldr	r2, [pc, #220]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb62:	430b      	orrs	r3, r1
 800bb64:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb66:	e003      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bb70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bb7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bb80:	2300      	movs	r3, #0
 800bb82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bb86:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	d05d      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bb98:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bb9c:	d03b      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bb9e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bba2:	d834      	bhi.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bba4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bba8:	d037      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bbaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bbae:	d82e      	bhi.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bbb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bbb4:	d033      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bbb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bbba:	d828      	bhi.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bbbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbc0:	d01a      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bbc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbc6:	d822      	bhi.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d003      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bbcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbd0:	d007      	beq.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bbd2:	e01c      	b.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbd4:	4b1a      	ldr	r3, [pc, #104]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd8:	4a19      	ldr	r2, [pc, #100]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbe0:	e01e      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe6:	3308      	adds	r3, #8
 800bbe8:	2100      	movs	r1, #0
 800bbea:	4618      	mov	r0, r3
 800bbec:	f001 fb04 	bl	800d1f8 <RCCEx_PLL2_Config>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bbf6:	e013      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbfc:	3328      	adds	r3, #40	@ 0x28
 800bbfe:	2100      	movs	r1, #0
 800bc00:	4618      	mov	r0, r3
 800bc02:	f001 fbab 	bl	800d35c <RCCEx_PLL3_Config>
 800bc06:	4603      	mov	r3, r0
 800bc08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc0c:	e008      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc14:	e004      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc16:	bf00      	nop
 800bc18:	e002      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc1a:	bf00      	nop
 800bc1c:	e000      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10d      	bne.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc28:	4b05      	ldr	r3, [pc, #20]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc2c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bc38:	4a01      	ldr	r2, [pc, #4]	@ (800bc40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc3e:	e005      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bc40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bc58:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bc62:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	d03a      	beq.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bc6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc72:	2b30      	cmp	r3, #48	@ 0x30
 800bc74:	d01f      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bc76:	2b30      	cmp	r3, #48	@ 0x30
 800bc78:	d819      	bhi.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bc7a:	2b20      	cmp	r3, #32
 800bc7c:	d00c      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bc7e:	2b20      	cmp	r3, #32
 800bc80:	d815      	bhi.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d019      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bc86:	2b10      	cmp	r3, #16
 800bc88:	d111      	bne.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc8a:	4baa      	ldr	r3, [pc, #680]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8e:	4aa9      	ldr	r2, [pc, #676]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc96:	e011      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc9c:	3308      	adds	r3, #8
 800bc9e:	2102      	movs	r1, #2
 800bca0:	4618      	mov	r0, r3
 800bca2:	f001 faa9 	bl	800d1f8 <RCCEx_PLL2_Config>
 800bca6:	4603      	mov	r3, r0
 800bca8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bcac:	e006      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcb4:	e002      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bcb6:	bf00      	nop
 800bcb8:	e000      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bcba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10a      	bne.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bcc4:	4b9b      	ldr	r3, [pc, #620]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcc8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcd2:	4a98      	ldr	r2, [pc, #608]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcd4:	430b      	orrs	r3, r1
 800bcd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bcd8:	e003      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bcee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bcf8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	d051      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd0c:	d035      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bd0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd12:	d82e      	bhi.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd18:	d031      	beq.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bd1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd1e:	d828      	bhi.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd24:	d01a      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bd26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd2a:	d822      	bhi.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d003      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bd30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd34:	d007      	beq.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bd36:	e01c      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd38:	4b7e      	ldr	r3, [pc, #504]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3c:	4a7d      	ldr	r2, [pc, #500]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd44:	e01c      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd4a:	3308      	adds	r3, #8
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f001 fa52 	bl	800d1f8 <RCCEx_PLL2_Config>
 800bd54:	4603      	mov	r3, r0
 800bd56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd5a:	e011      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd60:	3328      	adds	r3, #40	@ 0x28
 800bd62:	2100      	movs	r1, #0
 800bd64:	4618      	mov	r0, r3
 800bd66:	f001 faf9 	bl	800d35c <RCCEx_PLL3_Config>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd70:	e006      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd78:	e002      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bd7a:	bf00      	nop
 800bd7c:	e000      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bd7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10a      	bne.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd88:	4b6a      	ldr	r3, [pc, #424]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd96:	4a67      	ldr	r2, [pc, #412]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd98:	430b      	orrs	r3, r1
 800bd9a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd9c:	e003      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bda2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bdb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bdbc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	d053      	beq.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bdc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bdd0:	d033      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bdd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bdd6:	d82c      	bhi.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bddc:	d02f      	beq.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bdde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bde2:	d826      	bhi.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bde4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bde8:	d02b      	beq.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bdea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bdee:	d820      	bhi.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdf4:	d012      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bdf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdfa:	d81a      	bhi.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d022      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800be00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be04:	d115      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be0a:	3308      	adds	r3, #8
 800be0c:	2101      	movs	r1, #1
 800be0e:	4618      	mov	r0, r3
 800be10:	f001 f9f2 	bl	800d1f8 <RCCEx_PLL2_Config>
 800be14:	4603      	mov	r3, r0
 800be16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be1a:	e015      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be20:	3328      	adds	r3, #40	@ 0x28
 800be22:	2101      	movs	r1, #1
 800be24:	4618      	mov	r0, r3
 800be26:	f001 fa99 	bl	800d35c <RCCEx_PLL3_Config>
 800be2a:	4603      	mov	r3, r0
 800be2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be30:	e00a      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be38:	e006      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be3a:	bf00      	nop
 800be3c:	e004      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be3e:	bf00      	nop
 800be40:	e002      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be42:	bf00      	nop
 800be44:	e000      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10a      	bne.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800be50:	4b38      	ldr	r3, [pc, #224]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800be58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be5e:	4a35      	ldr	r2, [pc, #212]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be60:	430b      	orrs	r3, r1
 800be62:	6513      	str	r3, [r2, #80]	@ 0x50
 800be64:	e003      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800be7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800be7e:	2300      	movs	r3, #0
 800be80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be84:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800be88:	460b      	mov	r3, r1
 800be8a:	4313      	orrs	r3, r2
 800be8c:	d058      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800be8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800be96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be9a:	d033      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800be9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bea0:	d82c      	bhi.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bea6:	d02f      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800beac:	d826      	bhi.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800beae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800beb2:	d02b      	beq.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800beb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800beb8:	d820      	bhi.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800beba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bebe:	d012      	beq.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bec4:	d81a      	bhi.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d022      	beq.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800beca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bece:	d115      	bne.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bed4:	3308      	adds	r3, #8
 800bed6:	2101      	movs	r1, #1
 800bed8:	4618      	mov	r0, r3
 800beda:	f001 f98d 	bl	800d1f8 <RCCEx_PLL2_Config>
 800bede:	4603      	mov	r3, r0
 800bee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bee4:	e015      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beea:	3328      	adds	r3, #40	@ 0x28
 800beec:	2101      	movs	r1, #1
 800beee:	4618      	mov	r0, r3
 800bef0:	f001 fa34 	bl	800d35c <RCCEx_PLL3_Config>
 800bef4:	4603      	mov	r3, r0
 800bef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800befa:	e00a      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800befc:	2301      	movs	r3, #1
 800befe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf02:	e006      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf04:	bf00      	nop
 800bf06:	e004      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf08:	bf00      	nop
 800bf0a:	e002      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf0c:	bf00      	nop
 800bf0e:	e000      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10e      	bne.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bf1a:	4b06      	ldr	r3, [pc, #24]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf1e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bf2a:	4a02      	ldr	r2, [pc, #8]	@ (800bf34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf30:	e006      	b.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bf32:	bf00      	nop
 800bf34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bf4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf50:	2300      	movs	r3, #0
 800bf52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bf56:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	d037      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bf60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf6a:	d00e      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bf6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf70:	d816      	bhi.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d018      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bf76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf7a:	d111      	bne.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf7c:	4bc4      	ldr	r3, [pc, #784]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf80:	4ac3      	ldr	r2, [pc, #780]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf88:	e00f      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf8e:	3308      	adds	r3, #8
 800bf90:	2101      	movs	r1, #1
 800bf92:	4618      	mov	r0, r3
 800bf94:	f001 f930 	bl	800d1f8 <RCCEx_PLL2_Config>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf9e:	e004      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bfa6:	e000      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bfa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10a      	bne.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bfb2:	4bb7      	ldr	r3, [pc, #732]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfc0:	4ab3      	ldr	r2, [pc, #716]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc2:	430b      	orrs	r3, r1
 800bfc4:	6513      	str	r3, [r2, #80]	@ 0x50
 800bfc6:	e003      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bfdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bfe6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bfea:	460b      	mov	r3, r1
 800bfec:	4313      	orrs	r3, r2
 800bfee:	d039      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d81c      	bhi.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bffa:	a201      	add	r2, pc, #4	@ (adr r2, 800c000 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c000:	0800c03d 	.word	0x0800c03d
 800c004:	0800c011 	.word	0x0800c011
 800c008:	0800c01f 	.word	0x0800c01f
 800c00c:	0800c03d 	.word	0x0800c03d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c010:	4b9f      	ldr	r3, [pc, #636]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c014:	4a9e      	ldr	r2, [pc, #632]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c01a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c01c:	e00f      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c022:	3308      	adds	r3, #8
 800c024:	2102      	movs	r1, #2
 800c026:	4618      	mov	r0, r3
 800c028:	f001 f8e6 	bl	800d1f8 <RCCEx_PLL2_Config>
 800c02c:	4603      	mov	r3, r0
 800c02e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c032:	e004      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c03a:	e000      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c03c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c03e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10a      	bne.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c046:	4b92      	ldr	r3, [pc, #584]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c04a:	f023 0103 	bic.w	r1, r3, #3
 800c04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c054:	4a8e      	ldr	r2, [pc, #568]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c056:	430b      	orrs	r3, r1
 800c058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c05a:	e003      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c05c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c074:	2300      	movs	r3, #0
 800c076:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c07a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c07e:	460b      	mov	r3, r1
 800c080:	4313      	orrs	r3, r2
 800c082:	f000 8099 	beq.w	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c086:	4b83      	ldr	r3, [pc, #524]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a82      	ldr	r2, [pc, #520]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c08c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c090:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c092:	f7fd f847 	bl	8009124 <HAL_GetTick>
 800c096:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c09a:	e00b      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c09c:	f7fd f842 	bl	8009124 <HAL_GetTick>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	2b64      	cmp	r3, #100	@ 0x64
 800c0aa:	d903      	bls.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c0b2:	e005      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c0b4:	4b77      	ldr	r3, [pc, #476]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0ed      	beq.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c0c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d173      	bne.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c0c8:	4b71      	ldr	r3, [pc, #452]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c0d4:	4053      	eors	r3, r2
 800c0d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d015      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0de:	4b6c      	ldr	r3, [pc, #432]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c0ea:	4b69      	ldr	r3, [pc, #420]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0ee:	4a68      	ldr	r2, [pc, #416]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0f4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0f6:	4b66      	ldr	r3, [pc, #408]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0fa:	4a65      	ldr	r2, [pc, #404]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c100:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c102:	4a63      	ldr	r2, [pc, #396]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c108:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c10e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c116:	d118      	bne.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c118:	f7fd f804 	bl	8009124 <HAL_GetTick>
 800c11c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c120:	e00d      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c122:	f7fc ffff 	bl	8009124 <HAL_GetTick>
 800c126:	4602      	mov	r2, r0
 800c128:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c12c:	1ad2      	subs	r2, r2, r3
 800c12e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c132:	429a      	cmp	r2, r3
 800c134:	d903      	bls.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c136:	2303      	movs	r3, #3
 800c138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c13c:	e005      	b.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c13e:	4b54      	ldr	r3, [pc, #336]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c142:	f003 0302 	and.w	r3, r3, #2
 800c146:	2b00      	cmp	r3, #0
 800c148:	d0eb      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c14a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d129      	bne.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c156:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c15a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c15e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c162:	d10e      	bne.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c164:	4b4a      	ldr	r3, [pc, #296]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c174:	091a      	lsrs	r2, r3, #4
 800c176:	4b48      	ldr	r3, [pc, #288]	@ (800c298 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c178:	4013      	ands	r3, r2
 800c17a:	4a45      	ldr	r2, [pc, #276]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c17c:	430b      	orrs	r3, r1
 800c17e:	6113      	str	r3, [r2, #16]
 800c180:	e005      	b.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c182:	4b43      	ldr	r3, [pc, #268]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	4a42      	ldr	r2, [pc, #264]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c188:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c18c:	6113      	str	r3, [r2, #16]
 800c18e:	4b40      	ldr	r3, [pc, #256]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c190:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c19a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c19e:	4a3c      	ldr	r2, [pc, #240]	@ (800c290 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1a4:	e008      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c1a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c1ae:	e003      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c0:	f002 0301 	and.w	r3, r2, #1
 800c1c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c1ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	f000 808f 	beq.w	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c1e0:	2b28      	cmp	r3, #40	@ 0x28
 800c1e2:	d871      	bhi.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c1ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ea:	bf00      	nop
 800c1ec:	0800c2d1 	.word	0x0800c2d1
 800c1f0:	0800c2c9 	.word	0x0800c2c9
 800c1f4:	0800c2c9 	.word	0x0800c2c9
 800c1f8:	0800c2c9 	.word	0x0800c2c9
 800c1fc:	0800c2c9 	.word	0x0800c2c9
 800c200:	0800c2c9 	.word	0x0800c2c9
 800c204:	0800c2c9 	.word	0x0800c2c9
 800c208:	0800c2c9 	.word	0x0800c2c9
 800c20c:	0800c29d 	.word	0x0800c29d
 800c210:	0800c2c9 	.word	0x0800c2c9
 800c214:	0800c2c9 	.word	0x0800c2c9
 800c218:	0800c2c9 	.word	0x0800c2c9
 800c21c:	0800c2c9 	.word	0x0800c2c9
 800c220:	0800c2c9 	.word	0x0800c2c9
 800c224:	0800c2c9 	.word	0x0800c2c9
 800c228:	0800c2c9 	.word	0x0800c2c9
 800c22c:	0800c2b3 	.word	0x0800c2b3
 800c230:	0800c2c9 	.word	0x0800c2c9
 800c234:	0800c2c9 	.word	0x0800c2c9
 800c238:	0800c2c9 	.word	0x0800c2c9
 800c23c:	0800c2c9 	.word	0x0800c2c9
 800c240:	0800c2c9 	.word	0x0800c2c9
 800c244:	0800c2c9 	.word	0x0800c2c9
 800c248:	0800c2c9 	.word	0x0800c2c9
 800c24c:	0800c2d1 	.word	0x0800c2d1
 800c250:	0800c2c9 	.word	0x0800c2c9
 800c254:	0800c2c9 	.word	0x0800c2c9
 800c258:	0800c2c9 	.word	0x0800c2c9
 800c25c:	0800c2c9 	.word	0x0800c2c9
 800c260:	0800c2c9 	.word	0x0800c2c9
 800c264:	0800c2c9 	.word	0x0800c2c9
 800c268:	0800c2c9 	.word	0x0800c2c9
 800c26c:	0800c2d1 	.word	0x0800c2d1
 800c270:	0800c2c9 	.word	0x0800c2c9
 800c274:	0800c2c9 	.word	0x0800c2c9
 800c278:	0800c2c9 	.word	0x0800c2c9
 800c27c:	0800c2c9 	.word	0x0800c2c9
 800c280:	0800c2c9 	.word	0x0800c2c9
 800c284:	0800c2c9 	.word	0x0800c2c9
 800c288:	0800c2c9 	.word	0x0800c2c9
 800c28c:	0800c2d1 	.word	0x0800c2d1
 800c290:	58024400 	.word	0x58024400
 800c294:	58024800 	.word	0x58024800
 800c298:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a0:	3308      	adds	r3, #8
 800c2a2:	2101      	movs	r1, #1
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 ffa7 	bl	800d1f8 <RCCEx_PLL2_Config>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c2b0:	e00f      	b.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2b6:	3328      	adds	r3, #40	@ 0x28
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f001 f84e 	bl	800d35c <RCCEx_PLL3_Config>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c2c6:	e004      	b.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2ce:	e000      	b.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c2d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10a      	bne.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c2da:	4bbf      	ldr	r3, [pc, #764]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2e8:	4abb      	ldr	r2, [pc, #748]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2ea:	430b      	orrs	r3, r1
 800c2ec:	6553      	str	r3, [r2, #84]	@ 0x54
 800c2ee:	e003      	b.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c300:	f002 0302 	and.w	r3, r2, #2
 800c304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c308:	2300      	movs	r3, #0
 800c30a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c30e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c312:	460b      	mov	r3, r1
 800c314:	4313      	orrs	r3, r2
 800c316:	d041      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c31c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c31e:	2b05      	cmp	r3, #5
 800c320:	d824      	bhi.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c322:	a201      	add	r2, pc, #4	@ (adr r2, 800c328 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c328:	0800c375 	.word	0x0800c375
 800c32c:	0800c341 	.word	0x0800c341
 800c330:	0800c357 	.word	0x0800c357
 800c334:	0800c375 	.word	0x0800c375
 800c338:	0800c375 	.word	0x0800c375
 800c33c:	0800c375 	.word	0x0800c375
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c344:	3308      	adds	r3, #8
 800c346:	2101      	movs	r1, #1
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 ff55 	bl	800d1f8 <RCCEx_PLL2_Config>
 800c34e:	4603      	mov	r3, r0
 800c350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c354:	e00f      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c35a:	3328      	adds	r3, #40	@ 0x28
 800c35c:	2101      	movs	r1, #1
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 fffc 	bl	800d35c <RCCEx_PLL3_Config>
 800c364:	4603      	mov	r3, r0
 800c366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c36a:	e004      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c372:	e000      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c374:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c376:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c37e:	4b96      	ldr	r3, [pc, #600]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c382:	f023 0107 	bic.w	r1, r3, #7
 800c386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c38a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c38c:	4a92      	ldr	r2, [pc, #584]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c38e:	430b      	orrs	r3, r1
 800c390:	6553      	str	r3, [r2, #84]	@ 0x54
 800c392:	e003      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c394:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c398:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f002 0304 	and.w	r3, r2, #4
 800c3a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c3b2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	d044      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3c4:	2b05      	cmp	r3, #5
 800c3c6:	d825      	bhi.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c3c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c3d0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ce:	bf00      	nop
 800c3d0:	0800c41d 	.word	0x0800c41d
 800c3d4:	0800c3e9 	.word	0x0800c3e9
 800c3d8:	0800c3ff 	.word	0x0800c3ff
 800c3dc:	0800c41d 	.word	0x0800c41d
 800c3e0:	0800c41d 	.word	0x0800c41d
 800c3e4:	0800c41d 	.word	0x0800c41d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ec:	3308      	adds	r3, #8
 800c3ee:	2101      	movs	r1, #1
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 ff01 	bl	800d1f8 <RCCEx_PLL2_Config>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c3fc:	e00f      	b.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c402:	3328      	adds	r3, #40	@ 0x28
 800c404:	2101      	movs	r1, #1
 800c406:	4618      	mov	r0, r3
 800c408:	f000 ffa8 	bl	800d35c <RCCEx_PLL3_Config>
 800c40c:	4603      	mov	r3, r0
 800c40e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c412:	e004      	b.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c41a:	e000      	b.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c41c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c41e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10b      	bne.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c426:	4b6c      	ldr	r3, [pc, #432]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c42a:	f023 0107 	bic.w	r1, r3, #7
 800c42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c436:	4a68      	ldr	r2, [pc, #416]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c438:	430b      	orrs	r3, r1
 800c43a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c43c:	e003      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c43e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c442:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44e:	f002 0320 	and.w	r3, r2, #32
 800c452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c456:	2300      	movs	r3, #0
 800c458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c45c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c460:	460b      	mov	r3, r1
 800c462:	4313      	orrs	r3, r2
 800c464:	d055      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c46a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c46e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c472:	d033      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c478:	d82c      	bhi.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c47a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c47e:	d02f      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c484:	d826      	bhi.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c486:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c48a:	d02b      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c48c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c490:	d820      	bhi.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c496:	d012      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c49c:	d81a      	bhi.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d022      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c4a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4a6:	d115      	bne.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ac:	3308      	adds	r3, #8
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 fea1 	bl	800d1f8 <RCCEx_PLL2_Config>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c4bc:	e015      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c2:	3328      	adds	r3, #40	@ 0x28
 800c4c4:	2102      	movs	r1, #2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 ff48 	bl	800d35c <RCCEx_PLL3_Config>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c4d2:	e00a      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4da:	e006      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4dc:	bf00      	nop
 800c4de:	e004      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4e0:	bf00      	nop
 800c4e2:	e002      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4e4:	bf00      	nop
 800c4e6:	e000      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10b      	bne.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c4f2:	4b39      	ldr	r3, [pc, #228]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c502:	4a35      	ldr	r2, [pc, #212]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c504:	430b      	orrs	r3, r1
 800c506:	6553      	str	r3, [r2, #84]	@ 0x54
 800c508:	e003      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c50a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c50e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c51e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c522:	2300      	movs	r3, #0
 800c524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c528:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c52c:	460b      	mov	r3, r1
 800c52e:	4313      	orrs	r3, r2
 800c530:	d058      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c536:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c53a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c53e:	d033      	beq.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c540:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c544:	d82c      	bhi.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c54a:	d02f      	beq.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c54c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c550:	d826      	bhi.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c552:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c556:	d02b      	beq.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c558:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c55c:	d820      	bhi.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c55e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c562:	d012      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c568:	d81a      	bhi.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d022      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c56e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c572:	d115      	bne.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c578:	3308      	adds	r3, #8
 800c57a:	2100      	movs	r1, #0
 800c57c:	4618      	mov	r0, r3
 800c57e:	f000 fe3b 	bl	800d1f8 <RCCEx_PLL2_Config>
 800c582:	4603      	mov	r3, r0
 800c584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c588:	e015      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c58e:	3328      	adds	r3, #40	@ 0x28
 800c590:	2102      	movs	r1, #2
 800c592:	4618      	mov	r0, r3
 800c594:	f000 fee2 	bl	800d35c <RCCEx_PLL3_Config>
 800c598:	4603      	mov	r3, r0
 800c59a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c59e:	e00a      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c5a6:	e006      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5a8:	bf00      	nop
 800c5aa:	e004      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5ac:	bf00      	nop
 800c5ae:	e002      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5b0:	bf00      	nop
 800c5b2:	e000      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10e      	bne.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c5be:	4b06      	ldr	r3, [pc, #24]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5ce:	4a02      	ldr	r2, [pc, #8]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5d0:	430b      	orrs	r3, r1
 800c5d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5d4:	e006      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c5d6:	bf00      	nop
 800c5d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c5f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c5fe:	460b      	mov	r3, r1
 800c600:	4313      	orrs	r3, r2
 800c602:	d055      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c608:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c60c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c610:	d033      	beq.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c612:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c616:	d82c      	bhi.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c61c:	d02f      	beq.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c61e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c622:	d826      	bhi.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c624:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c628:	d02b      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c62a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c62e:	d820      	bhi.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c630:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c634:	d012      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c636:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c63a:	d81a      	bhi.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d022      	beq.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c644:	d115      	bne.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c64a:	3308      	adds	r3, #8
 800c64c:	2100      	movs	r1, #0
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 fdd2 	bl	800d1f8 <RCCEx_PLL2_Config>
 800c654:	4603      	mov	r3, r0
 800c656:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c65a:	e015      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c660:	3328      	adds	r3, #40	@ 0x28
 800c662:	2102      	movs	r1, #2
 800c664:	4618      	mov	r0, r3
 800c666:	f000 fe79 	bl	800d35c <RCCEx_PLL3_Config>
 800c66a:	4603      	mov	r3, r0
 800c66c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c670:	e00a      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c678:	e006      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c67a:	bf00      	nop
 800c67c:	e004      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c67e:	bf00      	nop
 800c680:	e002      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c682:	bf00      	nop
 800c684:	e000      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c686:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10b      	bne.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c690:	4ba0      	ldr	r3, [pc, #640]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c694:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c6a0:	4a9c      	ldr	r2, [pc, #624]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6a2:	430b      	orrs	r3, r1
 800c6a4:	6593      	str	r3, [r2, #88]	@ 0x58
 800c6a6:	e003      	b.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	f002 0308 	and.w	r3, r2, #8
 800c6bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c6c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	d01e      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6dc:	d10c      	bne.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e2:	3328      	adds	r3, #40	@ 0x28
 800c6e4:	2102      	movs	r1, #2
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 fe38 	bl	800d35c <RCCEx_PLL3_Config>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d002      	beq.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c6f8:	4b86      	ldr	r3, [pc, #536]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c708:	4a82      	ldr	r2, [pc, #520]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c70a:	430b      	orrs	r3, r1
 800c70c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	f002 0310 	and.w	r3, r2, #16
 800c71a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c71e:	2300      	movs	r3, #0
 800c720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c724:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c728:	460b      	mov	r3, r1
 800c72a:	4313      	orrs	r3, r2
 800c72c:	d01e      	beq.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c73a:	d10c      	bne.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c740:	3328      	adds	r3, #40	@ 0x28
 800c742:	2102      	movs	r1, #2
 800c744:	4618      	mov	r0, r3
 800c746:	f000 fe09 	bl	800d35c <RCCEx_PLL3_Config>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c756:	4b6f      	ldr	r3, [pc, #444]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c75a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c766:	4a6b      	ldr	r2, [pc, #428]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c768:	430b      	orrs	r3, r1
 800c76a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c778:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c77a:	2300      	movs	r3, #0
 800c77c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c77e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c782:	460b      	mov	r3, r1
 800c784:	4313      	orrs	r3, r2
 800c786:	d03e      	beq.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c78c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c794:	d022      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c79a:	d81b      	bhi.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d003      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c7a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7a4:	d00b      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c7a6:	e015      	b.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ac:	3308      	adds	r3, #8
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 fd21 	bl	800d1f8 <RCCEx_PLL2_Config>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c7bc:	e00f      	b.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c2:	3328      	adds	r3, #40	@ 0x28
 800c7c4:	2102      	movs	r1, #2
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 fdc8 	bl	800d35c <RCCEx_PLL3_Config>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c7d2:	e004      	b.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7da:	e000      	b.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c7dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10b      	bne.n	800c7fe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c7e6:	4b4b      	ldr	r3, [pc, #300]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7f6:	4a47      	ldr	r2, [pc, #284]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7f8:	430b      	orrs	r3, r1
 800c7fa:	6593      	str	r3, [r2, #88]	@ 0x58
 800c7fc:	e003      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c802:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c812:	673b      	str	r3, [r7, #112]	@ 0x70
 800c814:	2300      	movs	r3, #0
 800c816:	677b      	str	r3, [r7, #116]	@ 0x74
 800c818:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c81c:	460b      	mov	r3, r1
 800c81e:	4313      	orrs	r3, r2
 800c820:	d03b      	beq.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c82a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c82e:	d01f      	beq.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c830:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c834:	d818      	bhi.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c83a:	d003      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c83c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c840:	d007      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c842:	e011      	b.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c844:	4b33      	ldr	r3, [pc, #204]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c848:	4a32      	ldr	r2, [pc, #200]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c84a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c84e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c850:	e00f      	b.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c856:	3328      	adds	r3, #40	@ 0x28
 800c858:	2101      	movs	r1, #1
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 fd7e 	bl	800d35c <RCCEx_PLL3_Config>
 800c860:	4603      	mov	r3, r0
 800c862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c866:	e004      	b.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c86e:	e000      	b.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c870:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c872:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10b      	bne.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c87a:	4b26      	ldr	r3, [pc, #152]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c87c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c87e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c88a:	4a22      	ldr	r2, [pc, #136]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c88c:	430b      	orrs	r3, r1
 800c88e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c890:	e003      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c892:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c896:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c8a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c8ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	d034      	beq.n	800c920 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d003      	beq.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c8c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8c4:	d007      	beq.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c8c6:	e011      	b.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8c8:	4b12      	ldr	r3, [pc, #72]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8cc:	4a11      	ldr	r2, [pc, #68]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c8d4:	e00e      	b.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8da:	3308      	adds	r3, #8
 800c8dc:	2102      	movs	r1, #2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f000 fc8a 	bl	800d1f8 <RCCEx_PLL2_Config>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c8ea:	e003      	b.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c8f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10d      	bne.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c8fc:	4b05      	ldr	r3, [pc, #20]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c900:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c90a:	4a02      	ldr	r2, [pc, #8]	@ (800c914 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c90c:	430b      	orrs	r3, r1
 800c90e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c910:	e006      	b.n	800c920 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c912:	bf00      	nop
 800c914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c918:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c91c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c928:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c92c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c92e:	2300      	movs	r3, #0
 800c930:	667b      	str	r3, [r7, #100]	@ 0x64
 800c932:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c936:	460b      	mov	r3, r1
 800c938:	4313      	orrs	r3, r2
 800c93a:	d00c      	beq.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c940:	3328      	adds	r3, #40	@ 0x28
 800c942:	2102      	movs	r1, #2
 800c944:	4618      	mov	r0, r3
 800c946:	f000 fd09 	bl	800d35c <RCCEx_PLL3_Config>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c962:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c964:	2300      	movs	r3, #0
 800c966:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c968:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c96c:	460b      	mov	r3, r1
 800c96e:	4313      	orrs	r3, r2
 800c970:	d036      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c978:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c97c:	d018      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c97e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c982:	d811      	bhi.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c988:	d014      	beq.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c98a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c98e:	d80b      	bhi.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c990:	2b00      	cmp	r3, #0
 800c992:	d011      	beq.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c998:	d106      	bne.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c99a:	4bb7      	ldr	r3, [pc, #732]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c99e:	4ab6      	ldr	r2, [pc, #728]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c9a6:	e008      	b.n	800c9ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9ae:	e004      	b.n	800c9ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9b0:	bf00      	nop
 800c9b2:	e002      	b.n	800c9ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9b4:	bf00      	nop
 800c9b6:	e000      	b.n	800c9ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10a      	bne.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c9c2:	4bad      	ldr	r3, [pc, #692]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9d0:	4aa9      	ldr	r2, [pc, #676]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9d2:	430b      	orrs	r3, r1
 800c9d4:	6553      	str	r3, [r2, #84]	@ 0x54
 800c9d6:	e003      	b.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c9ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	d009      	beq.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c9fc:	4b9e      	ldr	r3, [pc, #632]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ca04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca0a:	4a9b      	ldr	r2, [pc, #620]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca0c:	430b      	orrs	r3, r1
 800ca0e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ca10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca18:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ca1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca1e:	2300      	movs	r3, #0
 800ca20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ca26:	460b      	mov	r3, r1
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	d009      	beq.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ca2c:	4b92      	ldr	r3, [pc, #584]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca30:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ca34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca3a:	4a8f      	ldr	r2, [pc, #572]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca3c:	430b      	orrs	r3, r1
 800ca3e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ca40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ca4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca4e:	2300      	movs	r3, #0
 800ca50:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ca56:	460b      	mov	r3, r1
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	d00e      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca5c:	4b86      	ldr	r3, [pc, #536]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	4a85      	ldr	r2, [pc, #532]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ca66:	6113      	str	r3, [r2, #16]
 800ca68:	4b83      	ldr	r3, [pc, #524]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca6a:	6919      	ldr	r1, [r3, #16]
 800ca6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ca74:	4a80      	ldr	r2, [pc, #512]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca76:	430b      	orrs	r3, r1
 800ca78:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ca7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca82:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ca86:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca88:	2300      	movs	r3, #0
 800ca8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca8c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ca90:	460b      	mov	r3, r1
 800ca92:	4313      	orrs	r3, r2
 800ca94:	d009      	beq.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ca96:	4b78      	ldr	r3, [pc, #480]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ca9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caa4:	4a74      	ldr	r2, [pc, #464]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800caa6:	430b      	orrs	r3, r1
 800caa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800caaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cab6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cab8:	2300      	movs	r3, #0
 800caba:	637b      	str	r3, [r7, #52]	@ 0x34
 800cabc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cac0:	460b      	mov	r3, r1
 800cac2:	4313      	orrs	r3, r2
 800cac4:	d00a      	beq.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cac6:	4b6c      	ldr	r3, [pc, #432]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caca:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cad6:	4a68      	ldr	r2, [pc, #416]	@ (800cc78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cad8:	430b      	orrs	r3, r1
 800cada:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	2100      	movs	r1, #0
 800cae6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800caee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800caf2:	460b      	mov	r3, r1
 800caf4:	4313      	orrs	r3, r2
 800caf6:	d011      	beq.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800caf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cafc:	3308      	adds	r3, #8
 800cafe:	2100      	movs	r1, #0
 800cb00:	4618      	mov	r0, r3
 800cb02:	f000 fb79 	bl	800d1f8 <RCCEx_PLL2_Config>
 800cb06:	4603      	mov	r3, r0
 800cb08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d003      	beq.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cb1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb24:	2100      	movs	r1, #0
 800cb26:	6239      	str	r1, [r7, #32]
 800cb28:	f003 0302 	and.w	r3, r3, #2
 800cb2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb2e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cb32:	460b      	mov	r3, r1
 800cb34:	4313      	orrs	r3, r2
 800cb36:	d011      	beq.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb3c:	3308      	adds	r3, #8
 800cb3e:	2101      	movs	r1, #1
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 fb59 	bl	800d1f8 <RCCEx_PLL2_Config>
 800cb46:	4603      	mov	r3, r0
 800cb48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d003      	beq.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	2100      	movs	r1, #0
 800cb66:	61b9      	str	r1, [r7, #24]
 800cb68:	f003 0304 	and.w	r3, r3, #4
 800cb6c:	61fb      	str	r3, [r7, #28]
 800cb6e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cb72:	460b      	mov	r3, r1
 800cb74:	4313      	orrs	r3, r2
 800cb76:	d011      	beq.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb7c:	3308      	adds	r3, #8
 800cb7e:	2102      	movs	r1, #2
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 fb39 	bl	800d1f8 <RCCEx_PLL2_Config>
 800cb86:	4603      	mov	r3, r0
 800cb88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d003      	beq.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	2100      	movs	r1, #0
 800cba6:	6139      	str	r1, [r7, #16]
 800cba8:	f003 0308 	and.w	r3, r3, #8
 800cbac:	617b      	str	r3, [r7, #20]
 800cbae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	d011      	beq.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbbc:	3328      	adds	r3, #40	@ 0x28
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fbcb 	bl	800d35c <RCCEx_PLL3_Config>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800cbcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	60b9      	str	r1, [r7, #8]
 800cbe8:	f003 0310 	and.w	r3, r3, #16
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	d011      	beq.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbfc:	3328      	adds	r3, #40	@ 0x28
 800cbfe:	2101      	movs	r1, #1
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 fbab 	bl	800d35c <RCCEx_PLL3_Config>
 800cc06:	4603      	mov	r3, r0
 800cc08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cc0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d003      	beq.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cc1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	2100      	movs	r1, #0
 800cc26:	6039      	str	r1, [r7, #0]
 800cc28:	f003 0320 	and.w	r3, r3, #32
 800cc2c:	607b      	str	r3, [r7, #4]
 800cc2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc32:	460b      	mov	r3, r1
 800cc34:	4313      	orrs	r3, r2
 800cc36:	d011      	beq.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc3c:	3328      	adds	r3, #40	@ 0x28
 800cc3e:	2102      	movs	r1, #2
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fb8b 	bl	800d35c <RCCEx_PLL3_Config>
 800cc46:	4603      	mov	r3, r0
 800cc48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cc4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d003      	beq.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800cc5c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d101      	bne.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cc64:	2300      	movs	r3, #0
 800cc66:	e000      	b.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cc70:	46bd      	mov	sp, r7
 800cc72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc76:	bf00      	nop
 800cc78:	58024400 	.word	0x58024400

0800cc7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cc80:	f7fe fe00 	bl	800b884 <HAL_RCC_GetHCLKFreq>
 800cc84:	4602      	mov	r2, r0
 800cc86:	4b06      	ldr	r3, [pc, #24]	@ (800cca0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cc88:	6a1b      	ldr	r3, [r3, #32]
 800cc8a:	091b      	lsrs	r3, r3, #4
 800cc8c:	f003 0307 	and.w	r3, r3, #7
 800cc90:	4904      	ldr	r1, [pc, #16]	@ (800cca4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cc92:	5ccb      	ldrb	r3, [r1, r3]
 800cc94:	f003 031f 	and.w	r3, r3, #31
 800cc98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	58024400 	.word	0x58024400
 800cca4:	0801c56c 	.word	0x0801c56c

0800cca8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b089      	sub	sp, #36	@ 0x24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccb0:	4ba1      	ldr	r3, [pc, #644]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccb4:	f003 0303 	and.w	r3, r3, #3
 800ccb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ccba:	4b9f      	ldr	r3, [pc, #636]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccbe:	0b1b      	lsrs	r3, r3, #12
 800ccc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ccc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ccc6:	4b9c      	ldr	r3, [pc, #624]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccca:	091b      	lsrs	r3, r3, #4
 800cccc:	f003 0301 	and.w	r3, r3, #1
 800ccd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ccd2:	4b99      	ldr	r3, [pc, #612]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccd6:	08db      	lsrs	r3, r3, #3
 800ccd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccdc:	693a      	ldr	r2, [r7, #16]
 800ccde:	fb02 f303 	mul.w	r3, r2, r3
 800cce2:	ee07 3a90 	vmov	s15, r3
 800cce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f000 8111 	beq.w	800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	f000 8083 	beq.w	800ce04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	f200 80a1 	bhi.w	800ce48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d056      	beq.n	800cdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cd12:	e099      	b.n	800ce48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd14:	4b88      	ldr	r3, [pc, #544]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0320 	and.w	r3, r3, #32
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d02d      	beq.n	800cd7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd20:	4b85      	ldr	r3, [pc, #532]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	08db      	lsrs	r3, r3, #3
 800cd26:	f003 0303 	and.w	r3, r3, #3
 800cd2a:	4a84      	ldr	r2, [pc, #528]	@ (800cf3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cd2c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	ee07 3a90 	vmov	s15, r3
 800cd38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	ee07 3a90 	vmov	s15, r3
 800cd42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd4a:	4b7b      	ldr	r3, [pc, #492]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cf40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd7a:	e087      	b.n	800ce8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	ee07 3a90 	vmov	s15, r3
 800cd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cf44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cd8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd8e:	4b6a      	ldr	r3, [pc, #424]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd96:	ee07 3a90 	vmov	s15, r3
 800cd9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cda2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cf40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cda6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdbe:	e065      	b.n	800ce8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cdce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdd2:	4b59      	ldr	r3, [pc, #356]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdda:	ee07 3a90 	vmov	s15, r3
 800cdde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cde2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cde6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cf40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce02:	e043      	b.n	800ce8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	ee07 3a90 	vmov	s15, r3
 800ce0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cf4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ce12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce16:	4b48      	ldr	r3, [pc, #288]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce1e:	ee07 3a90 	vmov	s15, r3
 800ce22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cf40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce46:	e021      	b.n	800ce8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce5a:	4b37      	ldr	r3, [pc, #220]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cf40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ce8c:	4b2a      	ldr	r3, [pc, #168]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce90:	0a5b      	lsrs	r3, r3, #9
 800ce92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cea6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceb2:	ee17 2a90 	vmov	r2, s15
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ceba:	4b1f      	ldr	r3, [pc, #124]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cebe:	0c1b      	lsrs	r3, r3, #16
 800cec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cec4:	ee07 3a90 	vmov	s15, r3
 800cec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ced0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ced4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ced8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cee0:	ee17 2a90 	vmov	r2, s15
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cee8:	4b13      	ldr	r3, [pc, #76]	@ (800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceec:	0e1b      	lsrs	r3, r3, #24
 800ceee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cef2:	ee07 3a90 	vmov	s15, r3
 800cef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cefa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cefe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf02:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf0e:	ee17 2a90 	vmov	r2, s15
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cf16:	e008      	b.n	800cf2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	609a      	str	r2, [r3, #8]
}
 800cf2a:	bf00      	nop
 800cf2c:	3724      	adds	r7, #36	@ 0x24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	58024400 	.word	0x58024400
 800cf3c:	03d09000 	.word	0x03d09000
 800cf40:	46000000 	.word	0x46000000
 800cf44:	4c742400 	.word	0x4c742400
 800cf48:	4a742400 	.word	0x4a742400
 800cf4c:	4af42400 	.word	0x4af42400

0800cf50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b089      	sub	sp, #36	@ 0x24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf58:	4ba1      	ldr	r3, [pc, #644]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf5c:	f003 0303 	and.w	r3, r3, #3
 800cf60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cf62:	4b9f      	ldr	r3, [pc, #636]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf66:	0d1b      	lsrs	r3, r3, #20
 800cf68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cf6e:	4b9c      	ldr	r3, [pc, #624]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf72:	0a1b      	lsrs	r3, r3, #8
 800cf74:	f003 0301 	and.w	r3, r3, #1
 800cf78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cf7a:	4b99      	ldr	r3, [pc, #612]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf7e:	08db      	lsrs	r3, r3, #3
 800cf80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf84:	693a      	ldr	r2, [r7, #16]
 800cf86:	fb02 f303 	mul.w	r3, r2, r3
 800cf8a:	ee07 3a90 	vmov	s15, r3
 800cf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f000 8111 	beq.w	800d1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	f000 8083 	beq.w	800d0ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	f200 80a1 	bhi.w	800d0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d003      	beq.n	800cfbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d056      	beq.n	800d068 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cfba:	e099      	b.n	800d0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfbc:	4b88      	ldr	r3, [pc, #544]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0320 	and.w	r3, r3, #32
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d02d      	beq.n	800d024 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfc8:	4b85      	ldr	r3, [pc, #532]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	08db      	lsrs	r3, r3, #3
 800cfce:	f003 0303 	and.w	r3, r3, #3
 800cfd2:	4a84      	ldr	r2, [pc, #528]	@ (800d1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cfd4:	fa22 f303 	lsr.w	r3, r2, r3
 800cfd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	ee07 3a90 	vmov	s15, r3
 800cfe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	ee07 3a90 	vmov	s15, r3
 800cfea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cff2:	4b7b      	ldr	r3, [pc, #492]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cffa:	ee07 3a90 	vmov	s15, r3
 800cffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d002:	ed97 6a03 	vldr	s12, [r7, #12]
 800d006:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d01e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d022:	e087      	b.n	800d134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	ee07 3a90 	vmov	s15, r3
 800d02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d02e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d1ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d036:	4b6a      	ldr	r3, [pc, #424]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d046:	ed97 6a03 	vldr	s12, [r7, #12]
 800d04a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d066:	e065      	b.n	800d134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	ee07 3a90 	vmov	s15, r3
 800d06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d072:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d07a:	4b59      	ldr	r3, [pc, #356]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d082:	ee07 3a90 	vmov	s15, r3
 800d086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d08e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d09a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0aa:	e043      	b.n	800d134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	ee07 3a90 	vmov	s15, r3
 800d0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0be:	4b48      	ldr	r3, [pc, #288]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c6:	ee07 3a90 	vmov	s15, r3
 800d0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0ee:	e021      	b.n	800d134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d102:	4b37      	ldr	r3, [pc, #220]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d10a:	ee07 3a90 	vmov	s15, r3
 800d10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d112:	ed97 6a03 	vldr	s12, [r7, #12]
 800d116:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d12e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d132:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d134:	4b2a      	ldr	r3, [pc, #168]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d138:	0a5b      	lsrs	r3, r3, #9
 800d13a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d13e:	ee07 3a90 	vmov	s15, r3
 800d142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d14a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d14e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d15a:	ee17 2a90 	vmov	r2, s15
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d162:	4b1f      	ldr	r3, [pc, #124]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d166:	0c1b      	lsrs	r3, r3, #16
 800d168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d16c:	ee07 3a90 	vmov	s15, r3
 800d170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d174:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d17c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d188:	ee17 2a90 	vmov	r2, s15
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d190:	4b13      	ldr	r3, [pc, #76]	@ (800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d194:	0e1b      	lsrs	r3, r3, #24
 800d196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d1a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1b6:	ee17 2a90 	vmov	r2, s15
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d1be:	e008      	b.n	800d1d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	609a      	str	r2, [r3, #8]
}
 800d1d2:	bf00      	nop
 800d1d4:	3724      	adds	r7, #36	@ 0x24
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	58024400 	.word	0x58024400
 800d1e4:	03d09000 	.word	0x03d09000
 800d1e8:	46000000 	.word	0x46000000
 800d1ec:	4c742400 	.word	0x4c742400
 800d1f0:	4a742400 	.word	0x4a742400
 800d1f4:	4af42400 	.word	0x4af42400

0800d1f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d206:	4b53      	ldr	r3, [pc, #332]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d20a:	f003 0303 	and.w	r3, r3, #3
 800d20e:	2b03      	cmp	r3, #3
 800d210:	d101      	bne.n	800d216 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e099      	b.n	800d34a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d216:	4b4f      	ldr	r3, [pc, #316]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a4e      	ldr	r2, [pc, #312]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d21c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d222:	f7fb ff7f 	bl	8009124 <HAL_GetTick>
 800d226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d228:	e008      	b.n	800d23c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d22a:	f7fb ff7b 	bl	8009124 <HAL_GetTick>
 800d22e:	4602      	mov	r2, r0
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	2b02      	cmp	r3, #2
 800d236:	d901      	bls.n	800d23c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d238:	2303      	movs	r3, #3
 800d23a:	e086      	b.n	800d34a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d23c:	4b45      	ldr	r3, [pc, #276]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1f0      	bne.n	800d22a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d248:	4b42      	ldr	r3, [pc, #264]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d24c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	031b      	lsls	r3, r3, #12
 800d256:	493f      	ldr	r1, [pc, #252]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d258:	4313      	orrs	r3, r2
 800d25a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	3b01      	subs	r3, #1
 800d262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	025b      	lsls	r3, r3, #9
 800d26e:	b29b      	uxth	r3, r3
 800d270:	431a      	orrs	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	3b01      	subs	r3, #1
 800d278:	041b      	lsls	r3, r3, #16
 800d27a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d27e:	431a      	orrs	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	3b01      	subs	r3, #1
 800d286:	061b      	lsls	r3, r3, #24
 800d288:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d28c:	4931      	ldr	r1, [pc, #196]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d28e:	4313      	orrs	r3, r2
 800d290:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d292:	4b30      	ldr	r3, [pc, #192]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d296:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	492d      	ldr	r1, [pc, #180]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d2a4:	4b2b      	ldr	r3, [pc, #172]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2a8:	f023 0220 	bic.w	r2, r3, #32
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	4928      	ldr	r1, [pc, #160]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d2b6:	4b27      	ldr	r3, [pc, #156]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ba:	4a26      	ldr	r2, [pc, #152]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2bc:	f023 0310 	bic.w	r3, r3, #16
 800d2c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d2c2:	4b24      	ldr	r3, [pc, #144]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2c6:	4b24      	ldr	r3, [pc, #144]	@ (800d358 <RCCEx_PLL2_Config+0x160>)
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	69d2      	ldr	r2, [r2, #28]
 800d2ce:	00d2      	lsls	r2, r2, #3
 800d2d0:	4920      	ldr	r1, [pc, #128]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d2d6:	4b1f      	ldr	r3, [pc, #124]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2da:	4a1e      	ldr	r2, [pc, #120]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2dc:	f043 0310 	orr.w	r3, r3, #16
 800d2e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d106      	bne.n	800d2f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d2e8:	4b1a      	ldr	r3, [pc, #104]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ec:	4a19      	ldr	r2, [pc, #100]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d2f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d2f4:	e00f      	b.n	800d316 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d106      	bne.n	800d30a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d2fc:	4b15      	ldr	r3, [pc, #84]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d300:	4a14      	ldr	r2, [pc, #80]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d306:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d308:	e005      	b.n	800d316 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d30a:	4b12      	ldr	r3, [pc, #72]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d30e:	4a11      	ldr	r2, [pc, #68]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d314:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d316:	4b0f      	ldr	r3, [pc, #60]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a0e      	ldr	r2, [pc, #56]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d31c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d322:	f7fb feff 	bl	8009124 <HAL_GetTick>
 800d326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d328:	e008      	b.n	800d33c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d32a:	f7fb fefb 	bl	8009124 <HAL_GetTick>
 800d32e:	4602      	mov	r2, r0
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	2b02      	cmp	r3, #2
 800d336:	d901      	bls.n	800d33c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d338:	2303      	movs	r3, #3
 800d33a:	e006      	b.n	800d34a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d33c:	4b05      	ldr	r3, [pc, #20]	@ (800d354 <RCCEx_PLL2_Config+0x15c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d0f0      	beq.n	800d32a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d348:	7bfb      	ldrb	r3, [r7, #15]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	58024400 	.word	0x58024400
 800d358:	ffff0007 	.word	0xffff0007

0800d35c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d36a:	4b53      	ldr	r3, [pc, #332]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d36e:	f003 0303 	and.w	r3, r3, #3
 800d372:	2b03      	cmp	r3, #3
 800d374:	d101      	bne.n	800d37a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	e099      	b.n	800d4ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d37a:	4b4f      	ldr	r3, [pc, #316]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a4e      	ldr	r2, [pc, #312]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d386:	f7fb fecd 	bl	8009124 <HAL_GetTick>
 800d38a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d38c:	e008      	b.n	800d3a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d38e:	f7fb fec9 	bl	8009124 <HAL_GetTick>
 800d392:	4602      	mov	r2, r0
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	2b02      	cmp	r3, #2
 800d39a:	d901      	bls.n	800d3a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e086      	b.n	800d4ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d3a0:	4b45      	ldr	r3, [pc, #276]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1f0      	bne.n	800d38e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d3ac:	4b42      	ldr	r3, [pc, #264]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	051b      	lsls	r3, r3, #20
 800d3ba:	493f      	ldr	r1, [pc, #252]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	628b      	str	r3, [r1, #40]	@ 0x28
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	3b01      	subs	r3, #1
 800d3c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	025b      	lsls	r3, r3, #9
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	431a      	orrs	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	041b      	lsls	r3, r3, #16
 800d3de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d3e2:	431a      	orrs	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	061b      	lsls	r3, r3, #24
 800d3ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d3f0:	4931      	ldr	r1, [pc, #196]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d3f6:	4b30      	ldr	r3, [pc, #192]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	695b      	ldr	r3, [r3, #20]
 800d402:	492d      	ldr	r1, [pc, #180]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d404:	4313      	orrs	r3, r2
 800d406:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d408:	4b2b      	ldr	r3, [pc, #172]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d40c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	699b      	ldr	r3, [r3, #24]
 800d414:	4928      	ldr	r1, [pc, #160]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d416:	4313      	orrs	r3, r2
 800d418:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d41a:	4b27      	ldr	r3, [pc, #156]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d41e:	4a26      	ldr	r2, [pc, #152]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d424:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d426:	4b24      	ldr	r3, [pc, #144]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d42a:	4b24      	ldr	r3, [pc, #144]	@ (800d4bc <RCCEx_PLL3_Config+0x160>)
 800d42c:	4013      	ands	r3, r2
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	69d2      	ldr	r2, [r2, #28]
 800d432:	00d2      	lsls	r2, r2, #3
 800d434:	4920      	ldr	r1, [pc, #128]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d436:	4313      	orrs	r3, r2
 800d438:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d43a:	4b1f      	ldr	r3, [pc, #124]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d43e:	4a1e      	ldr	r2, [pc, #120]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d444:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d106      	bne.n	800d45a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d44c:	4b1a      	ldr	r3, [pc, #104]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d450:	4a19      	ldr	r2, [pc, #100]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d452:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d456:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d458:	e00f      	b.n	800d47a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d106      	bne.n	800d46e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d460:	4b15      	ldr	r3, [pc, #84]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d464:	4a14      	ldr	r2, [pc, #80]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d466:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d46a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d46c:	e005      	b.n	800d47a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d46e:	4b12      	ldr	r3, [pc, #72]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d472:	4a11      	ldr	r2, [pc, #68]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d474:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d478:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d47a:	4b0f      	ldr	r3, [pc, #60]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a0e      	ldr	r2, [pc, #56]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d486:	f7fb fe4d 	bl	8009124 <HAL_GetTick>
 800d48a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d48c:	e008      	b.n	800d4a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d48e:	f7fb fe49 	bl	8009124 <HAL_GetTick>
 800d492:	4602      	mov	r2, r0
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d901      	bls.n	800d4a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d49c:	2303      	movs	r3, #3
 800d49e:	e006      	b.n	800d4ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4a0:	4b05      	ldr	r3, [pc, #20]	@ (800d4b8 <RCCEx_PLL3_Config+0x15c>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d0f0      	beq.n	800d48e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	58024400 	.word	0x58024400
 800d4bc:	ffff0007 	.word	0xffff0007

0800d4c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d101      	bne.n	800d4d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e042      	b.n	800d558 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d106      	bne.n	800d4ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7f4 f9a9 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2224      	movs	r2, #36	@ 0x24
 800d4ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f022 0201 	bic.w	r2, r2, #1
 800d500:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d506:	2b00      	cmp	r3, #0
 800d508:	d002      	beq.n	800d510 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 ff22 	bl	800e354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f8b3 	bl	800d67c <UART_SetConfig>
 800d516:	4603      	mov	r3, r0
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d101      	bne.n	800d520 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	e01b      	b.n	800d558 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	685a      	ldr	r2, [r3, #4]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d52e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	689a      	ldr	r2, [r3, #8]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d53e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f042 0201 	orr.w	r2, r2, #1
 800d54e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 ffa1 	bl	800e498 <UART_CheckIdleState>
 800d556:	4603      	mov	r3, r0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b08a      	sub	sp, #40	@ 0x28
 800d564:	af02      	add	r7, sp, #8
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	603b      	str	r3, [r7, #0]
 800d56c:	4613      	mov	r3, r2
 800d56e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d576:	2b20      	cmp	r3, #32
 800d578:	d17b      	bne.n	800d672 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <HAL_UART_Transmit+0x26>
 800d580:	88fb      	ldrh	r3, [r7, #6]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e074      	b.n	800d674 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2221      	movs	r2, #33	@ 0x21
 800d596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d59a:	f7fb fdc3 	bl	8009124 <HAL_GetTick>
 800d59e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	88fa      	ldrh	r2, [r7, #6]
 800d5a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	88fa      	ldrh	r2, [r7, #6]
 800d5ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5b8:	d108      	bne.n	800d5cc <HAL_UART_Transmit+0x6c>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	691b      	ldr	r3, [r3, #16]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d104      	bne.n	800d5cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	61bb      	str	r3, [r7, #24]
 800d5ca:	e003      	b.n	800d5d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d5d4:	e030      	b.n	800d638 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2180      	movs	r1, #128	@ 0x80
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f001 f803 	bl	800e5ec <UART_WaitOnFlagUntilTimeout>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d005      	beq.n	800d5f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2220      	movs	r2, #32
 800d5f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e03d      	b.n	800d674 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d10b      	bne.n	800d616 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	881b      	ldrh	r3, [r3, #0]
 800d602:	461a      	mov	r2, r3
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d60c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	3302      	adds	r3, #2
 800d612:	61bb      	str	r3, [r7, #24]
 800d614:	e007      	b.n	800d626 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	781a      	ldrb	r2, [r3, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	3301      	adds	r3, #1
 800d624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	3b01      	subs	r3, #1
 800d630:	b29a      	uxth	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d63e:	b29b      	uxth	r3, r3
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1c8      	bne.n	800d5d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	2200      	movs	r2, #0
 800d64c:	2140      	movs	r1, #64	@ 0x40
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 ffcc 	bl	800e5ec <UART_WaitOnFlagUntilTimeout>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d005      	beq.n	800d666 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2220      	movs	r2, #32
 800d65e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d662:	2303      	movs	r3, #3
 800d664:	e006      	b.n	800d674 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2220      	movs	r2, #32
 800d66a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	e000      	b.n	800d674 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d672:	2302      	movs	r3, #2
  }
}
 800d674:	4618      	mov	r0, r3
 800d676:	3720      	adds	r7, #32
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d67c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d680:	b092      	sub	sp, #72	@ 0x48
 800d682:	af00      	add	r7, sp, #0
 800d684:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	689a      	ldr	r2, [r3, #8]
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	691b      	ldr	r3, [r3, #16]
 800d694:	431a      	orrs	r2, r3
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	695b      	ldr	r3, [r3, #20]
 800d69a:	431a      	orrs	r2, r3
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	69db      	ldr	r3, [r3, #28]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	4bbe      	ldr	r3, [pc, #760]	@ (800d9a4 <UART_SetConfig+0x328>)
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	697a      	ldr	r2, [r7, #20]
 800d6b0:	6812      	ldr	r2, [r2, #0]
 800d6b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6b4:	430b      	orrs	r3, r1
 800d6b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	68da      	ldr	r2, [r3, #12]
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	430a      	orrs	r2, r1
 800d6cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4ab3      	ldr	r2, [pc, #716]	@ (800d9a8 <UART_SetConfig+0x32c>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d004      	beq.n	800d6e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	689a      	ldr	r2, [r3, #8]
 800d6ee:	4baf      	ldr	r3, [pc, #700]	@ (800d9ac <UART_SetConfig+0x330>)
 800d6f0:	4013      	ands	r3, r2
 800d6f2:	697a      	ldr	r2, [r7, #20]
 800d6f4:	6812      	ldr	r2, [r2, #0]
 800d6f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6f8:	430b      	orrs	r3, r1
 800d6fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d702:	f023 010f 	bic.w	r1, r3, #15
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	430a      	orrs	r2, r1
 800d710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4aa6      	ldr	r2, [pc, #664]	@ (800d9b0 <UART_SetConfig+0x334>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d177      	bne.n	800d80c <UART_SetConfig+0x190>
 800d71c:	4ba5      	ldr	r3, [pc, #660]	@ (800d9b4 <UART_SetConfig+0x338>)
 800d71e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d720:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d724:	2b28      	cmp	r3, #40	@ 0x28
 800d726:	d86d      	bhi.n	800d804 <UART_SetConfig+0x188>
 800d728:	a201      	add	r2, pc, #4	@ (adr r2, 800d730 <UART_SetConfig+0xb4>)
 800d72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d72e:	bf00      	nop
 800d730:	0800d7d5 	.word	0x0800d7d5
 800d734:	0800d805 	.word	0x0800d805
 800d738:	0800d805 	.word	0x0800d805
 800d73c:	0800d805 	.word	0x0800d805
 800d740:	0800d805 	.word	0x0800d805
 800d744:	0800d805 	.word	0x0800d805
 800d748:	0800d805 	.word	0x0800d805
 800d74c:	0800d805 	.word	0x0800d805
 800d750:	0800d7dd 	.word	0x0800d7dd
 800d754:	0800d805 	.word	0x0800d805
 800d758:	0800d805 	.word	0x0800d805
 800d75c:	0800d805 	.word	0x0800d805
 800d760:	0800d805 	.word	0x0800d805
 800d764:	0800d805 	.word	0x0800d805
 800d768:	0800d805 	.word	0x0800d805
 800d76c:	0800d805 	.word	0x0800d805
 800d770:	0800d7e5 	.word	0x0800d7e5
 800d774:	0800d805 	.word	0x0800d805
 800d778:	0800d805 	.word	0x0800d805
 800d77c:	0800d805 	.word	0x0800d805
 800d780:	0800d805 	.word	0x0800d805
 800d784:	0800d805 	.word	0x0800d805
 800d788:	0800d805 	.word	0x0800d805
 800d78c:	0800d805 	.word	0x0800d805
 800d790:	0800d7ed 	.word	0x0800d7ed
 800d794:	0800d805 	.word	0x0800d805
 800d798:	0800d805 	.word	0x0800d805
 800d79c:	0800d805 	.word	0x0800d805
 800d7a0:	0800d805 	.word	0x0800d805
 800d7a4:	0800d805 	.word	0x0800d805
 800d7a8:	0800d805 	.word	0x0800d805
 800d7ac:	0800d805 	.word	0x0800d805
 800d7b0:	0800d7f5 	.word	0x0800d7f5
 800d7b4:	0800d805 	.word	0x0800d805
 800d7b8:	0800d805 	.word	0x0800d805
 800d7bc:	0800d805 	.word	0x0800d805
 800d7c0:	0800d805 	.word	0x0800d805
 800d7c4:	0800d805 	.word	0x0800d805
 800d7c8:	0800d805 	.word	0x0800d805
 800d7cc:	0800d805 	.word	0x0800d805
 800d7d0:	0800d7fd 	.word	0x0800d7fd
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7da:	e326      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d7dc:	2304      	movs	r3, #4
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e2:	e322      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d7e4:	2308      	movs	r3, #8
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e31e      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d7ec:	2310      	movs	r3, #16
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f2:	e31a      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d7f4:	2320      	movs	r3, #32
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fa:	e316      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d7fc:	2340      	movs	r3, #64	@ 0x40
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d802:	e312      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d804:	2380      	movs	r3, #128	@ 0x80
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80a:	e30e      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a69      	ldr	r2, [pc, #420]	@ (800d9b8 <UART_SetConfig+0x33c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d130      	bne.n	800d878 <UART_SetConfig+0x1fc>
 800d816:	4b67      	ldr	r3, [pc, #412]	@ (800d9b4 <UART_SetConfig+0x338>)
 800d818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d81a:	f003 0307 	and.w	r3, r3, #7
 800d81e:	2b05      	cmp	r3, #5
 800d820:	d826      	bhi.n	800d870 <UART_SetConfig+0x1f4>
 800d822:	a201      	add	r2, pc, #4	@ (adr r2, 800d828 <UART_SetConfig+0x1ac>)
 800d824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d828:	0800d841 	.word	0x0800d841
 800d82c:	0800d849 	.word	0x0800d849
 800d830:	0800d851 	.word	0x0800d851
 800d834:	0800d859 	.word	0x0800d859
 800d838:	0800d861 	.word	0x0800d861
 800d83c:	0800d869 	.word	0x0800d869
 800d840:	2300      	movs	r3, #0
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e2f0      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d848:	2304      	movs	r3, #4
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84e:	e2ec      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d850:	2308      	movs	r3, #8
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d856:	e2e8      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d858:	2310      	movs	r3, #16
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d85e:	e2e4      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d860:	2320      	movs	r3, #32
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d866:	e2e0      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d868:	2340      	movs	r3, #64	@ 0x40
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86e:	e2dc      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d870:	2380      	movs	r3, #128	@ 0x80
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d876:	e2d8      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a4f      	ldr	r2, [pc, #316]	@ (800d9bc <UART_SetConfig+0x340>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d130      	bne.n	800d8e4 <UART_SetConfig+0x268>
 800d882:	4b4c      	ldr	r3, [pc, #304]	@ (800d9b4 <UART_SetConfig+0x338>)
 800d884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	2b05      	cmp	r3, #5
 800d88c:	d826      	bhi.n	800d8dc <UART_SetConfig+0x260>
 800d88e:	a201      	add	r2, pc, #4	@ (adr r2, 800d894 <UART_SetConfig+0x218>)
 800d890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d894:	0800d8ad 	.word	0x0800d8ad
 800d898:	0800d8b5 	.word	0x0800d8b5
 800d89c:	0800d8bd 	.word	0x0800d8bd
 800d8a0:	0800d8c5 	.word	0x0800d8c5
 800d8a4:	0800d8cd 	.word	0x0800d8cd
 800d8a8:	0800d8d5 	.word	0x0800d8d5
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b2:	e2ba      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ba:	e2b6      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d8bc:	2308      	movs	r3, #8
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c2:	e2b2      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d8c4:	2310      	movs	r3, #16
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ca:	e2ae      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d8cc:	2320      	movs	r3, #32
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d2:	e2aa      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d8d4:	2340      	movs	r3, #64	@ 0x40
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8da:	e2a6      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d8dc:	2380      	movs	r3, #128	@ 0x80
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e2:	e2a2      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a35      	ldr	r2, [pc, #212]	@ (800d9c0 <UART_SetConfig+0x344>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d130      	bne.n	800d950 <UART_SetConfig+0x2d4>
 800d8ee:	4b31      	ldr	r3, [pc, #196]	@ (800d9b4 <UART_SetConfig+0x338>)
 800d8f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8f2:	f003 0307 	and.w	r3, r3, #7
 800d8f6:	2b05      	cmp	r3, #5
 800d8f8:	d826      	bhi.n	800d948 <UART_SetConfig+0x2cc>
 800d8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d900 <UART_SetConfig+0x284>)
 800d8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d900:	0800d919 	.word	0x0800d919
 800d904:	0800d921 	.word	0x0800d921
 800d908:	0800d929 	.word	0x0800d929
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d939 	.word	0x0800d939
 800d914:	0800d941 	.word	0x0800d941
 800d918:	2300      	movs	r3, #0
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91e:	e284      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d920:	2304      	movs	r3, #4
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d926:	e280      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d928:	2308      	movs	r3, #8
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92e:	e27c      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d930:	2310      	movs	r3, #16
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d936:	e278      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d938:	2320      	movs	r3, #32
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93e:	e274      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d940:	2340      	movs	r3, #64	@ 0x40
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d946:	e270      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d948:	2380      	movs	r3, #128	@ 0x80
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94e:	e26c      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a1b      	ldr	r2, [pc, #108]	@ (800d9c4 <UART_SetConfig+0x348>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d142      	bne.n	800d9e0 <UART_SetConfig+0x364>
 800d95a:	4b16      	ldr	r3, [pc, #88]	@ (800d9b4 <UART_SetConfig+0x338>)
 800d95c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d95e:	f003 0307 	and.w	r3, r3, #7
 800d962:	2b05      	cmp	r3, #5
 800d964:	d838      	bhi.n	800d9d8 <UART_SetConfig+0x35c>
 800d966:	a201      	add	r2, pc, #4	@ (adr r2, 800d96c <UART_SetConfig+0x2f0>)
 800d968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96c:	0800d985 	.word	0x0800d985
 800d970:	0800d98d 	.word	0x0800d98d
 800d974:	0800d995 	.word	0x0800d995
 800d978:	0800d99d 	.word	0x0800d99d
 800d97c:	0800d9c9 	.word	0x0800d9c9
 800d980:	0800d9d1 	.word	0x0800d9d1
 800d984:	2300      	movs	r3, #0
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98a:	e24e      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d98c:	2304      	movs	r3, #4
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d992:	e24a      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d994:	2308      	movs	r3, #8
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99a:	e246      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d99c:	2310      	movs	r3, #16
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a2:	e242      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d9a4:	cfff69f3 	.word	0xcfff69f3
 800d9a8:	58000c00 	.word	0x58000c00
 800d9ac:	11fff4ff 	.word	0x11fff4ff
 800d9b0:	40011000 	.word	0x40011000
 800d9b4:	58024400 	.word	0x58024400
 800d9b8:	40004400 	.word	0x40004400
 800d9bc:	40004800 	.word	0x40004800
 800d9c0:	40004c00 	.word	0x40004c00
 800d9c4:	40005000 	.word	0x40005000
 800d9c8:	2320      	movs	r3, #32
 800d9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ce:	e22c      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d9d0:	2340      	movs	r3, #64	@ 0x40
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d6:	e228      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d9d8:	2380      	movs	r3, #128	@ 0x80
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e224      	b.n	800de2a <UART_SetConfig+0x7ae>
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4ab1      	ldr	r2, [pc, #708]	@ (800dcac <UART_SetConfig+0x630>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d176      	bne.n	800dad8 <UART_SetConfig+0x45c>
 800d9ea:	4bb1      	ldr	r3, [pc, #708]	@ (800dcb0 <UART_SetConfig+0x634>)
 800d9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d9f2:	2b28      	cmp	r3, #40	@ 0x28
 800d9f4:	d86c      	bhi.n	800dad0 <UART_SetConfig+0x454>
 800d9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9fc <UART_SetConfig+0x380>)
 800d9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9fc:	0800daa1 	.word	0x0800daa1
 800da00:	0800dad1 	.word	0x0800dad1
 800da04:	0800dad1 	.word	0x0800dad1
 800da08:	0800dad1 	.word	0x0800dad1
 800da0c:	0800dad1 	.word	0x0800dad1
 800da10:	0800dad1 	.word	0x0800dad1
 800da14:	0800dad1 	.word	0x0800dad1
 800da18:	0800dad1 	.word	0x0800dad1
 800da1c:	0800daa9 	.word	0x0800daa9
 800da20:	0800dad1 	.word	0x0800dad1
 800da24:	0800dad1 	.word	0x0800dad1
 800da28:	0800dad1 	.word	0x0800dad1
 800da2c:	0800dad1 	.word	0x0800dad1
 800da30:	0800dad1 	.word	0x0800dad1
 800da34:	0800dad1 	.word	0x0800dad1
 800da38:	0800dad1 	.word	0x0800dad1
 800da3c:	0800dab1 	.word	0x0800dab1
 800da40:	0800dad1 	.word	0x0800dad1
 800da44:	0800dad1 	.word	0x0800dad1
 800da48:	0800dad1 	.word	0x0800dad1
 800da4c:	0800dad1 	.word	0x0800dad1
 800da50:	0800dad1 	.word	0x0800dad1
 800da54:	0800dad1 	.word	0x0800dad1
 800da58:	0800dad1 	.word	0x0800dad1
 800da5c:	0800dab9 	.word	0x0800dab9
 800da60:	0800dad1 	.word	0x0800dad1
 800da64:	0800dad1 	.word	0x0800dad1
 800da68:	0800dad1 	.word	0x0800dad1
 800da6c:	0800dad1 	.word	0x0800dad1
 800da70:	0800dad1 	.word	0x0800dad1
 800da74:	0800dad1 	.word	0x0800dad1
 800da78:	0800dad1 	.word	0x0800dad1
 800da7c:	0800dac1 	.word	0x0800dac1
 800da80:	0800dad1 	.word	0x0800dad1
 800da84:	0800dad1 	.word	0x0800dad1
 800da88:	0800dad1 	.word	0x0800dad1
 800da8c:	0800dad1 	.word	0x0800dad1
 800da90:	0800dad1 	.word	0x0800dad1
 800da94:	0800dad1 	.word	0x0800dad1
 800da98:	0800dad1 	.word	0x0800dad1
 800da9c:	0800dac9 	.word	0x0800dac9
 800daa0:	2301      	movs	r3, #1
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daa6:	e1c0      	b.n	800de2a <UART_SetConfig+0x7ae>
 800daa8:	2304      	movs	r3, #4
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daae:	e1bc      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dab0:	2308      	movs	r3, #8
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab6:	e1b8      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dab8:	2310      	movs	r3, #16
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dabe:	e1b4      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dac0:	2320      	movs	r3, #32
 800dac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac6:	e1b0      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dac8:	2340      	movs	r3, #64	@ 0x40
 800daca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dace:	e1ac      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dad0:	2380      	movs	r3, #128	@ 0x80
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dad6:	e1a8      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a75      	ldr	r2, [pc, #468]	@ (800dcb4 <UART_SetConfig+0x638>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d130      	bne.n	800db44 <UART_SetConfig+0x4c8>
 800dae2:	4b73      	ldr	r3, [pc, #460]	@ (800dcb0 <UART_SetConfig+0x634>)
 800dae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dae6:	f003 0307 	and.w	r3, r3, #7
 800daea:	2b05      	cmp	r3, #5
 800daec:	d826      	bhi.n	800db3c <UART_SetConfig+0x4c0>
 800daee:	a201      	add	r2, pc, #4	@ (adr r2, 800daf4 <UART_SetConfig+0x478>)
 800daf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf4:	0800db0d 	.word	0x0800db0d
 800daf8:	0800db15 	.word	0x0800db15
 800dafc:	0800db1d 	.word	0x0800db1d
 800db00:	0800db25 	.word	0x0800db25
 800db04:	0800db2d 	.word	0x0800db2d
 800db08:	0800db35 	.word	0x0800db35
 800db0c:	2300      	movs	r3, #0
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db12:	e18a      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db14:	2304      	movs	r3, #4
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db1a:	e186      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db1c:	2308      	movs	r3, #8
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db22:	e182      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db24:	2310      	movs	r3, #16
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db2a:	e17e      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db2c:	2320      	movs	r3, #32
 800db2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db32:	e17a      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db34:	2340      	movs	r3, #64	@ 0x40
 800db36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3a:	e176      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db3c:	2380      	movs	r3, #128	@ 0x80
 800db3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db42:	e172      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a5b      	ldr	r2, [pc, #364]	@ (800dcb8 <UART_SetConfig+0x63c>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d130      	bne.n	800dbb0 <UART_SetConfig+0x534>
 800db4e:	4b58      	ldr	r3, [pc, #352]	@ (800dcb0 <UART_SetConfig+0x634>)
 800db50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db52:	f003 0307 	and.w	r3, r3, #7
 800db56:	2b05      	cmp	r3, #5
 800db58:	d826      	bhi.n	800dba8 <UART_SetConfig+0x52c>
 800db5a:	a201      	add	r2, pc, #4	@ (adr r2, 800db60 <UART_SetConfig+0x4e4>)
 800db5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db60:	0800db79 	.word	0x0800db79
 800db64:	0800db81 	.word	0x0800db81
 800db68:	0800db89 	.word	0x0800db89
 800db6c:	0800db91 	.word	0x0800db91
 800db70:	0800db99 	.word	0x0800db99
 800db74:	0800dba1 	.word	0x0800dba1
 800db78:	2300      	movs	r3, #0
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db7e:	e154      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db80:	2304      	movs	r3, #4
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db86:	e150      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db88:	2308      	movs	r3, #8
 800db8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db8e:	e14c      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db90:	2310      	movs	r3, #16
 800db92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db96:	e148      	b.n	800de2a <UART_SetConfig+0x7ae>
 800db98:	2320      	movs	r3, #32
 800db9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db9e:	e144      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dba0:	2340      	movs	r3, #64	@ 0x40
 800dba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dba6:	e140      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dba8:	2380      	movs	r3, #128	@ 0x80
 800dbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbae:	e13c      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a41      	ldr	r2, [pc, #260]	@ (800dcbc <UART_SetConfig+0x640>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	f040 8082 	bne.w	800dcc0 <UART_SetConfig+0x644>
 800dbbc:	4b3c      	ldr	r3, [pc, #240]	@ (800dcb0 <UART_SetConfig+0x634>)
 800dbbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dbc4:	2b28      	cmp	r3, #40	@ 0x28
 800dbc6:	d86d      	bhi.n	800dca4 <UART_SetConfig+0x628>
 800dbc8:	a201      	add	r2, pc, #4	@ (adr r2, 800dbd0 <UART_SetConfig+0x554>)
 800dbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbce:	bf00      	nop
 800dbd0:	0800dc75 	.word	0x0800dc75
 800dbd4:	0800dca5 	.word	0x0800dca5
 800dbd8:	0800dca5 	.word	0x0800dca5
 800dbdc:	0800dca5 	.word	0x0800dca5
 800dbe0:	0800dca5 	.word	0x0800dca5
 800dbe4:	0800dca5 	.word	0x0800dca5
 800dbe8:	0800dca5 	.word	0x0800dca5
 800dbec:	0800dca5 	.word	0x0800dca5
 800dbf0:	0800dc7d 	.word	0x0800dc7d
 800dbf4:	0800dca5 	.word	0x0800dca5
 800dbf8:	0800dca5 	.word	0x0800dca5
 800dbfc:	0800dca5 	.word	0x0800dca5
 800dc00:	0800dca5 	.word	0x0800dca5
 800dc04:	0800dca5 	.word	0x0800dca5
 800dc08:	0800dca5 	.word	0x0800dca5
 800dc0c:	0800dca5 	.word	0x0800dca5
 800dc10:	0800dc85 	.word	0x0800dc85
 800dc14:	0800dca5 	.word	0x0800dca5
 800dc18:	0800dca5 	.word	0x0800dca5
 800dc1c:	0800dca5 	.word	0x0800dca5
 800dc20:	0800dca5 	.word	0x0800dca5
 800dc24:	0800dca5 	.word	0x0800dca5
 800dc28:	0800dca5 	.word	0x0800dca5
 800dc2c:	0800dca5 	.word	0x0800dca5
 800dc30:	0800dc8d 	.word	0x0800dc8d
 800dc34:	0800dca5 	.word	0x0800dca5
 800dc38:	0800dca5 	.word	0x0800dca5
 800dc3c:	0800dca5 	.word	0x0800dca5
 800dc40:	0800dca5 	.word	0x0800dca5
 800dc44:	0800dca5 	.word	0x0800dca5
 800dc48:	0800dca5 	.word	0x0800dca5
 800dc4c:	0800dca5 	.word	0x0800dca5
 800dc50:	0800dc95 	.word	0x0800dc95
 800dc54:	0800dca5 	.word	0x0800dca5
 800dc58:	0800dca5 	.word	0x0800dca5
 800dc5c:	0800dca5 	.word	0x0800dca5
 800dc60:	0800dca5 	.word	0x0800dca5
 800dc64:	0800dca5 	.word	0x0800dca5
 800dc68:	0800dca5 	.word	0x0800dca5
 800dc6c:	0800dca5 	.word	0x0800dca5
 800dc70:	0800dc9d 	.word	0x0800dc9d
 800dc74:	2301      	movs	r3, #1
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc7a:	e0d6      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dc7c:	2304      	movs	r3, #4
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc82:	e0d2      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dc84:	2308      	movs	r3, #8
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8a:	e0ce      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dc8c:	2310      	movs	r3, #16
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc92:	e0ca      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dc94:	2320      	movs	r3, #32
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc9a:	e0c6      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dc9c:	2340      	movs	r3, #64	@ 0x40
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dca2:	e0c2      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dca4:	2380      	movs	r3, #128	@ 0x80
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcaa:	e0be      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dcac:	40011400 	.word	0x40011400
 800dcb0:	58024400 	.word	0x58024400
 800dcb4:	40007800 	.word	0x40007800
 800dcb8:	40007c00 	.word	0x40007c00
 800dcbc:	40011800 	.word	0x40011800
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4aad      	ldr	r2, [pc, #692]	@ (800df7c <UART_SetConfig+0x900>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d176      	bne.n	800ddb8 <UART_SetConfig+0x73c>
 800dcca:	4bad      	ldr	r3, [pc, #692]	@ (800df80 <UART_SetConfig+0x904>)
 800dccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dcd2:	2b28      	cmp	r3, #40	@ 0x28
 800dcd4:	d86c      	bhi.n	800ddb0 <UART_SetConfig+0x734>
 800dcd6:	a201      	add	r2, pc, #4	@ (adr r2, 800dcdc <UART_SetConfig+0x660>)
 800dcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcdc:	0800dd81 	.word	0x0800dd81
 800dce0:	0800ddb1 	.word	0x0800ddb1
 800dce4:	0800ddb1 	.word	0x0800ddb1
 800dce8:	0800ddb1 	.word	0x0800ddb1
 800dcec:	0800ddb1 	.word	0x0800ddb1
 800dcf0:	0800ddb1 	.word	0x0800ddb1
 800dcf4:	0800ddb1 	.word	0x0800ddb1
 800dcf8:	0800ddb1 	.word	0x0800ddb1
 800dcfc:	0800dd89 	.word	0x0800dd89
 800dd00:	0800ddb1 	.word	0x0800ddb1
 800dd04:	0800ddb1 	.word	0x0800ddb1
 800dd08:	0800ddb1 	.word	0x0800ddb1
 800dd0c:	0800ddb1 	.word	0x0800ddb1
 800dd10:	0800ddb1 	.word	0x0800ddb1
 800dd14:	0800ddb1 	.word	0x0800ddb1
 800dd18:	0800ddb1 	.word	0x0800ddb1
 800dd1c:	0800dd91 	.word	0x0800dd91
 800dd20:	0800ddb1 	.word	0x0800ddb1
 800dd24:	0800ddb1 	.word	0x0800ddb1
 800dd28:	0800ddb1 	.word	0x0800ddb1
 800dd2c:	0800ddb1 	.word	0x0800ddb1
 800dd30:	0800ddb1 	.word	0x0800ddb1
 800dd34:	0800ddb1 	.word	0x0800ddb1
 800dd38:	0800ddb1 	.word	0x0800ddb1
 800dd3c:	0800dd99 	.word	0x0800dd99
 800dd40:	0800ddb1 	.word	0x0800ddb1
 800dd44:	0800ddb1 	.word	0x0800ddb1
 800dd48:	0800ddb1 	.word	0x0800ddb1
 800dd4c:	0800ddb1 	.word	0x0800ddb1
 800dd50:	0800ddb1 	.word	0x0800ddb1
 800dd54:	0800ddb1 	.word	0x0800ddb1
 800dd58:	0800ddb1 	.word	0x0800ddb1
 800dd5c:	0800dda1 	.word	0x0800dda1
 800dd60:	0800ddb1 	.word	0x0800ddb1
 800dd64:	0800ddb1 	.word	0x0800ddb1
 800dd68:	0800ddb1 	.word	0x0800ddb1
 800dd6c:	0800ddb1 	.word	0x0800ddb1
 800dd70:	0800ddb1 	.word	0x0800ddb1
 800dd74:	0800ddb1 	.word	0x0800ddb1
 800dd78:	0800ddb1 	.word	0x0800ddb1
 800dd7c:	0800dda9 	.word	0x0800dda9
 800dd80:	2301      	movs	r3, #1
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd86:	e050      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dd88:	2304      	movs	r3, #4
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd8e:	e04c      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dd90:	2308      	movs	r3, #8
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd96:	e048      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dd98:	2310      	movs	r3, #16
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd9e:	e044      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dda0:	2320      	movs	r3, #32
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dda6:	e040      	b.n	800de2a <UART_SetConfig+0x7ae>
 800dda8:	2340      	movs	r3, #64	@ 0x40
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddae:	e03c      	b.n	800de2a <UART_SetConfig+0x7ae>
 800ddb0:	2380      	movs	r3, #128	@ 0x80
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddb6:	e038      	b.n	800de2a <UART_SetConfig+0x7ae>
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a71      	ldr	r2, [pc, #452]	@ (800df84 <UART_SetConfig+0x908>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d130      	bne.n	800de24 <UART_SetConfig+0x7a8>
 800ddc2:	4b6f      	ldr	r3, [pc, #444]	@ (800df80 <UART_SetConfig+0x904>)
 800ddc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddc6:	f003 0307 	and.w	r3, r3, #7
 800ddca:	2b05      	cmp	r3, #5
 800ddcc:	d826      	bhi.n	800de1c <UART_SetConfig+0x7a0>
 800ddce:	a201      	add	r2, pc, #4	@ (adr r2, 800ddd4 <UART_SetConfig+0x758>)
 800ddd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd4:	0800dded 	.word	0x0800dded
 800ddd8:	0800ddf5 	.word	0x0800ddf5
 800dddc:	0800ddfd 	.word	0x0800ddfd
 800dde0:	0800de05 	.word	0x0800de05
 800dde4:	0800de0d 	.word	0x0800de0d
 800dde8:	0800de15 	.word	0x0800de15
 800ddec:	2302      	movs	r3, #2
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddf2:	e01a      	b.n	800de2a <UART_SetConfig+0x7ae>
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddfa:	e016      	b.n	800de2a <UART_SetConfig+0x7ae>
 800ddfc:	2308      	movs	r3, #8
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de02:	e012      	b.n	800de2a <UART_SetConfig+0x7ae>
 800de04:	2310      	movs	r3, #16
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de0a:	e00e      	b.n	800de2a <UART_SetConfig+0x7ae>
 800de0c:	2320      	movs	r3, #32
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de12:	e00a      	b.n	800de2a <UART_SetConfig+0x7ae>
 800de14:	2340      	movs	r3, #64	@ 0x40
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1a:	e006      	b.n	800de2a <UART_SetConfig+0x7ae>
 800de1c:	2380      	movs	r3, #128	@ 0x80
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de22:	e002      	b.n	800de2a <UART_SetConfig+0x7ae>
 800de24:	2380      	movs	r3, #128	@ 0x80
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a55      	ldr	r2, [pc, #340]	@ (800df84 <UART_SetConfig+0x908>)
 800de30:	4293      	cmp	r3, r2
 800de32:	f040 80f8 	bne.w	800e026 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800de36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de3a:	2b20      	cmp	r3, #32
 800de3c:	dc46      	bgt.n	800decc <UART_SetConfig+0x850>
 800de3e:	2b02      	cmp	r3, #2
 800de40:	db75      	blt.n	800df2e <UART_SetConfig+0x8b2>
 800de42:	3b02      	subs	r3, #2
 800de44:	2b1e      	cmp	r3, #30
 800de46:	d872      	bhi.n	800df2e <UART_SetConfig+0x8b2>
 800de48:	a201      	add	r2, pc, #4	@ (adr r2, 800de50 <UART_SetConfig+0x7d4>)
 800de4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4e:	bf00      	nop
 800de50:	0800ded3 	.word	0x0800ded3
 800de54:	0800df2f 	.word	0x0800df2f
 800de58:	0800dedb 	.word	0x0800dedb
 800de5c:	0800df2f 	.word	0x0800df2f
 800de60:	0800df2f 	.word	0x0800df2f
 800de64:	0800df2f 	.word	0x0800df2f
 800de68:	0800deeb 	.word	0x0800deeb
 800de6c:	0800df2f 	.word	0x0800df2f
 800de70:	0800df2f 	.word	0x0800df2f
 800de74:	0800df2f 	.word	0x0800df2f
 800de78:	0800df2f 	.word	0x0800df2f
 800de7c:	0800df2f 	.word	0x0800df2f
 800de80:	0800df2f 	.word	0x0800df2f
 800de84:	0800df2f 	.word	0x0800df2f
 800de88:	0800defb 	.word	0x0800defb
 800de8c:	0800df2f 	.word	0x0800df2f
 800de90:	0800df2f 	.word	0x0800df2f
 800de94:	0800df2f 	.word	0x0800df2f
 800de98:	0800df2f 	.word	0x0800df2f
 800de9c:	0800df2f 	.word	0x0800df2f
 800dea0:	0800df2f 	.word	0x0800df2f
 800dea4:	0800df2f 	.word	0x0800df2f
 800dea8:	0800df2f 	.word	0x0800df2f
 800deac:	0800df2f 	.word	0x0800df2f
 800deb0:	0800df2f 	.word	0x0800df2f
 800deb4:	0800df2f 	.word	0x0800df2f
 800deb8:	0800df2f 	.word	0x0800df2f
 800debc:	0800df2f 	.word	0x0800df2f
 800dec0:	0800df2f 	.word	0x0800df2f
 800dec4:	0800df2f 	.word	0x0800df2f
 800dec8:	0800df21 	.word	0x0800df21
 800decc:	2b40      	cmp	r3, #64	@ 0x40
 800dece:	d02a      	beq.n	800df26 <UART_SetConfig+0x8aa>
 800ded0:	e02d      	b.n	800df2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ded2:	f7fe fed3 	bl	800cc7c <HAL_RCCEx_GetD3PCLK1Freq>
 800ded6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ded8:	e02f      	b.n	800df3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dede:	4618      	mov	r0, r3
 800dee0:	f7fe fee2 	bl	800cca8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dee8:	e027      	b.n	800df3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800deea:	f107 0318 	add.w	r3, r7, #24
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff f82e 	bl	800cf50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800def8:	e01f      	b.n	800df3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800defa:	4b21      	ldr	r3, [pc, #132]	@ (800df80 <UART_SetConfig+0x904>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f003 0320 	and.w	r3, r3, #32
 800df02:	2b00      	cmp	r3, #0
 800df04:	d009      	beq.n	800df1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df06:	4b1e      	ldr	r3, [pc, #120]	@ (800df80 <UART_SetConfig+0x904>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	08db      	lsrs	r3, r3, #3
 800df0c:	f003 0303 	and.w	r3, r3, #3
 800df10:	4a1d      	ldr	r2, [pc, #116]	@ (800df88 <UART_SetConfig+0x90c>)
 800df12:	fa22 f303 	lsr.w	r3, r2, r3
 800df16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df18:	e00f      	b.n	800df3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800df1a:	4b1b      	ldr	r3, [pc, #108]	@ (800df88 <UART_SetConfig+0x90c>)
 800df1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df1e:	e00c      	b.n	800df3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df20:	4b1a      	ldr	r3, [pc, #104]	@ (800df8c <UART_SetConfig+0x910>)
 800df22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df24:	e009      	b.n	800df3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df2c:	e005      	b.n	800df3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800df2e:	2300      	movs	r3, #0
 800df30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800df38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f000 81ee 	beq.w	800e31e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df46:	4a12      	ldr	r2, [pc, #72]	@ (800df90 <UART_SetConfig+0x914>)
 800df48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df4c:	461a      	mov	r2, r3
 800df4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df50:	fbb3 f3f2 	udiv	r3, r3, r2
 800df54:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	4613      	mov	r3, r2
 800df5c:	005b      	lsls	r3, r3, #1
 800df5e:	4413      	add	r3, r2
 800df60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df62:	429a      	cmp	r2, r3
 800df64:	d305      	bcc.n	800df72 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df6e:	429a      	cmp	r2, r3
 800df70:	d910      	bls.n	800df94 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800df72:	2301      	movs	r3, #1
 800df74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800df78:	e1d1      	b.n	800e31e <UART_SetConfig+0xca2>
 800df7a:	bf00      	nop
 800df7c:	40011c00 	.word	0x40011c00
 800df80:	58024400 	.word	0x58024400
 800df84:	58000c00 	.word	0x58000c00
 800df88:	03d09000 	.word	0x03d09000
 800df8c:	003d0900 	.word	0x003d0900
 800df90:	0801c588 	.word	0x0801c588
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df96:	2200      	movs	r2, #0
 800df98:	60bb      	str	r3, [r7, #8]
 800df9a:	60fa      	str	r2, [r7, #12]
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa0:	4ac0      	ldr	r2, [pc, #768]	@ (800e2a4 <UART_SetConfig+0xc28>)
 800dfa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	603b      	str	r3, [r7, #0]
 800dfac:	607a      	str	r2, [r7, #4]
 800dfae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dfb6:	f7f2 fdc1 	bl	8000b3c <__aeabi_uldivmod>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	4610      	mov	r0, r2
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	f04f 0200 	mov.w	r2, #0
 800dfc6:	f04f 0300 	mov.w	r3, #0
 800dfca:	020b      	lsls	r3, r1, #8
 800dfcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dfd0:	0202      	lsls	r2, r0, #8
 800dfd2:	6979      	ldr	r1, [r7, #20]
 800dfd4:	6849      	ldr	r1, [r1, #4]
 800dfd6:	0849      	lsrs	r1, r1, #1
 800dfd8:	2000      	movs	r0, #0
 800dfda:	460c      	mov	r4, r1
 800dfdc:	4605      	mov	r5, r0
 800dfde:	eb12 0804 	adds.w	r8, r2, r4
 800dfe2:	eb43 0905 	adc.w	r9, r3, r5
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	469a      	mov	sl, r3
 800dfee:	4693      	mov	fp, r2
 800dff0:	4652      	mov	r2, sl
 800dff2:	465b      	mov	r3, fp
 800dff4:	4640      	mov	r0, r8
 800dff6:	4649      	mov	r1, r9
 800dff8:	f7f2 fda0 	bl	8000b3c <__aeabi_uldivmod>
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	4613      	mov	r3, r2
 800e002:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e00a:	d308      	bcc.n	800e01e <UART_SetConfig+0x9a2>
 800e00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e012:	d204      	bcs.n	800e01e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e01a:	60da      	str	r2, [r3, #12]
 800e01c:	e17f      	b.n	800e31e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e01e:	2301      	movs	r3, #1
 800e020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e024:	e17b      	b.n	800e31e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	69db      	ldr	r3, [r3, #28]
 800e02a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e02e:	f040 80bd 	bne.w	800e1ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e032:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e036:	2b20      	cmp	r3, #32
 800e038:	dc48      	bgt.n	800e0cc <UART_SetConfig+0xa50>
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	db7b      	blt.n	800e136 <UART_SetConfig+0xaba>
 800e03e:	2b20      	cmp	r3, #32
 800e040:	d879      	bhi.n	800e136 <UART_SetConfig+0xaba>
 800e042:	a201      	add	r2, pc, #4	@ (adr r2, 800e048 <UART_SetConfig+0x9cc>)
 800e044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e048:	0800e0d3 	.word	0x0800e0d3
 800e04c:	0800e0db 	.word	0x0800e0db
 800e050:	0800e137 	.word	0x0800e137
 800e054:	0800e137 	.word	0x0800e137
 800e058:	0800e0e3 	.word	0x0800e0e3
 800e05c:	0800e137 	.word	0x0800e137
 800e060:	0800e137 	.word	0x0800e137
 800e064:	0800e137 	.word	0x0800e137
 800e068:	0800e0f3 	.word	0x0800e0f3
 800e06c:	0800e137 	.word	0x0800e137
 800e070:	0800e137 	.word	0x0800e137
 800e074:	0800e137 	.word	0x0800e137
 800e078:	0800e137 	.word	0x0800e137
 800e07c:	0800e137 	.word	0x0800e137
 800e080:	0800e137 	.word	0x0800e137
 800e084:	0800e137 	.word	0x0800e137
 800e088:	0800e103 	.word	0x0800e103
 800e08c:	0800e137 	.word	0x0800e137
 800e090:	0800e137 	.word	0x0800e137
 800e094:	0800e137 	.word	0x0800e137
 800e098:	0800e137 	.word	0x0800e137
 800e09c:	0800e137 	.word	0x0800e137
 800e0a0:	0800e137 	.word	0x0800e137
 800e0a4:	0800e137 	.word	0x0800e137
 800e0a8:	0800e137 	.word	0x0800e137
 800e0ac:	0800e137 	.word	0x0800e137
 800e0b0:	0800e137 	.word	0x0800e137
 800e0b4:	0800e137 	.word	0x0800e137
 800e0b8:	0800e137 	.word	0x0800e137
 800e0bc:	0800e137 	.word	0x0800e137
 800e0c0:	0800e137 	.word	0x0800e137
 800e0c4:	0800e137 	.word	0x0800e137
 800e0c8:	0800e129 	.word	0x0800e129
 800e0cc:	2b40      	cmp	r3, #64	@ 0x40
 800e0ce:	d02e      	beq.n	800e12e <UART_SetConfig+0xab2>
 800e0d0:	e031      	b.n	800e136 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0d2:	f7fd fc07 	bl	800b8e4 <HAL_RCC_GetPCLK1Freq>
 800e0d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e0d8:	e033      	b.n	800e142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0da:	f7fd fc19 	bl	800b910 <HAL_RCC_GetPCLK2Freq>
 800e0de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e0e0:	e02f      	b.n	800e142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fe fdde 	bl	800cca8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0f0:	e027      	b.n	800e142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0f2:	f107 0318 	add.w	r3, r7, #24
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fe ff2a 	bl	800cf50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e100:	e01f      	b.n	800e142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e102:	4b69      	ldr	r3, [pc, #420]	@ (800e2a8 <UART_SetConfig+0xc2c>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f003 0320 	and.w	r3, r3, #32
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d009      	beq.n	800e122 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e10e:	4b66      	ldr	r3, [pc, #408]	@ (800e2a8 <UART_SetConfig+0xc2c>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	08db      	lsrs	r3, r3, #3
 800e114:	f003 0303 	and.w	r3, r3, #3
 800e118:	4a64      	ldr	r2, [pc, #400]	@ (800e2ac <UART_SetConfig+0xc30>)
 800e11a:	fa22 f303 	lsr.w	r3, r2, r3
 800e11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e120:	e00f      	b.n	800e142 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e122:	4b62      	ldr	r3, [pc, #392]	@ (800e2ac <UART_SetConfig+0xc30>)
 800e124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e126:	e00c      	b.n	800e142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e128:	4b61      	ldr	r3, [pc, #388]	@ (800e2b0 <UART_SetConfig+0xc34>)
 800e12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e12c:	e009      	b.n	800e142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e12e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e134:	e005      	b.n	800e142 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e136:	2300      	movs	r3, #0
 800e138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e140:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 80ea 	beq.w	800e31e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e14e:	4a55      	ldr	r2, [pc, #340]	@ (800e2a4 <UART_SetConfig+0xc28>)
 800e150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e154:	461a      	mov	r2, r3
 800e156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e158:	fbb3 f3f2 	udiv	r3, r3, r2
 800e15c:	005a      	lsls	r2, r3, #1
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	085b      	lsrs	r3, r3, #1
 800e164:	441a      	add	r2, r3
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e172:	2b0f      	cmp	r3, #15
 800e174:	d916      	bls.n	800e1a4 <UART_SetConfig+0xb28>
 800e176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e17c:	d212      	bcs.n	800e1a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e180:	b29b      	uxth	r3, r3
 800e182:	f023 030f 	bic.w	r3, r3, #15
 800e186:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e18a:	085b      	lsrs	r3, r3, #1
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	f003 0307 	and.w	r3, r3, #7
 800e192:	b29a      	uxth	r2, r3
 800e194:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e196:	4313      	orrs	r3, r2
 800e198:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e1a0:	60da      	str	r2, [r3, #12]
 800e1a2:	e0bc      	b.n	800e31e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e1aa:	e0b8      	b.n	800e31e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e1ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e1b0:	2b20      	cmp	r3, #32
 800e1b2:	dc4b      	bgt.n	800e24c <UART_SetConfig+0xbd0>
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f2c0 8087 	blt.w	800e2c8 <UART_SetConfig+0xc4c>
 800e1ba:	2b20      	cmp	r3, #32
 800e1bc:	f200 8084 	bhi.w	800e2c8 <UART_SetConfig+0xc4c>
 800e1c0:	a201      	add	r2, pc, #4	@ (adr r2, 800e1c8 <UART_SetConfig+0xb4c>)
 800e1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c6:	bf00      	nop
 800e1c8:	0800e253 	.word	0x0800e253
 800e1cc:	0800e25b 	.word	0x0800e25b
 800e1d0:	0800e2c9 	.word	0x0800e2c9
 800e1d4:	0800e2c9 	.word	0x0800e2c9
 800e1d8:	0800e263 	.word	0x0800e263
 800e1dc:	0800e2c9 	.word	0x0800e2c9
 800e1e0:	0800e2c9 	.word	0x0800e2c9
 800e1e4:	0800e2c9 	.word	0x0800e2c9
 800e1e8:	0800e273 	.word	0x0800e273
 800e1ec:	0800e2c9 	.word	0x0800e2c9
 800e1f0:	0800e2c9 	.word	0x0800e2c9
 800e1f4:	0800e2c9 	.word	0x0800e2c9
 800e1f8:	0800e2c9 	.word	0x0800e2c9
 800e1fc:	0800e2c9 	.word	0x0800e2c9
 800e200:	0800e2c9 	.word	0x0800e2c9
 800e204:	0800e2c9 	.word	0x0800e2c9
 800e208:	0800e283 	.word	0x0800e283
 800e20c:	0800e2c9 	.word	0x0800e2c9
 800e210:	0800e2c9 	.word	0x0800e2c9
 800e214:	0800e2c9 	.word	0x0800e2c9
 800e218:	0800e2c9 	.word	0x0800e2c9
 800e21c:	0800e2c9 	.word	0x0800e2c9
 800e220:	0800e2c9 	.word	0x0800e2c9
 800e224:	0800e2c9 	.word	0x0800e2c9
 800e228:	0800e2c9 	.word	0x0800e2c9
 800e22c:	0800e2c9 	.word	0x0800e2c9
 800e230:	0800e2c9 	.word	0x0800e2c9
 800e234:	0800e2c9 	.word	0x0800e2c9
 800e238:	0800e2c9 	.word	0x0800e2c9
 800e23c:	0800e2c9 	.word	0x0800e2c9
 800e240:	0800e2c9 	.word	0x0800e2c9
 800e244:	0800e2c9 	.word	0x0800e2c9
 800e248:	0800e2bb 	.word	0x0800e2bb
 800e24c:	2b40      	cmp	r3, #64	@ 0x40
 800e24e:	d037      	beq.n	800e2c0 <UART_SetConfig+0xc44>
 800e250:	e03a      	b.n	800e2c8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e252:	f7fd fb47 	bl	800b8e4 <HAL_RCC_GetPCLK1Freq>
 800e256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e258:	e03c      	b.n	800e2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e25a:	f7fd fb59 	bl	800b910 <HAL_RCC_GetPCLK2Freq>
 800e25e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e260:	e038      	b.n	800e2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e266:	4618      	mov	r0, r3
 800e268:	f7fe fd1e 	bl	800cca8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e270:	e030      	b.n	800e2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e272:	f107 0318 	add.w	r3, r7, #24
 800e276:	4618      	mov	r0, r3
 800e278:	f7fe fe6a 	bl	800cf50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e280:	e028      	b.n	800e2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e282:	4b09      	ldr	r3, [pc, #36]	@ (800e2a8 <UART_SetConfig+0xc2c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f003 0320 	and.w	r3, r3, #32
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d012      	beq.n	800e2b4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e28e:	4b06      	ldr	r3, [pc, #24]	@ (800e2a8 <UART_SetConfig+0xc2c>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	08db      	lsrs	r3, r3, #3
 800e294:	f003 0303 	and.w	r3, r3, #3
 800e298:	4a04      	ldr	r2, [pc, #16]	@ (800e2ac <UART_SetConfig+0xc30>)
 800e29a:	fa22 f303 	lsr.w	r3, r2, r3
 800e29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2a0:	e018      	b.n	800e2d4 <UART_SetConfig+0xc58>
 800e2a2:	bf00      	nop
 800e2a4:	0801c588 	.word	0x0801c588
 800e2a8:	58024400 	.word	0x58024400
 800e2ac:	03d09000 	.word	0x03d09000
 800e2b0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e2b4:	4b24      	ldr	r3, [pc, #144]	@ (800e348 <UART_SetConfig+0xccc>)
 800e2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2b8:	e00c      	b.n	800e2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2ba:	4b24      	ldr	r3, [pc, #144]	@ (800e34c <UART_SetConfig+0xcd0>)
 800e2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2be:	e009      	b.n	800e2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2c6:	e005      	b.n	800e2d4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e2d2:	bf00      	nop
    }

    if (pclk != 0U)
 800e2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d021      	beq.n	800e31e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2de:	4a1c      	ldr	r2, [pc, #112]	@ (800e350 <UART_SetConfig+0xcd4>)
 800e2e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2e8:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	085b      	lsrs	r3, r3, #1
 800e2f2:	441a      	add	r2, r3
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e300:	2b0f      	cmp	r3, #15
 800e302:	d909      	bls.n	800e318 <UART_SetConfig+0xc9c>
 800e304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e30a:	d205      	bcs.n	800e318 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30e:	b29a      	uxth	r2, r3
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	60da      	str	r2, [r3, #12]
 800e316:	e002      	b.n	800e31e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e318:	2301      	movs	r3, #1
 800e31a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	2201      	movs	r2, #1
 800e322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	2201      	movs	r2, #1
 800e32a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	2200      	movs	r2, #0
 800e332:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2200      	movs	r2, #0
 800e338:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e33a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3748      	adds	r7, #72	@ 0x48
 800e342:	46bd      	mov	sp, r7
 800e344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e348:	03d09000 	.word	0x03d09000
 800e34c:	003d0900 	.word	0x003d0900
 800e350:	0801c588 	.word	0x0801c588

0800e354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e360:	f003 0308 	and.w	r3, r3, #8
 800e364:	2b00      	cmp	r3, #0
 800e366:	d00a      	beq.n	800e37e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	430a      	orrs	r2, r1
 800e37c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e382:	f003 0301 	and.w	r3, r3, #1
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00a      	beq.n	800e3a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	430a      	orrs	r2, r1
 800e39e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a4:	f003 0302 	and.w	r3, r3, #2
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00a      	beq.n	800e3c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	430a      	orrs	r2, r1
 800e3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3c6:	f003 0304 	and.w	r3, r3, #4
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00a      	beq.n	800e3e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	430a      	orrs	r2, r1
 800e3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3e8:	f003 0310 	and.w	r3, r3, #16
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d00a      	beq.n	800e406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	430a      	orrs	r2, r1
 800e404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e40a:	f003 0320 	and.w	r3, r3, #32
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00a      	beq.n	800e428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	430a      	orrs	r2, r1
 800e426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e430:	2b00      	cmp	r3, #0
 800e432:	d01a      	beq.n	800e46a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	430a      	orrs	r2, r1
 800e448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e44e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e452:	d10a      	bne.n	800e46a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	430a      	orrs	r2, r1
 800e468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e46e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00a      	beq.n	800e48c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	430a      	orrs	r2, r1
 800e48a:	605a      	str	r2, [r3, #4]
  }
}
 800e48c:	bf00      	nop
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b098      	sub	sp, #96	@ 0x60
 800e49c:	af02      	add	r7, sp, #8
 800e49e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e4a8:	f7fa fe3c 	bl	8009124 <HAL_GetTick>
 800e4ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f003 0308 	and.w	r3, r3, #8
 800e4b8:	2b08      	cmp	r3, #8
 800e4ba:	d12f      	bne.n	800e51c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e4bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 f88e 	bl	800e5ec <UART_WaitOnFlagUntilTimeout>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d022      	beq.n	800e51c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4de:	e853 3f00 	ldrex	r3, [r3]
 800e4e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e4ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4fc:	e841 2300 	strex	r3, r2, [r1]
 800e500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e504:	2b00      	cmp	r3, #0
 800e506:	d1e6      	bne.n	800e4d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2220      	movs	r2, #32
 800e50c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e518:	2303      	movs	r3, #3
 800e51a:	e063      	b.n	800e5e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f003 0304 	and.w	r3, r3, #4
 800e526:	2b04      	cmp	r3, #4
 800e528:	d149      	bne.n	800e5be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e52a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e52e:	9300      	str	r3, [sp, #0]
 800e530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e532:	2200      	movs	r2, #0
 800e534:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 f857 	bl	800e5ec <UART_WaitOnFlagUntilTimeout>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d03c      	beq.n	800e5be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54c:	e853 3f00 	ldrex	r3, [r3]
 800e550:	623b      	str	r3, [r7, #32]
   return(result);
 800e552:	6a3b      	ldr	r3, [r7, #32]
 800e554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	461a      	mov	r2, r3
 800e560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e562:	633b      	str	r3, [r7, #48]	@ 0x30
 800e564:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e56a:	e841 2300 	strex	r3, r2, [r1]
 800e56e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1e6      	bne.n	800e544 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3308      	adds	r3, #8
 800e57c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	e853 3f00 	ldrex	r3, [r3]
 800e584:	60fb      	str	r3, [r7, #12]
   return(result);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f023 0301 	bic.w	r3, r3, #1
 800e58c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3308      	adds	r3, #8
 800e594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e596:	61fa      	str	r2, [r7, #28]
 800e598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59a:	69b9      	ldr	r1, [r7, #24]
 800e59c:	69fa      	ldr	r2, [r7, #28]
 800e59e:	e841 2300 	strex	r3, r2, [r1]
 800e5a2:	617b      	str	r3, [r7, #20]
   return(result);
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1e5      	bne.n	800e576 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2220      	movs	r2, #32
 800e5ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5ba:	2303      	movs	r3, #3
 800e5bc:	e012      	b.n	800e5e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2220      	movs	r2, #32
 800e5c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2220      	movs	r2, #32
 800e5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3758      	adds	r7, #88	@ 0x58
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	603b      	str	r3, [r7, #0]
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5fc:	e04f      	b.n	800e69e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e604:	d04b      	beq.n	800e69e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e606:	f7fa fd8d 	bl	8009124 <HAL_GetTick>
 800e60a:	4602      	mov	r2, r0
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	1ad3      	subs	r3, r2, r3
 800e610:	69ba      	ldr	r2, [r7, #24]
 800e612:	429a      	cmp	r2, r3
 800e614:	d302      	bcc.n	800e61c <UART_WaitOnFlagUntilTimeout+0x30>
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d101      	bne.n	800e620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e61c:	2303      	movs	r3, #3
 800e61e:	e04e      	b.n	800e6be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f003 0304 	and.w	r3, r3, #4
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d037      	beq.n	800e69e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	2b80      	cmp	r3, #128	@ 0x80
 800e632:	d034      	beq.n	800e69e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	2b40      	cmp	r3, #64	@ 0x40
 800e638:	d031      	beq.n	800e69e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	69db      	ldr	r3, [r3, #28]
 800e640:	f003 0308 	and.w	r3, r3, #8
 800e644:	2b08      	cmp	r3, #8
 800e646:	d110      	bne.n	800e66a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2208      	movs	r2, #8
 800e64e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f000 f839 	bl	800e6c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2208      	movs	r2, #8
 800e65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2200      	movs	r2, #0
 800e662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	e029      	b.n	800e6be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	69db      	ldr	r3, [r3, #28]
 800e670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e678:	d111      	bne.n	800e69e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f000 f81f 	bl	800e6c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2220      	movs	r2, #32
 800e68e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2200      	movs	r2, #0
 800e696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e69a:	2303      	movs	r3, #3
 800e69c:	e00f      	b.n	800e6be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	69da      	ldr	r2, [r3, #28]
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	4013      	ands	r3, r2
 800e6a8:	68ba      	ldr	r2, [r7, #8]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	bf0c      	ite	eq
 800e6ae:	2301      	moveq	r3, #1
 800e6b0:	2300      	movne	r3, #0
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d0a0      	beq.n	800e5fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
	...

0800e6c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b095      	sub	sp, #84	@ 0x54
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6d8:	e853 3f00 	ldrex	r3, [r3]
 800e6dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e6f6:	e841 2300 	strex	r3, r2, [r1]
 800e6fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1e6      	bne.n	800e6d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3308      	adds	r3, #8
 800e708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70a:	6a3b      	ldr	r3, [r7, #32]
 800e70c:	e853 3f00 	ldrex	r3, [r3]
 800e710:	61fb      	str	r3, [r7, #28]
   return(result);
 800e712:	69fa      	ldr	r2, [r7, #28]
 800e714:	4b1e      	ldr	r3, [pc, #120]	@ (800e790 <UART_EndRxTransfer+0xc8>)
 800e716:	4013      	ands	r3, r2
 800e718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	3308      	adds	r3, #8
 800e720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e724:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e72a:	e841 2300 	strex	r3, r2, [r1]
 800e72e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e732:	2b00      	cmp	r3, #0
 800e734:	d1e5      	bne.n	800e702 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d118      	bne.n	800e770 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	f023 0310 	bic.w	r3, r3, #16
 800e752:	647b      	str	r3, [r7, #68]	@ 0x44
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	461a      	mov	r2, r3
 800e75a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e75c:	61bb      	str	r3, [r7, #24]
 800e75e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e760:	6979      	ldr	r1, [r7, #20]
 800e762:	69ba      	ldr	r2, [r7, #24]
 800e764:	e841 2300 	strex	r3, r2, [r1]
 800e768:	613b      	str	r3, [r7, #16]
   return(result);
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1e6      	bne.n	800e73e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2220      	movs	r2, #32
 800e774:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e784:	bf00      	nop
 800e786:	3754      	adds	r7, #84	@ 0x54
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	effffffe 	.word	0xeffffffe

0800e794 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d101      	bne.n	800e7aa <HAL_UARTEx_DisableFifoMode+0x16>
 800e7a6:	2302      	movs	r3, #2
 800e7a8:	e027      	b.n	800e7fa <HAL_UARTEx_DisableFifoMode+0x66>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2224      	movs	r2, #36	@ 0x24
 800e7b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f022 0201 	bic.w	r2, r2, #1
 800e7d0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e7d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2220      	movs	r2, #32
 800e7ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3714      	adds	r7, #20
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr

0800e806 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b084      	sub	sp, #16
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
 800e80e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e816:	2b01      	cmp	r3, #1
 800e818:	d101      	bne.n	800e81e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e81a:	2302      	movs	r3, #2
 800e81c:	e02d      	b.n	800e87a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2201      	movs	r2, #1
 800e822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2224      	movs	r2, #36	@ 0x24
 800e82a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f022 0201 	bic.w	r2, r2, #1
 800e844:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	683a      	ldr	r2, [r7, #0]
 800e856:	430a      	orrs	r2, r1
 800e858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 f850 	bl	800e900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2220      	movs	r2, #32
 800e86c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e878:	2300      	movs	r3, #0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b084      	sub	sp, #16
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
 800e88a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e892:	2b01      	cmp	r3, #1
 800e894:	d101      	bne.n	800e89a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e896:	2302      	movs	r3, #2
 800e898:	e02d      	b.n	800e8f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2224      	movs	r2, #36	@ 0x24
 800e8a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f022 0201 	bic.w	r2, r2, #1
 800e8c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	683a      	ldr	r2, [r7, #0]
 800e8d2:	430a      	orrs	r2, r1
 800e8d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f812 	bl	800e900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2220      	movs	r2, #32
 800e8e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3710      	adds	r7, #16
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
	...

0800e900 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d108      	bne.n	800e922 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e920:	e031      	b.n	800e986 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e922:	2310      	movs	r3, #16
 800e924:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e926:	2310      	movs	r3, #16
 800e928:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	0e5b      	lsrs	r3, r3, #25
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f003 0307 	and.w	r3, r3, #7
 800e938:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	0f5b      	lsrs	r3, r3, #29
 800e942:	b2db      	uxtb	r3, r3
 800e944:	f003 0307 	and.w	r3, r3, #7
 800e948:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e94a:	7bbb      	ldrb	r3, [r7, #14]
 800e94c:	7b3a      	ldrb	r2, [r7, #12]
 800e94e:	4911      	ldr	r1, [pc, #68]	@ (800e994 <UARTEx_SetNbDataToProcess+0x94>)
 800e950:	5c8a      	ldrb	r2, [r1, r2]
 800e952:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e956:	7b3a      	ldrb	r2, [r7, #12]
 800e958:	490f      	ldr	r1, [pc, #60]	@ (800e998 <UARTEx_SetNbDataToProcess+0x98>)
 800e95a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e95c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e960:	b29a      	uxth	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e968:	7bfb      	ldrb	r3, [r7, #15]
 800e96a:	7b7a      	ldrb	r2, [r7, #13]
 800e96c:	4909      	ldr	r1, [pc, #36]	@ (800e994 <UARTEx_SetNbDataToProcess+0x94>)
 800e96e:	5c8a      	ldrb	r2, [r1, r2]
 800e970:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e974:	7b7a      	ldrb	r2, [r7, #13]
 800e976:	4908      	ldr	r1, [pc, #32]	@ (800e998 <UARTEx_SetNbDataToProcess+0x98>)
 800e978:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e97a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e986:	bf00      	nop
 800e988:	3714      	adds	r7, #20
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop
 800e994:	0801c5a0 	.word	0x0801c5a0
 800e998:	0801c5a8 	.word	0x0801c5a8

0800e99c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800e9a6:	4b04      	ldr	r3, [pc, #16]	@ (800e9b8 <BSP_PB_Callback+0x1c>)
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	701a      	strb	r2, [r3, #0]
}
 800e9ac:	bf00      	nop
 800e9ae:	370c      	adds	r7, #12
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr
 800e9b8:	240018bc 	.word	0x240018bc

0800e9bc <DataHist_parameters>:
 800e9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e9c2:	3280      	adds	r2, #128	@ 0x80
 800e9c4:	9f06      	ldr	r7, [sp, #24]
 800e9c6:	f04f 0e00 	mov.w	lr, #0
 800e9ca:	7020      	strb	r0, [r4, #0]
 800e9cc:	f104 0830 	add.w	r8, r4, #48	@ 0x30
 800e9d0:	6808      	ldr	r0, [r1, #0]
 800e9d2:	ed52 7a1f 	vldr	s15, [r2, #-124]	@ 0xffffff84
 800e9d6:	6060      	str	r0, [r4, #4]
 800e9d8:	6848      	ldr	r0, [r1, #4]
 800e9da:	60a0      	str	r0, [r4, #8]
 800e9dc:	6888      	ldr	r0, [r1, #8]
 800e9de:	60e0      	str	r0, [r4, #12]
 800e9e0:	68c8      	ldr	r0, [r1, #12]
 800e9e2:	6120      	str	r0, [r4, #16]
 800e9e4:	6908      	ldr	r0, [r1, #16]
 800e9e6:	6160      	str	r0, [r4, #20]
 800e9e8:	6948      	ldr	r0, [r1, #20]
 800e9ea:	61a0      	str	r0, [r4, #24]
 800e9ec:	6988      	ldr	r0, [r1, #24]
 800e9ee:	61e0      	str	r0, [r4, #28]
 800e9f0:	69c8      	ldr	r0, [r1, #28]
 800e9f2:	6220      	str	r0, [r4, #32]
 800e9f4:	6a09      	ldr	r1, [r1, #32]
 800e9f6:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 800e9fa:	6261      	str	r1, [r4, #36]	@ 0x24
 800e9fc:	f832 1c80 	ldrh.w	r1, [r2, #-128]
 800ea00:	8521      	strh	r1, [r4, #40]	@ 0x28
 800ea02:	f1a2 0178 	sub.w	r1, r2, #120	@ 0x78
 800ea06:	4640      	mov	r0, r8
 800ea08:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea0c:	4291      	cmp	r1, r2
 800ea0e:	f840 cb04 	str.w	ip, [r0], #4
 800ea12:	d1f9      	bne.n	800ea08 <DataHist_parameters+0x4c>
 800ea14:	f10e 0e1e 	add.w	lr, lr, #30
 800ea18:	f108 0878 	add.w	r8, r8, #120	@ 0x78
 800ea1c:	f101 0278 	add.w	r2, r1, #120	@ 0x78
 800ea20:	f1be 0f5a 	cmp.w	lr, #90	@ 0x5a
 800ea24:	d1ed      	bne.n	800ea02 <DataHist_parameters+0x46>
 800ea26:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 800ea2a:	3380      	adds	r3, #128	@ 0x80
 800ea2c:	f833 2c80 	ldrh.w	r2, [r3, #-128]
 800ea30:	f504 7ed0 	add.w	lr, r4, #416	@ 0x1a0
 800ea34:	f04f 0c00 	mov.w	ip, #0
 800ea38:	f853 8c7c 	ldr.w	r8, [r3, #-124]
 800ea3c:	f8a4 2198 	strh.w	r2, [r4, #408]	@ 0x198
 800ea40:	f1a3 0278 	sub.w	r2, r3, #120	@ 0x78
 800ea44:	4671      	mov	r1, lr
 800ea46:	f852 0b04 	ldr.w	r0, [r2], #4
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	f841 0b04 	str.w	r0, [r1], #4
 800ea50:	d1f9      	bne.n	800ea46 <DataHist_parameters+0x8a>
 800ea52:	f10c 0c1e 	add.w	ip, ip, #30
 800ea56:	f10e 0e78 	add.w	lr, lr, #120	@ 0x78
 800ea5a:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 800ea5e:	f1bc 0f5a 	cmp.w	ip, #90	@ 0x5a
 800ea62:	d1ed      	bne.n	800ea40 <DataHist_parameters+0x84>
 800ea64:	f8c4 819c 	str.w	r8, [r4, #412]	@ 0x19c
 800ea68:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800ea6c:	883b      	ldrh	r3, [r7, #0]
 800ea6e:	f504 7c44 	add.w	ip, r4, #784	@ 0x310
 800ea72:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800ea76:	2700      	movs	r7, #0
 800ea78:	f8a4 3308 	strh.w	r3, [r4, #776]	@ 0x308
 800ea7c:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 800ea80:	4662      	mov	r2, ip
 800ea82:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea86:	4298      	cmp	r0, r3
 800ea88:	f842 1b04 	str.w	r1, [r2], #4
 800ea8c:	d1f9      	bne.n	800ea82 <DataHist_parameters+0xc6>
 800ea8e:	371e      	adds	r7, #30
 800ea90:	f10c 0c78 	add.w	ip, ip, #120	@ 0x78
 800ea94:	3078      	adds	r0, #120	@ 0x78
 800ea96:	2f5a      	cmp	r7, #90	@ 0x5a
 800ea98:	d1f0      	bne.n	800ea7c <DataHist_parameters+0xc0>
 800ea9a:	f8c4 e30c 	str.w	lr, [r4, #780]	@ 0x30c
 800ea9e:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 800eaa2:	8833      	ldrh	r3, [r6, #0]
 800eaa4:	f504 6790 	add.w	r7, r4, #1152	@ 0x480
 800eaa8:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800eaac:	2600      	movs	r6, #0
 800eaae:	f8a4 3478 	strh.w	r3, [r4, #1144]	@ 0x478
 800eab2:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 800eab6:	463a      	mov	r2, r7
 800eab8:	f853 1b04 	ldr.w	r1, [r3], #4
 800eabc:	4298      	cmp	r0, r3
 800eabe:	f842 1b04 	str.w	r1, [r2], #4
 800eac2:	d1f9      	bne.n	800eab8 <DataHist_parameters+0xfc>
 800eac4:	361e      	adds	r6, #30
 800eac6:	3778      	adds	r7, #120	@ 0x78
 800eac8:	3078      	adds	r0, #120	@ 0x78
 800eaca:	2e5a      	cmp	r6, #90	@ 0x5a
 800eacc:	d1f1      	bne.n	800eab2 <DataHist_parameters+0xf6>
 800eace:	f504 628f 	add.w	r2, r4, #1144	@ 0x478
 800ead2:	69ab      	ldr	r3, [r5, #24]
 800ead4:	f504 64bd 	add.w	r4, r4, #1512	@ 0x5e8
 800ead8:	f8c2 c004 	str.w	ip, [r2, #4]
 800eadc:	782a      	ldrb	r2, [r5, #0]
 800eade:	7022      	strb	r2, [r4, #0]
 800eae0:	61a3      	str	r3, [r4, #24]
 800eae2:	686b      	ldr	r3, [r5, #4]
 800eae4:	6063      	str	r3, [r4, #4]
 800eae6:	68ab      	ldr	r3, [r5, #8]
 800eae8:	60a3      	str	r3, [r4, #8]
 800eaea:	68eb      	ldr	r3, [r5, #12]
 800eaec:	60e3      	str	r3, [r4, #12]
 800eaee:	692b      	ldr	r3, [r5, #16]
 800eaf0:	6123      	str	r3, [r4, #16]
 800eaf2:	696b      	ldr	r3, [r5, #20]
 800eaf4:	6163      	str	r3, [r4, #20]
 800eaf6:	69eb      	ldr	r3, [r5, #28]
 800eaf8:	61e3      	str	r3, [r4, #28]
 800eafa:	6a2b      	ldr	r3, [r5, #32]
 800eafc:	6223      	str	r3, [r4, #32]
 800eafe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800eb00:	6263      	str	r3, [r4, #36]	@ 0x24
 800eb02:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800eb04:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eb06:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800eb08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb0e:	bf00      	nop

0800eb10 <rotVect>:
 800eb10:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800eb14:	ed92 5a01 	vldr	s10, [r2, #4]
 800eb18:	ee07 3a90 	vmov	s15, r3
 800eb1c:	f991 3000 	ldrsb.w	r3, [r1]
 800eb20:	edd2 5a00 	vldr	s11, [r2]
 800eb24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb28:	ee06 3a90 	vmov	s13, r3
 800eb2c:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800eb30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800eb34:	ed92 6a02 	vldr	s12, [r2, #8]
 800eb38:	ee67 7a85 	vmul.f32	s15, s15, s10
 800eb3c:	ee07 3a10 	vmov	s14, r3
 800eb40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eb44:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800eb48:	eee7 7a06 	vfma.f32	s15, s14, s12
 800eb4c:	edc0 7a00 	vstr	s15, [r0]
 800eb50:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800eb54:	ed92 5a01 	vldr	s10, [r2, #4]
 800eb58:	ee07 3a90 	vmov	s15, r3
 800eb5c:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800eb60:	edd2 5a00 	vldr	s11, [r2]
 800eb64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb68:	ee06 3a90 	vmov	s13, r3
 800eb6c:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800eb70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800eb74:	ed92 6a02 	vldr	s12, [r2, #8]
 800eb78:	ee67 7a85 	vmul.f32	s15, s15, s10
 800eb7c:	ee07 3a10 	vmov	s14, r3
 800eb80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eb84:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800eb88:	eee7 7a06 	vfma.f32	s15, s14, s12
 800eb8c:	edc0 7a01 	vstr	s15, [r0, #4]
 800eb90:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800eb94:	ed92 5a01 	vldr	s10, [r2, #4]
 800eb98:	ee07 3a90 	vmov	s15, r3
 800eb9c:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800eba0:	edd2 5a00 	vldr	s11, [r2]
 800eba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eba8:	ee06 3a90 	vmov	s13, r3
 800ebac:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800ebb0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ebb4:	ed92 6a02 	vldr	s12, [r2, #8]
 800ebb8:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ebbc:	ee07 3a10 	vmov	s14, r3
 800ebc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ebc4:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800ebc8:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ebcc:	edc0 7a02 	vstr	s15, [r0, #8]
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	0000      	movs	r0, r0
	...

0800ebd8 <findDirection>:
 800ebd8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 800ebdc:	ed2d 8b06 	vpush	{d8-d10}
 800ebe0:	eef0 9ae0 	vabs.f32	s19, s1
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	eeb0 aac0 	vabs.f32	s20, s0
 800ebea:	eef0 8a60 	vmov.f32	s17, s1
 800ebee:	ee19 0a90 	vmov	r0, s19
 800ebf2:	eeb0 9a40 	vmov.f32	s18, s0
 800ebf6:	eeb0 8a41 	vmov.f32	s16, s2
 800ebfa:	eef0 aac1 	vabs.f32	s21, s2
 800ebfe:	f7f1 fe6d 	bl	80008dc <__aeabi_f2d>
 800ec02:	eeb4 aae9 	vcmpe.f32	s20, s19
 800ec06:	4606      	mov	r6, r0
 800ec08:	460f      	mov	r7, r1
 800ec0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0e:	dd32      	ble.n	800ec76 <findDirection+0x9e>
 800ec10:	eeb4 aaea 	vcmpe.f32	s20, s21
 800ec14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec18:	dd2d      	ble.n	800ec76 <findDirection+0x9e>
 800ec1a:	a36b      	add	r3, pc, #428	@ (adr r3, 800edc8 <findDirection+0x1f0>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	f7f1 fbce 	bl	80003c0 <__aeabi_dmul>
 800ec24:	4680      	mov	r8, r0
 800ec26:	ee1a 0a10 	vmov	r0, s20
 800ec2a:	4689      	mov	r9, r1
 800ec2c:	f7f1 fe56 	bl	80008dc <__aeabi_f2d>
 800ec30:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800ec34:	4606      	mov	r6, r0
 800ec36:	460f      	mov	r7, r1
 800ec38:	4640      	mov	r0, r8
 800ec3a:	4649      	mov	r1, r9
 800ec3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec40:	4632      	mov	r2, r6
 800ec42:	463b      	mov	r3, r7
 800ec44:	dd76      	ble.n	800ed34 <findDirection+0x15c>
 800ec46:	f7f1 ff01 	bl	8000a4c <__aeabi_dcmplt>
 800ec4a:	b178      	cbz	r0, 800ec6c <findDirection+0x94>
 800ec4c:	ee1a 0a90 	vmov	r0, s21
 800ec50:	f7f1 fe44 	bl	80008dc <__aeabi_f2d>
 800ec54:	a35c      	add	r3, pc, #368	@ (adr r3, 800edc8 <findDirection+0x1f0>)
 800ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5a:	f7f1 fbb1 	bl	80003c0 <__aeabi_dmul>
 800ec5e:	4632      	mov	r2, r6
 800ec60:	463b      	mov	r3, r7
 800ec62:	f7f1 fef3 	bl	8000a4c <__aeabi_dcmplt>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	bf18      	it	ne
 800ec6a:	2404      	movne	r4, #4
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	ecbd 8b06 	vpop	{d8-d10}
 800ec72:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800ec76:	eef4 9aea 	vcmpe.f32	s19, s21
 800ec7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7e:	dd28      	ble.n	800ecd2 <findDirection+0xfa>
 800ec80:	ee1a 0a10 	vmov	r0, s20
 800ec84:	f7f1 fe2a 	bl	80008dc <__aeabi_f2d>
 800ec88:	a34f      	add	r3, pc, #316	@ (adr r3, 800edc8 <findDirection+0x1f0>)
 800ec8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8e:	f7f1 fb97 	bl	80003c0 <__aeabi_dmul>
 800ec92:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800ec96:	4632      	mov	r2, r6
 800ec98:	463b      	mov	r3, r7
 800ec9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec9e:	dd5e      	ble.n	800ed5e <findDirection+0x186>
 800eca0:	f7f1 fed4 	bl	8000a4c <__aeabi_dcmplt>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d0e1      	beq.n	800ec6c <findDirection+0x94>
 800eca8:	ee1a 0a90 	vmov	r0, s21
 800ecac:	f7f1 fe16 	bl	80008dc <__aeabi_f2d>
 800ecb0:	a345      	add	r3, pc, #276	@ (adr r3, 800edc8 <findDirection+0x1f0>)
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	f7f1 fb83 	bl	80003c0 <__aeabi_dmul>
 800ecba:	4632      	mov	r2, r6
 800ecbc:	463b      	mov	r3, r7
 800ecbe:	f7f1 fec5 	bl	8000a4c <__aeabi_dcmplt>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	ecbd 8b06 	vpop	{d8-d10}
 800ecc8:	bf18      	it	ne
 800ecca:	2401      	movne	r4, #1
 800eccc:	4620      	mov	r0, r4
 800ecce:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800ecd2:	ee1a 0a90 	vmov	r0, s21
 800ecd6:	f7f1 fe01 	bl	80008dc <__aeabi_f2d>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	4630      	mov	r0, r6
 800ece0:	4639      	mov	r1, r7
 800ece2:	4616      	mov	r6, r2
 800ece4:	461f      	mov	r7, r3
 800ece6:	a338      	add	r3, pc, #224	@ (adr r3, 800edc8 <findDirection+0x1f0>)
 800ece8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecec:	f7f1 fb68 	bl	80003c0 <__aeabi_dmul>
 800ecf0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	4639      	mov	r1, r7
 800ecfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed00:	dd46      	ble.n	800ed90 <findDirection+0x1b8>
 800ed02:	f7f1 fec1 	bl	8000a88 <__aeabi_dcmpgt>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d0b0      	beq.n	800ec6c <findDirection+0x94>
 800ed0a:	ee1a 0a10 	vmov	r0, s20
 800ed0e:	f7f1 fde5 	bl	80008dc <__aeabi_f2d>
 800ed12:	a32d      	add	r3, pc, #180	@ (adr r3, 800edc8 <findDirection+0x1f0>)
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	f7f1 fb52 	bl	80003c0 <__aeabi_dmul>
 800ed1c:	4632      	mov	r2, r6
 800ed1e:	463b      	mov	r3, r7
 800ed20:	f7f1 fe94 	bl	8000a4c <__aeabi_dcmplt>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	ecbd 8b06 	vpop	{d8-d10}
 800ed2a:	bf18      	it	ne
 800ed2c:	2400      	movne	r4, #0
 800ed2e:	4620      	mov	r0, r4
 800ed30:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800ed34:	f7f1 fe8a 	bl	8000a4c <__aeabi_dcmplt>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d097      	beq.n	800ec6c <findDirection+0x94>
 800ed3c:	ee1a 0a90 	vmov	r0, s21
 800ed40:	f7f1 fdcc 	bl	80008dc <__aeabi_f2d>
 800ed44:	a320      	add	r3, pc, #128	@ (adr r3, 800edc8 <findDirection+0x1f0>)
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	f7f1 fb39 	bl	80003c0 <__aeabi_dmul>
 800ed4e:	4632      	mov	r2, r6
 800ed50:	463b      	mov	r3, r7
 800ed52:	f7f1 fe7b 	bl	8000a4c <__aeabi_dcmplt>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	bf18      	it	ne
 800ed5a:	2405      	movne	r4, #5
 800ed5c:	e786      	b.n	800ec6c <findDirection+0x94>
 800ed5e:	f7f1 fe75 	bl	8000a4c <__aeabi_dcmplt>
 800ed62:	2800      	cmp	r0, #0
 800ed64:	d082      	beq.n	800ec6c <findDirection+0x94>
 800ed66:	ee1a 0a90 	vmov	r0, s21
 800ed6a:	f7f1 fdb7 	bl	80008dc <__aeabi_f2d>
 800ed6e:	a316      	add	r3, pc, #88	@ (adr r3, 800edc8 <findDirection+0x1f0>)
 800ed70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed74:	f7f1 fb24 	bl	80003c0 <__aeabi_dmul>
 800ed78:	4632      	mov	r2, r6
 800ed7a:	463b      	mov	r3, r7
 800ed7c:	f7f1 fe66 	bl	8000a4c <__aeabi_dcmplt>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	ecbd 8b06 	vpop	{d8-d10}
 800ed86:	bf18      	it	ne
 800ed88:	2403      	movne	r4, #3
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800ed90:	f7f1 fe7a 	bl	8000a88 <__aeabi_dcmpgt>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	f43f af69 	beq.w	800ec6c <findDirection+0x94>
 800ed9a:	ee1a 0a10 	vmov	r0, s20
 800ed9e:	f7f1 fd9d 	bl	80008dc <__aeabi_f2d>
 800eda2:	a309      	add	r3, pc, #36	@ (adr r3, 800edc8 <findDirection+0x1f0>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	f7f1 fb0a 	bl	80003c0 <__aeabi_dmul>
 800edac:	4632      	mov	r2, r6
 800edae:	463b      	mov	r3, r7
 800edb0:	f7f1 fe4c 	bl	8000a4c <__aeabi_dcmplt>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	ecbd 8b06 	vpop	{d8-d10}
 800edba:	bf18      	it	ne
 800edbc:	2402      	movne	r4, #2
 800edbe:	4620      	mov	r0, r4
 800edc0:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800edc4:	f3af 8000 	nop.w
 800edc8:	e0000000 	.word	0xe0000000
 800edcc:	3ff6b851 	.word	0x3ff6b851

0800edd0 <updateOrientation>:
 800edd0:	2300      	movs	r3, #0
 800edd2:	6003      	str	r3, [r0, #0]
 800edd4:	6043      	str	r3, [r0, #4]
 800edd6:	7203      	strb	r3, [r0, #8]
 800edd8:	780b      	ldrb	r3, [r1, #0]
 800edda:	f1a3 0242 	sub.w	r2, r3, #66	@ 0x42
 800edde:	2a17      	cmp	r2, #23
 800ede0:	d801      	bhi.n	800ede6 <updateOrientation+0x16>
 800ede2:	3320      	adds	r3, #32
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	f891 c001 	ldrb.w	ip, [r1, #1]
 800edea:	f1ac 0242 	sub.w	r2, ip, #66	@ 0x42
 800edee:	2a17      	cmp	r2, #23
 800edf0:	d803      	bhi.n	800edfa <updateOrientation+0x2a>
 800edf2:	f10c 0c20 	add.w	ip, ip, #32
 800edf6:	fa5f fc8c 	uxtb.w	ip, ip
 800edfa:	788a      	ldrb	r2, [r1, #2]
 800edfc:	f1a2 0142 	sub.w	r1, r2, #66	@ 0x42
 800ee00:	2917      	cmp	r1, #23
 800ee02:	d801      	bhi.n	800ee08 <updateOrientation+0x38>
 800ee04:	3220      	adds	r2, #32
 800ee06:	b2d2      	uxtb	r2, r2
 800ee08:	3b64      	subs	r3, #100	@ 0x64
 800ee0a:	2b13      	cmp	r3, #19
 800ee0c:	d80d      	bhi.n	800ee2a <updateOrientation+0x5a>
 800ee0e:	e8df f003 	tbb	[pc, r3]
 800ee12:	3734      	.short	0x3734
 800ee14:	0c0c0c0c 	.word	0x0c0c0c0c
 800ee18:	0c0c0c0c 	.word	0x0c0c0c0c
 800ee1c:	0c0c0c0a 	.word	0x0c0c0c0a
 800ee20:	3d0c3a0c 	.word	0x3d0c3a0c
 800ee24:	310c      	.short	0x310c
 800ee26:	2301      	movs	r3, #1
 800ee28:	70c3      	strb	r3, [r0, #3]
 800ee2a:	f1ac 0c64 	sub.w	ip, ip, #100	@ 0x64
 800ee2e:	f1bc 0f13 	cmp.w	ip, #19
 800ee32:	d80d      	bhi.n	800ee50 <updateOrientation+0x80>
 800ee34:	e8df f00c 	tbb	[pc, ip]
 800ee38:	0c0c392d 	.word	0x0c0c392d
 800ee3c:	0c0c0c0c 	.word	0x0c0c0c0c
 800ee40:	0c0a0c0c 	.word	0x0c0a0c0c
 800ee44:	3c0c0c0c 	.word	0x3c0c0c0c
 800ee48:	420c3f0c 	.word	0x420c3f0c
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	7103      	strb	r3, [r0, #4]
 800ee50:	3a64      	subs	r2, #100	@ 0x64
 800ee52:	2a13      	cmp	r2, #19
 800ee54:	d80d      	bhi.n	800ee72 <updateOrientation+0xa2>
 800ee56:	e8df f002 	tbb	[pc, r2]
 800ee5a:	340a      	.short	0x340a
 800ee5c:	0c0c0c0c 	.word	0x0c0c0c0c
 800ee60:	0c0c0c0c 	.word	0x0c0c0c0c
 800ee64:	0c0c0c37 	.word	0x0c0c0c37
 800ee68:	250c220c 	.word	0x250c220c
 800ee6c:	1f0c      	.short	0x1f0c
 800ee6e:	23ff      	movs	r3, #255	@ 0xff
 800ee70:	7203      	strb	r3, [r0, #8]
 800ee72:	4770      	bx	lr
 800ee74:	23ff      	movs	r3, #255	@ 0xff
 800ee76:	7003      	strb	r3, [r0, #0]
 800ee78:	e7d7      	b.n	800ee2a <updateOrientation+0x5a>
 800ee7a:	23ff      	movs	r3, #255	@ 0xff
 800ee7c:	7183      	strb	r3, [r0, #6]
 800ee7e:	e7d4      	b.n	800ee2a <updateOrientation+0x5a>
 800ee80:	2301      	movs	r3, #1
 800ee82:	7003      	strb	r3, [r0, #0]
 800ee84:	e7d1      	b.n	800ee2a <updateOrientation+0x5a>
 800ee86:	23ff      	movs	r3, #255	@ 0xff
 800ee88:	70c3      	strb	r3, [r0, #3]
 800ee8a:	e7ce      	b.n	800ee2a <updateOrientation+0x5a>
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	7183      	strb	r3, [r0, #6]
 800ee90:	e7cb      	b.n	800ee2a <updateOrientation+0x5a>
 800ee92:	23ff      	movs	r3, #255	@ 0xff
 800ee94:	71c3      	strb	r3, [r0, #7]
 800ee96:	e7db      	b.n	800ee50 <updateOrientation+0x80>
 800ee98:	23ff      	movs	r3, #255	@ 0xff
 800ee9a:	7083      	strb	r3, [r0, #2]
 800ee9c:	4770      	bx	lr
 800ee9e:	23ff      	movs	r3, #255	@ 0xff
 800eea0:	7143      	strb	r3, [r0, #5]
 800eea2:	4770      	bx	lr
 800eea4:	2301      	movs	r3, #1
 800eea6:	7203      	strb	r3, [r0, #8]
 800eea8:	4770      	bx	lr
 800eeaa:	2301      	movs	r3, #1
 800eeac:	7043      	strb	r3, [r0, #1]
 800eeae:	e7cf      	b.n	800ee50 <updateOrientation+0x80>
 800eeb0:	23ff      	movs	r3, #255	@ 0xff
 800eeb2:	7103      	strb	r3, [r0, #4]
 800eeb4:	e7cc      	b.n	800ee50 <updateOrientation+0x80>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	71c3      	strb	r3, [r0, #7]
 800eeba:	e7c9      	b.n	800ee50 <updateOrientation+0x80>
 800eebc:	23ff      	movs	r3, #255	@ 0xff
 800eebe:	7043      	strb	r3, [r0, #1]
 800eec0:	e7c6      	b.n	800ee50 <updateOrientation+0x80>
 800eec2:	2301      	movs	r3, #1
 800eec4:	7083      	strb	r3, [r0, #2]
 800eec6:	4770      	bx	lr
 800eec8:	2301      	movs	r3, #1
 800eeca:	7143      	strb	r3, [r0, #5]
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop

0800eed0 <qmult>:
 800eed0:	ed91 2a03 	vldr	s4, [r1, #12]
 800eed4:	ed90 3a01 	vldr	s6, [r0, #4]
 800eed8:	edd0 5a02 	vldr	s11, [r0, #8]
 800eedc:	edd1 4a01 	vldr	s9, [r1, #4]
 800eee0:	ee62 6a03 	vmul.f32	s13, s4, s6
 800eee4:	ee22 7a25 	vmul.f32	s14, s4, s11
 800eee8:	ed90 4a00 	vldr	s8, [r0]
 800eeec:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800eef0:	ed91 5a02 	vldr	s10, [r1, #8]
 800eef4:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800eef8:	edd1 3a00 	vldr	s7, [r1]
 800eefc:	eee4 6a05 	vfma.f32	s13, s8, s10
 800ef00:	edd0 2a03 	vldr	s5, [r0, #12]
 800ef04:	eea4 6a02 	vfma.f32	s12, s8, s4
 800ef08:	eea3 7a23 	vfma.f32	s14, s6, s7
 800ef0c:	eee4 7a63 	vfms.f32	s15, s8, s7
 800ef10:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800ef14:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800ef18:	eea5 7a22 	vfma.f32	s14, s10, s5
 800ef1c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800ef20:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800ef24:	eea3 6a45 	vfms.f32	s12, s6, s10
 800ef28:	eea4 7a64 	vfms.f32	s14, s8, s9
 800ef2c:	eee5 7a65 	vfms.f32	s15, s10, s11
 800ef30:	edc2 6a01 	vstr	s13, [r2, #4]
 800ef34:	ed82 6a00 	vstr	s12, [r2]
 800ef38:	ed82 7a02 	vstr	s14, [r2, #8]
 800ef3c:	edc2 7a03 	vstr	s15, [r2, #12]
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop

0800ef44 <dataDerivative5>:
 800ef44:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800ef48:	ed90 6a02 	vldr	s12, [r0, #8]
 800ef4c:	edd0 7a05 	vldr	s15, [r0, #20]
 800ef50:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 800ef54:	edd0 6a01 	vldr	s13, [r0, #4]
 800ef58:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800ef5c:	ed90 5a04 	vldr	s10, [r0, #16]
 800ef60:	edd0 2a0b 	vldr	s5, [r0, #44]	@ 0x2c
 800ef64:	ee96 5a87 	vfnms.f32	s10, s13, s14
 800ef68:	ed90 4a00 	vldr	s8, [r0]
 800ef6c:	ed90 6a09 	vldr	s12, [r0, #36]	@ 0x24
 800ef70:	edd0 6a0a 	vldr	s13, [r0, #40]	@ 0x28
 800ef74:	ed90 3a0e 	vldr	s6, [r0, #56]	@ 0x38
 800ef78:	eea4 6a07 	vfma.f32	s12, s8, s14
 800ef7c:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800ef80:	eddf 4a11 	vldr	s9, [pc, #68]	@ 800efc8 <dataDerivative5+0x84>
 800ef84:	edd0 3a0d 	vldr	s7, [r0, #52]	@ 0x34
 800ef88:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ef8c:	ed90 4a03 	vldr	s8, [r0, #12]
 800ef90:	eee3 7a25 	vfma.f32	s15, s6, s11
 800ef94:	ee20 7a24 	vmul.f32	s14, s0, s9
 800ef98:	edd0 4a0c 	vldr	s9, [r0, #48]	@ 0x30
 800ef9c:	eee3 6aa5 	vfma.f32	s13, s7, s11
 800efa0:	ee36 6a44 	vsub.f32	s12, s12, s8
 800efa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efa8:	eea4 6aa5 	vfma.f32	s12, s9, s11
 800efac:	ee66 6a87 	vmul.f32	s13, s13, s14
 800efb0:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800efb4:	eea6 0aa6 	vfma.f32	s0, s13, s13
 800efb8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800efbc:	eea7 0a07 	vfma.f32	s0, s14, s14
 800efc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	3dcccccd 	.word	0x3dcccccd

0800efcc <b_dcm2q>:
 800efcc:	edd0 7a00 	vldr	s15, [r0]
 800efd0:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800efd4:	ed90 5a08 	vldr	s10, [r0, #32]
 800efd8:	edd0 6a04 	vldr	s13, [r0, #16]
 800efdc:	ee37 7a85 	vadd.f32	s14, s15, s10
 800efe0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800efe4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800efe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efec:	dd79      	ble.n	800f0e2 <b_dcm2q+0x116>
 800efee:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800eff2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800eff6:	eef1 5ac7 	vsqrt.f32	s11, s14
 800effa:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800effe:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 800f002:	ee35 6a47 	vsub.f32	s12, s10, s14
 800f006:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800f00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00e:	dd7a      	ble.n	800f106 <b_dcm2q+0x13a>
 800f010:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 800f014:	ee76 4a24 	vadd.f32	s9, s12, s9
 800f018:	eeb1 6ae4 	vsqrt.f32	s12, s9
 800f01c:	ee35 7a07 	vadd.f32	s14, s10, s14
 800f020:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 800f024:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800f028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02c:	dd68      	ble.n	800f100 <b_dcm2q+0x134>
 800f02e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 800f032:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800f036:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f03a:	eef1 4ac7 	vsqrt.f32	s9, s14
 800f03e:	ee64 4a84 	vmul.f32	s9, s9, s8
 800f042:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f046:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f04a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f04e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f056:	d950      	bls.n	800f0fa <b_dcm2q+0x12e>
 800f058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f05c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f060:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800f064:	edd0 7a05 	vldr	s15, [r0, #20]
 800f068:	edd0 6a07 	vldr	s13, [r0, #28]
 800f06c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f078:	d43c      	bmi.n	800f0f4 <b_dcm2q+0x128>
 800f07a:	bfd8      	it	le
 800f07c:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800f080:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f084:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f088:	ed81 7a00 	vstr	s14, [r1]
 800f08c:	edd0 7a06 	vldr	s15, [r0, #24]
 800f090:	ed90 7a02 	vldr	s14, [r0, #8]
 800f094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a0:	d425      	bmi.n	800f0ee <b_dcm2q+0x122>
 800f0a2:	bfd8      	it	le
 800f0a4:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800f0a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f0ac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f0b0:	edc1 5a01 	vstr	s11, [r1, #4]
 800f0b4:	edd0 7a01 	vldr	s15, [r0, #4]
 800f0b8:	ed90 7a03 	vldr	s14, [r0, #12]
 800f0bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c8:	d40e      	bmi.n	800f0e8 <b_dcm2q+0x11c>
 800f0ca:	bfd8      	it	le
 800f0cc:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800f0d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f0d4:	edc1 4a03 	vstr	s9, [r1, #12]
 800f0d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f0dc:	ed81 6a02 	vstr	s12, [r1, #8]
 800f0e0:	4770      	bx	lr
 800f0e2:	eddf 5a0a 	vldr	s11, [pc, #40]	@ 800f10c <b_dcm2q+0x140>
 800f0e6:	e788      	b.n	800effa <b_dcm2q+0x2e>
 800f0e8:	eeb1 6a46 	vneg.f32	s12, s12
 800f0ec:	e7f0      	b.n	800f0d0 <b_dcm2q+0x104>
 800f0ee:	eef1 5a65 	vneg.f32	s11, s11
 800f0f2:	e7d9      	b.n	800f0a8 <b_dcm2q+0xdc>
 800f0f4:	eeb1 7a47 	vneg.f32	s14, s14
 800f0f8:	e7c2      	b.n	800f080 <b_dcm2q+0xb4>
 800f0fa:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 800f10c <b_dcm2q+0x140>
 800f0fe:	e7b1      	b.n	800f064 <b_dcm2q+0x98>
 800f100:	eddf 4a02 	vldr	s9, [pc, #8]	@ 800f10c <b_dcm2q+0x140>
 800f104:	e79d      	b.n	800f042 <b_dcm2q+0x76>
 800f106:	ed9f 6a01 	vldr	s12, [pc, #4]	@ 800f10c <b_dcm2q+0x140>
 800f10a:	e787      	b.n	800f01c <b_dcm2q+0x50>
 800f10c:	00000000 	.word	0x00000000

0800f110 <getRotationMatrix>:
 800f110:	b538      	push	{r3, r4, r5, lr}
 800f112:	4613      	mov	r3, r2
 800f114:	4605      	mov	r5, r0
 800f116:	460c      	mov	r4, r1
 800f118:	2224      	movs	r2, #36	@ 0x24
 800f11a:	4618      	mov	r0, r3
 800f11c:	2100      	movs	r1, #0
 800f11e:	f009 fb50 	bl	80187c2 <memset>
 800f122:	ed95 5a00 	vldr	s10, [r5]
 800f126:	ed9f 3a4d 	vldr	s6, [pc, #308]	@ 800f25c <getRotationMatrix+0x14c>
 800f12a:	4603      	mov	r3, r0
 800f12c:	ed80 5a02 	vstr	s10, [r0, #8]
 800f130:	edd5 4a01 	vldr	s9, [r5, #4]
 800f134:	edc0 4a05 	vstr	s9, [r0, #20]
 800f138:	edd5 5a02 	vldr	s11, [r5, #8]
 800f13c:	edc0 5a08 	vstr	s11, [r0, #32]
 800f140:	ed94 4a02 	vldr	s8, [r4, #8]
 800f144:	edd4 3a01 	vldr	s7, [r4, #4]
 800f148:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 800f14c:	ed94 6a00 	vldr	s12, [r4]
 800f150:	ee25 7a63 	vnmul.f32	s14, s10, s7
 800f154:	ee65 7ac6 	vnmul.f32	s15, s11, s12
 800f158:	eee3 6aa5 	vfma.f32	s13, s7, s11
 800f15c:	eea6 7a24 	vfma.f32	s14, s12, s9
 800f160:	eee4 7a05 	vfma.f32	s15, s8, s10
 800f164:	eeb0 6ae6 	vabs.f32	s12, s13
 800f168:	ed80 7a06 	vstr	s14, [r0, #24]
 800f16c:	edc0 7a03 	vstr	s15, [r0, #12]
 800f170:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800f174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f178:	dc4e      	bgt.n	800f218 <getRotationMatrix+0x108>
 800f17a:	ee86 4a83 	vdiv.f32	s8, s13, s6
 800f17e:	eeb0 6a43 	vmov.f32	s12, s6
 800f182:	eef0 3ae7 	vabs.f32	s7, s15
 800f186:	eef4 3ac6 	vcmpe.f32	s7, s12
 800f18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f18e:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f192:	dc4a      	bgt.n	800f22a <getRotationMatrix+0x11a>
 800f194:	eec7 3a86 	vdiv.f32	s7, s15, s12
 800f198:	eea3 4aa3 	vfma.f32	s8, s7, s7
 800f19c:	eeb0 3a44 	vmov.f32	s6, s8
 800f1a0:	eeb0 4ac7 	vabs.f32	s8, s14
 800f1a4:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800f1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ac:	d54e      	bpl.n	800f24c <getRotationMatrix+0x13c>
 800f1ae:	eec6 2a04 	vdiv.f32	s5, s12, s8
 800f1b2:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800f1b6:	eeb0 6a44 	vmov.f32	s12, s8
 800f1ba:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800f1be:	eee3 3a22 	vfma.f32	s7, s6, s5
 800f1c2:	eeb1 4ae3 	vsqrt.f32	s8, s7
 800f1c6:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800f1ca:	ee24 4a06 	vmul.f32	s8, s8, s12
 800f1ce:	ee83 6a84 	vdiv.f32	s12, s7, s8
 800f1d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f1d6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f1da:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f1de:	ee65 3ae7 	vnmul.f32	s7, s11, s15
 800f1e2:	edc3 7a03 	vstr	s15, [r3, #12]
 800f1e6:	ee24 4ae6 	vnmul.f32	s8, s9, s13
 800f1ea:	edc3 6a00 	vstr	s13, [r3]
 800f1ee:	ee25 6a47 	vnmul.f32	s12, s10, s14
 800f1f2:	ed83 7a06 	vstr	s14, [r3, #24]
 800f1f6:	eee7 3a24 	vfma.f32	s7, s14, s9
 800f1fa:	eeb0 7a44 	vmov.f32	s14, s8
 800f1fe:	eea7 7a85 	vfma.f32	s14, s15, s10
 800f202:	eef0 7a46 	vmov.f32	s15, s12
 800f206:	edc3 3a01 	vstr	s7, [r3, #4]
 800f20a:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800f20e:	ed83 7a07 	vstr	s14, [r3, #28]
 800f212:	edc3 7a04 	vstr	s15, [r3, #16]
 800f216:	bd38      	pop	{r3, r4, r5, pc}
 800f218:	eef0 3ae7 	vabs.f32	s7, s15
 800f21c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 800f220:	eef4 3ac6 	vcmpe.f32	s7, s12
 800f224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f228:	ddb4      	ble.n	800f194 <getRotationMatrix+0x84>
 800f22a:	eec6 2a23 	vdiv.f32	s5, s12, s7
 800f22e:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 800f232:	eeb0 6a63 	vmov.f32	s12, s7
 800f236:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800f23a:	eea2 3a84 	vfma.f32	s6, s5, s8
 800f23e:	eeb0 4ac7 	vabs.f32	s8, s14
 800f242:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800f246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f24a:	d4b0      	bmi.n	800f1ae <getRotationMatrix+0x9e>
 800f24c:	ee87 4a06 	vdiv.f32	s8, s14, s12
 800f250:	eef0 3a43 	vmov.f32	s7, s6
 800f254:	eee4 3a04 	vfma.f32	s7, s8, s8
 800f258:	e7b3      	b.n	800f1c2 <getRotationMatrix+0xb2>
 800f25a:	bf00      	nop
 800f25c:	00000000 	.word	0x00000000

0800f260 <kf_update>:
 800f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f264:	ed2d 8b10 	vpush	{d8-d15}
 800f268:	f2ad 4d3c 	subw	sp, sp, #1084	@ 0x43c
 800f26c:	3901      	subs	r1, #1
 800f26e:	4683      	mov	fp, r0
 800f270:	ed9f 8a29 	vldr	s16, [pc, #164]	@ 800f318 <kf_update+0xb8>
 800f274:	f8dd 44a0 	ldr.w	r4, [sp, #1184]	@ 0x4a0
 800f278:	9303      	str	r3, [sp, #12]
 800f27a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800f27c:	ed94 2a00 	vldr	s4, [r4]
 800f280:	edd4 2a01 	vldr	s5, [r4, #4]
 800f284:	ed94 3a02 	vldr	s6, [r4, #8]
 800f288:	ee22 2a02 	vmul.f32	s4, s4, s4
 800f28c:	edd4 3a03 	vldr	s7, [r4, #12]
 800f290:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800f294:	ed94 4a04 	vldr	s8, [r4, #16]
 800f298:	ee23 3a03 	vmul.f32	s6, s6, s6
 800f29c:	edd4 4a05 	vldr	s9, [r4, #20]
 800f2a0:	ee63 3aa3 	vmul.f32	s7, s7, s7
 800f2a4:	ed94 5a06 	vldr	s10, [r4, #24]
 800f2a8:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f2ac:	edd4 5a07 	vldr	s11, [r4, #28]
 800f2b0:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f2b4:	ed94 6a08 	vldr	s12, [r4, #32]
 800f2b8:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f2bc:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 800f2c0:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f2c4:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800f2c8:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f2cc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800f2d0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f2d4:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f2d8:	9302      	str	r3, [sp, #8]
 800f2da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f2de:	2300      	movs	r3, #0
 800f2e0:	9104      	str	r1, [sp, #16]
 800f2e2:	9200      	str	r2, [sp, #0]
 800f2e4:	ed8d 2a0f 	vstr	s4, [sp, #60]	@ 0x3c
 800f2e8:	edcd 2a10 	vstr	s5, [sp, #64]	@ 0x40
 800f2ec:	ed8d 3a11 	vstr	s6, [sp, #68]	@ 0x44
 800f2f0:	edcd 3a12 	vstr	s7, [sp, #72]	@ 0x48
 800f2f4:	ed8d 4a13 	vstr	s8, [sp, #76]	@ 0x4c
 800f2f8:	edcd 4a14 	vstr	s9, [sp, #80]	@ 0x50
 800f2fc:	ed8d 5a15 	vstr	s10, [sp, #84]	@ 0x54
 800f300:	edcd 5a16 	vstr	s11, [sp, #88]	@ 0x58
 800f304:	ed8d 6a17 	vstr	s12, [sp, #92]	@ 0x5c
 800f308:	edcd 6a18 	vstr	s13, [sp, #96]	@ 0x60
 800f30c:	ed8d 7a19 	vstr	s14, [sp, #100]	@ 0x64
 800f310:	edcd 7a1a 	vstr	s15, [sp, #104]	@ 0x68
 800f314:	9301      	str	r3, [sp, #4]
 800f316:	e012      	b.n	800f33e <kf_update+0xde>
 800f318:	00000000 	.word	0x00000000
 800f31c:	9a00      	ldr	r2, [sp, #0]
 800f31e:	9b01      	ldr	r3, [sp, #4]
 800f320:	3204      	adds	r2, #4
 800f322:	3301      	adds	r3, #1
 800f324:	9200      	str	r2, [sp, #0]
 800f326:	9a02      	ldr	r2, [sp, #8]
 800f328:	2b0c      	cmp	r3, #12
 800f32a:	9301      	str	r3, [sp, #4]
 800f32c:	f102 0204 	add.w	r2, r2, #4
 800f330:	9202      	str	r2, [sp, #8]
 800f332:	9a03      	ldr	r2, [sp, #12]
 800f334:	f102 0204 	add.w	r2, r2, #4
 800f338:	9203      	str	r2, [sp, #12]
 800f33a:	f000 85dc 	beq.w	800fef6 <kf_update+0xc96>
 800f33e:	9a04      	ldr	r2, [sp, #16]
 800f340:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800f344:	9204      	str	r2, [sp, #16]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d0e8      	beq.n	800f31c <kf_update+0xbc>
 800f34a:	9b03      	ldr	r3, [sp, #12]
 800f34c:	ac1b      	add	r4, sp, #108	@ 0x6c
 800f34e:	f10b 0228 	add.w	r2, fp, #40	@ 0x28
 800f352:	a824      	add	r0, sp, #144	@ 0x90
 800f354:	edd3 da00 	vldr	s27, [r3]
 800f358:	4621      	mov	r1, r4
 800f35a:	edd3 6a3c 	vldr	s13, [r3, #240]	@ 0xf0
 800f35e:	46a4      	mov	ip, r4
 800f360:	eef5 da40 	vcmp.f32	s27, #0.0
 800f364:	ed93 6a48 	vldr	s12, [r3, #288]	@ 0x120
 800f368:	edd3 5a54 	vldr	s11, [r3, #336]	@ 0x150
 800f36c:	ed93 5a60 	vldr	s10, [r3, #384]	@ 0x180
 800f370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f374:	edd3 fa30 	vldr	s31, [r3, #192]	@ 0xc0
 800f378:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f37c:	ed93 ea0c 	vldr	s28, [r3, #48]	@ 0x30
 800f380:	edd3 ea18 	vldr	s29, [r3, #96]	@ 0x60
 800f384:	ed93 fa24 	vldr	s30, [r3, #144]	@ 0x90
 800f388:	bf14      	ite	ne
 800f38a:	2301      	movne	r3, #1
 800f38c:	2300      	moveq	r3, #0
 800f38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f392:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f396:	ed8d 8a1b 	vstr	s16, [sp, #108]	@ 0x6c
 800f39a:	9305      	str	r3, [sp, #20]
 800f39c:	bf14      	ite	ne
 800f39e:	2301      	movne	r3, #1
 800f3a0:	2300      	moveq	r3, #0
 800f3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a6:	ed8d 8a1c 	vstr	s16, [sp, #112]	@ 0x70
 800f3aa:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f3ae:	9306      	str	r3, [sp, #24]
 800f3b0:	ed8d 8a1d 	vstr	s16, [sp, #116]	@ 0x74
 800f3b4:	bf14      	ite	ne
 800f3b6:	2501      	movne	r5, #1
 800f3b8:	2500      	moveq	r5, #0
 800f3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3be:	ed8d 8a1e 	vstr	s16, [sp, #120]	@ 0x78
 800f3c2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f3c6:	ed8d 8a1f 	vstr	s16, [sp, #124]	@ 0x7c
 800f3ca:	ed8d 8a20 	vstr	s16, [sp, #128]	@ 0x80
 800f3ce:	bf14      	ite	ne
 800f3d0:	2601      	movne	r6, #1
 800f3d2:	2600      	moveq	r6, #0
 800f3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d8:	ed8d 8a21 	vstr	s16, [sp, #132]	@ 0x84
 800f3dc:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f3e0:	ed8d 8a22 	vstr	s16, [sp, #136]	@ 0x88
 800f3e4:	ed8d 8a23 	vstr	s16, [sp, #140]	@ 0x8c
 800f3e8:	bf14      	ite	ne
 800f3ea:	2701      	movne	r7, #1
 800f3ec:	2700      	moveq	r7, #0
 800f3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f2:	9207      	str	r2, [sp, #28]
 800f3f4:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f3f8:	bf14      	ite	ne
 800f3fa:	2301      	movne	r3, #1
 800f3fc:	2300      	moveq	r3, #0
 800f3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f402:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f406:	bf14      	ite	ne
 800f408:	f04f 0801 	movne.w	r8, #1
 800f40c:	f04f 0800 	moveq.w	r8, #0
 800f410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f414:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f418:	bf14      	ite	ne
 800f41a:	f04f 0901 	movne.w	r9, #1
 800f41e:	f04f 0900 	moveq.w	r9, #0
 800f422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f426:	bf14      	ite	ne
 800f428:	f04f 0a01 	movne.w	sl, #1
 800f42c:	f04f 0a00 	moveq.w	sl, #0
 800f430:	ecb2 7a01 	vldmia	r2!, {s14}
 800f434:	ecf1 7a01 	vldmia	r1!, {s15}
 800f438:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f440:	d003      	beq.n	800f44a <kf_update+0x1ea>
 800f442:	9c05      	ldr	r4, [sp, #20]
 800f444:	b10c      	cbz	r4, 800f44a <kf_update+0x1ea>
 800f446:	eee7 7a2d 	vfma.f32	s15, s14, s27
 800f44a:	ed92 7a08 	vldr	s14, [r2, #32]
 800f44e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f456:	d004      	beq.n	800f462 <kf_update+0x202>
 800f458:	f1b8 0f00 	cmp.w	r8, #0
 800f45c:	d001      	beq.n	800f462 <kf_update+0x202>
 800f45e:	eee7 7a0e 	vfma.f32	s15, s14, s28
 800f462:	ed92 7a11 	vldr	s14, [r2, #68]	@ 0x44
 800f466:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f46e:	d004      	beq.n	800f47a <kf_update+0x21a>
 800f470:	f1b9 0f00 	cmp.w	r9, #0
 800f474:	d001      	beq.n	800f47a <kf_update+0x21a>
 800f476:	eee7 7a2e 	vfma.f32	s15, s14, s29
 800f47a:	ed92 7a1a 	vldr	s14, [r2, #104]	@ 0x68
 800f47e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f486:	d004      	beq.n	800f492 <kf_update+0x232>
 800f488:	f1ba 0f00 	cmp.w	sl, #0
 800f48c:	d001      	beq.n	800f492 <kf_update+0x232>
 800f48e:	eee7 7a0f 	vfma.f32	s15, s14, s30
 800f492:	ed92 7a23 	vldr	s14, [r2, #140]	@ 0x8c
 800f496:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49e:	d002      	beq.n	800f4a6 <kf_update+0x246>
 800f4a0:	b10b      	cbz	r3, 800f4a6 <kf_update+0x246>
 800f4a2:	eee7 7a2f 	vfma.f32	s15, s14, s31
 800f4a6:	ed92 7a2c 	vldr	s14, [r2, #176]	@ 0xb0
 800f4aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b2:	d003      	beq.n	800f4bc <kf_update+0x25c>
 800f4b4:	9c06      	ldr	r4, [sp, #24]
 800f4b6:	b10c      	cbz	r4, 800f4bc <kf_update+0x25c>
 800f4b8:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f4bc:	ed92 7a35 	vldr	s14, [r2, #212]	@ 0xd4
 800f4c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c8:	d002      	beq.n	800f4d0 <kf_update+0x270>
 800f4ca:	b10d      	cbz	r5, 800f4d0 <kf_update+0x270>
 800f4cc:	eee7 7a06 	vfma.f32	s15, s14, s12
 800f4d0:	ed92 7a3e 	vldr	s14, [r2, #248]	@ 0xf8
 800f4d4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4dc:	d002      	beq.n	800f4e4 <kf_update+0x284>
 800f4de:	b10e      	cbz	r6, 800f4e4 <kf_update+0x284>
 800f4e0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f4e4:	ed92 7a47 	vldr	s14, [r2, #284]	@ 0x11c
 800f4e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f0:	d002      	beq.n	800f4f8 <kf_update+0x298>
 800f4f2:	2f00      	cmp	r7, #0
 800f4f4:	f040 8418 	bne.w	800fd28 <kf_update+0xac8>
 800f4f8:	4281      	cmp	r1, r0
 800f4fa:	ed41 7a01 	vstr	s15, [r1, #-4]
 800f4fe:	d197      	bne.n	800f430 <kf_update+0x1d0>
 800f500:	eef5 da40 	vcmp.f32	s27, #0.0
 800f504:	4664      	mov	r4, ip
 800f506:	eddd 9a1b 	vldr	s19, [sp, #108]	@ 0x6c
 800f50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50e:	f000 841b 	beq.w	800fd48 <kf_update+0xae8>
 800f512:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51a:	f000 84f9 	beq.w	800ff10 <kf_update+0xcb0>
 800f51e:	ee69 7aad 	vmul.f32	s15, s19, s27
 800f522:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f526:	ed9d da1c 	vldr	s26, [sp, #112]	@ 0x70
 800f52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52e:	d006      	beq.n	800f53e <kf_update+0x2de>
 800f530:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f538:	bf18      	it	ne
 800f53a:	eeed 7a0e 	vfmane.f32	s15, s26, s28
 800f53e:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f542:	eddd ca1d 	vldr	s25, [sp, #116]	@ 0x74
 800f546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54a:	d006      	beq.n	800f55a <kf_update+0x2fa>
 800f54c:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f554:	bf18      	it	ne
 800f556:	eeec 7aae 	vfmane.f32	s15, s25, s29
 800f55a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f55e:	ed9d ca1e 	vldr	s24, [sp, #120]	@ 0x78
 800f562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f566:	d006      	beq.n	800f576 <kf_update+0x316>
 800f568:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f570:	bf18      	it	ne
 800f572:	eeec 7a0f 	vfmane.f32	s15, s24, s30
 800f576:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f57a:	eddd ba1f 	vldr	s23, [sp, #124]	@ 0x7c
 800f57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f582:	d006      	beq.n	800f592 <kf_update+0x332>
 800f584:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58c:	bf18      	it	ne
 800f58e:	eeeb 7aaf 	vfmane.f32	s15, s23, s31
 800f592:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f596:	ed9d ba20 	vldr	s22, [sp, #128]	@ 0x80
 800f59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59e:	d006      	beq.n	800f5ae <kf_update+0x34e>
 800f5a0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a8:	bf18      	it	ne
 800f5aa:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 800f5ae:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f5b2:	eddd aa21 	vldr	s21, [sp, #132]	@ 0x84
 800f5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ba:	d006      	beq.n	800f5ca <kf_update+0x36a>
 800f5bc:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5c4:	bf18      	it	ne
 800f5c6:	eeea 7a86 	vfmane.f32	s15, s21, s12
 800f5ca:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f5ce:	ed9d aa22 	vldr	s20, [sp, #136]	@ 0x88
 800f5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d6:	d006      	beq.n	800f5e6 <kf_update+0x386>
 800f5d8:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5e0:	bf18      	it	ne
 800f5e2:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800f5e6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f5ea:	ed9d 7a23 	vldr	s14, [sp, #140]	@ 0x8c
 800f5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f2:	d006      	beq.n	800f602 <kf_update+0x3a2>
 800f5f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fc:	bf18      	it	ne
 800f5fe:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f602:	9a02      	ldr	r2, [sp, #8]
 800f604:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 800f608:	ed92 4a00 	vldr	s8, [r2]
 800f60c:	9a01      	ldr	r2, [sp, #4]
 800f60e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f612:	2a05      	cmp	r2, #5
 800f614:	ee84 9aa7 	vdiv.f32	s18, s9, s15
 800f618:	ee69 9a29 	vmul.f32	s19, s18, s19
 800f61c:	ee29 da0d 	vmul.f32	s26, s18, s26
 800f620:	ee69 ca2c 	vmul.f32	s25, s18, s25
 800f624:	ee29 ca0c 	vmul.f32	s24, s18, s24
 800f628:	edcd 9a1b 	vstr	s19, [sp, #108]	@ 0x6c
 800f62c:	ee69 ba2b 	vmul.f32	s23, s18, s23
 800f630:	ed8d da1c 	vstr	s26, [sp, #112]	@ 0x70
 800f634:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800f638:	edcd ca1d 	vstr	s25, [sp, #116]	@ 0x74
 800f63c:	ee69 aa2a 	vmul.f32	s21, s18, s21
 800f640:	ed8d ca1e 	vstr	s24, [sp, #120]	@ 0x78
 800f644:	ee29 aa0a 	vmul.f32	s20, s18, s20
 800f648:	edcd ba1f 	vstr	s23, [sp, #124]	@ 0x7c
 800f64c:	ee29 9a07 	vmul.f32	s18, s18, s14
 800f650:	ed8d ba20 	vstr	s22, [sp, #128]	@ 0x80
 800f654:	edcd aa21 	vstr	s21, [sp, #132]	@ 0x84
 800f658:	ed8d aa22 	vstr	s20, [sp, #136]	@ 0x88
 800f65c:	ed8d 9a23 	vstr	s18, [sp, #140]	@ 0x8c
 800f660:	f340 8445 	ble.w	800feee <kf_update+0xc8e>
 800f664:	eef5 da40 	vcmp.f32	s27, #0.0
 800f668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f66c:	f000 844c 	beq.w	800ff08 <kf_update+0xca8>
 800f670:	eddb 7a01 	vldr	s15, [fp, #4]
 800f674:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67c:	f040 8464 	bne.w	800ff48 <kf_update+0xce8>
 800f680:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f688:	d008      	beq.n	800f69c <kf_update+0x43c>
 800f68a:	ed9b 7a02 	vldr	s14, [fp, #8]
 800f68e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f696:	bf18      	it	ne
 800f698:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f69c:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a4:	d008      	beq.n	800f6b8 <kf_update+0x458>
 800f6a6:	ed9b 7a03 	vldr	s14, [fp, #12]
 800f6aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b2:	bf18      	it	ne
 800f6b4:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f6b8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c0:	d008      	beq.n	800f6d4 <kf_update+0x474>
 800f6c2:	ed9b 7a04 	vldr	s14, [fp, #16]
 800f6c6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ce:	bf18      	it	ne
 800f6d0:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f6d4:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6dc:	d008      	beq.n	800f6f0 <kf_update+0x490>
 800f6de:	ed9b 7a05 	vldr	s14, [fp, #20]
 800f6e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ea:	bf18      	it	ne
 800f6ec:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f6f0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f8:	d008      	beq.n	800f70c <kf_update+0x4ac>
 800f6fa:	ed9b 7a06 	vldr	s14, [fp, #24]
 800f6fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f706:	bf18      	it	ne
 800f708:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f70c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f714:	d008      	beq.n	800f728 <kf_update+0x4c8>
 800f716:	ed9b 7a07 	vldr	s14, [fp, #28]
 800f71a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f722:	bf18      	it	ne
 800f724:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f728:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f730:	d008      	beq.n	800f744 <kf_update+0x4e4>
 800f732:	ed9b 7a08 	vldr	s14, [fp, #32]
 800f736:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f73e:	bf18      	it	ne
 800f740:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f744:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74c:	d008      	beq.n	800f760 <kf_update+0x500>
 800f74e:	ed9b 7a09 	vldr	s14, [fp, #36]	@ 0x24
 800f752:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75a:	bf18      	it	ne
 800f75c:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f760:	9a00      	ldr	r2, [sp, #0]
 800f762:	edd2 8a00 	vldr	s17, [r2]
 800f766:	ee78 8ae7 	vsub.f32	s17, s17, s15
 800f76a:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800f76e:	2100      	movs	r1, #0
 800f770:	a86c      	add	r0, sp, #432	@ 0x1b0
 800f772:	ed8d 5a0d 	vstr	s10, [sp, #52]	@ 0x34
 800f776:	edcd 5a0c 	vstr	s11, [sp, #48]	@ 0x30
 800f77a:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800f77e:	edcd 6a0a 	vstr	s13, [sp, #40]	@ 0x28
 800f782:	9309      	str	r3, [sp, #36]	@ 0x24
 800f784:	f009 f81d 	bl	80187c2 <memset>
 800f788:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800f78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f78c:	f50d 7cea 	add.w	ip, sp, #468	@ 0x1d4
 800f790:	9805      	ldr	r0, [sp, #20]
 800f792:	469e      	mov	lr, r3
 800f794:	4611      	mov	r1, r2
 800f796:	9b06      	ldr	r3, [sp, #24]
 800f798:	ed9d 5a0d 	vldr	s10, [sp, #52]	@ 0x34
 800f79c:	eddd 5a0c 	vldr	s11, [sp, #48]	@ 0x30
 800f7a0:	ed9d 6a0b 	vldr	s12, [sp, #44]	@ 0x2c
 800f7a4:	eddd 6a0a 	vldr	s13, [sp, #40]	@ 0x28
 800f7a8:	9208      	str	r2, [sp, #32]
 800f7aa:	ecf4 7a01 	vldmia	r4!, {s15}
 800f7ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b6:	bf14      	ite	ne
 800f7b8:	2201      	movne	r2, #1
 800f7ba:	2200      	moveq	r2, #0
 800f7bc:	b110      	cbz	r0, 800f7c4 <kf_update+0x564>
 800f7be:	2a00      	cmp	r2, #0
 800f7c0:	f040 8237 	bne.w	800fc32 <kf_update+0x9d2>
 800f7c4:	f1b8 0f00 	cmp.w	r8, #0
 800f7c8:	d002      	beq.n	800f7d0 <kf_update+0x570>
 800f7ca:	2a00      	cmp	r2, #0
 800f7cc:	f040 8238 	bne.w	800fc40 <kf_update+0x9e0>
 800f7d0:	f1b9 0f00 	cmp.w	r9, #0
 800f7d4:	d002      	beq.n	800f7dc <kf_update+0x57c>
 800f7d6:	2a00      	cmp	r2, #0
 800f7d8:	f040 820f 	bne.w	800fbfa <kf_update+0x99a>
 800f7dc:	f1ba 0f00 	cmp.w	sl, #0
 800f7e0:	d002      	beq.n	800f7e8 <kf_update+0x588>
 800f7e2:	2a00      	cmp	r2, #0
 800f7e4:	f040 8210 	bne.w	800fc08 <kf_update+0x9a8>
 800f7e8:	f1be 0f00 	cmp.w	lr, #0
 800f7ec:	d002      	beq.n	800f7f4 <kf_update+0x594>
 800f7ee:	2a00      	cmp	r2, #0
 800f7f0:	f040 8211 	bne.w	800fc16 <kf_update+0x9b6>
 800f7f4:	b113      	cbz	r3, 800f7fc <kf_update+0x59c>
 800f7f6:	2a00      	cmp	r2, #0
 800f7f8:	f040 8214 	bne.w	800fc24 <kf_update+0x9c4>
 800f7fc:	b115      	cbz	r5, 800f804 <kf_update+0x5a4>
 800f7fe:	2a00      	cmp	r2, #0
 800f800:	f040 81ed 	bne.w	800fbde <kf_update+0x97e>
 800f804:	b116      	cbz	r6, 800f80c <kf_update+0x5ac>
 800f806:	2a00      	cmp	r2, #0
 800f808:	f040 81f0 	bne.w	800fbec <kf_update+0x98c>
 800f80c:	b137      	cbz	r7, 800f81c <kf_update+0x5bc>
 800f80e:	b12a      	cbz	r2, 800f81c <kf_update+0x5bc>
 800f810:	ed91 7a48 	vldr	s14, [r1, #288]	@ 0x120
 800f814:	eea7 7a85 	vfma.f32	s14, s15, s10
 800f818:	ed81 7a48 	vstr	s14, [r1, #288]	@ 0x120
 800f81c:	3104      	adds	r1, #4
 800f81e:	458c      	cmp	ip, r1
 800f820:	d1c3      	bne.n	800f7aa <kf_update+0x54a>
 800f822:	acbd      	add	r4, sp, #756	@ 0x2f4
 800f824:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f828:	9a08      	ldr	r2, [sp, #32]
 800f82a:	a96c      	add	r1, sp, #432	@ 0x1b0
 800f82c:	f04f 0a06 	mov.w	sl, #6
 800f830:	4623      	mov	r3, r4
 800f832:	f04f 0903 	mov.w	r9, #3
 800f836:	f04f 0802 	mov.w	r8, #2
 800f83a:	f04f 0e04 	mov.w	lr, #4
 800f83e:	f04f 0c05 	mov.w	ip, #5
 800f842:	2707      	movs	r7, #7
 800f844:	2508      	movs	r5, #8
 800f846:	2000      	movs	r0, #0
 800f848:	9205      	str	r2, [sp, #20]
 800f84a:	ed83 8a00 	vstr	s16, [r3]
 800f84e:	2800      	cmp	r0, #0
 800f850:	f000 81fd 	beq.w	800fc4e <kf_update+0x9ee>
 800f854:	edd1 7a00 	vldr	s15, [r1]
 800f858:	2801      	cmp	r0, #1
 800f85a:	ed83 8a01 	vstr	s16, [r3, #4]
 800f85e:	eef1 7a67 	vneg.f32	s15, s15
 800f862:	edc1 7a00 	vstr	s15, [r1]
 800f866:	f000 82ca 	beq.w	800fdfe <kf_update+0xb9e>
 800f86a:	edd1 7a01 	vldr	s15, [r1, #4]
 800f86e:	2802      	cmp	r0, #2
 800f870:	ed83 8a02 	vstr	s16, [r3, #8]
 800f874:	eef1 7a67 	vneg.f32	s15, s15
 800f878:	edc1 7a01 	vstr	s15, [r1, #4]
 800f87c:	f000 8268 	beq.w	800fd50 <kf_update+0xaf0>
 800f880:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800f882:	2803      	cmp	r0, #3
 800f884:	ed83 8a03 	vstr	s16, [r3, #12]
 800f888:	eb02 0688 	add.w	r6, r2, r8, lsl #2
 800f88c:	edd6 7a00 	vldr	s15, [r6]
 800f890:	eef1 7a67 	vneg.f32	s15, s15
 800f894:	edc6 7a00 	vstr	s15, [r6]
 800f898:	f040 82f5 	bne.w	800fe86 <kf_update+0xc26>
 800f89c:	edd1 7a03 	vldr	s15, [r1, #12]
 800f8a0:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800f8a2:	ed8d 8adc 	vstr	s16, [sp, #880]	@ 0x370
 800f8a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8aa:	eb02 068c 	add.w	r6, r2, ip, lsl #2
 800f8ae:	ed83 8a05 	vstr	s16, [r3, #20]
 800f8b2:	ed83 8a06 	vstr	s16, [r3, #24]
 800f8b6:	edc1 7a03 	vstr	s15, [r1, #12]
 800f8ba:	eddd 7a8b 	vldr	s15, [sp, #556]	@ 0x22c
 800f8be:	ed83 8a07 	vstr	s16, [r3, #28]
 800f8c2:	eef1 7a67 	vneg.f32	s15, s15
 800f8c6:	edcd 7a8b 	vstr	s15, [sp, #556]	@ 0x22c
 800f8ca:	edd6 7a00 	vldr	s15, [r6]
 800f8ce:	eef1 7a67 	vneg.f32	s15, s15
 800f8d2:	edc6 7a00 	vstr	s15, [r6]
 800f8d6:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 800f8da:	edd6 7a00 	vldr	s15, [r6]
 800f8de:	eef1 7a67 	vneg.f32	s15, s15
 800f8e2:	edc6 7a00 	vstr	s15, [r6]
 800f8e6:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800f8e8:	2808      	cmp	r0, #8
 800f8ea:	ed83 8a08 	vstr	s16, [r3, #32]
 800f8ee:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800f8f2:	edd6 7a00 	vldr	s15, [r6]
 800f8f6:	eef1 7a67 	vneg.f32	s15, s15
 800f8fa:	edc6 7a00 	vstr	s15, [r6]
 800f8fe:	f040 81f4 	bne.w	800fcea <kf_update+0xa8a>
 800f902:	ab6c      	add	r3, sp, #432	@ 0x1b0
 800f904:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f908:	9a05      	ldr	r2, [sp, #20]
 800f90a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f90e:	ed93 7a00 	vldr	s14, [r3]
 800f912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f916:	edc3 7a00 	vstr	s15, [r3]
 800f91a:	2500      	movs	r5, #0
 800f91c:	f50b 70a2 	add.w	r0, fp, #324	@ 0x144
 800f920:	ecf2 3a01 	vldmia	r2!, {s7}
 800f924:	465b      	mov	r3, fp
 800f926:	4621      	mov	r1, r4
 800f928:	ed92 4a08 	vldr	s8, [r2, #32]
 800f92c:	edd2 4a11 	vldr	s9, [r2, #68]	@ 0x44
 800f930:	ed92 5a1a 	vldr	s10, [r2, #104]	@ 0x68
 800f934:	edd2 5a23 	vldr	s11, [r2, #140]	@ 0x8c
 800f938:	ed92 6a2c 	vldr	s12, [r2, #176]	@ 0xb0
 800f93c:	edd2 6a35 	vldr	s13, [r2, #212]	@ 0xd4
 800f940:	ed92 7a3e 	vldr	s14, [r2, #248]	@ 0xf8
 800f944:	edd2 7a47 	vldr	s15, [r2, #284]	@ 0x11c
 800f948:	eef5 3a40 	vcmp.f32	s7, #0.0
 800f94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f950:	d00c      	beq.n	800f96c <kf_update+0x70c>
 800f952:	ed93 3a0a 	vldr	s6, [r3, #40]	@ 0x28
 800f956:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f95e:	d005      	beq.n	800f96c <kf_update+0x70c>
 800f960:	edd1 2a00 	vldr	s5, [r1]
 800f964:	eee3 2a83 	vfma.f32	s5, s7, s6
 800f968:	edc1 2a00 	vstr	s5, [r1]
 800f96c:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800f970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f974:	d00c      	beq.n	800f990 <kf_update+0x730>
 800f976:	ed93 3a0b 	vldr	s6, [r3, #44]	@ 0x2c
 800f97a:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f982:	d005      	beq.n	800f990 <kf_update+0x730>
 800f984:	edd1 2a00 	vldr	s5, [r1]
 800f988:	eee4 2a03 	vfma.f32	s5, s8, s6
 800f98c:	edc1 2a00 	vstr	s5, [r1]
 800f990:	eef5 4a40 	vcmp.f32	s9, #0.0
 800f994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f998:	d00c      	beq.n	800f9b4 <kf_update+0x754>
 800f99a:	ed93 3a0c 	vldr	s6, [r3, #48]	@ 0x30
 800f99e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a6:	d005      	beq.n	800f9b4 <kf_update+0x754>
 800f9a8:	edd1 2a00 	vldr	s5, [r1]
 800f9ac:	eee4 2a83 	vfma.f32	s5, s9, s6
 800f9b0:	edc1 2a00 	vstr	s5, [r1]
 800f9b4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9bc:	d00c      	beq.n	800f9d8 <kf_update+0x778>
 800f9be:	ed93 3a0d 	vldr	s6, [r3, #52]	@ 0x34
 800f9c2:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ca:	d005      	beq.n	800f9d8 <kf_update+0x778>
 800f9cc:	edd1 2a00 	vldr	s5, [r1]
 800f9d0:	eee5 2a03 	vfma.f32	s5, s10, s6
 800f9d4:	edc1 2a00 	vstr	s5, [r1]
 800f9d8:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e0:	d00c      	beq.n	800f9fc <kf_update+0x79c>
 800f9e2:	ed93 3a0e 	vldr	s6, [r3, #56]	@ 0x38
 800f9e6:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ee:	d005      	beq.n	800f9fc <kf_update+0x79c>
 800f9f0:	edd1 2a00 	vldr	s5, [r1]
 800f9f4:	eee5 2a83 	vfma.f32	s5, s11, s6
 800f9f8:	edc1 2a00 	vstr	s5, [r1]
 800f9fc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa04:	d00c      	beq.n	800fa20 <kf_update+0x7c0>
 800fa06:	ed93 3a0f 	vldr	s6, [r3, #60]	@ 0x3c
 800fa0a:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa12:	d005      	beq.n	800fa20 <kf_update+0x7c0>
 800fa14:	edd1 2a00 	vldr	s5, [r1]
 800fa18:	eee6 2a03 	vfma.f32	s5, s12, s6
 800fa1c:	edc1 2a00 	vstr	s5, [r1]
 800fa20:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa28:	d00c      	beq.n	800fa44 <kf_update+0x7e4>
 800fa2a:	ed93 3a10 	vldr	s6, [r3, #64]	@ 0x40
 800fa2e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa36:	d005      	beq.n	800fa44 <kf_update+0x7e4>
 800fa38:	edd1 2a00 	vldr	s5, [r1]
 800fa3c:	eee6 2a83 	vfma.f32	s5, s13, s6
 800fa40:	edc1 2a00 	vstr	s5, [r1]
 800fa44:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4c:	d00c      	beq.n	800fa68 <kf_update+0x808>
 800fa4e:	ed93 3a11 	vldr	s6, [r3, #68]	@ 0x44
 800fa52:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5a:	d005      	beq.n	800fa68 <kf_update+0x808>
 800fa5c:	edd1 2a00 	vldr	s5, [r1]
 800fa60:	eee7 2a03 	vfma.f32	s5, s14, s6
 800fa64:	edc1 2a00 	vstr	s5, [r1]
 800fa68:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa70:	d00c      	beq.n	800fa8c <kf_update+0x82c>
 800fa72:	ed93 3a12 	vldr	s6, [r3, #72]	@ 0x48
 800fa76:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7e:	d005      	beq.n	800fa8c <kf_update+0x82c>
 800fa80:	edd1 2a00 	vldr	s5, [r1]
 800fa84:	eee7 2a83 	vfma.f32	s5, s15, s6
 800fa88:	edc1 2a00 	vstr	s5, [r1]
 800fa8c:	3324      	adds	r3, #36	@ 0x24
 800fa8e:	3124      	adds	r1, #36	@ 0x24
 800fa90:	4283      	cmp	r3, r0
 800fa92:	f47f af59 	bne.w	800f948 <kf_update+0x6e8>
 800fa96:	3501      	adds	r5, #1
 800fa98:	3404      	adds	r4, #4
 800fa9a:	2d09      	cmp	r5, #9
 800fa9c:	f47f af40 	bne.w	800f920 <kf_update+0x6c0>
 800faa0:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800faa4:	a9bd      	add	r1, sp, #756	@ 0x2f4
 800faa6:	9807      	ldr	r0, [sp, #28]
 800faa8:	f008 ff0b 	bl	80188c2 <memcpy>
 800faac:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab4:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fab8:	bf14      	ite	ne
 800faba:	2301      	movne	r3, #1
 800fabc:	2300      	moveq	r3, #0
 800fabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac2:	d002      	beq.n	800faca <kf_update+0x86a>
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f040 821c 	bne.w	800ff02 <kf_update+0xca2>
 800faca:	eef0 9a48 	vmov.f32	s19, s16
 800face:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad6:	d002      	beq.n	800fade <kf_update+0x87e>
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f040 8229 	bne.w	800ff30 <kf_update+0xcd0>
 800fade:	eeb0 da48 	vmov.f32	s26, s16
 800fae2:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faea:	d002      	beq.n	800faf2 <kf_update+0x892>
 800faec:	2b00      	cmp	r3, #0
 800faee:	f040 8222 	bne.w	800ff36 <kf_update+0xcd6>
 800faf2:	eef0 ca48 	vmov.f32	s25, s16
 800faf6:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fafe:	d002      	beq.n	800fb06 <kf_update+0x8a6>
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f040 821b 	bne.w	800ff3c <kf_update+0xcdc>
 800fb06:	eeb0 ca48 	vmov.f32	s24, s16
 800fb0a:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb12:	d002      	beq.n	800fb1a <kf_update+0x8ba>
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f040 8214 	bne.w	800ff42 <kf_update+0xce2>
 800fb1a:	eef0 ba48 	vmov.f32	s23, s16
 800fb1e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb26:	d002      	beq.n	800fb2e <kf_update+0x8ce>
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	f040 81f5 	bne.w	800ff18 <kf_update+0xcb8>
 800fb2e:	eeb0 ba48 	vmov.f32	s22, s16
 800fb32:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb3a:	d002      	beq.n	800fb42 <kf_update+0x8e2>
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	f040 81ee 	bne.w	800ff1e <kf_update+0xcbe>
 800fb42:	eef0 aa48 	vmov.f32	s21, s16
 800fb46:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4e:	d002      	beq.n	800fb56 <kf_update+0x8f6>
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f040 81e7 	bne.w	800ff24 <kf_update+0xcc4>
 800fb56:	eeb0 aa48 	vmov.f32	s20, s16
 800fb5a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb62:	d002      	beq.n	800fb6a <kf_update+0x90a>
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	f040 81e0 	bne.w	800ff2a <kf_update+0xcca>
 800fb6a:	eef0 8a48 	vmov.f32	s17, s16
 800fb6e:	eddb 3a01 	vldr	s7, [fp, #4]
 800fb72:	ed9b 4a02 	vldr	s8, [fp, #8]
 800fb76:	eddb 4a03 	vldr	s9, [fp, #12]
 800fb7a:	ee73 3aa9 	vadd.f32	s7, s7, s19
 800fb7e:	ed9b 5a04 	vldr	s10, [fp, #16]
 800fb82:	ee34 4a0d 	vadd.f32	s8, s8, s26
 800fb86:	eddb 5a05 	vldr	s11, [fp, #20]
 800fb8a:	ee74 4aac 	vadd.f32	s9, s9, s25
 800fb8e:	ed9b 6a06 	vldr	s12, [fp, #24]
 800fb92:	ee35 5a0c 	vadd.f32	s10, s10, s24
 800fb96:	eddb 6a07 	vldr	s13, [fp, #28]
 800fb9a:	ee75 5aab 	vadd.f32	s11, s11, s23
 800fb9e:	ed9b 7a08 	vldr	s14, [fp, #32]
 800fba2:	ee36 6a0b 	vadd.f32	s12, s12, s22
 800fba6:	eddb 7a09 	vldr	s15, [fp, #36]	@ 0x24
 800fbaa:	ee76 6aaa 	vadd.f32	s13, s13, s21
 800fbae:	ee37 7a0a 	vadd.f32	s14, s14, s20
 800fbb2:	edcb 3a01 	vstr	s7, [fp, #4]
 800fbb6:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800fbba:	ed8b 4a02 	vstr	s8, [fp, #8]
 800fbbe:	edcb 4a03 	vstr	s9, [fp, #12]
 800fbc2:	ed8b 5a04 	vstr	s10, [fp, #16]
 800fbc6:	edcb 5a05 	vstr	s11, [fp, #20]
 800fbca:	ed8b 6a06 	vstr	s12, [fp, #24]
 800fbce:	edcb 6a07 	vstr	s13, [fp, #28]
 800fbd2:	ed8b 7a08 	vstr	s14, [fp, #32]
 800fbd6:	edcb 7a09 	vstr	s15, [fp, #36]	@ 0x24
 800fbda:	f7ff bb9f 	b.w	800f31c <kf_update+0xbc>
 800fbde:	ed91 7a36 	vldr	s14, [r1, #216]	@ 0xd8
 800fbe2:	eea7 7a86 	vfma.f32	s14, s15, s12
 800fbe6:	ed81 7a36 	vstr	s14, [r1, #216]	@ 0xd8
 800fbea:	e60b      	b.n	800f804 <kf_update+0x5a4>
 800fbec:	ed91 7a3f 	vldr	s14, [r1, #252]	@ 0xfc
 800fbf0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800fbf4:	ed81 7a3f 	vstr	s14, [r1, #252]	@ 0xfc
 800fbf8:	e608      	b.n	800f80c <kf_update+0x5ac>
 800fbfa:	ed91 7a12 	vldr	s14, [r1, #72]	@ 0x48
 800fbfe:	eea7 7aae 	vfma.f32	s14, s15, s29
 800fc02:	ed81 7a12 	vstr	s14, [r1, #72]	@ 0x48
 800fc06:	e5e9      	b.n	800f7dc <kf_update+0x57c>
 800fc08:	ed91 7a1b 	vldr	s14, [r1, #108]	@ 0x6c
 800fc0c:	eea7 7a8f 	vfma.f32	s14, s15, s30
 800fc10:	ed81 7a1b 	vstr	s14, [r1, #108]	@ 0x6c
 800fc14:	e5e8      	b.n	800f7e8 <kf_update+0x588>
 800fc16:	ed91 7a24 	vldr	s14, [r1, #144]	@ 0x90
 800fc1a:	eea7 7aaf 	vfma.f32	s14, s15, s31
 800fc1e:	ed81 7a24 	vstr	s14, [r1, #144]	@ 0x90
 800fc22:	e5e7      	b.n	800f7f4 <kf_update+0x594>
 800fc24:	ed91 7a2d 	vldr	s14, [r1, #180]	@ 0xb4
 800fc28:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fc2c:	ed81 7a2d 	vstr	s14, [r1, #180]	@ 0xb4
 800fc30:	e5e4      	b.n	800f7fc <kf_update+0x59c>
 800fc32:	ed91 7a00 	vldr	s14, [r1]
 800fc36:	eea7 7aad 	vfma.f32	s14, s15, s27
 800fc3a:	ed81 7a00 	vstr	s14, [r1]
 800fc3e:	e5c1      	b.n	800f7c4 <kf_update+0x564>
 800fc40:	ed91 7a09 	vldr	s14, [r1, #36]	@ 0x24
 800fc44:	eea7 7a8e 	vfma.f32	s14, s15, s28
 800fc48:	ed81 7a09 	vstr	s14, [r1, #36]	@ 0x24
 800fc4c:	e5c0      	b.n	800f7d0 <kf_update+0x570>
 800fc4e:	eddd 7a6d 	vldr	s15, [sp, #436]	@ 0x1b4
 800fc52:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fc54:	eddd 6a6c 	vldr	s13, [sp, #432]	@ 0x1b0
 800fc58:	eef1 7a67 	vneg.f32	s15, s15
 800fc5c:	eb02 0688 	add.w	r6, r2, r8, lsl #2
 800fc60:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fc64:	ed8d 8abe 	vstr	s16, [sp, #760]	@ 0x2f8
 800fc68:	ed83 8a02 	vstr	s16, [r3, #8]
 800fc6c:	edcd 7a6d 	vstr	s15, [sp, #436]	@ 0x1b4
 800fc70:	edd6 7a00 	vldr	s15, [r6]
 800fc74:	ed83 8a03 	vstr	s16, [r3, #12]
 800fc78:	eef1 7a67 	vneg.f32	s15, s15
 800fc7c:	ed83 8a04 	vstr	s16, [r3, #16]
 800fc80:	edcd 6a6c 	vstr	s13, [sp, #432]	@ 0x1b0
 800fc84:	edc6 7a00 	vstr	s15, [r6]
 800fc88:	eb02 0689 	add.w	r6, r2, r9, lsl #2
 800fc8c:	edd6 7a00 	vldr	s15, [r6]
 800fc90:	eef1 7a67 	vneg.f32	s15, s15
 800fc94:	edc6 7a00 	vstr	s15, [r6]
 800fc98:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fc9a:	2805      	cmp	r0, #5
 800fc9c:	ed83 8a05 	vstr	s16, [r3, #20]
 800fca0:	eb02 068e 	add.w	r6, r2, lr, lsl #2
 800fca4:	edd6 7a00 	vldr	s15, [r6]
 800fca8:	eef1 7a67 	vneg.f32	s15, s15
 800fcac:	edc6 7a00 	vstr	s15, [r6]
 800fcb0:	f040 80ca 	bne.w	800fe48 <kf_update+0xbe8>
 800fcb4:	edd1 7a05 	vldr	s15, [r1, #20]
 800fcb8:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fcba:	ed8d 8af0 	vstr	s16, [sp, #960]	@ 0x3c0
 800fcbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcc2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800fcc6:	ed83 8a07 	vstr	s16, [r3, #28]
 800fcca:	ed83 8a08 	vstr	s16, [r3, #32]
 800fcce:	edc1 7a05 	vstr	s15, [r1, #20]
 800fcd2:	eddd 7a9f 	vldr	s15, [sp, #636]	@ 0x27c
 800fcd6:	eef1 7a67 	vneg.f32	s15, s15
 800fcda:	edcd 7a9f 	vstr	s15, [sp, #636]	@ 0x27c
 800fcde:	edd6 7a00 	vldr	s15, [r6]
 800fce2:	eef1 7a67 	vneg.f32	s15, s15
 800fce6:	edc6 7a00 	vstr	s15, [r6]
 800fcea:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fcec:	3001      	adds	r0, #1
 800fcee:	3324      	adds	r3, #36	@ 0x24
 800fcf0:	3709      	adds	r7, #9
 800fcf2:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 800fcf6:	2809      	cmp	r0, #9
 800fcf8:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 800fcfc:	f10c 0c09 	add.w	ip, ip, #9
 800fd00:	edd6 7a00 	vldr	s15, [r6]
 800fd04:	f10e 0e09 	add.w	lr, lr, #9
 800fd08:	f108 0809 	add.w	r8, r8, #9
 800fd0c:	f109 0909 	add.w	r9, r9, #9
 800fd10:	eef1 7a67 	vneg.f32	s15, s15
 800fd14:	f10a 0a09 	add.w	sl, sl, #9
 800fd18:	f105 0509 	add.w	r5, r5, #9
 800fd1c:	edc6 7a00 	vstr	s15, [r6]
 800fd20:	f47f ad93 	bne.w	800f84a <kf_update+0x5ea>
 800fd24:	9a05      	ldr	r2, [sp, #20]
 800fd26:	e5f8      	b.n	800f91a <kf_update+0x6ba>
 800fd28:	eee7 7a05 	vfma.f32	s15, s14, s10
 800fd2c:	4281      	cmp	r1, r0
 800fd2e:	ed41 7a01 	vstr	s15, [r1, #-4]
 800fd32:	f47f ab7d 	bne.w	800f430 <kf_update+0x1d0>
 800fd36:	eef5 da40 	vcmp.f32	s27, #0.0
 800fd3a:	4664      	mov	r4, ip
 800fd3c:	eddd 9a1b 	vldr	s19, [sp, #108]	@ 0x6c
 800fd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd44:	f47f abe5 	bne.w	800f512 <kf_update+0x2b2>
 800fd48:	eef0 7a6d 	vmov.f32	s15, s27
 800fd4c:	f7ff bbe9 	b.w	800f522 <kf_update+0x2c2>
 800fd50:	edd1 7a02 	vldr	s15, [r1, #8]
 800fd54:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fd56:	ed8d 8ad2 	vstr	s16, [sp, #840]	@ 0x348
 800fd5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd5e:	eb02 068e 	add.w	r6, r2, lr, lsl #2
 800fd62:	ed83 8a04 	vstr	s16, [r3, #16]
 800fd66:	ed83 8a05 	vstr	s16, [r3, #20]
 800fd6a:	edc1 7a02 	vstr	s15, [r1, #8]
 800fd6e:	eddd 7a81 	vldr	s15, [sp, #516]	@ 0x204
 800fd72:	ed83 8a06 	vstr	s16, [r3, #24]
 800fd76:	eef1 7a67 	vneg.f32	s15, s15
 800fd7a:	edcd 7a81 	vstr	s15, [sp, #516]	@ 0x204
 800fd7e:	edd6 7a00 	vldr	s15, [r6]
 800fd82:	eef1 7a67 	vneg.f32	s15, s15
 800fd86:	edc6 7a00 	vstr	s15, [r6]
 800fd8a:	eb02 068c 	add.w	r6, r2, ip, lsl #2
 800fd8e:	edd6 7a00 	vldr	s15, [r6]
 800fd92:	eef1 7a67 	vneg.f32	s15, s15
 800fd96:	edc6 7a00 	vstr	s15, [r6]
 800fd9a:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fd9c:	2807      	cmp	r0, #7
 800fd9e:	ed83 8a07 	vstr	s16, [r3, #28]
 800fda2:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 800fda6:	edd6 7a00 	vldr	s15, [r6]
 800fdaa:	eef1 7a67 	vneg.f32	s15, s15
 800fdae:	edc6 7a00 	vstr	s15, [r6]
 800fdb2:	f47f ad98 	bne.w	800f8e6 <kf_update+0x686>
 800fdb6:	edd1 7a07 	vldr	s15, [r1, #28]
 800fdba:	f50d 6282 	add.w	r2, sp, #1040	@ 0x410
 800fdbe:	2647      	movs	r6, #71	@ 0x47
 800fdc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fdc4:	ed82 8a00 	vstr	s16, [r2]
 800fdc8:	edc1 7a07 	vstr	s15, [r1, #28]
 800fdcc:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fdce:	3001      	adds	r0, #1
 800fdd0:	3324      	adds	r3, #36	@ 0x24
 800fdd2:	3509      	adds	r5, #9
 800fdd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fdd8:	3709      	adds	r7, #9
 800fdda:	3124      	adds	r1, #36	@ 0x24
 800fddc:	f10c 0c09 	add.w	ip, ip, #9
 800fde0:	edd6 7a00 	vldr	s15, [r6]
 800fde4:	f10e 0e09 	add.w	lr, lr, #9
 800fde8:	f108 0809 	add.w	r8, r8, #9
 800fdec:	f109 0909 	add.w	r9, r9, #9
 800fdf0:	eef1 7a67 	vneg.f32	s15, s15
 800fdf4:	f10a 0a09 	add.w	sl, sl, #9
 800fdf8:	edc6 7a00 	vstr	s15, [r6]
 800fdfc:	e525      	b.n	800f84a <kf_update+0x5ea>
 800fdfe:	edd1 7a01 	vldr	s15, [r1, #4]
 800fe02:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fe04:	ed8d 8ac8 	vstr	s16, [sp, #800]	@ 0x320
 800fe08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe0c:	eb02 0689 	add.w	r6, r2, r9, lsl #2
 800fe10:	ed83 8a03 	vstr	s16, [r3, #12]
 800fe14:	ed83 8a04 	vstr	s16, [r3, #16]
 800fe18:	edc1 7a01 	vstr	s15, [r1, #4]
 800fe1c:	eddd 7a77 	vldr	s15, [sp, #476]	@ 0x1dc
 800fe20:	ed83 8a05 	vstr	s16, [r3, #20]
 800fe24:	eef1 7a67 	vneg.f32	s15, s15
 800fe28:	edcd 7a77 	vstr	s15, [sp, #476]	@ 0x1dc
 800fe2c:	edd6 7a00 	vldr	s15, [r6]
 800fe30:	eef1 7a67 	vneg.f32	s15, s15
 800fe34:	edc6 7a00 	vstr	s15, [r6]
 800fe38:	eb02 068e 	add.w	r6, r2, lr, lsl #2
 800fe3c:	edd6 7a00 	vldr	s15, [r6]
 800fe40:	eef1 7a67 	vneg.f32	s15, s15
 800fe44:	edc6 7a00 	vstr	s15, [r6]
 800fe48:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fe4a:	2806      	cmp	r0, #6
 800fe4c:	ed83 8a06 	vstr	s16, [r3, #24]
 800fe50:	eb02 068c 	add.w	r6, r2, ip, lsl #2
 800fe54:	edd6 7a00 	vldr	s15, [r6]
 800fe58:	eef1 7a67 	vneg.f32	s15, s15
 800fe5c:	edc6 7a00 	vstr	s15, [r6]
 800fe60:	d19b      	bne.n	800fd9a <kf_update+0xb3a>
 800fe62:	edd1 7a06 	vldr	s15, [r1, #24]
 800fe66:	462e      	mov	r6, r5
 800fe68:	ed8d 8afa 	vstr	s16, [sp, #1000]	@ 0x3e8
 800fe6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe70:	ed83 8a08 	vstr	s16, [r3, #32]
 800fe74:	edc1 7a06 	vstr	s15, [r1, #24]
 800fe78:	eddd 7aa9 	vldr	s15, [sp, #676]	@ 0x2a4
 800fe7c:	eef1 7a67 	vneg.f32	s15, s15
 800fe80:	edcd 7aa9 	vstr	s15, [sp, #676]	@ 0x2a4
 800fe84:	e7a2      	b.n	800fdcc <kf_update+0xb6c>
 800fe86:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fe88:	2804      	cmp	r0, #4
 800fe8a:	ed83 8a04 	vstr	s16, [r3, #16]
 800fe8e:	eb02 0689 	add.w	r6, r2, r9, lsl #2
 800fe92:	edd6 7a00 	vldr	s15, [r6]
 800fe96:	eef1 7a67 	vneg.f32	s15, s15
 800fe9a:	edc6 7a00 	vstr	s15, [r6]
 800fe9e:	f47f aefb 	bne.w	800fc98 <kf_update+0xa38>
 800fea2:	edd1 7a04 	vldr	s15, [r1, #16]
 800fea6:	aa6c      	add	r2, sp, #432	@ 0x1b0
 800fea8:	ed8d 8ae6 	vstr	s16, [sp, #920]	@ 0x398
 800feac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800feb0:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 800feb4:	ed83 8a06 	vstr	s16, [r3, #24]
 800feb8:	ed83 8a07 	vstr	s16, [r3, #28]
 800febc:	edc1 7a04 	vstr	s15, [r1, #16]
 800fec0:	eddd 7a95 	vldr	s15, [sp, #596]	@ 0x254
 800fec4:	ed83 8a08 	vstr	s16, [r3, #32]
 800fec8:	eef1 7a67 	vneg.f32	s15, s15
 800fecc:	edcd 7a95 	vstr	s15, [sp, #596]	@ 0x254
 800fed0:	edd6 7a00 	vldr	s15, [r6]
 800fed4:	eef1 7a67 	vneg.f32	s15, s15
 800fed8:	edc6 7a00 	vstr	s15, [r6]
 800fedc:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800fee0:	edd6 7a00 	vldr	s15, [r6]
 800fee4:	eef1 7a67 	vneg.f32	s15, s15
 800fee8:	edc6 7a00 	vstr	s15, [r6]
 800feec:	e6fd      	b.n	800fcea <kf_update+0xa8a>
 800feee:	9a00      	ldr	r2, [sp, #0]
 800fef0:	edd2 8a00 	vldr	s17, [r2]
 800fef4:	e439      	b.n	800f76a <kf_update+0x50a>
 800fef6:	f20d 4d3c 	addw	sp, sp, #1084	@ 0x43c
 800fefa:	ecbd 8b10 	vpop	{d8-d15}
 800fefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff02:	ee68 9aa9 	vmul.f32	s19, s17, s19
 800ff06:	e5e2      	b.n	800face <kf_update+0x86e>
 800ff08:	eef0 7a6d 	vmov.f32	s15, s27
 800ff0c:	f7ff bbb8 	b.w	800f680 <kf_update+0x420>
 800ff10:	eef0 7a69 	vmov.f32	s15, s19
 800ff14:	f7ff bb05 	b.w	800f522 <kf_update+0x2c2>
 800ff18:	ee28 ba8b 	vmul.f32	s22, s17, s22
 800ff1c:	e609      	b.n	800fb32 <kf_update+0x8d2>
 800ff1e:	ee68 aaaa 	vmul.f32	s21, s17, s21
 800ff22:	e610      	b.n	800fb46 <kf_update+0x8e6>
 800ff24:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800ff28:	e617      	b.n	800fb5a <kf_update+0x8fa>
 800ff2a:	ee68 8a89 	vmul.f32	s17, s17, s18
 800ff2e:	e61e      	b.n	800fb6e <kf_update+0x90e>
 800ff30:	ee28 da8d 	vmul.f32	s26, s17, s26
 800ff34:	e5d5      	b.n	800fae2 <kf_update+0x882>
 800ff36:	ee68 caac 	vmul.f32	s25, s17, s25
 800ff3a:	e5dc      	b.n	800faf6 <kf_update+0x896>
 800ff3c:	ee28 ca8c 	vmul.f32	s24, s17, s24
 800ff40:	e5e3      	b.n	800fb0a <kf_update+0x8aa>
 800ff42:	ee68 baab 	vmul.f32	s23, s17, s23
 800ff46:	e5ea      	b.n	800fb1e <kf_update+0x8be>
 800ff48:	ee67 7aad 	vmul.f32	s15, s15, s27
 800ff4c:	f7ff bb98 	b.w	800f680 <kf_update+0x420>

0800ff50 <q2hpr>:
 800ff50:	edd0 5a00 	vldr	s11, [r0]
 800ff54:	edd0 7a01 	vldr	s15, [r0, #4]
 800ff58:	ed90 7a02 	vldr	s14, [r0, #8]
 800ff5c:	ee65 0aa5 	vmul.f32	s1, s11, s11
 800ff60:	edd0 4a03 	vldr	s9, [r0, #12]
 800ff64:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ff68:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ff6c:	ee24 0ae7 	vnmul.f32	s0, s9, s15
 800ff70:	ee70 0aa0 	vadd.f32	s1, s1, s1
 800ff74:	eee5 6aa4 	vfma.f32	s13, s11, s9
 800ff78:	eea5 0a87 	vfma.f32	s0, s11, s14
 800ff7c:	ee27 5a07 	vmul.f32	s10, s14, s14
 800ff80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800ff84:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ff88:	b510      	push	{r4, lr}
 800ff8a:	ed2d 8b08 	vpush	{d8-d11}
 800ff8e:	ee36 aa06 	vadd.f32	s20, s12, s12
 800ff92:	460c      	mov	r4, r1
 800ff94:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 800ff98:	ee75 aa05 	vadd.f32	s21, s10, s10
 800ff9c:	ee30 ba8a 	vadd.f32	s22, s1, s20
 800ffa0:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800ffa4:	ee77 8a07 	vadd.f32	s17, s14, s14
 800ffa8:	ee3b bacb 	vsub.f32	s22, s23, s22
 800ffac:	ee70 9a00 	vadd.f32	s19, s0, s0
 800ffb0:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800ffb4:	bb6a      	cbnz	r2, 8010012 <q2hpr+0xc2>
 800ffb6:	ee70 0aaa 	vadd.f32	s1, s1, s21
 800ffba:	ee38 0a68 	vsub.f32	s0, s16, s17
 800ffbe:	ee7b 0ae0 	vsub.f32	s1, s23, s1
 800ffc2:	f00a fcd5 	bl	801a970 <atan2f>
 800ffc6:	eeb0 8a40 	vmov.f32	s16, s0
 800ffca:	eeb0 0a49 	vmov.f32	s0, s18
 800ffce:	f00a fca3 	bl	801a918 <asinf>
 800ffd2:	eef0 8a40 	vmov.f32	s17, s0
 800ffd6:	eef0 0a4b 	vmov.f32	s1, s22
 800ffda:	eeb0 0a69 	vmov.f32	s0, s19
 800ffde:	f00a fcc7 	bl	801a970 <atan2f>
 800ffe2:	eef1 8a68 	vneg.f32	s17, s17
 800ffe6:	eeb0 9a40 	vmov.f32	s18, s0
 800ffea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ffee:	ed84 8a00 	vstr	s16, [r4]
 800fff2:	ed84 9a02 	vstr	s18, [r4, #8]
 800fff6:	edc4 8a01 	vstr	s17, [r4, #4]
 800fffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffe:	d505      	bpl.n	801000c <q2hpr+0xbc>
 8010000:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801004c <q2hpr+0xfc>
 8010004:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010008:	ed84 8a00 	vstr	s16, [r4]
 801000c:	ecbd 8b08 	vpop	{d8-d11}
 8010010:	bd10      	pop	{r4, pc}
 8010012:	eeb0 0a69 	vmov.f32	s0, s19
 8010016:	f00a fc7f 	bl	801a918 <asinf>
 801001a:	eef0 7a40 	vmov.f32	s15, s0
 801001e:	eef0 0a4b 	vmov.f32	s1, s22
 8010022:	eeb0 0a49 	vmov.f32	s0, s18
 8010026:	ee38 8a28 	vadd.f32	s16, s16, s17
 801002a:	eeb0 9a67 	vmov.f32	s18, s15
 801002e:	f00a fc9f 	bl	801a970 <atan2f>
 8010032:	ee7a 0a2a 	vadd.f32	s1, s20, s21
 8010036:	eef1 8a40 	vneg.f32	s17, s0
 801003a:	eeb1 0a48 	vneg.f32	s0, s16
 801003e:	ee7b 0ae0 	vsub.f32	s1, s23, s1
 8010042:	f00a fc95 	bl	801a970 <atan2f>
 8010046:	eeb0 8a40 	vmov.f32	s16, s0
 801004a:	e7ce      	b.n	800ffea <q2hpr+0x9a>
 801004c:	40c90fdb 	.word	0x40c90fdb

08010050 <llEvaluate.constprop.0>:
 8010050:	ed92 7a00 	vldr	s14, [r2]
 8010054:	edd0 7a00 	vldr	s15, [r0]
 8010058:	edd0 1a04 	vldr	s3, [r0, #16]
 801005c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010060:	ed92 6a01 	vldr	s12, [r2, #4]
 8010064:	ed90 3a05 	vldr	s6, [r0, #20]
 8010068:	ed90 2a08 	vldr	s4, [r0, #32]
 801006c:	ed92 7a02 	vldr	s14, [r2, #8]
 8010070:	edd0 2a0c 	vldr	s5, [r0, #48]	@ 0x30
 8010074:	edd2 7a03 	vldr	s15, [r2, #12]
 8010078:	edd0 3a09 	vldr	s7, [r0, #36]	@ 0x24
 801007c:	edd0 4a0a 	vldr	s9, [r0, #40]	@ 0x28
 8010080:	ed90 4a0d 	vldr	s8, [r0, #52]	@ 0x34
 8010084:	ed90 5a0e 	vldr	s10, [r0, #56]	@ 0x38
 8010088:	edd0 5a0f 	vldr	s11, [r0, #60]	@ 0x3c
 801008c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010090:	b084      	sub	sp, #16
 8010092:	f101 0e10 	add.w	lr, r1, #16
 8010096:	4606      	mov	r6, r0
 8010098:	2703      	movs	r7, #3
 801009a:	eea6 6ae1 	vfms.f32	s12, s13, s3
 801009e:	edcd 6a00 	vstr	s13, [sp]
 80100a2:	eea6 7ac2 	vfms.f32	s14, s13, s4
 80100a6:	f10d 0810 	add.w	r8, sp, #16
 80100aa:	eee6 7ae2 	vfms.f32	s15, s13, s5
 80100ae:	2504      	movs	r5, #4
 80100b0:	eec6 6a03 	vdiv.f32	s13, s12, s6
 80100b4:	eea6 7ae3 	vfms.f32	s14, s13, s7
 80100b8:	edcd 6a01 	vstr	s13, [sp, #4]
 80100bc:	eee4 7a66 	vfms.f32	s15, s8, s13
 80100c0:	eec7 6a24 	vdiv.f32	s13, s14, s9
 80100c4:	eee5 7a66 	vfms.f32	s15, s10, s13
 80100c8:	edcd 6a02 	vstr	s13, [sp, #8]
 80100cc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80100d0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80100d4:	ed78 7a01 	vldmdb	r8!, {s15}
 80100d8:	2d04      	cmp	r5, #4
 80100da:	b26b      	sxtb	r3, r5
 80100dc:	ed6e 7a01 	vstmdb	lr!, {s15}
 80100e0:	d023      	beq.n	801012a <llEvaluate.constprop.0+0xda>
 80100e2:	00bc      	lsls	r4, r7, #2
 80100e4:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 80100e8:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 80100ec:	3301      	adds	r3, #1
 80100ee:	4422      	add	r2, r4
 80100f0:	ed9c 7a00 	vldr	s14, [ip]
 80100f4:	fa5f fc83 	uxtb.w	ip, r3
 80100f8:	edd2 6a00 	vldr	s13, [r2]
 80100fc:	b25b      	sxtb	r3, r3
 80100fe:	f1bc 0f04 	cmp.w	ip, #4
 8010102:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010106:	edce 7a00 	vstr	s15, [lr]
 801010a:	d1eb      	bne.n	80100e4 <llEvaluate.constprop.0+0x94>
 801010c:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 8010110:	3d01      	subs	r5, #1
 8010112:	3f01      	subs	r7, #1
 8010114:	3e14      	subs	r6, #20
 8010116:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801011a:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 801011e:	ed8e 7a00 	vstr	s14, [lr]
 8010122:	d1d7      	bne.n	80100d4 <llEvaluate.constprop.0+0x84>
 8010124:	b004      	add	sp, #16
 8010126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801012a:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 801012e:	3f01      	subs	r7, #1
 8010130:	3e14      	subs	r6, #20
 8010132:	2503      	movs	r5, #3
 8010134:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010138:	ed8e 7a00 	vstr	s14, [lr]
 801013c:	e7ca      	b.n	80100d4 <llEvaluate.constprop.0+0x84>
 801013e:	bf00      	nop

08010140 <getMagStats.constprop.0>:
 8010140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010144:	2400      	movs	r4, #0
 8010146:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 80102f8 <getMagStats.constprop.0+0x1b8>
 801014a:	4607      	mov	r7, r0
 801014c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010150:	601c      	str	r4, [r3, #0]
 8010152:	b083      	sub	sp, #12
 8010154:	6014      	str	r4, [r2, #0]
 8010156:	f898 00a0 	ldrb.w	r0, [r8, #160]	@ 0xa0
 801015a:	eec7 4a80 	vdiv.f32	s9, s15, s0
 801015e:	f898 60a1 	ldrb.w	r6, [r8, #161]	@ 0xa1
 8010162:	f998 40a2 	ldrsb.w	r4, [r8, #162]	@ 0xa2
 8010166:	ee07 0a10 	vmov	s14, r0
 801016a:	42b0      	cmp	r0, r6
 801016c:	f104 0401 	add.w	r4, r4, #1
 8010170:	f000 80b2 	beq.w	80102d8 <getMagStats.constprop.0+0x198>
 8010174:	1a24      	subs	r4, r4, r0
 8010176:	fb94 f5f6 	sdiv	r5, r4, r6
 801017a:	fb06 4415 	mls	r4, r6, r5, r4
 801017e:	2c00      	cmp	r4, #0
 8010180:	bfb8      	it	lt
 8010182:	19a4      	addlt	r4, r4, r6
 8010184:	b225      	sxth	r5, r4
 8010186:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 801018a:	ed9f 4a58 	vldr	s8, [pc, #352]	@ 80102ec <getMagStats.constprop.0+0x1ac>
 801018e:	ee24 4a84 	vmul.f32	s8, s9, s8
 8010192:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8010196:	2800      	cmp	r0, #0
 8010198:	f000 80a4 	beq.w	80102e4 <getMagStats.constprop.0+0x1a4>
 801019c:	eb00 0b05 	add.w	fp, r0, r5
 80101a0:	88b8      	ldrh	r0, [r7, #4]
 80101a2:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 80102f0 <getMagStats.constprop.0+0x1b0>
 80101a6:	9001      	str	r0, [sp, #4]
 80101a8:	2000      	movs	r0, #0
 80101aa:	f8b7 a000 	ldrh.w	sl, [r7]
 80101ae:	f8b7 9002 	ldrh.w	r9, [r7, #2]
 80101b2:	9000      	str	r0, [sp, #0]
 80101b4:	e001      	b.n	80101ba <getMagStats.constprop.0+0x7a>
 80101b6:	ed92 6a00 	vldr	s12, [r2]
 80101ba:	9800      	ldr	r0, [sp, #0]
 80101bc:	edd1 3a00 	vldr	s7, [r1]
 80101c0:	f100 0e01 	add.w	lr, r0, #1
 80101c4:	9801      	ldr	r0, [sp, #4]
 80101c6:	edd1 5a04 	vldr	s11, [r1, #16]
 80101ca:	ed91 5a08 	vldr	s10, [r1, #32]
 80101ce:	fb95 f4f6 	sdiv	r4, r5, r6
 80101d2:	fb06 5414 	mls	r4, r6, r4, r5
 80101d6:	3501      	adds	r5, #1
 80101d8:	b2e4      	uxtb	r4, r4
 80101da:	3404      	adds	r4, #4
 80101dc:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 80101e0:	f8b4 c0a2 	ldrh.w	ip, [r4, #162]	@ 0xa2
 80101e4:	f8b4 70a4 	ldrh.w	r7, [r4, #164]	@ 0xa4
 80101e8:	ebac 0c0a 	sub.w	ip, ip, sl
 80101ec:	f8b4 40a6 	ldrh.w	r4, [r4, #166]	@ 0xa6
 80101f0:	eba7 0709 	sub.w	r7, r7, r9
 80101f4:	1a24      	subs	r4, r4, r0
 80101f6:	fa0f fc8c 	sxth.w	ip, ip
 80101fa:	b23f      	sxth	r7, r7
 80101fc:	b224      	sxth	r4, r4
 80101fe:	ee06 ca90 	vmov	s13, ip
 8010202:	ee03 7a10 	vmov	s6, r7
 8010206:	ee07 4a90 	vmov	s15, r4
 801020a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801020e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8010212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010216:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801021a:	ee63 5a25 	vmul.f32	s11, s6, s11
 801021e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010222:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8010226:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 801022a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801022e:	ee16 0a90 	vmov	r0, s13
 8010232:	ee15 7a90 	vmov	r7, s11
 8010236:	b204      	sxth	r4, r0
 8010238:	ee17 0a90 	vmov	r0, s15
 801023c:	fb17 f707 	smulbb	r7, r7, r7
 8010240:	fb04 7704 	mla	r7, r4, r4, r7
 8010244:	b204      	sxth	r4, r0
 8010246:	fb04 7404 	mla	r4, r4, r4, r7
 801024a:	ee07 4a90 	vmov	s15, r4
 801024e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010252:	eef1 6ae7 	vsqrt.f32	s13, s15
 8010256:	eef6 7ae6 	vrintz.f32	s15, s13
 801025a:	ee77 6ac4 	vsub.f32	s13, s15, s8
 801025e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010262:	eef0 6ae6 	vabs.f32	s13, s13
 8010266:	edc2 7a00 	vstr	s15, [r2]
 801026a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801026e:	eef6 6ae6 	vrintz.f32	s13, s13
 8010272:	eef4 4ae6 	vcmpe.f32	s9, s13
 8010276:	ee17 0a90 	vmov	r0, s15
 801027a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027e:	b204      	sxth	r4, r0
 8010280:	fb04 f404 	mul.w	r4, r4, r4
 8010284:	ee07 4a90 	vmov	s15, r4
 8010288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801028c:	d502      	bpl.n	8010294 <getMagStats.constprop.0+0x154>
 801028e:	fa5f f08e 	uxtb.w	r0, lr
 8010292:	9000      	str	r0, [sp, #0]
 8010294:	edd3 6a00 	vldr	s13, [r3]
 8010298:	455d      	cmp	r5, fp
 801029a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801029e:	edc3 7a00 	vstr	s15, [r3]
 80102a2:	d188      	bne.n	80101b6 <getMagStats.constprop.0+0x76>
 80102a4:	9800      	ldr	r0, [sp, #0]
 80102a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80102aa:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80102f4 <getMagStats.constprop.0+0x1b4>
 80102ae:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80102b2:	eef1 7ac6 	vsqrt.f32	s15, s12
 80102b6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80102ba:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80102be:	edc3 7a00 	vstr	s15, [r3]
 80102c2:	edd2 7a00 	vldr	s15, [r2]
 80102c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80102ca:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80102ce:	edc2 7a00 	vstr	s15, [r2]
 80102d2:	b003      	add	sp, #12
 80102d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d8:	fb94 f5f0 	sdiv	r5, r4, r0
 80102dc:	fb00 4415 	mls	r4, r0, r5, r4
 80102e0:	b225      	sxth	r5, r4
 80102e2:	e750      	b.n	8010186 <getMagStats.constprop.0+0x46>
 80102e4:	eddf 7a02 	vldr	s15, [pc, #8]	@ 80102f0 <getMagStats.constprop.0+0x1b0>
 80102e8:	e7dd      	b.n	80102a6 <getMagStats.constprop.0+0x166>
 80102ea:	bf00      	nop
 80102ec:	423c0000 	.word	0x423c0000
 80102f0:	00000000 	.word	0x00000000
 80102f4:	3f59999a 	.word	0x3f59999a
 80102f8:	24000348 	.word	0x24000348

080102fc <MEMS_updateMagBufferIndex.constprop.0>:
 80102fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010300:	4c66      	ldr	r4, [pc, #408]	@ (801049c <MEMS_updateMagBufferIndex.constprop.0+0x1a0>)
 8010302:	2300      	movs	r3, #0
 8010304:	b085      	sub	sp, #20
 8010306:	f894 20a0 	ldrb.w	r2, [r4, #160]	@ 0xa0
 801030a:	f894 50a1 	ldrb.w	r5, [r4, #161]	@ 0xa1
 801030e:	e9c4 332a 	strd	r3, r3, [r4, #168]	@ 0xa8
 8010312:	e9c4 332c 	strd	r3, r3, [r4, #176]	@ 0xb0
 8010316:	e9c4 332e 	strd	r3, r3, [r4, #184]	@ 0xb8
 801031a:	42aa      	cmp	r2, r5
 801031c:	f994 30a2 	ldrsb.w	r3, [r4, #162]	@ 0xa2
 8010320:	f103 0301 	add.w	r3, r3, #1
 8010324:	f000 80b3 	beq.w	801048e <MEMS_updateMagBufferIndex.constprop.0+0x192>
 8010328:	1a9b      	subs	r3, r3, r2
 801032a:	fb93 f1f5 	sdiv	r1, r3, r5
 801032e:	fb05 3311 	mls	r3, r5, r1, r3
 8010332:	2b00      	cmp	r3, #0
 8010334:	bfb8      	it	lt
 8010336:	195b      	addlt	r3, r3, r5
 8010338:	fa0f fc83 	sxth.w	ip, r3
 801033c:	2a00      	cmp	r2, #0
 801033e:	f000 80a0 	beq.w	8010482 <MEMS_updateMagBufferIndex.constprop.0+0x186>
 8010342:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010346:	2700      	movs	r7, #0
 8010348:	eb02 030c 	add.w	r3, r2, ip
 801034c:	f04f 0e01 	mov.w	lr, #1
 8010350:	46bb      	mov	fp, r7
 8010352:	46ba      	mov	sl, r7
 8010354:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8010358:	46b9      	mov	r9, r7
 801035a:	46b8      	mov	r8, r7
 801035c:	9303      	str	r3, [sp, #12]
 801035e:	9702      	str	r7, [sp, #8]
 8010360:	e019      	b.n	8010396 <MEMS_updateMagBufferIndex.constprop.0+0x9a>
 8010362:	3920      	subs	r1, #32
 8010364:	9e02      	ldr	r6, [sp, #8]
 8010366:	2a1f      	cmp	r2, #31
 8010368:	fa0e f101 	lsl.w	r1, lr, r1
 801036c:	ea46 0601 	orr.w	r6, r6, r1
 8010370:	9602      	str	r6, [sp, #8]
 8010372:	d96c      	bls.n	801044e <MEMS_updateMagBufferIndex.constprop.0+0x152>
 8010374:	3a20      	subs	r2, #32
 8010376:	2b1f      	cmp	r3, #31
 8010378:	fa0e f202 	lsl.w	r2, lr, r2
 801037c:	ea49 0902 	orr.w	r9, r9, r2
 8010380:	d96b      	bls.n	801045a <MEMS_updateMagBufferIndex.constprop.0+0x15e>
 8010382:	3b20      	subs	r3, #32
 8010384:	f10c 0c01 	add.w	ip, ip, #1
 8010388:	fa0e f303 	lsl.w	r3, lr, r3
 801038c:	ea4b 0b03 	orr.w	fp, fp, r3
 8010390:	9b03      	ldr	r3, [sp, #12]
 8010392:	459c      	cmp	ip, r3
 8010394:	d069      	beq.n	801046a <MEMS_updateMagBufferIndex.constprop.0+0x16e>
 8010396:	fb9c f3f5 	sdiv	r3, ip, r5
 801039a:	fb05 c313 	mls	r3, r5, r3, ip
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	3304      	adds	r3, #4
 80103a2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80103a6:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	@ 0xa2
 80103aa:	fb92 f1f0 	sdiv	r1, r2, r0
 80103ae:	fb00 2211 	mls	r2, r0, r1, r2
 80103b2:	2a00      	cmp	r2, #0
 80103b4:	bfb8      	it	lt
 80103b6:	1812      	addlt	r2, r2, r0
 80103b8:	b212      	sxth	r2, r2
 80103ba:	ee07 2a90 	vmov	s15, r2
 80103be:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80103c2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80103c6:	f9b2 20a4 	ldrsh.w	r2, [r2, #164]	@ 0xa4
 80103ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103ce:	fb92 f6f0 	sdiv	r6, r2, r0
 80103d2:	fb00 2216 	mls	r2, r0, r6, r2
 80103d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103da:	2a00      	cmp	r2, #0
 80103dc:	fef8 7a67 	vrinta.f32	s15, s15
 80103e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103e4:	bfb8      	it	lt
 80103e6:	1812      	addlt	r2, r2, r0
 80103e8:	b212      	sxth	r2, r2
 80103ea:	edcd 7a01 	vstr	s15, [sp, #4]
 80103ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80103f2:	ee07 2a90 	vmov	s15, r2
 80103f6:	f9b3 20a6 	ldrsh.w	r2, [r3, #166]	@ 0xa6
 80103fa:	fb92 f3f0 	sdiv	r3, r2, r0
 80103fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010402:	fb00 2313 	mls	r3, r0, r3, r2
 8010406:	2b00      	cmp	r3, #0
 8010408:	ee67 7a87 	vmul.f32	s15, s15, s14
 801040c:	bfb8      	it	lt
 801040e:	181b      	addlt	r3, r3, r0
 8010410:	291f      	cmp	r1, #31
 8010412:	fef8 7a67 	vrinta.f32	s15, s15
 8010416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801041a:	b21b      	sxth	r3, r3
 801041c:	edcd 7a01 	vstr	s15, [sp, #4]
 8010420:	ee07 3a90 	vmov	s15, r3
 8010424:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801042c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010430:	fef8 7a67 	vrinta.f32	s15, s15
 8010434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010438:	edcd 7a01 	vstr	s15, [sp, #4]
 801043c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010440:	d88f      	bhi.n	8010362 <MEMS_updateMagBufferIndex.constprop.0+0x66>
 8010442:	fa0e f101 	lsl.w	r1, lr, r1
 8010446:	2a1f      	cmp	r2, #31
 8010448:	ea48 0801 	orr.w	r8, r8, r1
 801044c:	d892      	bhi.n	8010374 <MEMS_updateMagBufferIndex.constprop.0+0x78>
 801044e:	fa0e f202 	lsl.w	r2, lr, r2
 8010452:	2b1f      	cmp	r3, #31
 8010454:	ea4a 0a02 	orr.w	sl, sl, r2
 8010458:	d893      	bhi.n	8010382 <MEMS_updateMagBufferIndex.constprop.0+0x86>
 801045a:	fa0e f303 	lsl.w	r3, lr, r3
 801045e:	f10c 0c01 	add.w	ip, ip, #1
 8010462:	431f      	orrs	r7, r3
 8010464:	9b03      	ldr	r3, [sp, #12]
 8010466:	459c      	cmp	ip, r3
 8010468:	d195      	bne.n	8010396 <MEMS_updateMagBufferIndex.constprop.0+0x9a>
 801046a:	9b02      	ldr	r3, [sp, #8]
 801046c:	f8c4 80ac 	str.w	r8, [r4, #172]	@ 0xac
 8010470:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8010474:	e9c4 7b2e 	strd	r7, fp, [r4, #184]	@ 0xb8
 8010478:	e9c4 9a2c 	strd	r9, sl, [r4, #176]	@ 0xb0
 801047c:	b005      	add	sp, #20
 801047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010482:	23ff      	movs	r3, #255	@ 0xff
 8010484:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 8010488:	b005      	add	sp, #20
 801048a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048e:	fb93 f1f2 	sdiv	r1, r3, r2
 8010492:	fb02 3311 	mls	r3, r2, r1, r3
 8010496:	fa0f fc83 	sxth.w	ip, r3
 801049a:	e74f      	b.n	801033c <MEMS_updateMagBufferIndex.constprop.0+0x40>
 801049c:	24000348 	.word	0x24000348

080104a0 <output_update>:
 80104a0:	edd0 7a01 	vldr	s15, [r0, #4]
 80104a4:	edd0 6a02 	vldr	s13, [r0, #8]
 80104a8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80104ac:	edd0 5a00 	vldr	s11, [r0]
 80104b0:	ee27 7aa6 	vmul.f32	s14, s15, s13
 80104b4:	ed90 5a03 	vldr	s10, [r0, #12]
 80104b8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80104bc:	eea5 6aa5 	vfma.f32	s12, s11, s11
 80104c0:	eea5 7a85 	vfma.f32	s14, s11, s10
 80104c4:	ee67 7a85 	vmul.f32	s15, s15, s10
 80104c8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80104cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d0:	4615      	mov	r5, r2
 80104d2:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80104d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80104da:	460f      	mov	r7, r1
 80104dc:	ee37 7a07 	vadd.f32	s14, s14, s14
 80104e0:	461e      	mov	r6, r3
 80104e2:	ee36 6a06 	vadd.f32	s12, s12, s12
 80104e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80104ea:	2a00      	cmp	r2, #0
 80104ec:	d14b      	bne.n	8010586 <output_update+0xe6>
 80104ee:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80104f2:	4629      	mov	r1, r5
 80104f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80104f8:	4604      	mov	r4, r0
 80104fa:	eeb1 7a47 	vneg.f32	s14, s14
 80104fe:	ee75 6ac6 	vsub.f32	s13, s11, s12
 8010502:	edc3 7a01 	vstr	s15, [r3, #4]
 8010506:	ed83 7a00 	vstr	s14, [r3]
 801050a:	edc3 6a02 	vstr	s13, [r3, #8]
 801050e:	f7ff fd1f 	bl	800ff50 <q2hpr>
 8010512:	ed95 7a01 	vldr	s14, [r5, #4]
 8010516:	edd5 7a02 	vldr	s15, [r5, #8]
 801051a:	edd5 6a00 	vldr	s13, [r5]
 801051e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8010634 <output_update+0x194>
 8010522:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010638 <output_update+0x198>
 8010526:	ee27 7a06 	vmul.f32	s14, s14, s12
 801052a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801052e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010532:	ed85 7a01 	vstr	s14, [r5, #4]
 8010536:	edc5 7a02 	vstr	s15, [r5, #8]
 801053a:	edc5 6a00 	vstr	s13, [r5]
 801053e:	ed97 7a01 	vldr	s14, [r7, #4]
 8010542:	edd6 7a00 	vldr	s15, [r6]
 8010546:	6822      	ldr	r2, [r4, #0]
 8010548:	ee77 7a87 	vadd.f32	s15, s15, s14
 801054c:	edc8 7a00 	vstr	s15, [r8]
 8010550:	ed97 7a00 	vldr	s14, [r7]
 8010554:	edd6 7a01 	vldr	s15, [r6, #4]
 8010558:	ee77 7a87 	vadd.f32	s15, s15, s14
 801055c:	edc8 7a01 	vstr	s15, [r8, #4]
 8010560:	ed97 7a02 	vldr	s14, [r7, #8]
 8010564:	edd6 7a02 	vldr	s15, [r6, #8]
 8010568:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801056c:	edc8 7a02 	vstr	s15, [r8, #8]
 8010570:	edd4 7a02 	vldr	s15, [r4, #8]
 8010574:	6863      	ldr	r3, [r4, #4]
 8010576:	eef1 7a67 	vneg.f32	s15, s15
 801057a:	6062      	str	r2, [r4, #4]
 801057c:	6023      	str	r3, [r4, #0]
 801057e:	edc4 7a02 	vstr	s15, [r4, #8]
 8010582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010586:	2a01      	cmp	r2, #1
 8010588:	d015      	beq.n	80105b6 <output_update+0x116>
 801058a:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8010638 <output_update+0x198>
 801058e:	edd5 6a00 	vldr	s13, [r5]
 8010592:	ed95 7a01 	vldr	s14, [r5, #4]
 8010596:	edd5 7a02 	vldr	s15, [r5, #8]
 801059a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801059e:	ee27 7a06 	vmul.f32	s14, s14, s12
 80105a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80105a6:	edc5 6a00 	vstr	s13, [r5]
 80105aa:	ed85 7a01 	vstr	s14, [r5, #4]
 80105ae:	edc5 7a02 	vstr	s15, [r5, #8]
 80105b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80105ba:	4629      	mov	r1, r5
 80105bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80105c0:	eeb1 7a47 	vneg.f32	s14, s14
 80105c4:	ee36 6a65 	vsub.f32	s12, s12, s11
 80105c8:	edc3 7a00 	vstr	s15, [r3]
 80105cc:	ed83 7a01 	vstr	s14, [r3, #4]
 80105d0:	ed83 6a02 	vstr	s12, [r3, #8]
 80105d4:	f7ff fcbc 	bl	800ff50 <q2hpr>
 80105d8:	edd5 6a00 	vldr	s13, [r5]
 80105dc:	ed95 7a01 	vldr	s14, [r5, #4]
 80105e0:	edd5 7a02 	vldr	s15, [r5, #8]
 80105e4:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8010638 <output_update+0x198>
 80105e8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80105ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80105f0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80105f4:	ed85 7a01 	vstr	s14, [r5, #4]
 80105f8:	edc5 7a02 	vstr	s15, [r5, #8]
 80105fc:	edc5 6a00 	vstr	s13, [r5]
 8010600:	ed97 7a00 	vldr	s14, [r7]
 8010604:	edd6 7a00 	vldr	s15, [r6]
 8010608:	ee77 7a87 	vadd.f32	s15, s15, s14
 801060c:	edc8 7a00 	vstr	s15, [r8]
 8010610:	ed97 7a01 	vldr	s14, [r7, #4]
 8010614:	edd6 7a01 	vldr	s15, [r6, #4]
 8010618:	ee77 7a87 	vadd.f32	s15, s15, s14
 801061c:	edc8 7a01 	vstr	s15, [r8, #4]
 8010620:	ed97 7a02 	vldr	s14, [r7, #8]
 8010624:	edd6 7a02 	vldr	s15, [r6, #8]
 8010628:	ee77 7a87 	vadd.f32	s15, s15, s14
 801062c:	edc8 7a02 	vstr	s15, [r8, #8]
 8010630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010634:	c2652ee1 	.word	0xc2652ee1
 8010638:	42652ee1 	.word	0x42652ee1

0801063c <MFX_emptyAttitude>:
 801063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010640:	4fe9      	ldr	r7, [pc, #932]	@ (80109e8 <MFX_emptyAttitude+0x3ac>)
 8010642:	f04f 0800 	mov.w	r8, #0
 8010646:	4681      	mov	r9, r0
 8010648:	f44f 75b4 	mov.w	r5, #360	@ 0x168
 801064c:	46bc      	mov	ip, r7
 801064e:	f44f 56f0 	mov.w	r6, #7680	@ 0x1e00
 8010652:	ed2d 8b02 	vpush	{d8}
 8010656:	f83c 3b04 	ldrh.w	r3, [ip], #4
 801065a:	f6ad 4dd4 	subw	sp, sp, #3284	@ 0xcd4
 801065e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8010662:	eddf 8ae2 	vldr	s17, [pc, #904]	@ 80109ec <MFX_emptyAttitude+0x3b0>
 8010666:	f88d 854a 	strb.w	r8, [sp, #1354]	@ 0x54a
 801066a:	f50d 64d7 	add.w	r4, sp, #1720	@ 0x6b8
 801066e:	f8ad 3548 	strh.w	r3, [sp, #1352]	@ 0x548
 8010672:	f10d 0e44 	add.w	lr, sp, #68	@ 0x44
 8010676:	f8dd 3548 	ldr.w	r3, [sp, #1352]	@ 0x548
 801067a:	f50d 6aa9 	add.w	sl, sp, #1352	@ 0x548
 801067e:	f8c4 8008 	str.w	r8, [r4, #8]
 8010682:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 8010686:	0c1b      	lsrs	r3, r3, #16
 8010688:	edcd 8a08 	vstr	s17, [sp, #32]
 801068c:	f88d 30aa 	strb.w	r3, [sp, #170]	@ 0xaa
 8010690:	ab2b      	add	r3, sp, #172	@ 0xac
 8010692:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 8010696:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 801069a:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 801069e:	e9c4 8800 	strd	r8, r8, [r4]
 80106a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80106a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106aa:	ab2e      	add	r3, sp, #184	@ 0xb8
 80106ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106b0:	ab31      	add	r3, sp, #196	@ 0xc4
 80106b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106b6:	ab34      	add	r3, sp, #208	@ 0xd0
 80106b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106bc:	ab37      	add	r3, sp, #220	@ 0xdc
 80106be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106c2:	ab3a      	add	r3, sp, #232	@ 0xe8
 80106c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80106cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80106d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80106d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80106d8:	f8dc 3000 	ldr.w	r3, [ip]
 80106dc:	462a      	mov	r2, r5
 80106de:	4641      	mov	r1, r8
 80106e0:	4620      	mov	r0, r4
 80106e2:	f8ce 3000 	str.w	r3, [lr]
 80106e6:	f008 f86c 	bl	80187c2 <memset>
 80106ea:	462a      	mov	r2, r5
 80106ec:	4621      	mov	r1, r4
 80106ee:	a840      	add	r0, sp, #256	@ 0x100
 80106f0:	f8ad 60f8 	strh.w	r6, [sp, #248]	@ 0xf8
 80106f4:	f008 f8e5 	bl	80188c2 <memcpy>
 80106f8:	462a      	mov	r2, r5
 80106fa:	4641      	mov	r1, r8
 80106fc:	4620      	mov	r0, r4
 80106fe:	ed8d 8a3f 	vstr	s16, [sp, #252]	@ 0xfc
 8010702:	f008 f85e 	bl	80187c2 <memset>
 8010706:	462a      	mov	r2, r5
 8010708:	4621      	mov	r1, r4
 801070a:	a89c      	add	r0, sp, #624	@ 0x270
 801070c:	f8ad 6268 	strh.w	r6, [sp, #616]	@ 0x268
 8010710:	f008 f8d7 	bl	80188c2 <memcpy>
 8010714:	462a      	mov	r2, r5
 8010716:	4641      	mov	r1, r8
 8010718:	4620      	mov	r0, r4
 801071a:	ed8d 8a9b 	vstr	s16, [sp, #620]	@ 0x26c
 801071e:	f008 f850 	bl	80187c2 <memset>
 8010722:	462a      	mov	r2, r5
 8010724:	4621      	mov	r1, r4
 8010726:	a8f8      	add	r0, sp, #992	@ 0x3e0
 8010728:	f8ad 63d8 	strh.w	r6, [sp, #984]	@ 0x3d8
 801072c:	f008 f8c9 	bl	80188c2 <memcpy>
 8010730:	462a      	mov	r2, r5
 8010732:	4641      	mov	r1, r8
 8010734:	4620      	mov	r0, r4
 8010736:	ed8d 8af7 	vstr	s16, [sp, #988]	@ 0x3dc
 801073a:	f008 f842 	bl	80187c2 <memset>
 801073e:	462a      	mov	r2, r5
 8010740:	4621      	mov	r1, r4
 8010742:	f50d 60aa 	add.w	r0, sp, #1360	@ 0x550
 8010746:	f8ad 6548 	strh.w	r6, [sp, #1352]	@ 0x548
 801074a:	f008 f8ba 	bl	80188c2 <memcpy>
 801074e:	4ba8      	ldr	r3, [pc, #672]	@ (80109f0 <MFX_emptyAttitude+0x3b4>)
 8010750:	ae0c      	add	r6, sp, #48	@ 0x30
 8010752:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8010756:	9320      	str	r3, [sp, #128]	@ 0x80
 8010758:	f04f 0301 	mov.w	r3, #1
 801075c:	46b3      	mov	fp, r6
 801075e:	f10d 0c6c 	add.w	ip, sp, #108	@ 0x6c
 8010762:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8010766:	46a6      	mov	lr, r4
 8010768:	f8c4 8010 	str.w	r8, [r4, #16]
 801076c:	af21      	add	r7, sp, #132	@ 0x84
 801076e:	ed8a 8a01 	vstr	s16, [sl, #4]
 8010772:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010776:	ed9f 6a9f 	vldr	s12, [pc, #636]	@ 80109f4 <MFX_emptyAttitude+0x3b8>
 801077a:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80109f8 <MFX_emptyAttitude+0x3bc>
 801077e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010780:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010782:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8010786:	e9c4 8800 	strd	r8, r8, [r4]
 801078a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801078e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8010792:	682d      	ldr	r5, [r5, #0]
 8010794:	ae31      	add	r6, sp, #196	@ 0xc4
 8010796:	f10d 0bdc 	add.w	fp, sp, #220	@ 0xdc
 801079a:	f8cc 5000 	str.w	r5, [ip]
 801079e:	ad34      	add	r5, sp, #208	@ 0xd0
 80107a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107a4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80107a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80107a8:	aa3e      	add	r2, sp, #248	@ 0xf8
 80107aa:	a911      	add	r1, sp, #68	@ 0x44
 80107ac:	2001      	movs	r0, #1
 80107ae:	e9cd a301 	strd	sl, r3, [sp, #4]
 80107b2:	abf6      	add	r3, sp, #984	@ 0x3d8
 80107b4:	f509 7a46 	add.w	sl, r9, #792	@ 0x318
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	ab9a      	add	r3, sp, #616	@ 0x268
 80107bc:	f8c7 8000 	str.w	r8, [r7]
 80107c0:	af2e      	add	r7, sp, #184	@ 0xb8
 80107c2:	9403      	str	r4, [sp, #12]
 80107c4:	f7fe f8fa 	bl	800e9bc <DataHist_parameters>
 80107c8:	4b8c      	ldr	r3, [pc, #560]	@ (80109fc <MFX_emptyAttitude+0x3c0>)
 80107ca:	f10d 0cac 	add.w	ip, sp, #172	@ 0xac
 80107ce:	f8a9 8002 	strh.w	r8, [r9, #2]
 80107d2:	f8c9 3014 	str.w	r3, [r9, #20]
 80107d6:	f10d 0ee8 	add.w	lr, sp, #232	@ 0xe8
 80107da:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 80107de:	ed89 8a02 	vstr	s16, [r9, #8]
 80107e2:	f8a9 3070 	strh.w	r3, [r9, #112]	@ 0x70
 80107e6:	f89d 30aa 	ldrb.w	r3, [sp, #170]	@ 0xaa
 80107ea:	ed89 8a04 	vstr	s16, [r9, #16]
 80107ee:	f889 3072 	strb.w	r3, [r9, #114]	@ 0x72
 80107f2:	f240 1301 	movw	r3, #257	@ 0x101
 80107f6:	eddf 7a82 	vldr	s15, [pc, #520]	@ 8010a00 <MFX_emptyAttitude+0x3c4>
 80107fa:	f8a9 3000 	strh.w	r3, [r9]
 80107fe:	f8a9 3004 	strh.w	r3, [r9, #4]
 8010802:	4b80      	ldr	r3, [pc, #512]	@ (8010a04 <MFX_emptyAttitude+0x3c8>)
 8010804:	f8c9 300c 	str.w	r3, [r9, #12]
 8010808:	4b7f      	ldr	r3, [pc, #508]	@ (8010a08 <MFX_emptyAttitude+0x3cc>)
 801080a:	f8c9 3018 	str.w	r3, [r9, #24]
 801080e:	4b7f      	ldr	r3, [pc, #508]	@ (8010a0c <MFX_emptyAttitude+0x3d0>)
 8010810:	f8c9 301c 	str.w	r3, [r9, #28]
 8010814:	4b7e      	ldr	r3, [pc, #504]	@ (8010a10 <MFX_emptyAttitude+0x3d4>)
 8010816:	f8c9 3020 	str.w	r3, [r9, #32]
 801081a:	4b7e      	ldr	r3, [pc, #504]	@ (8010a14 <MFX_emptyAttitude+0x3d8>)
 801081c:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
 8010820:	4b7d      	ldr	r3, [pc, #500]	@ (8010a18 <MFX_emptyAttitude+0x3dc>)
 8010822:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
 8010826:	4b7d      	ldr	r3, [pc, #500]	@ (8010a1c <MFX_emptyAttitude+0x3e0>)
 8010828:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 801082c:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 8010830:	4b7b      	ldr	r3, [pc, #492]	@ (8010a20 <MFX_emptyAttitude+0x3e4>)
 8010832:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8010836:	2000      	movs	r0, #0
 8010838:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
 801083c:	f8c9 1078 	str.w	r1, [r9, #120]	@ 0x78
 8010840:	2100      	movs	r1, #0
 8010842:	4b78      	ldr	r3, [pc, #480]	@ (8010a24 <MFX_emptyAttitude+0x3e8>)
 8010844:	f8c9 207c 	str.w	r2, [r9, #124]	@ 0x7c
 8010848:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
 801084c:	f50d 6305 	add.w	r3, sp, #2128	@ 0x850
 8010850:	e9c9 8816 	strd	r8, r8, [r9, #88]	@ 0x58
 8010854:	e9c9 881a 	strd	r8, r8, [r9, #104]	@ 0x68
 8010858:	e9c9 0118 	strd	r0, r1, [r9, #96]	@ 0x60
 801085c:	cf07      	ldmia	r7!, {r0, r1, r2}
 801085e:	f8c9 0080 	str.w	r0, [r9, #128]	@ 0x80
 8010862:	f609 1748 	addw	r7, r9, #2376	@ 0x948
 8010866:	f8c9 1084 	str.w	r1, [r9, #132]	@ 0x84
 801086a:	f8c9 2088 	str.w	r2, [r9, #136]	@ 0x88
 801086e:	ed89 6a65 	vstr	s12, [r9, #404]	@ 0x194
 8010872:	edc9 6a66 	vstr	s13, [r9, #408]	@ 0x198
 8010876:	ed89 7a67 	vstr	s14, [r9, #412]	@ 0x19c
 801087a:	edc9 8a64 	vstr	s17, [r9, #400]	@ 0x190
 801087e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8010880:	f8c9 008c 	str.w	r0, [r9, #140]	@ 0x8c
 8010884:	f609 1664 	addw	r6, r9, #2404	@ 0x964
 8010888:	f8c9 1090 	str.w	r1, [r9, #144]	@ 0x90
 801088c:	f8c9 2094 	str.w	r2, [r9, #148]	@ 0x94
 8010890:	cd07      	ldmia	r5!, {r0, r1, r2}
 8010892:	f8c9 0098 	str.w	r0, [r9, #152]	@ 0x98
 8010896:	f609 1554 	addw	r5, r9, #2388	@ 0x954
 801089a:	f8c9 109c 	str.w	r1, [r9, #156]	@ 0x9c
 801089e:	f8c9 20a0 	str.w	r2, [r9, #160]	@ 0xa0
 80108a2:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 80108a6:	f8c9 00a4 	str.w	r0, [r9, #164]	@ 0xa4
 80108aa:	f509 6b14 	add.w	fp, r9, #2368	@ 0x940
 80108ae:	f8c9 10a8 	str.w	r1, [r9, #168]	@ 0xa8
 80108b2:	f8c9 20ac 	str.w	r2, [r9, #172]	@ 0xac
 80108b6:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 80108ba:	f8c9 20b8 	str.w	r2, [r9, #184]	@ 0xb8
 80108be:	f44f 1248 	mov.w	r2, #3276800	@ 0x320000
 80108c2:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 80108c6:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
 80108ca:	f20d 61bc 	addw	r1, sp, #1724	@ 0x6bc
 80108ce:	edc9 8a30 	vstr	s17, [r9, #192]	@ 0xc0
 80108d2:	edc9 8a4a 	vstr	s17, [r9, #296]	@ 0x128
 80108d6:	edc9 8a31 	vstr	s17, [r9, #196]	@ 0xc4
 80108da:	edc9 8a4b 	vstr	s17, [r9, #300]	@ 0x12c
 80108de:	edc9 8a32 	vstr	s17, [r9, #200]	@ 0xc8
 80108e2:	edc9 8a4c 	vstr	s17, [r9, #304]	@ 0x130
 80108e6:	edc9 8a33 	vstr	s17, [r9, #204]	@ 0xcc
 80108ea:	edc9 8a4d 	vstr	s17, [r9, #308]	@ 0x134
 80108ee:	edc9 8a34 	vstr	s17, [r9, #208]	@ 0xd0
 80108f2:	edc9 8a4e 	vstr	s17, [r9, #312]	@ 0x138
 80108f6:	edc9 8a35 	vstr	s17, [r9, #212]	@ 0xd4
 80108fa:	edc9 8a4f 	vstr	s17, [r9, #316]	@ 0x13c
 80108fe:	edc9 8a36 	vstr	s17, [r9, #216]	@ 0xd8
 8010902:	edc9 8a50 	vstr	s17, [r9, #320]	@ 0x140
 8010906:	edc9 8a37 	vstr	s17, [r9, #220]	@ 0xdc
 801090a:	edc9 8a51 	vstr	s17, [r9, #324]	@ 0x144
 801090e:	edc9 8a38 	vstr	s17, [r9, #224]	@ 0xe0
 8010912:	edc9 8a52 	vstr	s17, [r9, #328]	@ 0x148
 8010916:	edc9 8a39 	vstr	s17, [r9, #228]	@ 0xe4
 801091a:	edc9 8a53 	vstr	s17, [r9, #332]	@ 0x14c
 801091e:	edc9 8a3a 	vstr	s17, [r9, #232]	@ 0xe8
 8010922:	edc9 8a54 	vstr	s17, [r9, #336]	@ 0x150
 8010926:	edc9 8a3b 	vstr	s17, [r9, #236]	@ 0xec
 801092a:	edc9 8a55 	vstr	s17, [r9, #340]	@ 0x154
 801092e:	edc9 8a3c 	vstr	s17, [r9, #240]	@ 0xf0
 8010932:	edc9 8a56 	vstr	s17, [r9, #344]	@ 0x158
 8010936:	edc9 8a3d 	vstr	s17, [r9, #244]	@ 0xf4
 801093a:	edc9 8a57 	vstr	s17, [r9, #348]	@ 0x15c
 801093e:	edc9 8a3e 	vstr	s17, [r9, #248]	@ 0xf8
 8010942:	edc9 8a58 	vstr	s17, [r9, #352]	@ 0x160
 8010946:	edc9 8a3f 	vstr	s17, [r9, #252]	@ 0xfc
 801094a:	edc9 8a59 	vstr	s17, [r9, #356]	@ 0x164
 801094e:	edc9 8a40 	vstr	s17, [r9, #256]	@ 0x100
 8010952:	edc9 8a5a 	vstr	s17, [r9, #360]	@ 0x168
 8010956:	f8c9 21a0 	str.w	r2, [r9, #416]	@ 0x1a0
 801095a:	f04f 0201 	mov.w	r2, #1
 801095e:	edc9 7a75 	vstr	s15, [r9, #468]	@ 0x1d4
 8010962:	edc9 8a41 	vstr	s17, [r9, #260]	@ 0x104
 8010966:	edc9 8a5b 	vstr	s17, [r9, #364]	@ 0x16c
 801096a:	edc9 8a42 	vstr	s17, [r9, #264]	@ 0x108
 801096e:	edc9 8a5c 	vstr	s17, [r9, #368]	@ 0x170
 8010972:	edc9 8a43 	vstr	s17, [r9, #268]	@ 0x10c
 8010976:	edc9 8a5d 	vstr	s17, [r9, #372]	@ 0x174
 801097a:	edc9 8a44 	vstr	s17, [r9, #272]	@ 0x110
 801097e:	edc9 8a5e 	vstr	s17, [r9, #376]	@ 0x178
 8010982:	edc9 8a45 	vstr	s17, [r9, #276]	@ 0x114
 8010986:	edc9 8a5f 	vstr	s17, [r9, #380]	@ 0x17c
 801098a:	edc9 8a46 	vstr	s17, [r9, #280]	@ 0x118
 801098e:	edc9 8a60 	vstr	s17, [r9, #384]	@ 0x180
 8010992:	edc9 8a47 	vstr	s17, [r9, #284]	@ 0x11c
 8010996:	edc9 8a61 	vstr	s17, [r9, #388]	@ 0x184
 801099a:	edc9 8a48 	vstr	s17, [r9, #288]	@ 0x120
 801099e:	edc9 8a62 	vstr	s17, [r9, #392]	@ 0x188
 80109a2:	edc9 8a49 	vstr	s17, [r9, #292]	@ 0x124
 80109a6:	edc9 8a63 	vstr	s17, [r9, #396]	@ 0x18c
 80109aa:	f889 81a4 	strb.w	r8, [r9, #420]	@ 0x1a4
 80109ae:	f8c9 81a6 	str.w	r8, [r9, #422]	@ 0x1a6
 80109b2:	edc9 8a6c 	vstr	s17, [r9, #432]	@ 0x1b0
 80109b6:	edc9 8a76 	vstr	s17, [r9, #472]	@ 0x1d8
 80109ba:	edc9 8a77 	vstr	s17, [r9, #476]	@ 0x1dc
 80109be:	edc9 8a78 	vstr	s17, [r9, #480]	@ 0x1e0
 80109c2:	edc9 8a79 	vstr	s17, [r9, #484]	@ 0x1e4
 80109c6:	edc9 8a7a 	vstr	s17, [r9, #488]	@ 0x1e8
 80109ca:	edc9 8a7b 	vstr	s17, [r9, #492]	@ 0x1ec
 80109ce:	edc9 8a7c 	vstr	s17, [r9, #496]	@ 0x1f0
 80109d2:	edc9 8a7d 	vstr	s17, [r9, #500]	@ 0x1f4
 80109d6:	edc9 8a6d 	vstr	s17, [r9, #436]	@ 0x1b4
 80109da:	edc9 8a7e 	vstr	s17, [r9, #504]	@ 0x1f8
 80109de:	edc9 7a7f 	vstr	s15, [r9, #508]	@ 0x1fc
 80109e2:	edc9 7a89 	vstr	s15, [r9, #548]	@ 0x224
 80109e6:	e01f      	b.n	8010a28 <MFX_emptyAttitude+0x3ec>
 80109e8:	0801c50c 	.word	0x0801c50c
 80109ec:	00000000 	.word	0x00000000
 80109f0:	40a00000 	.word	0x40a00000
 80109f4:	3f4ccccd 	.word	0x3f4ccccd
 80109f8:	3f333333 	.word	0x3f333333
 80109fc:	41200000 	.word	0x41200000
 8010a00:	447a0000 	.word	0x447a0000
 8010a04:	01010100 	.word	0x01010100
 8010a08:	3a9d4952 	.word	0x3a9d4952
 8010a0c:	3ac49ba6 	.word	0x3ac49ba6
 8010a10:	3b03126f 	.word	0x3b03126f
 8010a14:	3a83126f 	.word	0x3a83126f
 8010a18:	3f639581 	.word	0x3f639581
 8010a1c:	402ab021 	.word	0x402ab021
 8010a20:	3f13f7cf 	.word	0x3f13f7cf
 8010a24:	3f2ac083 	.word	0x3f2ac083
 8010a28:	edc9 7a93 	vstr	s15, [r9, #588]	@ 0x24c
 8010a2c:	edc9 8a80 	vstr	s17, [r9, #512]	@ 0x200
 8010a30:	edc9 8a81 	vstr	s17, [r9, #516]	@ 0x204
 8010a34:	edc9 8a82 	vstr	s17, [r9, #520]	@ 0x208
 8010a38:	edc9 8a83 	vstr	s17, [r9, #524]	@ 0x20c
 8010a3c:	edc9 8a84 	vstr	s17, [r9, #528]	@ 0x210
 8010a40:	edc9 8a85 	vstr	s17, [r9, #532]	@ 0x214
 8010a44:	edc9 8a86 	vstr	s17, [r9, #536]	@ 0x218
 8010a48:	edc9 8a6e 	vstr	s17, [r9, #440]	@ 0x1b8
 8010a4c:	edc9 8a87 	vstr	s17, [r9, #540]	@ 0x21c
 8010a50:	edc9 8a88 	vstr	s17, [r9, #544]	@ 0x220
 8010a54:	edc9 8a8a 	vstr	s17, [r9, #552]	@ 0x228
 8010a58:	edc9 8a8b 	vstr	s17, [r9, #556]	@ 0x22c
 8010a5c:	edc9 8a8c 	vstr	s17, [r9, #560]	@ 0x230
 8010a60:	edc9 8a8d 	vstr	s17, [r9, #564]	@ 0x234
 8010a64:	edc9 8a8e 	vstr	s17, [r9, #568]	@ 0x238
 8010a68:	edc9 8a8f 	vstr	s17, [r9, #572]	@ 0x23c
 8010a6c:	edc9 8a6f 	vstr	s17, [r9, #444]	@ 0x1bc
 8010a70:	edc9 8a90 	vstr	s17, [r9, #576]	@ 0x240
 8010a74:	edc9 8a91 	vstr	s17, [r9, #580]	@ 0x244
 8010a78:	edc9 8a92 	vstr	s17, [r9, #584]	@ 0x248
 8010a7c:	edc9 8a94 	vstr	s17, [r9, #592]	@ 0x250
 8010a80:	edc9 8a95 	vstr	s17, [r9, #596]	@ 0x254
 8010a84:	edc9 8a96 	vstr	s17, [r9, #600]	@ 0x258
 8010a88:	edc9 8a97 	vstr	s17, [r9, #604]	@ 0x25c
 8010a8c:	edc9 8a98 	vstr	s17, [r9, #608]	@ 0x260
 8010a90:	edc9 8a70 	vstr	s17, [r9, #448]	@ 0x1c0
 8010a94:	edc9 8a99 	vstr	s17, [r9, #612]	@ 0x264
 8010a98:	edc9 8a9a 	vstr	s17, [r9, #616]	@ 0x268
 8010a9c:	edc9 8a9b 	vstr	s17, [r9, #620]	@ 0x26c
 8010aa0:	edc9 8a9c 	vstr	s17, [r9, #624]	@ 0x270
 8010aa4:	edc9 7a9d 	vstr	s15, [r9, #628]	@ 0x274
 8010aa8:	edc9 7aa7 	vstr	s15, [r9, #668]	@ 0x29c
 8010aac:	edc9 7ab1 	vstr	s15, [r9, #708]	@ 0x2c4
 8010ab0:	edc9 8a9e 	vstr	s17, [r9, #632]	@ 0x278
 8010ab4:	edc9 8a9f 	vstr	s17, [r9, #636]	@ 0x27c
 8010ab8:	edc9 8aa0 	vstr	s17, [r9, #640]	@ 0x280
 8010abc:	edc9 8aa1 	vstr	s17, [r9, #644]	@ 0x284
 8010ac0:	edc9 8a71 	vstr	s17, [r9, #452]	@ 0x1c4
 8010ac4:	edc9 8aa2 	vstr	s17, [r9, #648]	@ 0x288
 8010ac8:	edc9 8aa3 	vstr	s17, [r9, #652]	@ 0x28c
 8010acc:	edc9 8aa4 	vstr	s17, [r9, #656]	@ 0x290
 8010ad0:	edc9 8aa5 	vstr	s17, [r9, #660]	@ 0x294
 8010ad4:	edc9 8aa6 	vstr	s17, [r9, #664]	@ 0x298
 8010ad8:	edc9 8aa8 	vstr	s17, [r9, #672]	@ 0x2a0
 8010adc:	edc9 8aa9 	vstr	s17, [r9, #676]	@ 0x2a4
 8010ae0:	edc9 8aaa 	vstr	s17, [r9, #680]	@ 0x2a8
 8010ae4:	edc9 8a72 	vstr	s17, [r9, #456]	@ 0x1c8
 8010ae8:	edc9 8aab 	vstr	s17, [r9, #684]	@ 0x2ac
 8010aec:	edc9 8aac 	vstr	s17, [r9, #688]	@ 0x2b0
 8010af0:	edc9 8aad 	vstr	s17, [r9, #692]	@ 0x2b4
 8010af4:	edc9 8aae 	vstr	s17, [r9, #696]	@ 0x2b8
 8010af8:	edc9 8aaf 	vstr	s17, [r9, #700]	@ 0x2bc
 8010afc:	edc9 8ab0 	vstr	s17, [r9, #704]	@ 0x2c0
 8010b00:	edc9 8ab2 	vstr	s17, [r9, #712]	@ 0x2c8
 8010b04:	edc9 8ab3 	vstr	s17, [r9, #716]	@ 0x2cc
 8010b08:	edc9 8a73 	vstr	s17, [r9, #460]	@ 0x1cc
 8010b0c:	edc9 8ab4 	vstr	s17, [r9, #720]	@ 0x2d0
 8010b10:	edc9 8ab5 	vstr	s17, [r9, #724]	@ 0x2d4
 8010b14:	edc9 8ab6 	vstr	s17, [r9, #728]	@ 0x2d8
 8010b18:	edc9 8ab7 	vstr	s17, [r9, #732]	@ 0x2dc
 8010b1c:	edc9 8ab8 	vstr	s17, [r9, #736]	@ 0x2e0
 8010b20:	edc9 8ab9 	vstr	s17, [r9, #740]	@ 0x2e4
 8010b24:	edc9 8aba 	vstr	s17, [r9, #744]	@ 0x2e8
 8010b28:	f889 21ac 	strb.w	r2, [r9, #428]	@ 0x1ac
 8010b2c:	f50d 624a 	add.w	r2, sp, #3232	@ 0xca0
 8010b30:	f8cd a00c 	str.w	sl, [sp, #12]
 8010b34:	f609 1a5c 	addw	sl, r9, #2396	@ 0x95c
 8010b38:	9202      	str	r2, [sp, #8]
 8010b3a:	f50d 6233 	add.w	r2, sp, #2864	@ 0xb30
 8010b3e:	9201      	str	r2, [sp, #4]
 8010b40:	f50d 621c 	add.w	r2, sp, #2496	@ 0x9c0
 8010b44:	9200      	str	r2, [sp, #0]
 8010b46:	f50d 62dc 	add.w	r2, sp, #1760	@ 0x6e0
 8010b4a:	7820      	ldrb	r0, [r4, #0]
 8010b4c:	f609 1458 	addw	r4, r9, #2392	@ 0x958
 8010b50:	edc9 7abb 	vstr	s15, [r9, #748]	@ 0x2ec
 8010b54:	edc9 7ac5 	vstr	s15, [r9, #788]	@ 0x314
 8010b58:	edc9 8abc 	vstr	s17, [r9, #752]	@ 0x2f0
 8010b5c:	edc9 8a74 	vstr	s17, [r9, #464]	@ 0x1d0
 8010b60:	edc9 8abd 	vstr	s17, [r9, #756]	@ 0x2f4
 8010b64:	edc9 8abe 	vstr	s17, [r9, #760]	@ 0x2f8
 8010b68:	edc9 8abf 	vstr	s17, [r9, #764]	@ 0x2fc
 8010b6c:	edc9 8ac0 	vstr	s17, [r9, #768]	@ 0x300
 8010b70:	edc9 8ac1 	vstr	s17, [r9, #772]	@ 0x304
 8010b74:	edc9 8ac2 	vstr	s17, [r9, #776]	@ 0x308
 8010b78:	edc9 8ac3 	vstr	s17, [r9, #780]	@ 0x30c
 8010b7c:	edc9 8ac4 	vstr	s17, [r9, #784]	@ 0x310
 8010b80:	f7fd ff1c 	bl	800e9bc <DataHist_parameters>
 8010b84:	f609 1344 	addw	r3, r9, #2372	@ 0x944
 8010b88:	f509 6216 	add.w	r2, r9, #2400	@ 0x960
 8010b8c:	f609 1168 	addw	r1, r9, #2408	@ 0x968
 8010b90:	f509 6017 	add.w	r0, r9, #2416	@ 0x970
 8010b94:	f10d 0c20 	add.w	ip, sp, #32
 8010b98:	9304      	str	r3, [sp, #16]
 8010b9a:	f609 1e6c 	addw	lr, r9, #2412	@ 0x96c
 8010b9e:	9205      	str	r2, [sp, #20]
 8010ba0:	9106      	str	r1, [sp, #24]
 8010ba2:	9007      	str	r0, [sp, #28]
 8010ba4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ba8:	f8c9 393c 	str.w	r3, [r9, #2364]	@ 0x93c
 8010bac:	9b04      	ldr	r3, [sp, #16]
 8010bae:	f8c9 0930 	str.w	r0, [r9, #2352]	@ 0x930
 8010bb2:	f8c9 1934 	str.w	r1, [r9, #2356]	@ 0x934
 8010bb6:	f8c9 2938 	str.w	r2, [r9, #2360]	@ 0x938
 8010bba:	9906      	ldr	r1, [sp, #24]
 8010bbc:	edcb 8a00 	vstr	s17, [fp]
 8010bc0:	9a05      	ldr	r2, [sp, #20]
 8010bc2:	edca 8a00 	vstr	s17, [sl]
 8010bc6:	9807      	ldr	r0, [sp, #28]
 8010bc8:	edc3 8a00 	vstr	s17, [r3]
 8010bcc:	230a      	movs	r3, #10
 8010bce:	edc2 8a00 	vstr	s17, [r2]
 8010bd2:	edc7 8a00 	vstr	s17, [r7]
 8010bd6:	edc6 8a00 	vstr	s17, [r6]
 8010bda:	f8c9 894c 	str.w	r8, [r9, #2380]	@ 0x94c
 8010bde:	f8a9 8950 	strh.w	r8, [r9, #2384]	@ 0x950
 8010be2:	edc5 8a00 	vstr	s17, [r5]
 8010be6:	ed84 8a00 	vstr	s16, [r4]
 8010bea:	edc1 8a00 	vstr	s17, [r1]
 8010bee:	edc0 8a00 	vstr	s17, [r0]
 8010bf2:	edce 8a00 	vstr	s17, [lr]
 8010bf6:	f8c9 3974 	str.w	r3, [r9, #2420]	@ 0x974
 8010bfa:	f889 8978 	strb.w	r8, [r9, #2424]	@ 0x978
 8010bfe:	f60d 4dd4 	addw	sp, sp, #3284	@ 0xcd4
 8010c02:	ecbd 8b02 	vpop	{d8}
 8010c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0a:	bf00      	nop
 8010c0c:	0000      	movs	r0, r0
	...

08010c10 <iNemoEngine_API_Update>:
 8010c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c14:	ed2d 8b10 	vpush	{d8-d15}
 8010c18:	f2ad 5d1c 	subw	sp, sp, #1308	@ 0x51c
 8010c1c:	eeb0 8a40 	vmov.f32	s16, s0
 8010c20:	4607      	mov	r7, r0
 8010c22:	4688      	mov	r8, r1
 8010c24:	4614      	mov	r4, r2
 8010c26:	932c      	str	r3, [sp, #176]	@ 0xb0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f000 8204 	beq.w	8011036 <iNemoEngine_API_Update+0x426>
 8010c2e:	68e0      	ldr	r0, [r4, #12]
 8010c30:	abaf      	add	r3, sp, #700	@ 0x2bc
 8010c32:	6921      	ldr	r1, [r4, #16]
 8010c34:	6962      	ldr	r2, [r4, #20]
 8010c36:	c307      	stmia	r3!, {r0, r1, r2}
 8010c38:	6820      	ldr	r0, [r4, #0]
 8010c3a:	abac      	add	r3, sp, #688	@ 0x2b0
 8010c3c:	6861      	ldr	r1, [r4, #4]
 8010c3e:	68a2      	ldr	r2, [r4, #8]
 8010c40:	c307      	stmia	r3!, {r0, r1, r2}
 8010c42:	abb2      	add	r3, sp, #712	@ 0x2c8
 8010c44:	69a0      	ldr	r0, [r4, #24]
 8010c46:	69e1      	ldr	r1, [r4, #28]
 8010c48:	6a22      	ldr	r2, [r4, #32]
 8010c4a:	c307      	stmia	r3!, {r0, r1, r2}
 8010c4c:	f897 3978 	ldrb.w	r3, [r7, #2424]	@ 0x978
 8010c50:	b12b      	cbz	r3, 8010c5e <iNemoEngine_API_Update+0x4e>
 8010c52:	f8b7 2950 	ldrh.w	r2, [r7, #2384]	@ 0x950
 8010c56:	793b      	ldrb	r3, [r7, #4]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	f081 87b5 	bcs.w	8012bc8 <iNemoEngine_API_Update+0x1fb8>
 8010c5e:	ae3b      	add	r6, sp, #236	@ 0xec
 8010c60:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 8010c64:	aaaf      	add	r2, sp, #700	@ 0x2bc
 8010c66:	ad41      	add	r5, sp, #260	@ 0x104
 8010c68:	4630      	mov	r0, r6
 8010c6a:	9128      	str	r1, [sp, #160]	@ 0xa0
 8010c6c:	f7fd ff50 	bl	800eb10 <rotVect>
 8010c70:	aab2      	add	r2, sp, #712	@ 0x2c8
 8010c72:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010c76:	a83e      	add	r0, sp, #248	@ 0xf8
 8010c78:	f7fd ff4a 	bl	800eb10 <rotVect>
 8010c7c:	aaac      	add	r2, sp, #688	@ 0x2b0
 8010c7e:	f107 0143 	add.w	r1, r7, #67	@ 0x43
 8010c82:	4628      	mov	r0, r5
 8010c84:	f7fd ff44 	bl	800eb10 <rotVect>
 8010c88:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8010c8c:	b923      	cbnz	r3, 8010c98 <iNemoEngine_API_Update+0x88>
 8010c8e:	4b98      	ldr	r3, [pc, #608]	@ (8010ef0 <iNemoEngine_API_Update+0x2e0>)
 8010c90:	606b      	str	r3, [r5, #4]
 8010c92:	60ab      	str	r3, [r5, #8]
 8010c94:	2300      	movs	r3, #0
 8010c96:	602b      	str	r3, [r5, #0]
 8010c98:	f8d7 394c 	ldr.w	r3, [r7, #2380]	@ 0x94c
 8010c9c:	2b09      	cmp	r3, #9
 8010c9e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8010ca0:	d851      	bhi.n	8010d46 <iNemoEngine_API_Update+0x136>
 8010ca2:	edd6 aa01 	vldr	s21, [r6, #4]
 8010ca6:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 8010caa:	ed96 ba00 	vldr	s22, [r6]
 8010cae:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8010cb2:	ed96 aa02 	vldr	s20, [r6, #8]
 8010cb6:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8010cba:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8010cbe:	ee17 0a90 	vmov	r0, s15
 8010cc2:	f7ef fe0b 	bl	80008dc <__aeabi_f2d>
 8010cc6:	ec41 0b10 	vmov	d0, r0, r1
 8010cca:	f009 fdd9 	bl	801a880 <sqrt>
 8010cce:	ec51 0b10 	vmov	r0, r1, d0
 8010cd2:	f7ef fee3 	bl	8000a9c <__aeabi_d2f>
 8010cd6:	ee07 0a90 	vmov	s15, r0
 8010cda:	ed95 9a01 	vldr	s18, [r5, #4]
 8010cde:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 8010ce2:	edd5 9a00 	vldr	s19, [r5]
 8010ce6:	edd5 8a02 	vldr	s17, [r5, #8]
 8010cea:	ee69 7a09 	vmul.f32	s15, s18, s18
 8010cee:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8010cf2:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8010cf6:	ee2b ba07 	vmul.f32	s22, s22, s14
 8010cfa:	ee6a aa87 	vmul.f32	s21, s21, s14
 8010cfe:	ee2a aa07 	vmul.f32	s20, s20, s14
 8010d02:	ed86 ba00 	vstr	s22, [r6]
 8010d06:	ee17 0a90 	vmov	r0, s15
 8010d0a:	edc6 aa01 	vstr	s21, [r6, #4]
 8010d0e:	ed86 aa02 	vstr	s20, [r6, #8]
 8010d12:	f7ef fde3 	bl	80008dc <__aeabi_f2d>
 8010d16:	ec41 0b10 	vmov	d0, r0, r1
 8010d1a:	f009 fdb1 	bl	801a880 <sqrt>
 8010d1e:	ec51 0b10 	vmov	r0, r1, d0
 8010d22:	f7ef febb 	bl	8000a9c <__aeabi_d2f>
 8010d26:	ee07 0a10 	vmov	s14, r0
 8010d2a:	eecb 7a87 	vdiv.f32	s15, s23, s14
 8010d2e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8010d32:	ee29 9a27 	vmul.f32	s18, s18, s15
 8010d36:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010d3a:	edc5 9a00 	vstr	s19, [r5]
 8010d3e:	ed85 9a01 	vstr	s18, [r5, #4]
 8010d42:	edc5 8a02 	vstr	s17, [r5, #8]
 8010d46:	793b      	ldrb	r3, [r7, #4]
 8010d48:	f8b7 2950 	ldrh.w	r2, [r7, #2384]	@ 0x950
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	f080 80e7 	bcs.w	8010f20 <iNemoEngine_API_Update+0x310>
 8010d52:	abda      	add	r3, sp, #872	@ 0x368
 8010d54:	f50d 793c 	add.w	r9, sp, #752	@ 0x2f0
 8010d58:	edd3 8a29 	vldr	s17, [r3, #164]	@ 0xa4
 8010d5c:	9318      	str	r3, [sp, #96]	@ 0x60
 8010d5e:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8010d62:	9325      	str	r3, [sp, #148]	@ 0x94
 8010d64:	f607 1334 	addw	r3, r7, #2356	@ 0x934
 8010d68:	9326      	str	r3, [sp, #152]	@ 0x98
 8010d6a:	f607 1338 	addw	r3, r7, #2360	@ 0x938
 8010d6e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010d70:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 8010d74:	9314      	str	r3, [sp, #80]	@ 0x50
 8010d76:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8010d78:	aaaf      	add	r2, sp, #700	@ 0x2bc
 8010d7a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8010d7c:	4648      	mov	r0, r9
 8010d7e:	3301      	adds	r3, #1
 8010d80:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 8010d84:	f7fd fec4 	bl	800eb10 <rotVect>
 8010d88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010d8a:	4649      	mov	r1, r9
 8010d8c:	4642      	mov	r2, r8
 8010d8e:	ed93 aa00 	vldr	s20, [r3]
 8010d92:	f108 000c 	add.w	r0, r8, #12
 8010d96:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f8c8 300c 	str.w	r3, [r8, #12]
 8010d9e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f8c8 3010 	str.w	r3, [r8, #16]
 8010da6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	ed88 aa06 	vstr	s20, [r8, #24]
 8010dae:	f8c8 3014 	str.w	r3, [r8, #20]
 8010db2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010db6:	9301      	str	r3, [sp, #4]
 8010db8:	f108 0328 	add.w	r3, r8, #40	@ 0x28
 8010dbc:	9300      	str	r3, [sp, #0]
 8010dbe:	f108 031c 	add.w	r3, r8, #28
 8010dc2:	f7ff fb6d 	bl	80104a0 <output_update>
 8010dc6:	edd8 9a00 	vldr	s19, [r8]
 8010dca:	ed98 9a01 	vldr	s18, [r8, #4]
 8010dce:	eeb0 0a69 	vmov.f32	s0, s19
 8010dd2:	f009 fe35 	bl	801aa40 <sinf>
 8010dd6:	eeb0 8a40 	vmov.f32	s16, s0
 8010dda:	eeb0 0a69 	vmov.f32	s0, s19
 8010dde:	f009 fef3 	bl	801abc8 <cosf>
 8010de2:	eef0 6ac9 	vabs.f32	s13, s18
 8010de6:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8010ef4 <iNemoEngine_API_Update+0x2e4>
 8010dea:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010dee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010df0:	ee68 7a08 	vmul.f32	s15, s16, s16
 8010df4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010df8:	edd3 5a33 	vldr	s11, [r3, #204]	@ 0xcc
 8010dfc:	ed93 6a3d 	vldr	s12, [r3, #244]	@ 0xf4
 8010e00:	ee20 8a25 	vmul.f32	s16, s0, s11
 8010e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e08:	eea7 8a86 	vfma.f32	s16, s15, s12
 8010e0c:	d569      	bpl.n	8010ee2 <iNemoEngine_API_Update+0x2d2>
 8010e0e:	eeb0 0a49 	vmov.f32	s0, s18
 8010e12:	f009 fdb7 	bl	801a984 <tanf>
 8010e16:	eeb0 7a68 	vmov.f32	s14, s17
 8010e1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010e1e:	eea0 7a08 	vfma.f32	s14, s0, s16
 8010e22:	eef1 7ac7 	vsqrt.f32	s15, s14
 8010e26:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8010ef8 <iNemoEngine_API_Update+0x2e8>
 8010e2a:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8010f14 <iNemoEngine_API_Update+0x304>
 8010e2e:	4c33      	ldr	r4, [pc, #204]	@ (8010efc <iNemoEngine_API_Update+0x2ec>)
 8010e30:	ed98 9a04 	vldr	s18, [r8, #16]
 8010e34:	edd8 8a03 	vldr	s17, [r8, #12]
 8010e38:	ed98 8a05 	vldr	s16, [r8, #20]
 8010e3c:	ed98 7a08 	vldr	s14, [r8, #32]
 8010e40:	ed98 0a07 	vldr	s0, [r8, #28]
 8010e44:	ed98 1a09 	vldr	s2, [r8, #36]	@ 0x24
 8010e48:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 8010e4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010e50:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 8010e54:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8010e58:	edc8 7a0e 	vstr	s15, [r8, #56]	@ 0x38
 8010e5c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010e60:	bb73      	cbnz	r3, 8010ec0 <iNemoEngine_API_Update+0x2b0>
 8010e62:	eef0 0a47 	vmov.f32	s1, s14
 8010e66:	f7fd feb7 	bl	800ebd8 <findDirection>
 8010e6a:	f8c4 03c0 	str.w	r0, [r4, #960]	@ 0x3c0
 8010e6e:	2805      	cmp	r0, #5
 8010e70:	f204 8083 	bhi.w	8014f7a <iNemoEngine_API_Update+0x436a>
 8010e74:	e8df f010 	tbh	[pc, r0, lsl #1]
 8010e78:	0ee3000a 	.word	0x0ee3000a
 8010e7c:	0eb20006 	.word	0x0eb20006
 8010e80:	000a0006 	.word	0x000a0006
 8010e84:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010f00 <iNemoEngine_API_Update+0x2f0>
 8010e88:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8010e8c:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8010f04 <iNemoEngine_API_Update+0x2f4>
 8010e90:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e98:	bfa8      	it	ge
 8010e9a:	ee79 9ae7 	vsubge.f32	s19, s19, s15
 8010e9e:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8010ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea6:	d503      	bpl.n	8010eb0 <iNemoEngine_API_Update+0x2a0>
 8010ea8:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8010f04 <iNemoEngine_API_Update+0x2f4>
 8010eac:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8010eb0:	edc8 9a0d 	vstr	s19, [r8, #52]	@ 0x34
 8010eb4:	f20d 5d1c 	addw	sp, sp, #1308	@ 0x51c
 8010eb8:	ecbd 8b10 	vpop	{d8-d15}
 8010ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec0:	eef0 0a40 	vmov.f32	s1, s0
 8010ec4:	eeb1 1a41 	vneg.f32	s2, s2
 8010ec8:	eeb0 0a47 	vmov.f32	s0, s14
 8010ecc:	f7fd fe84 	bl	800ebd8 <findDirection>
 8010ed0:	eef0 7a68 	vmov.f32	s15, s17
 8010ed4:	eeb1 8a48 	vneg.f32	s16, s16
 8010ed8:	eef0 8a49 	vmov.f32	s17, s18
 8010edc:	eeb0 9a67 	vmov.f32	s18, s15
 8010ee0:	e7c3      	b.n	8010e6a <iNemoEngine_API_Update+0x25a>
 8010ee2:	eeb0 7a68 	vmov.f32	s14, s17
 8010ee6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010f08 <iNemoEngine_API_Update+0x2f8>
 8010eea:	eea8 7a27 	vfma.f32	s14, s16, s15
 8010eee:	e798      	b.n	8010e22 <iNemoEngine_API_Update+0x212>
 8010ef0:	3f333333 	.word	0x3f333333
 8010ef4:	3fbc430e 	.word	0x3fbc430e
 8010ef8:	40490fdb 	.word	0x40490fdb
 8010efc:	24000348 	.word	0x24000348
 8010f00:	43340000 	.word	0x43340000
 8010f04:	43b40000 	.word	0x43b40000
 8010f08:	42c6ab07 	.word	0x42c6ab07
 8010f0c:	3c03126f 	.word	0x3c03126f
 8010f10:	3b656042 	.word	0x3b656042
 8010f14:	3c8efa35 	.word	0x3c8efa35
 8010f18:	3ed93dd9 	.word	0x3ed93dd9
 8010f1c:	42c80000 	.word	0x42c80000
 8010f20:	ee07 3a90 	vmov	s15, r3
 8010f24:	ed5f 5a07 	vldr	s11, [pc, #-28]	@ 8010f0c <iNemoEngine_API_Update+0x2fc>
 8010f28:	f607 105c 	addw	r0, r7, #2396	@ 0x95c
 8010f2c:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8010f10 <iNemoEngine_API_Update+0x300>
 8010f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f34:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8010f14 <iNemoEngine_API_Update+0x304>
 8010f38:	f507 6116 	add.w	r1, r7, #2400	@ 0x960
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	f607 1264 	addw	r2, r7, #2404	@ 0x964
 8010f42:	2400      	movs	r4, #0
 8010f44:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010f48:	ed5f 9a0d 	vldr	s19, [pc, #-52]	@ 8010f18 <iNemoEngine_API_Update+0x308>
 8010f4c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8010f50:	edcd 7a06 	vstr	s15, [sp, #24]
 8010f54:	eef1 7ac6 	vsqrt.f32	s15, s12
 8010f58:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8010f5c:	edd0 6a00 	vldr	s13, [r0]
 8010f60:	edcd 6a19 	vstr	s13, [sp, #100]	@ 0x64
 8010f64:	ee66 fa87 	vmul.f32	s31, s13, s14
 8010f68:	edd1 6a00 	vldr	s13, [r1]
 8010f6c:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8010f70:	ee26 fa87 	vmul.f32	s30, s13, s14
 8010f74:	edcd 6a1a 	vstr	s13, [sp, #104]	@ 0x68
 8010f78:	edd2 6a00 	vldr	s13, [r2]
 8010f7c:	f8a7 4950 	strh.w	r4, [r7, #2384]	@ 0x950
 8010f80:	ac64      	add	r4, sp, #400	@ 0x190
 8010f82:	6003      	str	r3, [r0, #0]
 8010f84:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010f88:	600b      	str	r3, [r1, #0]
 8010f8a:	6013      	str	r3, [r2, #0]
 8010f8c:	ab67      	add	r3, sp, #412	@ 0x19c
 8010f8e:	797a      	ldrb	r2, [r7, #5]
 8010f90:	edcd 6a07 	vstr	s13, [sp, #28]
 8010f94:	920e      	str	r2, [sp, #56]	@ 0x38
 8010f96:	ed8d 7a0f 	vstr	s14, [sp, #60]	@ 0x3c
 8010f9a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010fa8:	2b01      	cmp	r3, #1
 8010faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010fae:	f002 804d 	beq.w	801304c <iNemoEngine_API_Update+0x243c>
 8010fb2:	2b02      	cmp	r3, #2
 8010fb4:	f002 8041 	beq.w	801303a <iNemoEngine_API_Update+0x242a>
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f001 87b5 	beq.w	8012f28 <iNemoEngine_API_Update+0x2318>
 8010fbe:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8010fc2:	ed97 aa05 	vldr	s20, [r7, #20]
 8010fc6:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 8010f1c <iNemoEngine_API_Update+0x30c>
 8010fca:	4a1c      	ldr	r2, [pc, #112]	@ (801103c <iNemoEngine_API_Update+0x42c>)
 8010fcc:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8010fd0:	ee2a aa07 	vmul.f32	s20, s20, s14
 8010fd4:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8010fd8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011040 <iNemoEngine_API_Update+0x430>
 8010fdc:	887b      	ldrh	r3, [r7, #2]
 8010fde:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010fe2:	eddf 5a18 	vldr	s11, [pc, #96]	@ 8011044 <iNemoEngine_API_Update+0x434>
 8010fe6:	1e59      	subs	r1, r3, #1
 8010fe8:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8010fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ff0:	2912      	cmp	r1, #18
 8010ff2:	edcd 5a32 	vstr	s11, [sp, #200]	@ 0xc8
 8010ff6:	edcd 7a21 	vstr	s15, [sp, #132]	@ 0x84
 8010ffa:	d829      	bhi.n	8011050 <iNemoEngine_API_Update+0x440>
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	b299      	uxth	r1, r3
 8011000:	b21b      	sxth	r3, r3
 8011002:	2903      	cmp	r1, #3
 8011004:	f241 879a 	bls.w	8012f3c <iNemoEngine_API_Update+0x232c>
 8011008:	ee07 3a90 	vmov	s15, r3
 801100c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011010:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011048 <iNemoEngine_API_Update+0x438>
 8011014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011018:	ee86 6a07 	vdiv.f32	s12, s12, s14
 801101c:	ee69 7a87 	vmul.f32	s15, s19, s14
 8011020:	eef0 9a67 	vmov.f32	s19, s15
 8011024:	ed8d 6a2a 	vstr	s12, [sp, #168]	@ 0xa8
 8011028:	ed9d 6a21 	vldr	s12, [sp, #132]	@ 0x84
 801102c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8011030:	ed8d 7a21 	vstr	s14, [sp, #132]	@ 0x84
 8011034:	e01f      	b.n	8011076 <iNemoEngine_API_Update+0x466>
 8011036:	ab50      	add	r3, sp, #320	@ 0x140
 8011038:	932c      	str	r3, [sp, #176]	@ 0xb0
 801103a:	e5f8      	b.n	8010c2e <iNemoEngine_API_Update+0x1e>
 801103c:	3a83126f 	.word	0x3a83126f
 8011040:	3fb50481 	.word	0x3fb50481
 8011044:	3e0f5c29 	.word	0x3e0f5c29
 8011048:	3d4ccccd 	.word	0x3d4ccccd
 801104c:	358637bd 	.word	0x358637bd
 8011050:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 801104c <iNemoEngine_API_Update+0x43c>
 8011054:	2300      	movs	r3, #0
 8011056:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801105a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801105e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011062:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8011066:	ee86 7a07 	vdiv.f32	s14, s12, s14
 801106a:	ed8d 7a2a 	vstr	s14, [sp, #168]	@ 0xa8
 801106e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8011072:	ee69 9a87 	vmul.f32	s19, s19, s14
 8011076:	edcd 7a91 	vstr	s15, [sp, #580]	@ 0x244
 801107a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801107e:	edcd 7a92 	vstr	s15, [sp, #584]	@ 0x248
 8011082:	a8da      	add	r0, sp, #872	@ 0x368
 8011084:	edcd 7a93 	vstr	s15, [sp, #588]	@ 0x24c
 8011088:	2100      	movs	r1, #0
 801108a:	eddd 7a21 	vldr	s15, [sp, #132]	@ 0x84
 801108e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8011092:	807b      	strh	r3, [r7, #2]
 8011094:	4605      	mov	r5, r0
 8011096:	edcd 7a9a 	vstr	s15, [sp, #616]	@ 0x268
 801109a:	eddd 7a32 	vldr	s15, [sp, #200]	@ 0xc8
 801109e:	4be3      	ldr	r3, [pc, #908]	@ (801142c <iNemoEngine_API_Update+0x81c>)
 80110a0:	edcd 7a9b 	vstr	s15, [sp, #620]	@ 0x26c
 80110a4:	eddd 7a2a 	vldr	s15, [sp, #168]	@ 0xa8
 80110a8:	9270      	str	r2, [sp, #448]	@ 0x1c0
 80110aa:	9271      	str	r2, [sp, #452]	@ 0x1c4
 80110ac:	9272      	str	r2, [sp, #456]	@ 0x1c8
 80110ae:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80110b2:	9375      	str	r3, [sp, #468]	@ 0x1d4
 80110b4:	ed8d 7a1c 	vstr	s14, [sp, #112]	@ 0x70
 80110b8:	9018      	str	r0, [sp, #96]	@ 0x60
 80110ba:	edcd 9a94 	vstr	s19, [sp, #592]	@ 0x250
 80110be:	edcd 9a95 	vstr	s19, [sp, #596]	@ 0x254
 80110c2:	edcd 9a96 	vstr	s19, [sp, #600]	@ 0x258
 80110c6:	edcd 8a97 	vstr	s17, [sp, #604]	@ 0x25c
 80110ca:	edcd 8a98 	vstr	s17, [sp, #608]	@ 0x260
 80110ce:	edcd 8a99 	vstr	s17, [sp, #612]	@ 0x264
 80110d2:	ed8d 7a9c 	vstr	s14, [sp, #624]	@ 0x270
 80110d6:	edcd 7a6d 	vstr	s15, [sp, #436]	@ 0x1b4
 80110da:	edcd 7a6e 	vstr	s15, [sp, #440]	@ 0x1b8
 80110de:	edcd 7a6f 	vstr	s15, [sp, #444]	@ 0x1bc
 80110e2:	f007 fb6e 	bl	80187c2 <memset>
 80110e6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80110ea:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
 80110ee:	f8c5 30dc 	str.w	r3, [r5, #220]	@ 0xdc
 80110f2:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
 80110f6:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
 80110fa:	f8c5 3178 	str.w	r3, [r5, #376]	@ 0x178
 80110fe:	f8c5 31ac 	str.w	r3, [r5, #428]	@ 0x1ac
 8011102:	7b7b      	ldrb	r3, [r7, #13]
 8011104:	931d      	str	r3, [sp, #116]	@ 0x74
 8011106:	2b00      	cmp	r3, #0
 8011108:	f001 8109 	beq.w	801231e <iNemoEngine_API_Update+0x170e>
 801110c:	ed94 8a01 	vldr	s16, [r4, #4]
 8011110:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8011114:	ed94 9a00 	vldr	s18, [r4]
 8011118:	ee68 7a08 	vmul.f32	s15, s16, s16
 801111c:	edd4 da02 	vldr	s27, [r4, #8]
 8011120:	ee28 7a07 	vmul.f32	s14, s16, s14
 8011124:	ee39 6a09 	vadd.f32	s12, s18, s18
 8011128:	eee9 7a09 	vfma.f32	s15, s18, s18
 801112c:	ee7d 5aad 	vadd.f32	s11, s27, s27
 8011130:	eef1 6a47 	vneg.f32	s13, s14
 8011134:	eeb1 5a65 	vneg.f32	s10, s11
 8011138:	eeed 7aad 	vfma.f32	s15, s27, s27
 801113c:	edcd 7a03 	vstr	s15, [sp, #12]
 8011140:	eef1 7a46 	vneg.f32	s15, s12
 8011144:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011146:	2230      	movs	r2, #48	@ 0x30
 8011148:	ed94 ca04 	vldr	s24, [r4, #16]
 801114c:	2100      	movs	r1, #0
 801114e:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 8011152:	a89d      	add	r0, sp, #628	@ 0x274
 8011154:	eef1 7a4c 	vneg.f32	s15, s24
 8011158:	ed94 ba05 	vldr	s22, [r4, #20]
 801115c:	edd4 ba03 	vldr	s23, [r4, #12]
 8011160:	edc3 5a01 	vstr	s11, [r3, #4]
 8011164:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011168:	ed83 7a02 	vstr	s14, [r3, #8]
 801116c:	ed83 5a0c 	vstr	s10, [r3, #48]	@ 0x30
 8011170:	ed83 6a0e 	vstr	s12, [r3, #56]	@ 0x38
 8011174:	edc3 7a05 	vstr	s15, [r3, #20]
 8011178:	eef1 7a67 	vneg.f32	s15, s15
 801117c:	edc3 6a18 	vstr	s13, [r3, #96]	@ 0x60
 8011180:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
 8011184:	ee7b 7a0b 	vadd.f32	s15, s22, s22
 8011188:	edc3 7a04 	vstr	s15, [r3, #16]
 801118c:	eef1 7a67 	vneg.f32	s15, s15
 8011190:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
 8011194:	ee7b 7aab 	vadd.f32	s15, s23, s23
 8011198:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 801119c:	eef1 7a67 	vneg.f32	s15, s15
 80111a0:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 80111a4:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 80111a8:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 80111ac:	9346      	str	r3, [sp, #280]	@ 0x118
 80111ae:	f007 fb08 	bl	80187c2 <memset>
 80111b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80111b6:	f897 31ac 	ldrb.w	r3, [r7, #428]	@ 0x1ac
 80111ba:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80111be:	edcd 7a1e 	vstr	s15, [sp, #120]	@ 0x78
 80111c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80111c6:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80111ca:	edcd 7a1f 	vstr	s15, [sp, #124]	@ 0x7c
 80111ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80111d2:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80111d6:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f042 83a4 	bne.w	8013928 <iNemoEngine_API_Update+0x2d18>
 80111e0:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 80111e4:	932d      	str	r3, [sp, #180]	@ 0xb4
 80111e6:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 80111ea:	932e      	str	r3, [sp, #184]	@ 0xb8
 80111ec:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80111f0:	932f      	str	r3, [sp, #188]	@ 0xbc
 80111f2:	f897 3318 	ldrb.w	r3, [r7, #792]	@ 0x318
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	f042 80b3 	bne.w	8013362 <iNemoEngine_API_Update+0x2752>
 80111fc:	f207 6324 	addw	r3, r7, #1572	@ 0x624
 8011200:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 8011204:	f207 4ab4 	addw	sl, r7, #1204	@ 0x4b4
 8011208:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 801120c:	9304      	str	r3, [sp, #16]
 801120e:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8011212:	930c      	str	r3, [sp, #48]	@ 0x30
 8011214:	f207 7394 	addw	r3, r7, #1940	@ 0x794
 8011218:	9305      	str	r3, [sp, #20]
 801121a:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 801121e:	f607 1134 	addw	r1, r7, #2356	@ 0x934
 8011222:	f507 6213 	add.w	r2, r7, #2352	@ 0x930
 8011226:	f607 1038 	addw	r0, r7, #2360	@ 0x938
 801122a:	9314      	str	r3, [sp, #80]	@ 0x50
 801122c:	2300      	movs	r3, #0
 801122e:	edd1 aa00 	vldr	s21, [r1]
 8011232:	9126      	str	r1, [sp, #152]	@ 0x98
 8011234:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011236:	edd2 ca00 	vldr	s25, [r2]
 801123a:	edd1 7a00 	vldr	s15, [r1]
 801123e:	2100      	movs	r1, #0
 8011240:	ed90 aa00 	vldr	s20, [r0]
 8011244:	935c      	str	r3, [sp, #368]	@ 0x170
 8011246:	935d      	str	r3, [sp, #372]	@ 0x174
 8011248:	935e      	str	r3, [sp, #376]	@ 0x178
 801124a:	935f      	str	r3, [sp, #380]	@ 0x17c
 801124c:	ab5c      	add	r3, sp, #368	@ 0x170
 801124e:	9225      	str	r2, [sp, #148]	@ 0x94
 8011250:	9027      	str	r0, [sp, #156]	@ 0x9c
 8011252:	edcd ca58 	vstr	s25, [sp, #352]	@ 0x160
 8011256:	edcd aa59 	vstr	s21, [sp, #356]	@ 0x164
 801125a:	ed8d aa5a 	vstr	s20, [sp, #360]	@ 0x168
 801125e:	edcd 7a2b 	vstr	s15, [sp, #172]	@ 0xac
 8011262:	edcd 7a5b 	vstr	s15, [sp, #364]	@ 0x16c
 8011266:	2903      	cmp	r1, #3
 8011268:	f301 8022 	bgt.w	80122b0 <iNemoEngine_API_Update+0x16a0>
 801126c:	ed92 7a00 	vldr	s14, [r2]
 8011270:	edd3 7a00 	vldr	s15, [r3]
 8011274:	eeb4 7a67 	vcmp.f32	s14, s15
 8011278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801127c:	f000 87bd 	beq.w	80121fa <iNemoEngine_API_Update+0x15ea>
 8011280:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8011430 <iNemoEngine_API_Update+0x820>
 8011284:	ed9d 7a03 	vldr	s14, [sp, #12]
 8011288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011290:	f101 806b 	bmi.w	801236a <iNemoEngine_API_Update+0x175a>
 8011294:	eeb1 eac7 	vsqrt.f32	s28, s14
 8011298:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801129c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80112a0:	ee3e 6a67 	vsub.f32	s12, s28, s15
 80112a4:	ee87 7a8e 	vdiv.f32	s14, s15, s28
 80112a8:	eef0 7ac6 	vabs.f32	s15, s12
 80112ac:	edcd 7a31 	vstr	s15, [sp, #196]	@ 0xc4
 80112b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80112b4:	edcd 7a30 	vstr	s15, [sp, #192]	@ 0xc0
 80112b8:	ee6c 7a0c 	vmul.f32	s15, s24, s24
 80112bc:	edd4 6a00 	vldr	s13, [r4]
 80112c0:	ed94 6a01 	vldr	s12, [r4, #4]
 80112c4:	ee67 5a26 	vmul.f32	s11, s14, s13
 80112c8:	edcd 6a36 	vstr	s13, [sp, #216]	@ 0xd8
 80112cc:	eeeb 7aab 	vfma.f32	s15, s23, s23
 80112d0:	ed8d 6a37 	vstr	s12, [sp, #220]	@ 0xdc
 80112d4:	ee67 6a06 	vmul.f32	s13, s14, s12
 80112d8:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8011430 <iNemoEngine_API_Update+0x820>
 80112dc:	ed94 5a02 	vldr	s10, [r4, #8]
 80112e0:	edcd 5a47 	vstr	s11, [sp, #284]	@ 0x11c
 80112e4:	ee25 7a07 	vmul.f32	s14, s10, s14
 80112e8:	ed8d 5a34 	vstr	s10, [sp, #208]	@ 0xd0
 80112ec:	edcd 6a48 	vstr	s13, [sp, #288]	@ 0x120
 80112f0:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 80112f4:	ed8d 7a49 	vstr	s14, [sp, #292]	@ 0x124
 80112f8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80112fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011300:	f101 802b 	bmi.w	801235a <iNemoEngine_API_Update+0x174a>
 8011304:	ed9f 6a4b 	vldr	s12, [pc, #300]	@ 8011434 <iNemoEngine_API_Update+0x824>
 8011308:	eef4 7ac6 	vcmpe.f32	s15, s12
 801130c:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 8011438 <iNemoEngine_API_Update+0x828>
 8011310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011314:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011318:	eef1 7ae7 	vsqrt.f32	s15, s15
 801131c:	bfcc      	ite	gt
 801131e:	2301      	movgt	r3, #1
 8011320:	2300      	movle	r3, #0
 8011322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011326:	bf48      	it	mi
 8011328:	f043 0301 	orrmi.w	r3, r3, #1
 801132c:	9312      	str	r3, [sp, #72]	@ 0x48
 801132e:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8011332:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8011336:	ed9a 2a00 	vldr	s4, [sl]
 801133a:	4628      	mov	r0, r5
 801133c:	eeb0 0a42 	vmov.f32	s0, s4
 8011340:	eec1 7aa7 	vdiv.f32	s15, s3, s15
 8011344:	ee2c 6a27 	vmul.f32	s12, s24, s15
 8011348:	ee66 6a26 	vmul.f32	s13, s12, s13
 801134c:	ed8d 6a4b 	vstr	s12, [sp, #300]	@ 0x12c
 8011350:	ee2b 6aa7 	vmul.f32	s12, s23, s15
 8011354:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8011358:	eee6 6a25 	vfma.f32	s13, s12, s11
 801135c:	ed8d 6a4a 	vstr	s12, [sp, #296]	@ 0x128
 8011360:	edcd 7a4c 	vstr	s15, [sp, #304]	@ 0x130
 8011364:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011368:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 801136c:	f7fd fdea 	bl	800ef44 <dataDerivative5>
 8011370:	9b04      	ldr	r3, [sp, #16]
 8011372:	4630      	mov	r0, r6
 8011374:	ed8d 0a23 	vstr	s0, [sp, #140]	@ 0x8c
 8011378:	edd3 7a00 	vldr	s15, [r3]
 801137c:	eeb0 0a67 	vmov.f32	s0, s15
 8011380:	edcd 7a02 	vstr	s15, [sp, #8]
 8011384:	f7fd fdde 	bl	800ef44 <dataDerivative5>
 8011388:	9b05      	ldr	r3, [sp, #20]
 801138a:	eef0 ea40 	vmov.f32	s29, s0
 801138e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011390:	ed93 da00 	vldr	s26, [r3]
 8011394:	eeb0 0a4d 	vmov.f32	s0, s26
 8011398:	f7fd fdd4 	bl	800ef44 <dataDerivative5>
 801139c:	eec1 7a82 	vdiv.f32	s15, s3, s4
 80113a0:	ed8d 0a24 	vstr	s0, [sp, #144]	@ 0x90
 80113a4:	ee27 9a89 	vmul.f32	s18, s15, s18
 80113a8:	ee27 8a88 	vmul.f32	s16, s15, s16
 80113ac:	ee67 daad 	vmul.f32	s27, s15, s27
 80113b0:	eddf 7a22 	vldr	s15, [pc, #136]	@ 801143c <iNemoEngine_API_Update+0x82c>
 80113b4:	eeb0 7ac9 	vabs.f32	s14, s18
 80113b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80113bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c0:	d51f      	bpl.n	8011402 <iNemoEngine_API_Update+0x7f2>
 80113c2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80113c6:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80113ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ce:	f281 8610 	bge.w	8012ff2 <iNemoEngine_API_Update+0x23e2>
 80113d2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80113d6:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80113da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113de:	f302 85c8 	bgt.w	8013f72 <iNemoEngine_API_Update+0x3362>
 80113e2:	ee79 7a67 	vsub.f32	s15, s18, s15
 80113e6:	ee17 0a90 	vmov	r0, s15
 80113ea:	f7ef fa77 	bl	80008dc <__aeabi_f2d>
 80113ee:	ec41 0b10 	vmov	d0, r0, r1
 80113f2:	f009 fca9 	bl	801ad48 <ceil>
 80113f6:	ec51 0b10 	vmov	r0, r1, d0
 80113fa:	f7ef fb4f 	bl	8000a9c <__aeabi_d2f>
 80113fe:	ee09 0a10 	vmov	s18, r0
 8011402:	eef0 7ac8 	vabs.f32	s15, s16
 8011406:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801143c <iNemoEngine_API_Update+0x82c>
 801140a:	ed8d 9a4d 	vstr	s18, [sp, #308]	@ 0x134
 801140e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011416:	d52b      	bpl.n	8011470 <iNemoEngine_API_Update+0x860>
 8011418:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801141c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011424:	f281 85af 	bge.w	8012f86 <iNemoEngine_API_Update+0x2376>
 8011428:	e00a      	b.n	8011440 <iNemoEngine_API_Update+0x830>
 801142a:	bf00      	nop
 801142c:	3a9d4952 	.word	0x3a9d4952
 8011430:	3c23d70a 	.word	0x3c23d70a
 8011434:	3fa0902f 	.word	0x3fa0902f
 8011438:	3f38f5c3 	.word	0x3f38f5c3
 801143c:	4b000000 	.word	0x4b000000
 8011440:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8011444:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801144c:	f302 8599 	bgt.w	8013f82 <iNemoEngine_API_Update+0x3372>
 8011450:	ee78 7a67 	vsub.f32	s15, s16, s15
 8011454:	ee17 0a90 	vmov	r0, s15
 8011458:	f7ef fa40 	bl	80008dc <__aeabi_f2d>
 801145c:	ec41 0b10 	vmov	d0, r0, r1
 8011460:	f009 fc72 	bl	801ad48 <ceil>
 8011464:	ec51 0b10 	vmov	r0, r1, d0
 8011468:	f7ef fb18 	bl	8000a9c <__aeabi_d2f>
 801146c:	ee08 0a10 	vmov	s16, r0
 8011470:	eef0 7aed 	vabs.f32	s15, s27
 8011474:	ed1f 7a0f 	vldr	s14, [pc, #-60]	@ 801143c <iNemoEngine_API_Update+0x82c>
 8011478:	ed8d 8a4e 	vstr	s16, [sp, #312]	@ 0x138
 801147c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011484:	d51f      	bpl.n	80114c6 <iNemoEngine_API_Update+0x8b6>
 8011486:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801148a:	eef4 dae7 	vcmpe.f32	s27, s15
 801148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011492:	f281 859c 	bge.w	8012fce <iNemoEngine_API_Update+0x23be>
 8011496:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801149a:	eef4 dac7 	vcmpe.f32	s27, s14
 801149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a2:	f302 8737 	bgt.w	8014314 <iNemoEngine_API_Update+0x3704>
 80114a6:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80114aa:	ee17 0a90 	vmov	r0, s15
 80114ae:	f7ef fa15 	bl	80008dc <__aeabi_f2d>
 80114b2:	ec41 0b10 	vmov	d0, r0, r1
 80114b6:	f009 fc47 	bl	801ad48 <ceil>
 80114ba:	ec51 0b10 	vmov	r0, r1, d0
 80114be:	f7ef faed 	bl	8000a9c <__aeabi_d2f>
 80114c2:	ee0d 0a90 	vmov	s27, r0
 80114c6:	f897 04b1 	ldrb.w	r0, [r7, #1201]	@ 0x4b1
 80114ca:	edcd da4f 	vstr	s27, [sp, #316]	@ 0x13c
 80114ce:	1e43      	subs	r3, r0, #1
 80114d0:	b25a      	sxtb	r2, r3
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	2a00      	cmp	r2, #0
 80114d6:	dd17      	ble.n	8011508 <iNemoEngine_API_Update+0x8f8>
 80114d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80114dc:	1e82      	subs	r2, r0, #2
 80114de:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	b2d2      	uxtb	r2, r2
 80114e6:	4419      	add	r1, r3
 80114e8:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 80114ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80114f0:	443b      	add	r3, r7
 80114f2:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	3b0c      	subs	r3, #12
 80114fa:	619a      	str	r2, [r3, #24]
 80114fc:	691a      	ldr	r2, [r3, #16]
 80114fe:	61da      	str	r2, [r3, #28]
 8011500:	695a      	ldr	r2, [r3, #20]
 8011502:	621a      	str	r2, [r3, #32]
 8011504:	428b      	cmp	r3, r1
 8011506:	d1f6      	bne.n	80114f6 <iNemoEngine_API_Update+0x8e6>
 8011508:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801150c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8011510:	ed85 9a00 	vstr	s18, [r5]
 8011514:	f207 43bc 	addw	r3, r7, #1212	@ 0x4bc
 8011518:	ee87 9a87 	vdiv.f32	s18, s15, s14
 801151c:	ed83 8a00 	vstr	s16, [r3]
 8011520:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8011524:	ed5f 7a3b 	vldr	s15, [pc, #-236]	@ 801143c <iNemoEngine_API_Update+0x82c>
 8011528:	edc3 da00 	vstr	s27, [r3]
 801152c:	f897 34b0 	ldrb.w	r3, [r7, #1200]	@ 0x4b0
 8011530:	3301      	adds	r3, #1
 8011532:	b2db      	uxtb	r3, r3
 8011534:	4283      	cmp	r3, r0
 8011536:	bf28      	it	cs
 8011538:	4603      	movcs	r3, r0
 801153a:	f887 34b0 	strb.w	r3, [r7, #1200]	@ 0x4b0
 801153e:	ee2b 8a89 	vmul.f32	s16, s23, s18
 8011542:	ee6c da09 	vmul.f32	s27, s24, s18
 8011546:	ee2b 9a09 	vmul.f32	s18, s22, s18
 801154a:	eeb0 7ac8 	vabs.f32	s14, s16
 801154e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011556:	d51f      	bpl.n	8011598 <iNemoEngine_API_Update+0x988>
 8011558:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801155c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011564:	f281 8521 	bge.w	8012faa <iNemoEngine_API_Update+0x239a>
 8011568:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801156c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011574:	f302 86ca 	bgt.w	801430c <iNemoEngine_API_Update+0x36fc>
 8011578:	ee78 7a67 	vsub.f32	s15, s16, s15
 801157c:	ee17 0a90 	vmov	r0, s15
 8011580:	f7ef f9ac 	bl	80008dc <__aeabi_f2d>
 8011584:	ec41 0b10 	vmov	d0, r0, r1
 8011588:	f009 fbde 	bl	801ad48 <ceil>
 801158c:	ec51 0b10 	vmov	r0, r1, d0
 8011590:	f7ef fa84 	bl	8000a9c <__aeabi_d2f>
 8011594:	ee08 0a10 	vmov	s16, r0
 8011598:	eef0 7aed 	vabs.f32	s15, s27
 801159c:	ed1f 7a59 	vldr	s14, [pc, #-356]	@ 801143c <iNemoEngine_API_Update+0x82c>
 80115a0:	ed8d 8a4d 	vstr	s16, [sp, #308]	@ 0x134
 80115a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ac:	d51f      	bpl.n	80115ee <iNemoEngine_API_Update+0x9de>
 80115ae:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80115b2:	eef4 dae7 	vcmpe.f32	s27, s15
 80115b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ba:	f281 852c 	bge.w	8013016 <iNemoEngine_API_Update+0x2406>
 80115be:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80115c2:	eef4 dac7 	vcmpe.f32	s27, s14
 80115c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ca:	f302 84d6 	bgt.w	8013f7a <iNemoEngine_API_Update+0x336a>
 80115ce:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80115d2:	ee17 0a90 	vmov	r0, s15
 80115d6:	f7ef f981 	bl	80008dc <__aeabi_f2d>
 80115da:	ec41 0b10 	vmov	d0, r0, r1
 80115de:	f009 fbb3 	bl	801ad48 <ceil>
 80115e2:	ec51 0b10 	vmov	r0, r1, d0
 80115e6:	f7ef fa59 	bl	8000a9c <__aeabi_d2f>
 80115ea:	ee0d 0a90 	vmov	s27, r0
 80115ee:	eef0 7ac9 	vabs.f32	s15, s18
 80115f2:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 801143c <iNemoEngine_API_Update+0x82c>
 80115f6:	edcd da4e 	vstr	s27, [sp, #312]	@ 0x138
 80115fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011602:	d51f      	bpl.n	8011644 <iNemoEngine_API_Update+0xa34>
 8011604:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011608:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011610:	f281 84a7 	bge.w	8012f62 <iNemoEngine_API_Update+0x2352>
 8011614:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8011618:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011620:	f302 84a3 	bgt.w	8013f6a <iNemoEngine_API_Update+0x335a>
 8011624:	ee79 7a67 	vsub.f32	s15, s18, s15
 8011628:	ee17 0a90 	vmov	r0, s15
 801162c:	f7ef f956 	bl	80008dc <__aeabi_f2d>
 8011630:	ec41 0b10 	vmov	d0, r0, r1
 8011634:	f009 fb88 	bl	801ad48 <ceil>
 8011638:	ec51 0b10 	vmov	r0, r1, d0
 801163c:	f7ef fa2e 	bl	8000a9c <__aeabi_d2f>
 8011640:	ee09 0a10 	vmov	s18, r0
 8011644:	f897 0621 	ldrb.w	r0, [r7, #1569]	@ 0x621
 8011648:	ed8d 9a4f 	vstr	s18, [sp, #316]	@ 0x13c
 801164c:	1e43      	subs	r3, r0, #1
 801164e:	b25a      	sxtb	r2, r3
 8011650:	b2db      	uxtb	r3, r3
 8011652:	2a00      	cmp	r2, #0
 8011654:	dd17      	ble.n	8011686 <iNemoEngine_API_Update+0xa76>
 8011656:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801165a:	1e82      	subs	r2, r0, #2
 801165c:	f507 61c2 	add.w	r1, r7, #1552	@ 0x610
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	b2d2      	uxtb	r2, r2
 8011664:	4419      	add	r1, r3
 8011666:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 801166a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801166e:	443b      	add	r3, r7
 8011670:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8011674:	681a      	ldr	r2, [r3, #0]
 8011676:	3b0c      	subs	r3, #12
 8011678:	619a      	str	r2, [r3, #24]
 801167a:	691a      	ldr	r2, [r3, #16]
 801167c:	61da      	str	r2, [r3, #28]
 801167e:	695a      	ldr	r2, [r3, #20]
 8011680:	621a      	str	r2, [r3, #32]
 8011682:	428b      	cmp	r3, r1
 8011684:	d1f6      	bne.n	8011674 <iNemoEngine_API_Update+0xa64>
 8011686:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801168a:	ed86 8a00 	vstr	s16, [r6]
 801168e:	f207 632c 	addw	r3, r7, #1580	@ 0x62c
 8011692:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
 8011696:	ee87 8a8d 	vdiv.f32	s16, s15, s26
 801169a:	edc3 da00 	vstr	s27, [r3]
 801169e:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 80116a2:	ed5f 7a9a 	vldr	s15, [pc, #-616]	@ 801143c <iNemoEngine_API_Update+0x82c>
 80116a6:	ed83 9a00 	vstr	s18, [r3]
 80116aa:	f897 3620 	ldrb.w	r3, [r7, #1568]	@ 0x620
 80116ae:	3301      	adds	r3, #1
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	4283      	cmp	r3, r0
 80116b4:	bf28      	it	cs
 80116b6:	4603      	movcs	r3, r0
 80116b8:	f887 3620 	strb.w	r3, [r7, #1568]	@ 0x620
 80116bc:	ee28 9a2f 	vmul.f32	s18, s16, s31
 80116c0:	ee68 da0f 	vmul.f32	s27, s16, s30
 80116c4:	ee27 8a08 	vmul.f32	s16, s14, s16
 80116c8:	eeb0 7ac9 	vabs.f32	s14, s18
 80116cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80116d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d4:	d51f      	bpl.n	8011716 <iNemoEngine_API_Update+0xb06>
 80116d6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80116da:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80116de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e2:	f281 840f 	bge.w	8012f04 <iNemoEngine_API_Update+0x22f4>
 80116e6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80116ea:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80116ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f2:	f302 844e 	bgt.w	8013f92 <iNemoEngine_API_Update+0x3382>
 80116f6:	ee79 7a67 	vsub.f32	s15, s18, s15
 80116fa:	ee17 0a90 	vmov	r0, s15
 80116fe:	f7ef f8ed 	bl	80008dc <__aeabi_f2d>
 8011702:	ec41 0b10 	vmov	d0, r0, r1
 8011706:	f009 fb1f 	bl	801ad48 <ceil>
 801170a:	ec51 0b10 	vmov	r0, r1, d0
 801170e:	f7ef f9c5 	bl	8000a9c <__aeabi_d2f>
 8011712:	ee09 0a10 	vmov	s18, r0
 8011716:	eef0 7aed 	vabs.f32	s15, s27
 801171a:	ed1f 7ab8 	vldr	s14, [pc, #-736]	@ 801143c <iNemoEngine_API_Update+0x82c>
 801171e:	ed8d 9a4d 	vstr	s18, [sp, #308]	@ 0x134
 8011722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172a:	d51f      	bpl.n	801176c <iNemoEngine_API_Update+0xb5c>
 801172c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011730:	eef4 dae7 	vcmpe.f32	s27, s15
 8011734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011738:	f281 83d2 	bge.w	8012ee0 <iNemoEngine_API_Update+0x22d0>
 801173c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8011740:	eef4 dac7 	vcmpe.f32	s27, s14
 8011744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011748:	f302 841f 	bgt.w	8013f8a <iNemoEngine_API_Update+0x337a>
 801174c:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8011750:	ee17 0a90 	vmov	r0, s15
 8011754:	f7ef f8c2 	bl	80008dc <__aeabi_f2d>
 8011758:	ec41 0b10 	vmov	d0, r0, r1
 801175c:	f009 faf4 	bl	801ad48 <ceil>
 8011760:	ec51 0b10 	vmov	r0, r1, d0
 8011764:	f7ef f99a 	bl	8000a9c <__aeabi_d2f>
 8011768:	ee0d 0a90 	vmov	s27, r0
 801176c:	eef0 7ac8 	vabs.f32	s15, s16
 8011770:	ed1f 7ace 	vldr	s14, [pc, #-824]	@ 801143c <iNemoEngine_API_Update+0x82c>
 8011774:	edcd da4e 	vstr	s27, [sp, #312]	@ 0x138
 8011778:	eef4 7ac7 	vcmpe.f32	s15, s14
 801177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011780:	d51f      	bpl.n	80117c2 <iNemoEngine_API_Update+0xbb2>
 8011782:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011786:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801178e:	f281 8395 	bge.w	8012ebc <iNemoEngine_API_Update+0x22ac>
 8011792:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8011796:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179e:	f302 83fc 	bgt.w	8013f9a <iNemoEngine_API_Update+0x338a>
 80117a2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80117a6:	ee17 0a90 	vmov	r0, s15
 80117aa:	f7ef f897 	bl	80008dc <__aeabi_f2d>
 80117ae:	ec41 0b10 	vmov	d0, r0, r1
 80117b2:	f009 fac9 	bl	801ad48 <ceil>
 80117b6:	ec51 0b10 	vmov	r0, r1, d0
 80117ba:	f7ef f96f 	bl	8000a9c <__aeabi_d2f>
 80117be:	ee08 0a10 	vmov	s16, r0
 80117c2:	f897 0791 	ldrb.w	r0, [r7, #1937]	@ 0x791
 80117c6:	ed8d 8a4f 	vstr	s16, [sp, #316]	@ 0x13c
 80117ca:	1e43      	subs	r3, r0, #1
 80117cc:	b25a      	sxtb	r2, r3
 80117ce:	b2db      	uxtb	r3, r3
 80117d0:	2a00      	cmp	r2, #0
 80117d2:	dd17      	ble.n	8011804 <iNemoEngine_API_Update+0xbf4>
 80117d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80117d8:	1e82      	subs	r2, r0, #2
 80117da:	f507 61f0 	add.w	r1, r7, #1920	@ 0x780
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	b2d2      	uxtb	r2, r2
 80117e2:	4419      	add	r1, r3
 80117e4:	f203 738c 	addw	r3, r3, #1932	@ 0x78c
 80117e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80117ec:	443b      	add	r3, r7
 80117ee:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	3b0c      	subs	r3, #12
 80117f6:	619a      	str	r2, [r3, #24]
 80117f8:	691a      	ldr	r2, [r3, #16]
 80117fa:	61da      	str	r2, [r3, #28]
 80117fc:	695a      	ldr	r2, [r3, #20]
 80117fe:	621a      	str	r2, [r3, #32]
 8011800:	428b      	cmp	r3, r1
 8011802:	d1f6      	bne.n	80117f2 <iNemoEngine_API_Update+0xbe2>
 8011804:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011806:	f507 7647 	add.w	r6, r7, #796	@ 0x31c
 801180a:	f50d 793c 	add.w	r9, sp, #752	@ 0x2f0
 801180e:	aa76      	add	r2, sp, #472	@ 0x1d8
 8011810:	ed83 9a00 	vstr	s18, [r3]
 8011814:	f207 739c 	addw	r3, r7, #1948	@ 0x79c
 8011818:	a947      	add	r1, sp, #284	@ 0x11c
 801181a:	9633      	str	r6, [sp, #204]	@ 0xcc
 801181c:	edc3 da00 	vstr	s27, [r3]
 8011820:	f507 754f 	add.w	r5, r7, #828	@ 0x33c
 8011824:	9338      	str	r3, [sp, #224]	@ 0xe0
 8011826:	f507 63f4 	add.w	r3, r7, #1952	@ 0x7a0
 801182a:	ed83 8a00 	vstr	s16, [r3]
 801182e:	9339      	str	r3, [sp, #228]	@ 0xe4
 8011830:	f897 3790 	ldrb.w	r3, [r7, #1936]	@ 0x790
 8011834:	3301      	adds	r3, #1
 8011836:	b2db      	uxtb	r3, r3
 8011838:	4283      	cmp	r3, r0
 801183a:	bf28      	it	cs
 801183c:	4603      	movcs	r3, r0
 801183e:	a84a      	add	r0, sp, #296	@ 0x128
 8011840:	f887 3790 	strb.w	r3, [r7, #1936]	@ 0x790
 8011844:	f7fd fc64 	bl	800f110 <getRotationMatrix>
 8011848:	46cc      	mov	ip, r9
 801184a:	6830      	ldr	r0, [r6, #0]
 801184c:	3610      	adds	r6, #16
 801184e:	f856 1c0c 	ldr.w	r1, [r6, #-12]
 8011852:	4664      	mov	r4, ip
 8011854:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8011858:	f10c 0c10 	add.w	ip, ip, #16
 801185c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011860:	42ae      	cmp	r6, r5
 8011862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011864:	d1f1      	bne.n	801184a <iNemoEngine_API_Update+0xc3a>
 8011866:	6830      	ldr	r0, [r6, #0]
 8011868:	f8cc 0000 	str.w	r0, [ip]
 801186c:	ed97 7ac7 	vldr	s14, [r7, #796]	@ 0x31c
 8011870:	edd7 7ac8 	vldr	s15, [r7, #800]	@ 0x320
 8011874:	eeb0 7ac7 	vabs.f32	s14, s14
 8011878:	eef0 7ae7 	vabs.f32	s15, s15
 801187c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011884:	f140 8502 	bpl.w	801228c <iNemoEngine_API_Update+0x167c>
 8011888:	2307      	movs	r3, #7
 801188a:	2004      	movs	r0, #4
 801188c:	2400      	movs	r4, #0
 801188e:	2606      	movs	r6, #6
 8011890:	9302      	str	r3, [sp, #8]
 8011892:	2203      	movs	r2, #3
 8011894:	4603      	mov	r3, r0
 8011896:	46a4      	mov	ip, r4
 8011898:	f04f 0e01 	mov.w	lr, #1
 801189c:	ed97 7ac9 	vldr	s14, [r7, #804]	@ 0x324
 80118a0:	eeb0 7ac7 	vabs.f32	s14, s14
 80118a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ac:	f300 84dd 	bgt.w	801226a <iNemoEngine_API_Update+0x165a>
 80118b0:	f04f 0b08 	mov.w	fp, #8
 80118b4:	f04f 0a05 	mov.w	sl, #5
 80118b8:	2502      	movs	r5, #2
 80118ba:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 80118bc:	440c      	add	r4, r1
 80118be:	440b      	add	r3, r1
 80118c0:	eb09 018c 	add.w	r1, r9, ip, lsl #2
 80118c4:	edd4 6a00 	vldr	s13, [r4]
 80118c8:	eb09 0485 	add.w	r4, r9, r5, lsl #2
 80118cc:	ed93 7a00 	vldr	s14, [r3]
 80118d0:	00ab      	lsls	r3, r5, #2
 80118d2:	eb09 058e 	add.w	r5, r9, lr, lsl #2
 80118d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118da:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80118de:	edc1 7a00 	vstr	s15, [r1]
 80118e2:	ed95 7a00 	vldr	s14, [r5]
 80118e6:	eb09 0582 	add.w	r5, r9, r2, lsl #2
 80118ea:	edd4 6a00 	vldr	s13, [r4]
 80118ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118f2:	edc4 7a00 	vstr	s15, [r4]
 80118f6:	eb09 0480 	add.w	r4, r9, r0, lsl #2
 80118fa:	edd1 6a00 	vldr	s13, [r1]
 80118fe:	0081      	lsls	r1, r0, #2
 8011900:	ed94 6a00 	vldr	s12, [r4]
 8011904:	eb09 008a 	add.w	r0, r9, sl, lsl #2
 8011908:	ed95 7a00 	vldr	s14, [r5]
 801190c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8011910:	9103      	str	r1, [sp, #12]
 8011912:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8011916:	9902      	ldr	r1, [sp, #8]
 8011918:	ed85 7a00 	vstr	s14, [r5]
 801191c:	ed94 7a00 	vldr	s14, [r4]
 8011920:	eb09 048b 	add.w	r4, r9, fp, lsl #2
 8011924:	ed90 6a00 	vldr	s12, [r0]
 8011928:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801192c:	eea7 6ac7 	vfms.f32	s12, s15, s14
 8011930:	ed80 6a00 	vstr	s12, [r0]
 8011934:	eb09 0081 	add.w	r0, r9, r1, lsl #2
 8011938:	0089      	lsls	r1, r1, #2
 801193a:	edd0 5a00 	vldr	s11, [r0]
 801193e:	9102      	str	r1, [sp, #8]
 8011940:	eb09 0186 	add.w	r1, r9, r6, lsl #2
 8011944:	ed91 7a00 	vldr	s14, [r1]
 8011948:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801194c:	eef0 5ac6 	vabs.f32	s11, s12
 8011950:	ed81 7a00 	vstr	s14, [r1]
 8011954:	edd0 6a00 	vldr	s13, [r0]
 8011958:	ea4f 008c 	mov.w	r0, ip, lsl #2
 801195c:	ed94 7a00 	vldr	s14, [r4]
 8011960:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011964:	ed84 7a00 	vstr	s14, [r4]
 8011968:	00b4      	lsls	r4, r6, #2
 801196a:	edd5 6a00 	vldr	s13, [r5]
 801196e:	0095      	lsls	r5, r2, #2
 8011970:	eef0 7ae6 	vabs.f32	s15, s13
 8011974:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197c:	f300 8463 	bgt.w	8012246 <iNemoEngine_API_Update+0x1636>
 8011980:	eef0 7a47 	vmov.f32	s15, s14
 8011984:	465c      	mov	r4, fp
 8011986:	edd1 5a00 	vldr	s11, [r1]
 801198a:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 801198e:	ee86 4a26 	vdiv.f32	s8, s12, s13
 8011992:	444c      	add	r4, r9
 8011994:	eb09 0205 	add.w	r2, r9, r5
 8011998:	44ca      	add	sl, r9
 801199a:	eb09 010b 	add.w	r1, r9, fp
 801199e:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80119a2:	eee4 7a65 	vfms.f32	s15, s8, s11
 80119a6:	ed8a 4a00 	vstr	s8, [sl]
 80119aa:	edc4 7a00 	vstr	s15, [r4]
 80119ae:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 80119b2:	ed92 7a00 	vldr	s14, [r2]
 80119b6:	9a03      	ldr	r2, [sp, #12]
 80119b8:	ed91 1a00 	vldr	s2, [r1]
 80119bc:	a97c      	add	r1, sp, #496	@ 0x1f0
 80119be:	444a      	add	r2, r9
 80119c0:	9c02      	ldr	r4, [sp, #8]
 80119c2:	ee83 2a87 	vdiv.f32	s4, s7, s14
 80119c6:	edd2 2a00 	vldr	s5, [r2]
 80119ca:	eb09 0200 	add.w	r2, r9, r0
 80119ce:	444c      	add	r4, r9
 80119d0:	edd2 7a00 	vldr	s15, [r2]
 80119d4:	eb09 0203 	add.w	r2, r9, r3
 80119d8:	edd4 1a00 	vldr	s3, [r4]
 80119dc:	ed92 0a00 	vldr	s0, [r2]
 80119e0:	aa76      	add	r2, sp, #472	@ 0x1d8
 80119e2:	4472      	add	r2, lr
 80119e4:	ed92 7a00 	vldr	s14, [r2]
 80119e8:	aa76      	add	r2, sp, #472	@ 0x1d8
 80119ea:	4402      	add	r2, r0
 80119ec:	edd2 6a00 	vldr	s13, [r2]
 80119f0:	aa76      	add	r2, sp, #472	@ 0x1d8
 80119f2:	441a      	add	r2, r3
 80119f4:	eee7 6ac7 	vfms.f32	s13, s15, s14
 80119f8:	edd2 4a00 	vldr	s9, [r2]
 80119fc:	eb09 020e 	add.w	r2, r9, lr
 8011a00:	eee0 4a47 	vfms.f32	s9, s0, s14
 8011a04:	eee4 4a66 	vfms.f32	s9, s8, s13
 8011a08:	ee60 4aa4 	vmul.f32	s9, s1, s9
 8011a0c:	eee1 6a64 	vfms.f32	s13, s2, s9
 8011a10:	eea1 7ae4 	vfms.f32	s14, s3, s9
 8011a14:	ee22 9a26 	vmul.f32	s18, s4, s13
 8011a18:	edd2 6a00 	vldr	s13, [r2]
 8011a1c:	aa79      	add	r2, sp, #484	@ 0x1e4
 8011a1e:	ee83 3aa6 	vdiv.f32	s6, s7, s13
 8011a22:	4472      	add	r2, lr
 8011a24:	448e      	add	lr, r1
 8011a26:	ed92 5a00 	vldr	s10, [r2]
 8011a2a:	aa79      	add	r2, sp, #484	@ 0x1e4
 8011a2c:	edde 6a00 	vldr	s13, [lr]
 8011a30:	4402      	add	r2, r0
 8011a32:	4408      	add	r0, r1
 8011a34:	eea2 7ac9 	vfms.f32	s14, s5, s18
 8011a38:	ed90 6a00 	vldr	s12, [r0]
 8011a3c:	edd2 5a00 	vldr	s11, [r2]
 8011a40:	aa79      	add	r2, sp, #484	@ 0x1e4
 8011a42:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8011a46:	441a      	add	r2, r3
 8011a48:	440b      	add	r3, r1
 8011a4a:	eee7 5ac5 	vfms.f32	s11, s15, s10
 8011a4e:	edd3 7a00 	vldr	s15, [r3]
 8011a52:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011a56:	eeb0 8a46 	vmov.f32	s16, s12
 8011a5a:	ed92 6a00 	vldr	s12, [r2]
 8011a5e:	ee23 7a07 	vmul.f32	s14, s6, s14
 8011a62:	eea0 6a45 	vfms.f32	s12, s0, s10
 8011a66:	eee4 7a48 	vfms.f32	s15, s8, s16
 8011a6a:	eea4 6a65 	vfms.f32	s12, s8, s11
 8011a6e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8011a72:	ee20 6a86 	vmul.f32	s12, s1, s12
 8011a76:	eef0 0a48 	vmov.f32	s1, s16
 8011a7a:	eee7 6ae1 	vfms.f32	s13, s15, s3
 8011a7e:	eee1 5a46 	vfms.f32	s11, s2, s12
 8011a82:	eee7 0ac1 	vfms.f32	s1, s15, s2
 8011a86:	eea1 5ac6 	vfms.f32	s10, s3, s12
 8011a8a:	eeb0 4a65 	vmov.f32	s8, s11
 8011a8e:	eef0 5a66 	vmov.f32	s11, s13
 8011a92:	ee22 4a04 	vmul.f32	s8, s4, s8
 8011a96:	ee20 2a82 	vmul.f32	s4, s1, s4
 8011a9a:	eea2 5ac4 	vfms.f32	s10, s5, s8
 8011a9e:	eee2 5a62 	vfms.f32	s11, s4, s5
 8011aa2:	ee77 6a84 	vadd.f32	s13, s15, s8
 8011aa6:	ee77 6a66 	vsub.f32	s13, s14, s13
 8011aaa:	ee23 5a05 	vmul.f32	s10, s6, s10
 8011aae:	ee65 5a83 	vmul.f32	s11, s11, s6
 8011ab2:	eebf 3a00 	vmov.f32	s6, #240	@ 0xbf800000 -1.0
 8011ab6:	eef4 6ac3 	vcmpe.f32	s13, s6
 8011aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011abe:	f340 846e 	ble.w	801239e <iNemoEngine_API_Update+0x178e>
 8011ac2:	ee76 3aa3 	vadd.f32	s7, s13, s7
 8011ac6:	eef1 6ae3 	vsqrt.f32	s13, s7
 8011aca:	ee36 6a42 	vsub.f32	s12, s12, s4
 8011ace:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8011ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad6:	f100 845e 	bmi.w	8012396 <iNemoEngine_API_Update+0x1786>
 8011ada:	bfd8      	it	le
 8011adc:	ee66 6a86 	vmulle.f32	s13, s13, s12
 8011ae0:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8011ae4:	ee34 6a67 	vsub.f32	s12, s8, s15
 8011ae8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011aec:	ee36 6a47 	vsub.f32	s12, s12, s14
 8011af0:	eeff 3a00 	vmov.f32	s7, #240	@ 0xbf800000 -1.0
 8011af4:	eeb4 6ae3 	vcmpe.f32	s12, s7
 8011af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afc:	f240 8447 	bls.w	801238e <iNemoEngine_API_Update+0x177e>
 8011b00:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8011b04:	ee76 3a23 	vadd.f32	s7, s12, s7
 8011b08:	eeb1 6ae3 	vsqrt.f32	s12, s7
 8011b0c:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8011b10:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8011b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b18:	f100 8435 	bmi.w	8012386 <iNemoEngine_API_Update+0x1776>
 8011b1c:	bfd8      	it	le
 8011b1e:	ee26 6a25 	vmulle.f32	s12, s12, s11
 8011b22:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011b2e:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011b32:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b3e:	f241 803f 	bls.w	8012bc0 <iNemoEngine_API_Update+0x1fb0>
 8011b42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011b4a:	eef1 7ac7 	vsqrt.f32	s15, s14
 8011b4e:	ee39 9a45 	vsub.f32	s18, s18, s10
 8011b52:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8011b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b5a:	f101 802d 	bmi.w	8012bb8 <iNemoEngine_API_Update+0x1fa8>
 8011b5e:	bfd8      	it	le
 8011b60:	ee67 7a89 	vmulle.f32	s15, s15, s18
 8011b64:	f897 2341 	ldrb.w	r2, [r7, #833]	@ 0x341
 8011b68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011b6c:	1e53      	subs	r3, r2, #1
 8011b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b72:	b259      	sxtb	r1, r3
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	2900      	cmp	r1, #0
 8011b78:	dd1c      	ble.n	8011bb4 <iNemoEngine_API_Update+0xfa4>
 8011b7a:	3a02      	subs	r2, #2
 8011b7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011b80:	f1a7 010c 	sub.w	r1, r7, #12
 8011b84:	b2d2      	uxtb	r2, r2
 8011b86:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011b8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011b8e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011b92:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8011b96:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8011b9a:	3b0c      	subs	r3, #12
 8011b9c:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
 8011ba0:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
 8011ba4:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
 8011ba8:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8011bac:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
 8011bb0:	428b      	cmp	r3, r1
 8011bb2:	d1f0      	bne.n	8011b96 <iNemoEngine_API_Update+0xf86>
 8011bb4:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8011bb8:	ed9d 7a06 	vldr	s14, [sp, #24]
 8011bbc:	ab47      	add	r3, sp, #284	@ 0x11c
 8011bbe:	463c      	mov	r4, r7
 8011bc0:	46ba      	mov	sl, r7
 8011bc2:	f50d 7bfe 	add.w	fp, sp, #508	@ 0x1fc
 8011bc6:	ee85 7a87 	vdiv.f32	s14, s11, s14
 8011bca:	9335      	str	r3, [sp, #212]	@ 0xd4
 8011bcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bce:	2300      	movs	r3, #0
 8011bd0:	ad88      	add	r5, sp, #544	@ 0x220
 8011bd2:	9308      	str	r3, [sp, #32]
 8011bd4:	f20d 13fb 	addw	r3, sp, #507	@ 0x1fb
 8011bd8:	f1c3 0601 	rsb	r6, r3, #1
 8011bdc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011be0:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011be8:	edc7 6ad2 	vstr	s13, [r7, #840]	@ 0x348
 8011bec:	ed87 6ad3 	vstr	s12, [r7, #844]	@ 0x34c
 8011bf0:	edc7 7ad4 	vstr	s15, [r7, #848]	@ 0x350
 8011bf4:	4647      	mov	r7, r8
 8011bf6:	46a0      	mov	r8, r4
 8011bf8:	464c      	mov	r4, r9
 8011bfa:	9b08      	ldr	r3, [sp, #32]
 8011bfc:	4621      	mov	r1, r4
 8011bfe:	4642      	mov	r2, r8
 8011c00:	3301      	adds	r3, #1
 8011c02:	9308      	str	r3, [sp, #32]
 8011c04:	f20d 13fb 	addw	r3, sp, #507	@ 0x1fb
 8011c08:	f8d2 0348 	ldr.w	r0, [r2, #840]	@ 0x348
 8011c0c:	320c      	adds	r2, #12
 8011c0e:	f841 0b04 	str.w	r0, [r1], #4
 8011c12:	18f0      	adds	r0, r6, r3
 8011c14:	f803 0f01 	strb.w	r0, [r3, #1]!
 8011c18:	f20d 2019 	addw	r0, sp, #537	@ 0x219
 8011c1c:	4298      	cmp	r0, r3
 8011c1e:	d1f3      	bne.n	8011c08 <iNemoEngine_API_Update+0xff8>
 8011c20:	ed94 7a00 	vldr	s14, [r4]
 8011c24:	edd4 7a01 	vldr	s15, [r4, #4]
 8011c28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c30:	d903      	bls.n	8011c3a <iNemoEngine_API_Update+0x102a>
 8011c32:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8011c36:	f8ab 3000 	strh.w	r3, [fp]
 8011c3a:	ed94 7a02 	vldr	s14, [r4, #8]
 8011c3e:	edd4 7a03 	vldr	s15, [r4, #12]
 8011c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4a:	d903      	bls.n	8011c54 <iNemoEngine_API_Update+0x1044>
 8011c4c:	f44f 7341 	mov.w	r3, #772	@ 0x304
 8011c50:	f8ab 3002 	strh.w	r3, [fp, #2]
 8011c54:	ed94 7a04 	vldr	s14, [r4, #16]
 8011c58:	edd4 7a05 	vldr	s15, [r4, #20]
 8011c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c64:	d903      	bls.n	8011c6e <iNemoEngine_API_Update+0x105e>
 8011c66:	f240 5306 	movw	r3, #1286	@ 0x506
 8011c6a:	f8ab 3004 	strh.w	r3, [fp, #4]
 8011c6e:	ed94 7a06 	vldr	s14, [r4, #24]
 8011c72:	edd4 7a07 	vldr	s15, [r4, #28]
 8011c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7e:	d903      	bls.n	8011c88 <iNemoEngine_API_Update+0x1078>
 8011c80:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8011c84:	f8ab 3006 	strh.w	r3, [fp, #6]
 8011c88:	ed94 7a08 	vldr	s14, [r4, #32]
 8011c8c:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8011c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c98:	d903      	bls.n	8011ca2 <iNemoEngine_API_Update+0x1092>
 8011c9a:	f640 130a 	movw	r3, #2314	@ 0x90a
 8011c9e:	f8ab 3008 	strh.w	r3, [fp, #8]
 8011ca2:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8011ca6:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8011caa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb2:	d903      	bls.n	8011cbc <iNemoEngine_API_Update+0x10ac>
 8011cb4:	f640 330c 	movw	r3, #2828	@ 0xb0c
 8011cb8:	f8ab 300a 	strh.w	r3, [fp, #10]
 8011cbc:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8011cc0:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8011cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ccc:	d903      	bls.n	8011cd6 <iNemoEngine_API_Update+0x10c6>
 8011cce:	f640 530e 	movw	r3, #3342	@ 0xd0e
 8011cd2:	f8ab 300c 	strh.w	r3, [fp, #12]
 8011cd6:	ed94 7a0e 	vldr	s14, [r4, #56]	@ 0x38
 8011cda:	edd4 7a0f 	vldr	s15, [r4, #60]	@ 0x3c
 8011cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce6:	d903      	bls.n	8011cf0 <iNemoEngine_API_Update+0x10e0>
 8011ce8:	f44f 6371 	mov.w	r3, #3856	@ 0xf10
 8011cec:	f8ab 300e 	strh.w	r3, [fp, #14]
 8011cf0:	ed94 7a10 	vldr	s14, [r4, #64]	@ 0x40
 8011cf4:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 8011cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d00:	d903      	bls.n	8011d0a <iNemoEngine_API_Update+0x10fa>
 8011d02:	f241 1312 	movw	r3, #4370	@ 0x1112
 8011d06:	f8ab 3010 	strh.w	r3, [fp, #16]
 8011d0a:	ed94 7a12 	vldr	s14, [r4, #72]	@ 0x48
 8011d0e:	edd4 7a13 	vldr	s15, [r4, #76]	@ 0x4c
 8011d12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d1a:	d903      	bls.n	8011d24 <iNemoEngine_API_Update+0x1114>
 8011d1c:	f241 3314 	movw	r3, #4884	@ 0x1314
 8011d20:	f8ab 3012 	strh.w	r3, [fp, #18]
 8011d24:	ed94 7a14 	vldr	s14, [r4, #80]	@ 0x50
 8011d28:	edd4 7a15 	vldr	s15, [r4, #84]	@ 0x54
 8011d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d34:	d903      	bls.n	8011d3e <iNemoEngine_API_Update+0x112e>
 8011d36:	f241 5316 	movw	r3, #5398	@ 0x1516
 8011d3a:	f8ab 3014 	strh.w	r3, [fp, #20]
 8011d3e:	ed94 7a16 	vldr	s14, [r4, #88]	@ 0x58
 8011d42:	edd4 7a17 	vldr	s15, [r4, #92]	@ 0x5c
 8011d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4e:	d903      	bls.n	8011d58 <iNemoEngine_API_Update+0x1148>
 8011d50:	f241 7318 	movw	r3, #5912	@ 0x1718
 8011d54:	f8ab 3016 	strh.w	r3, [fp, #22]
 8011d58:	ed94 7a18 	vldr	s14, [r4, #96]	@ 0x60
 8011d5c:	edd4 7a19 	vldr	s15, [r4, #100]	@ 0x64
 8011d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d68:	d903      	bls.n	8011d72 <iNemoEngine_API_Update+0x1162>
 8011d6a:	f641 131a 	movw	r3, #6426	@ 0x191a
 8011d6e:	f8ab 3018 	strh.w	r3, [fp, #24]
 8011d72:	ed94 7a1a 	vldr	s14, [r4, #104]	@ 0x68
 8011d76:	edd4 7a1b 	vldr	s15, [r4, #108]	@ 0x6c
 8011d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d82:	d903      	bls.n	8011d8c <iNemoEngine_API_Update+0x117c>
 8011d84:	f641 331c 	movw	r3, #6940	@ 0x1b1c
 8011d88:	f8ab 301a 	strh.w	r3, [fp, #26]
 8011d8c:	ed94 7a1c 	vldr	s14, [r4, #112]	@ 0x70
 8011d90:	edd4 7a1d 	vldr	s15, [r4, #116]	@ 0x74
 8011d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9c:	d903      	bls.n	8011da6 <iNemoEngine_API_Update+0x1196>
 8011d9e:	f641 531e 	movw	r3, #7454	@ 0x1d1e
 8011da2:	f8ab 301c 	strh.w	r3, [fp, #28]
 8011da6:	2302      	movs	r3, #2
 8011da8:	221e      	movs	r2, #30
 8011daa:	2101      	movs	r1, #1
 8011dac:	4628      	mov	r0, r5
 8011dae:	9302      	str	r3, [sp, #8]
 8011db0:	f04f 0904 	mov.w	r9, #4
 8011db4:	f006 fd05 	bl	80187c2 <memset>
 8011db8:	f8dd c008 	ldr.w	ip, [sp, #8]
 8011dbc:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 8011dc0:	961b      	str	r6, [sp, #108]	@ 0x6c
 8011dc2:	e9cd a719 	strd	sl, r7, [sp, #100]	@ 0x64
 8011dc6:	4661      	mov	r1, ip
 8011dc8:	f04f 0a01 	mov.w	sl, #1
 8011dcc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8011dd0:	eb01 030a 	add.w	r3, r1, sl
 8011dd4:	f8cd c010 	str.w	ip, [sp, #16]
 8011dd8:	9302      	str	r3, [sp, #8]
 8011dda:	e9cd 1906 	strd	r1, r9, [sp, #24]
 8011dde:	9b04      	ldr	r3, [sp, #16]
 8011de0:	4657      	mov	r7, sl
 8011de2:	449a      	add	sl, r3
 8011de4:	9b02      	ldr	r3, [sp, #8]
 8011de6:	f1ba 0f1f 	cmp.w	sl, #31
 8011dea:	f103 3cff 	add.w	ip, r3, #4294967295
 8011dee:	bfa8      	it	ge
 8011df0:	f04f 0a1f 	movge.w	sl, #31
 8011df4:	ebaa 0907 	sub.w	r9, sl, r7
 8011df8:	f1b9 0f00 	cmp.w	r9, #0
 8011dfc:	dd47      	ble.n	8011e8e <iNemoEngine_API_Update+0x127e>
 8011dfe:	46b8      	mov	r8, r7
 8011e00:	2600      	movs	r6, #0
 8011e02:	9703      	str	r7, [sp, #12]
 8011e04:	e007      	b.n	8011e16 <iNemoEngine_API_Update+0x1206>
 8011e06:	45f2      	cmp	sl, lr
 8011e08:	46bc      	mov	ip, r7
 8011e0a:	55aa      	strb	r2, [r5, r6]
 8011e0c:	f000 8208 	beq.w	8012220 <iNemoEngine_API_Update+0x1610>
 8011e10:	3601      	adds	r6, #1
 8011e12:	45b1      	cmp	r9, r6
 8011e14:	dd34      	ble.n	8011e80 <iNemoEngine_API_Update+0x1270>
 8011e16:	f108 31ff 	add.w	r1, r8, #4294967295
 8011e1a:	f91b 200c 	ldrsb.w	r2, [fp, ip]
 8011e1e:	f10c 0e02 	add.w	lr, ip, #2
 8011e22:	f10c 0701 	add.w	r7, ip, #1
 8011e26:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 8011e2a:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8011e2e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8011e32:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8011e36:	ed50 7a01 	vldr	s15, [r0, #-4]
 8011e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e42:	d8e0      	bhi.n	8011e06 <iNemoEngine_API_Update+0x11f6>
 8011e44:	f108 0801 	add.w	r8, r8, #1
 8011e48:	55ab      	strb	r3, [r5, r6]
 8011e4a:	9b02      	ldr	r3, [sp, #8]
 8011e4c:	4543      	cmp	r3, r8
 8011e4e:	d1df      	bne.n	8011e10 <iNemoEngine_API_Update+0x1200>
 8011e50:	f10c 0701 	add.w	r7, ip, #1
 8011e54:	ebaa 030c 	sub.w	r3, sl, ip
 8011e58:	1c70      	adds	r0, r6, #1
 8011e5a:	eb0b 010c 	add.w	r1, fp, ip
 8011e5e:	45ba      	cmp	sl, r7
 8011e60:	f103 32ff 	add.w	r2, r3, #4294967295
 8011e64:	4428      	add	r0, r5
 8011e66:	9305      	str	r3, [sp, #20]
 8011e68:	ddd2      	ble.n	8011e10 <iNemoEngine_API_Update+0x1200>
 8011e6a:	f006 fd2a 	bl	80188c2 <memcpy>
 8011e6e:	3e01      	subs	r6, #1
 8011e70:	9b05      	ldr	r3, [sp, #20]
 8011e72:	441e      	add	r6, r3
 8011e74:	441f      	add	r7, r3
 8011e76:	3601      	adds	r6, #1
 8011e78:	f1a7 0c02 	sub.w	ip, r7, #2
 8011e7c:	45b1      	cmp	r9, r6
 8011e7e:	dcca      	bgt.n	8011e16 <iNemoEngine_API_Update+0x1206>
 8011e80:	9f03      	ldr	r7, [sp, #12]
 8011e82:	464a      	mov	r2, r9
 8011e84:	4629      	mov	r1, r5
 8011e86:	1e78      	subs	r0, r7, #1
 8011e88:	4458      	add	r0, fp
 8011e8a:	f006 fd1a 	bl	80188c2 <memcpy>
 8011e8e:	9b06      	ldr	r3, [sp, #24]
 8011e90:	4453      	add	r3, sl
 8011e92:	2b1e      	cmp	r3, #30
 8011e94:	9302      	str	r3, [sp, #8]
 8011e96:	dda2      	ble.n	8011dde <iNemoEngine_API_Update+0x11ce>
 8011e98:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011e9c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8011ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8011ea4:	d18f      	bne.n	8011dc6 <iNemoEngine_API_Update+0x11b6>
 8011ea6:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 8011eaa:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011eae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011eb2:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8011eb4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011eb8:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 8011ebc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ec0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ec4:	ed13 7a01 	vldr	s14, [r3, #-4]
 8011ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ecc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011ed0:	bf0c      	ite	eq
 8011ed2:	2301      	moveq	r3, #1
 8011ed4:	2300      	movne	r3, #0
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	e9dd a719 	ldrd	sl, r7, [sp, #100]	@ 0x64
 8011ede:	bf08      	it	eq
 8011ee0:	f043 0301 	orreq.w	r3, r3, #1
 8011ee4:	b983      	cbnz	r3, 8011f08 <iNemoEngine_API_Update+0x12f8>
 8011ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011ef2:	bf4c      	ite	mi
 8011ef4:	2201      	movmi	r2, #1
 8011ef6:	2200      	movpl	r2, #0
 8011ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efc:	bf4c      	ite	mi
 8011efe:	2301      	movmi	r3, #1
 8011f00:	2300      	movpl	r3, #0
 8011f02:	429a      	cmp	r2, r3
 8011f04:	f002 8576 	beq.w	80149f4 <iNemoEngine_API_Update+0x3de4>
 8011f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011f12:	f108 0804 	add.w	r8, r8, #4
 8011f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011f1a:	ece3 7a01 	vstmia	r3!, {s15}
 8011f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f20:	9b08      	ldr	r3, [sp, #32]
 8011f22:	2b03      	cmp	r3, #3
 8011f24:	f47f ae69 	bne.w	8011bfa <iNemoEngine_API_Update+0xfea>
 8011f28:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 8011f2c:	46b8      	mov	r8, r7
 8011f2e:	ed9d 7a47 	vldr	s14, [sp, #284]	@ 0x11c
 8011f32:	4657      	mov	r7, sl
 8011f34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f38:	ed9d 6a23 	vldr	s12, [sp, #140]	@ 0x8c
 8011f3c:	eddd 5a1e 	vldr	s11, [sp, #120]	@ 0x78
 8011f40:	46ca      	mov	sl, r9
 8011f42:	ed9d 5a24 	vldr	s10, [sp, #144]	@ 0x90
 8011f46:	46a1      	mov	r9, r4
 8011f48:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011f4c:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 80122a8 <iNemoEngine_API_Update+0x1698>
 8011f50:	f897 3900 	ldrb.w	r3, [r7, #2304]	@ 0x900
 8011f54:	f507 6610 	add.w	r6, r7, #2304	@ 0x900
 8011f58:	ee25 7a07 	vmul.f32	s14, s10, s14
 8011f5c:	eef0 6a67 	vmov.f32	s13, s15
 8011f60:	eddd 7a49 	vldr	s15, [sp, #292]	@ 0x124
 8011f64:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011f68:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8011f6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011f70:	ee86 4a25 	vdiv.f32	s8, s12, s11
 8011f74:	ee6e 5aa7 	vmul.f32	s11, s29, s15
 8011f78:	ee65 7a27 	vmul.f32	s15, s10, s15
 8011f7c:	ed9d 5a1f 	vldr	s10, [sp, #124]	@ 0x7c
 8011f80:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8011f84:	eec5 4a85 	vdiv.f32	s9, s11, s10
 8011f88:	eddd 5a20 	vldr	s11, [sp, #128]	@ 0x80
 8011f8c:	ed8d 4a60 	vstr	s8, [sp, #384]	@ 0x180
 8011f90:	eec7 3aa5 	vdiv.f32	s7, s15, s11
 8011f94:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011f98:	eeae 7aa7 	vfma.f32	s14, s29, s15
 8011f9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011fa0:	eddf 7ac2 	vldr	s15, [pc, #776]	@ 80122ac <iNemoEngine_API_Update+0x169c>
 8011fa4:	edcd 4a61 	vstr	s9, [sp, #388]	@ 0x184
 8011fa8:	ed8d 6a63 	vstr	s12, [sp, #396]	@ 0x18c
 8011fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fb0:	ed8d 7a02 	vstr	s14, [sp, #8]
 8011fb4:	edcd 3a62 	vstr	s7, [sp, #392]	@ 0x188
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f040 8123 	bne.w	8012204 <iNemoEngine_API_Update+0x15f4>
 8011fbe:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8011fc0:	62f3      	str	r3, [r6, #44]	@ 0x2c
 8011fc2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8011fc4:	62b3      	str	r3, [r6, #40]	@ 0x28
 8011fc6:	6a33      	ldr	r3, [r6, #32]
 8011fc8:	6273      	str	r3, [r6, #36]	@ 0x24
 8011fca:	69f3      	ldr	r3, [r6, #28]
 8011fcc:	edc6 7a07 	vstr	s15, [r6, #28]
 8011fd0:	6233      	str	r3, [r6, #32]
 8011fd2:	f607 130c 	addw	r3, r7, #2316	@ 0x90c
 8011fd6:	ed97 0a02 	vldr	s0, [r7, #8]
 8011fda:	ed93 9a00 	vldr	s18, [r3]
 8011fde:	f607 1324 	addw	r3, r7, #2340	@ 0x924
 8011fe2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011fe6:	edd3 7a00 	vldr	s15, [r3]
 8011fea:	f607 1308 	addw	r3, r7, #2312	@ 0x908
 8011fee:	ed93 7a00 	vldr	s14, [r3]
 8011ff2:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 8011ff6:	ee29 9a27 	vmul.f32	s18, s18, s15
 8011ffa:	edd3 7a00 	vldr	s15, [r3]
 8011ffe:	f607 1304 	addw	r3, r7, #2308	@ 0x904
 8012002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012006:	eea7 9a27 	vfma.f32	s18, s14, s15
 801200a:	ed93 7a00 	vldr	s14, [r3]
 801200e:	f607 131c 	addw	r3, r7, #2332	@ 0x91c
 8012012:	edd3 7a00 	vldr	s15, [r3]
 8012016:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 801201a:	eea7 9a27 	vfma.f32	s18, s14, s15
 801201e:	ed93 7a00 	vldr	s14, [r3]
 8012022:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8012026:	edd3 7a00 	vldr	s15, [r3]
 801202a:	f607 1314 	addw	r3, r7, #2324	@ 0x914
 801202e:	eea7 9a27 	vfma.f32	s18, s14, s15
 8012032:	ed93 7a00 	vldr	s14, [r3]
 8012036:	f607 132c 	addw	r3, r7, #2348	@ 0x92c
 801203a:	edd3 7a00 	vldr	s15, [r3]
 801203e:	eea7 9a27 	vfma.f32	s18, s14, s15
 8012042:	f340 81b0 	ble.w	80123a6 <iNemoEngine_API_Update+0x1796>
 8012046:	ed97 5a30 	vldr	s10, [r7, #192]	@ 0xc0
 801204a:	eeb4 5ac9 	vcmpe.f32	s10, s18
 801204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012052:	f100 8671 	bmi.w	8012d38 <iNemoEngine_API_Update+0x2128>
 8012056:	edd7 da31 	vldr	s27, [r7, #196]	@ 0xc4
 801205a:	ed97 5a4a 	vldr	s10, [r7, #296]	@ 0x128
 801205e:	eddd 7a1c 	vldr	s15, [sp, #112]	@ 0x70
 8012062:	eeb4 5ac9 	vcmpe.f32	s10, s18
 8012066:	ee67 7aad 	vmul.f32	s15, s15, s27
 801206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206e:	edcd 7a1c 	vstr	s15, [sp, #112]	@ 0x70
 8012072:	f141 85a6 	bpl.w	8013bc2 <iNemoEngine_API_Update+0x2fb2>
 8012076:	edd7 5a62 	vldr	s11, [r7, #392]	@ 0x188
 801207a:	eef4 5ac9 	vcmpe.f32	s11, s18
 801207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012082:	f341 876c 	ble.w	8013f5e <iNemoEngine_API_Update+0x334e>
 8012086:	ed97 7a4c 	vldr	s14, [r7, #304]	@ 0x130
 801208a:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 801208e:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8012092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012096:	eef4 7ac9 	vcmpe.f32	s15, s18
 801209a:	f142 8369 	bpl.w	8014770 <iNemoEngine_API_Update+0x3b60>
 801209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a2:	f242 84e3 	bls.w	8014a6c <iNemoEngine_API_Update+0x3e5c>
 80120a6:	ed97 3a4b 	vldr	s6, [r7, #300]	@ 0x12c
 80120aa:	ee37 7a45 	vsub.f32	s14, s14, s10
 80120ae:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 80120b2:	ee39 5a45 	vsub.f32	s10, s18, s10
 80120b6:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80120ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 80120be:	ee87 5a87 	vdiv.f32	s10, s15, s14
 80120c2:	ee35 7a03 	vadd.f32	s14, s10, s6
 80120c6:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80120ca:	eef4 7ac9 	vcmpe.f32	s15, s18
 80120ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d2:	f202 84e3 	bhi.w	8014a9c <iNemoEngine_API_Update+0x3e8c>
 80120d6:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 80120da:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80120de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e2:	f142 8735 	bpl.w	8014f50 <iNemoEngine_API_Update+0x4340>
 80120e6:	ed97 3a51 	vldr	s6, [r7, #324]	@ 0x144
 80120ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80120ee:	ed97 5a53 	vldr	s10, [r7, #332]	@ 0x14c
 80120f2:	ee79 7a67 	vsub.f32	s15, s18, s15
 80120f6:	ee35 5a43 	vsub.f32	s10, s10, s6
 80120fa:	ee25 5a27 	vmul.f32	s10, s10, s15
 80120fe:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8012102:	ee37 7a83 	vadd.f32	s14, s15, s6
 8012106:	edd7 7a54 	vldr	s15, [r7, #336]	@ 0x150
 801210a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012112:	f2c2 84e3 	blt.w	8014adc <iNemoEngine_API_Update+0x3ecc>
 8012116:	ed97 7a56 	vldr	s14, [r7, #344]	@ 0x158
 801211a:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012122:	f142 8723 	bpl.w	8014f6c <iNemoEngine_API_Update+0x435c>
 8012126:	ed97 3a55 	vldr	s6, [r7, #340]	@ 0x154
 801212a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801212e:	ed97 5a57 	vldr	s10, [r7, #348]	@ 0x15c
 8012132:	ee79 7a67 	vsub.f32	s15, s18, s15
 8012136:	ee35 5a43 	vsub.f32	s10, s10, s6
 801213a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801213e:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8012142:	ee37 7a83 	vadd.f32	s14, s15, s6
 8012146:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 801214a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012152:	f2c2 84e3 	blt.w	8014b1c <iNemoEngine_API_Update+0x3f0c>
 8012156:	ed97 7a5a 	vldr	s14, [r7, #360]	@ 0x168
 801215a:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012162:	f142 86fc 	bpl.w	8014f5e <iNemoEngine_API_Update+0x434e>
 8012166:	ed97 3a59 	vldr	s6, [r7, #356]	@ 0x164
 801216a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801216e:	ed97 5a5b 	vldr	s10, [r7, #364]	@ 0x16c
 8012172:	ee79 7a67 	vsub.f32	s15, s18, s15
 8012176:	ee35 5a43 	vsub.f32	s10, s10, s6
 801217a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801217e:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8012182:	ee37 7a83 	vadd.f32	s14, s15, s6
 8012186:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 801218a:	eef4 7ac9 	vcmpe.f32	s15, s18
 801218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012192:	f202 84e3 	bhi.w	8014b5c <iNemoEngine_API_Update+0x3f4c>
 8012196:	ed97 7a5e 	vldr	s14, [r7, #376]	@ 0x178
 801219a:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a2:	f142 86b1 	bpl.w	8014f08 <iNemoEngine_API_Update+0x42f8>
 80121a6:	ed97 3a5d 	vldr	s6, [r7, #372]	@ 0x174
 80121aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80121ae:	ed97 5a5f 	vldr	s10, [r7, #380]	@ 0x17c
 80121b2:	ee79 7a67 	vsub.f32	s15, s18, s15
 80121b6:	ee35 5a43 	vsub.f32	s10, s10, s6
 80121ba:	ee25 5a27 	vmul.f32	s10, s10, s15
 80121be:	eec5 7a07 	vdiv.f32	s15, s10, s14
 80121c2:	ee37 7a83 	vadd.f32	s14, s15, s6
 80121c6:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 80121ca:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80121ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d2:	db0f      	blt.n	80121f4 <iNemoEngine_API_Update+0x15e4>
 80121d4:	ed97 5a61 	vldr	s10, [r7, #388]	@ 0x184
 80121d8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80121dc:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 80121e0:	ee79 7a67 	vsub.f32	s15, s18, s15
 80121e4:	ee37 7a45 	vsub.f32	s14, s14, s10
 80121e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121ec:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80121f0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80121f4:	ee69 9a87 	vmul.f32	s19, s19, s14
 80121f8:	e0d9      	b.n	80123ae <iNemoEngine_API_Update+0x179e>
 80121fa:	3101      	adds	r1, #1
 80121fc:	3204      	adds	r2, #4
 80121fe:	3304      	adds	r3, #4
 8012200:	f7ff b831 	b.w	8011266 <iNemoEngine_API_Update+0x656>
 8012204:	2300      	movs	r3, #0
 8012206:	f887 3900 	strb.w	r3, [r7, #2304]	@ 0x900
 801220a:	edc6 7a07 	vstr	s15, [r6, #28]
 801220e:	edc6 7a08 	vstr	s15, [r6, #32]
 8012212:	edc6 7a09 	vstr	s15, [r6, #36]	@ 0x24
 8012216:	edc6 7a0a 	vstr	s15, [r6, #40]	@ 0x28
 801221a:	edc6 7a0b 	vstr	s15, [r6, #44]	@ 0x2c
 801221e:	e6d8      	b.n	8011fd2 <iNemoEngine_API_Update+0x13c2>
 8012220:	9a02      	ldr	r2, [sp, #8]
 8012222:	1c70      	adds	r0, r6, #1
 8012224:	4459      	add	r1, fp
 8012226:	eba2 0308 	sub.w	r3, r2, r8
 801222a:	4542      	cmp	r2, r8
 801222c:	4428      	add	r0, r5
 801222e:	461a      	mov	r2, r3
 8012230:	f77f adee 	ble.w	8011e10 <iNemoEngine_API_Update+0x1200>
 8012234:	9305      	str	r3, [sp, #20]
 8012236:	f006 fb44 	bl	80188c2 <memcpy>
 801223a:	9b05      	ldr	r3, [sp, #20]
 801223c:	46bc      	mov	ip, r7
 801223e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012242:	441e      	add	r6, r3
 8012244:	e5e4      	b.n	8011e10 <iNemoEngine_API_Update+0x1200>
 8012246:	eeb0 5a46 	vmov.f32	s10, s12
 801224a:	4618      	mov	r0, r3
 801224c:	eeb0 6a66 	vmov.f32	s12, s13
 8012250:	4655      	mov	r5, sl
 8012252:	eef0 5a47 	vmov.f32	s11, s14
 8012256:	edd1 7a00 	vldr	s15, [r1]
 801225a:	eef0 6a45 	vmov.f32	s13, s10
 801225e:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8012262:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8012266:	f7ff bb92 	b.w	801198e <iNemoEngine_API_Update+0xd7e>
 801226a:	2308      	movs	r3, #8
 801226c:	2204      	movs	r2, #4
 801226e:	f04f 0b06 	mov.w	fp, #6
 8012272:	2607      	movs	r6, #7
 8012274:	f04f 0a03 	mov.w	sl, #3
 8012278:	2005      	movs	r0, #5
 801227a:	4614      	mov	r4, r2
 801227c:	2500      	movs	r5, #0
 801227e:	f04f 0c01 	mov.w	ip, #1
 8012282:	f04f 0e02 	mov.w	lr, #2
 8012286:	9302      	str	r3, [sp, #8]
 8012288:	f7ff bb17 	b.w	80118ba <iNemoEngine_API_Update+0xcaa>
 801228c:	2204      	movs	r2, #4
 801228e:	2300      	movs	r3, #0
 8012290:	2106      	movs	r1, #6
 8012292:	eef0 7a47 	vmov.f32	s15, s14
 8012296:	2607      	movs	r6, #7
 8012298:	2003      	movs	r0, #3
 801229a:	4614      	mov	r4, r2
 801229c:	f04f 0c01 	mov.w	ip, #1
 80122a0:	469e      	mov	lr, r3
 80122a2:	9102      	str	r1, [sp, #8]
 80122a4:	f7ff bafa 	b.w	801189c <iNemoEngine_API_Update+0xc8c>
 80122a8:	3f333333 	.word	0x3f333333
 80122ac:	3f4ccccd 	.word	0x3f4ccccd
 80122b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80122b4:	4bcc      	ldr	r3, [pc, #816]	@ (80125e8 <iNemoEngine_API_Update+0x19d8>)
 80122b6:	2100      	movs	r1, #0
 80122b8:	ed9f aacc 	vldr	s20, [pc, #816]	@ 80125ec <iNemoEngine_API_Update+0x19dc>
 80122bc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80122c0:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80122c4:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 80122c8:	edc7 7a73 	vstr	s15, [r7, #460]	@ 0x1cc
 80122cc:	edc7 7a74 	vstr	s15, [r7, #464]	@ 0x1d0
 80122d0:	eef0 aa4a 	vmov.f32	s21, s20
 80122d4:	f887 11ac 	strb.w	r1, [r7, #428]	@ 0x1ac
 80122d8:	eef0 ca4a 	vmov.f32	s25, s20
 80122dc:	edcd 7a5b 	vstr	s15, [sp, #364]	@ 0x16c
 80122e0:	edcd 7a2b 	vstr	s15, [sp, #172]	@ 0xac
 80122e4:	ed8d aa58 	vstr	s20, [sp, #352]	@ 0x160
 80122e8:	ed8d aa59 	vstr	s20, [sp, #356]	@ 0x164
 80122ec:	ed8d aa5a 	vstr	s20, [sp, #360]	@ 0x168
 80122f0:	f006 fa67 	bl	80187c2 <memset>
 80122f4:	4bbe      	ldr	r3, [pc, #760]	@ (80125f0 <iNemoEngine_API_Update+0x19e0>)
 80122f6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80122fa:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 80122fe:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8012302:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8012306:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 801230a:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801230e:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8012312:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8012316:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 801231a:	f7fe bfb1 	b.w	8011280 <iNemoEngine_API_Update+0x670>
 801231e:	ed9f 8ab5 	vldr	s16, [pc, #724]	@ 80125f4 <iNemoEngine_API_Update+0x19e4>
 8012322:	eddf 7ab2 	vldr	s15, [pc, #712]	@ 80125ec <iNemoEngine_API_Update+0x19dc>
 8012326:	ed9f 5ab4 	vldr	s10, [pc, #720]	@ 80125f8 <iNemoEngine_API_Update+0x19e8>
 801232a:	eef0 da48 	vmov.f32	s27, s16
 801232e:	eddf 6abf 	vldr	s13, [pc, #764]	@ 801262c <iNemoEngine_API_Update+0x1a1c>
 8012332:	eeb0 6a67 	vmov.f32	s12, s15
 8012336:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80125fc <iNemoEngine_API_Update+0x19ec>
 801233a:	eeb0 9a67 	vmov.f32	s18, s15
 801233e:	ed8d 5a03 	vstr	s10, [sp, #12]
 8012342:	eef0 5a66 	vmov.f32	s11, s13
 8012346:	eeb0 5a47 	vmov.f32	s10, s14
 801234a:	ed84 8a01 	vstr	s16, [r4, #4]
 801234e:	edc4 7a00 	vstr	s15, [r4]
 8012352:	ed84 8a02 	vstr	s16, [r4, #8]
 8012356:	f7fe bef5 	b.w	8011144 <iNemoEngine_API_Update+0x534>
 801235a:	2301      	movs	r3, #1
 801235c:	eddf 7aa8 	vldr	s15, [pc, #672]	@ 8012600 <iNemoEngine_API_Update+0x19f0>
 8012360:	9312      	str	r3, [sp, #72]	@ 0x48
 8012362:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8012366:	f7fe bfe4 	b.w	8011332 <iNemoEngine_API_Update+0x722>
 801236a:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8012604 <iNemoEngine_API_Update+0x19f4>
 801236e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8012372:	ed9f eaa3 	vldr	s28, [pc, #652]	@ 8012600 <iNemoEngine_API_Update+0x19f0>
 8012376:	edcd 7a30 	vstr	s15, [sp, #192]	@ 0xc0
 801237a:	eddf 7aa3 	vldr	s15, [pc, #652]	@ 8012608 <iNemoEngine_API_Update+0x19f8>
 801237e:	edcd 7a31 	vstr	s15, [sp, #196]	@ 0xc4
 8012382:	f7fe bf99 	b.w	80112b8 <iNemoEngine_API_Update+0x6a8>
 8012386:	eeb1 6a46 	vneg.f32	s12, s12
 801238a:	f7ff bbca 	b.w	8011b22 <iNemoEngine_API_Update+0xf12>
 801238e:	ed9f 6a97 	vldr	s12, [pc, #604]	@ 80125ec <iNemoEngine_API_Update+0x19dc>
 8012392:	f7ff bbbb 	b.w	8011b0c <iNemoEngine_API_Update+0xefc>
 8012396:	eef1 6a66 	vneg.f32	s13, s13
 801239a:	f7ff bba1 	b.w	8011ae0 <iNemoEngine_API_Update+0xed0>
 801239e:	eddf 6a93 	vldr	s13, [pc, #588]	@ 80125ec <iNemoEngine_API_Update+0x19dc>
 80123a2:	f7ff bb92 	b.w	8011aca <iNemoEngine_API_Update+0xeba>
 80123a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80123aa:	eef0 da47 	vmov.f32	s27, s14
 80123ae:	edd7 5a74 	vldr	s11, [r7, #464]	@ 0x1d0
 80123b2:	ed97 5a72 	vldr	s10, [r7, #456]	@ 0x1c8
 80123b6:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 80123ba:	ee7e 5a65 	vsub.f32	s11, s28, s11
 80123be:	ed9f 3a90 	vldr	s6, [pc, #576]	@ 8012600 <iNemoEngine_API_Update+0x19f0>
 80123c2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80123c6:	eef0 5ae5 	vabs.f32	s11, s11
 80123ca:	eef0 7ae7 	vabs.f32	s15, s15
 80123ce:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80123d2:	eef4 7ac3 	vcmpe.f32	s15, s6
 80123d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123da:	dd0a      	ble.n	80123f2 <iNemoEngine_API_Update+0x17e2>
 80123dc:	eddf 2a8b 	vldr	s5, [pc, #556]	@ 801260c <iNemoEngine_API_Update+0x19fc>
 80123e0:	eef4 7ae2 	vcmpe.f32	s15, s5
 80123e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e8:	f340 847f 	ble.w	8012cea <iNemoEngine_API_Update+0x20da>
 80123ec:	eeb1 3a04 	vmov.f32	s6, #20	@ 0x40a00000  5.0
 80123f0:	e001      	b.n	80123f6 <iNemoEngine_API_Update+0x17e6>
 80123f2:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 80123f6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80123fa:	783b      	ldrb	r3, [r7, #0]
 80123fc:	fec3 7a27 	vmaxnm.f32	s15, s6, s15
 8012400:	edcd 7a03 	vstr	s15, [sp, #12]
 8012404:	b1cb      	cbz	r3, 801243a <iNemoEngine_API_Update+0x182a>
 8012406:	787c      	ldrb	r4, [r7, #1]
 8012408:	2c00      	cmp	r4, #0
 801240a:	f040 8456 	bne.w	8012cba <iNemoEngine_API_Update+0x20aa>
 801240e:	ee74 7a24 	vadd.f32	s15, s8, s9
 8012412:	eef5 4a00 	vmov.f32	s9, #80	@ 0x3e800000  0.250
 8012416:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801241a:	ee73 7aa7 	vadd.f32	s15, s7, s15
 801241e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8012422:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012426:	edd7 4a05 	vldr	s9, [r7, #20]
 801242a:	ee64 4a84 	vmul.f32	s9, s9, s8
 801242e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8012432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012436:	f102 8151 	bmi.w	80146dc <iNemoEngine_API_Update+0x3acc>
 801243a:	ed97 8a73 	vldr	s16, [r7, #460]	@ 0x1cc
 801243e:	2401      	movs	r4, #1
 8012440:	eddf 7a73 	vldr	s15, [pc, #460]	@ 8012610 <iNemoEngine_API_Update+0x1a00>
 8012444:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012448:	eddf 7a72 	vldr	s15, [pc, #456]	@ 8012614 <iNemoEngine_API_Update+0x1a04>
 801244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012450:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012454:	bfcc      	ite	gt
 8012456:	4623      	movgt	r3, r4
 8012458:	2300      	movle	r3, #0
 801245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245e:	f003 0301 	and.w	r3, r3, #1
 8012462:	bf58      	it	pl
 8012464:	2300      	movpl	r3, #0
 8012466:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 801246a:	ee6a 4a2a 	vmul.f32	s9, s20, s21
 801246e:	eddd 3a2b 	vldr	s7, [sp, #172]	@ 0xac
 8012472:	ee2c 1a8a 	vmul.f32	s2, s25, s20
 8012476:	edcd 7aa6 	vstr	s15, [sp, #664]	@ 0x298
 801247a:	2200      	movs	r2, #0
 801247c:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8012480:	ee74 2aa4 	vadd.f32	s5, s9, s9
 8012484:	ee23 3aac 	vmul.f32	s6, s7, s25
 8012488:	ed8d 5a4f 	vstr	s10, [sp, #316]	@ 0x13c
 801248c:	edcd 7aa7 	vstr	s15, [sp, #668]	@ 0x29c
 8012490:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012494:	ed8d eaa8 	vstr	s28, [sp, #672]	@ 0x2a0
 8012498:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 801249c:	eef0 4a67 	vmov.f32	s9, s15
 80124a0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80124a4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80124a8:	924d      	str	r2, [sp, #308]	@ 0x134
 80124aa:	eee5 4a45 	vfms.f32	s9, s10, s10
 80124ae:	eeb1 4ae4 	vsqrt.f32	s8, s9
 80124b2:	ee63 4aaa 	vmul.f32	s9, s7, s21
 80124b6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80124ba:	ee2a aa0a 	vmul.f32	s20, s20, s20
 80124be:	ee34 2aa4 	vadd.f32	s4, s9, s9
 80124c2:	eeec 3aaa 	vfma.f32	s7, s25, s21
 80124c6:	ee3a aa0a 	vadd.f32	s20, s20, s20
 80124ca:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 80124ce:	ee6c caac 	vmul.f32	s25, s25, s25
 80124d2:	eef0 1a4a 	vmov.f32	s3, s20
 80124d6:	ee6a aaaa 	vmul.f32	s21, s21, s21
 80124da:	ee33 aaa3 	vadd.f32	s20, s7, s7
 80124de:	eef0 3a62 	vmov.f32	s7, s5
 80124e2:	ed8d 4a4e 	vstr	s8, [sp, #312]	@ 0x138
 80124e6:	eeec 1aa4 	vfma.f32	s3, s25, s9
 80124ea:	eee3 2a64 	vfms.f32	s5, s6, s9
 80124ee:	eee3 3a24 	vfma.f32	s7, s6, s9
 80124f2:	ed9d 3a37 	vldr	s6, [sp, #220]	@ 0xdc
 80124f6:	ee7a aaaa 	vadd.f32	s21, s21, s21
 80124fa:	ee77 1ae1 	vsub.f32	s3, s15, s3
 80124fe:	eef0 0a6a 	vmov.f32	s1, s21
 8012502:	eddd aa34 	vldr	s21, [sp, #208]	@ 0xd0
 8012506:	eea5 3a63 	vfms.f32	s6, s10, s7
 801250a:	ee7c 3a63 	vsub.f32	s7, s24, s7
 801250e:	eeec 0aa4 	vfma.f32	s1, s25, s9
 8012512:	eee4 aa62 	vfms.f32	s21, s8, s5
 8012516:	edcd 3a48 	vstr	s7, [sp, #288]	@ 0x120
 801251a:	edcd 3aa1 	vstr	s7, [sp, #644]	@ 0x284
 801251e:	ee7b 3a82 	vadd.f32	s7, s23, s4
 8012522:	eea4 3a61 	vfms.f32	s6, s8, s3
 8012526:	eee1 3a64 	vfms.f32	s7, s2, s9
 801252a:	ed8d 3a9e 	vstr	s6, [sp, #632]	@ 0x278
 801252e:	eeb0 3a42 	vmov.f32	s6, s4
 8012532:	edcd 3a47 	vstr	s7, [sp, #284]	@ 0x11c
 8012536:	ee91 3a24 	vfnms.f32	s6, s2, s9
 801253a:	edcd 3aa0 	vstr	s7, [sp, #640]	@ 0x280
 801253e:	ee65 4a03 	vmul.f32	s9, s10, s6
 8012542:	eee4 4a0a 	vfma.f32	s9, s8, s20
 8012546:	ed9d 4a36 	vldr	s8, [sp, #216]	@ 0xd8
 801254a:	ee74 4a64 	vsub.f32	s9, s8, s9
 801254e:	edcd 4a9d 	vstr	s9, [sp, #628]	@ 0x274
 8012552:	ee77 4ae0 	vsub.f32	s9, s15, s1
 8012556:	eee5 aa64 	vfms.f32	s21, s10, s9
 801255a:	ee3b 5a67 	vsub.f32	s10, s22, s15
 801255e:	ee35 5a20 	vadd.f32	s10, s10, s1
 8012562:	edcd aa9f 	vstr	s21, [sp, #636]	@ 0x27c
 8012566:	ed8d 5a49 	vstr	s10, [sp, #292]	@ 0x124
 801256a:	ed8d 5aa2 	vstr	s10, [sp, #648]	@ 0x288
 801256e:	2b00      	cmp	r3, #0
 8012570:	f041 8465 	bne.w	8013e3e <iNemoEngine_API_Update+0x322e>
 8012574:	ed9d 5a10 	vldr	s10, [sp, #64]	@ 0x40
 8012578:	ee75 7a67 	vsub.f32	s15, s10, s15
 801257c:	eef0 7ae7 	vabs.f32	s15, s15
 8012580:	ee77 7aae 	vadd.f32	s15, s15, s29
 8012584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801258c:	dd54      	ble.n	8012638 <iNemoEngine_API_Update+0x1a28>
 801258e:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8012592:	eef4 7ac5 	vcmpe.f32	s15, s10
 8012596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259a:	f140 8381 	bpl.w	8012ca0 <iNemoEngine_API_Update+0x2090>
 801259e:	ed9f 5a1e 	vldr	s10, [pc, #120]	@ 8012618 <iNemoEngine_API_Update+0x1a08>
 80125a2:	eef4 7ac5 	vcmpe.f32	s15, s10
 80125a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125aa:	f140 8589 	bpl.w	80130c0 <iNemoEngine_API_Update+0x24b0>
 80125ae:	ed9f 5a1d 	vldr	s10, [pc, #116]	@ 8012624 <iNemoEngine_API_Update+0x1a14>
 80125b2:	eef4 7ac5 	vcmpe.f32	s15, s10
 80125b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ba:	f2c0 8589 	blt.w	80130d0 <iNemoEngine_API_Update+0x24c0>
 80125be:	ed9f 5a17 	vldr	s10, [pc, #92]	@ 801261c <iNemoEngine_API_Update+0x1a0c>
 80125c2:	eef4 7ac5 	vcmpe.f32	s15, s10
 80125c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ca:	f140 8639 	bpl.w	8013240 <iNemoEngine_API_Update+0x2630>
 80125ce:	eddf 4a15 	vldr	s9, [pc, #84]	@ 8012624 <iNemoEngine_API_Update+0x1a14>
 80125d2:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 80125d6:	ed9f 4a12 	vldr	s8, [pc, #72]	@ 8012620 <iNemoEngine_API_Update+0x1a10>
 80125da:	ee77 4ae4 	vsub.f32	s9, s15, s9
 80125de:	eea4 5a84 	vfma.f32	s10, s9, s8
 80125e2:	f000 bd7f 	b.w	80130e4 <iNemoEngine_API_Update+0x24d4>
 80125e6:	bf00      	nop
 80125e8:	bf666666 	.word	0xbf666666
 80125ec:	00000000 	.word	0x00000000
 80125f0:	40a00000 	.word	0x40a00000
 80125f4:	3f333333 	.word	0x3f333333
 80125f8:	3f7ae147 	.word	0x3f7ae147
 80125fc:	bfb33333 	.word	0xbfb33333
 8012600:	3dcccccd 	.word	0x3dcccccd
 8012604:	3ecccccc 	.word	0x3ecccccc
 8012608:	3f666666 	.word	0x3f666666
 801260c:	3fb77778 	.word	0x3fb77778
 8012610:	3f4ccccd 	.word	0x3f4ccccd
 8012614:	3f99999a 	.word	0x3f99999a
 8012618:	3ba3d70a 	.word	0x3ba3d70a
 801261c:	3c75c28f 	.word	0x3c75c28f
 8012620:	42f00001 	.word	0x42f00001
 8012624:	3c23d70a 	.word	0x3c23d70a
 8012628:	3b449ba6 	.word	0x3b449ba6
 801262c:	3fb33333 	.word	0x3fb33333
 8012630:	3ecccccd 	.word	0x3ecccccd
 8012634:	42480000 	.word	0x42480000
 8012638:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801263c:	ed5f 2a07 	vldr	s5, [pc, #-28]	@ 8012624 <iNemoEngine_API_Update+0x1a14>
 8012640:	ed1f 4a07 	vldr	s8, [pc, #-28]	@ 8012628 <iNemoEngine_API_Update+0x1a18>
 8012644:	eeb0 5a64 	vmov.f32	s10, s9
 8012648:	eeb0 8a64 	vmov.f32	s16, s9
 801264c:	eddd 3a03 	vldr	s7, [sp, #12]
 8012650:	ed9d 2a92 	vldr	s4, [sp, #584]	@ 0x248
 8012654:	ee63 daad 	vmul.f32	s27, s7, s27
 8012658:	ed8d 4a73 	vstr	s8, [sp, #460]	@ 0x1cc
 801265c:	ed9d 4a21 	vldr	s8, [sp, #132]	@ 0x84
 8012660:	7b3b      	ldrb	r3, [r7, #12]
 8012662:	ee22 2a2d 	vmul.f32	s4, s4, s27
 8012666:	edcd 9a95 	vstr	s19, [sp, #596]	@ 0x254
 801266a:	ee34 3a04 	vadd.f32	s6, s8, s8
 801266e:	ed9d 4a32 	vldr	s8, [sp, #200]	@ 0xc8
 8012672:	edcd 9a96 	vstr	s19, [sp, #600]	@ 0x258
 8012676:	ed8d 2a92 	vstr	s4, [sp, #584]	@ 0x248
 801267a:	ee74 3a04 	vadd.f32	s7, s8, s8
 801267e:	ed9d 2a93 	vldr	s4, [sp, #588]	@ 0x24c
 8012682:	ee23 3a05 	vmul.f32	s6, s6, s10
 8012686:	ed9d 4a1c 	vldr	s8, [sp, #112]	@ 0x70
 801268a:	ee22 2a2d 	vmul.f32	s4, s4, s27
 801268e:	edcd 2a74 	vstr	s5, [sp, #464]	@ 0x1d0
 8012692:	ed8d 4a9c 	vstr	s8, [sp, #624]	@ 0x270
 8012696:	ee63 3a85 	vmul.f32	s7, s7, s10
 801269a:	ed9d 4a91 	vldr	s8, [sp, #580]	@ 0x244
 801269e:	ed8d 2a93 	vstr	s4, [sp, #588]	@ 0x24c
 80126a2:	ed9d 2a94 	vldr	s4, [sp, #592]	@ 0x250
 80126a6:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80126aa:	ed8d 3a9a 	vstr	s6, [sp, #616]	@ 0x268
 80126ae:	ee27 7a02 	vmul.f32	s14, s14, s4
 80126b2:	edcd 3a9b 	vstr	s7, [sp, #620]	@ 0x26c
 80126b6:	ed8d 4a91 	vstr	s8, [sp, #580]	@ 0x244
 80126ba:	ed8d 7a94 	vstr	s14, [sp, #592]	@ 0x250
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d040      	beq.n	8012744 <iNemoEngine_API_Update+0x1b34>
 80126c2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80126c4:	2300      	movs	r3, #0
 80126c6:	2100      	movs	r1, #0
 80126c8:	ee69 9a85 	vmul.f32	s19, s19, s10
 80126cc:	f362 0307 	bfi	r3, r2, #0, #8
 80126d0:	ee27 7a05 	vmul.f32	s14, s14, s10
 80126d4:	ee35 5a05 	vadd.f32	s10, s10, s10
 80126d8:	ed9d 2a2a 	vldr	s4, [sp, #168]	@ 0xa8
 80126dc:	f362 230f 	bfi	r3, r2, #8, #8
 80126e0:	edcd 9a95 	vstr	s19, [sp, #596]	@ 0x254
 80126e4:	ee22 2a24 	vmul.f32	s4, s4, s9
 80126e8:	ed8d 7a94 	vstr	s14, [sp, #592]	@ 0x250
 80126ec:	f362 4317 	bfi	r3, r2, #16, #8
 80126f0:	7bba      	ldrb	r2, [r7, #14]
 80126f2:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80126f6:	edcd 9a96 	vstr	s19, [sp, #600]	@ 0x258
 80126fa:	f362 631f 	bfi	r3, r2, #24, #8
 80126fe:	ee63 3a85 	vmul.f32	s7, s7, s10
 8012702:	ed8d 2a6d 	vstr	s4, [sp, #436]	@ 0x1b4
 8012706:	9344      	str	r3, [sp, #272]	@ 0x110
 8012708:	460b      	mov	r3, r1
 801270a:	edcd 4a74 	vstr	s9, [sp, #464]	@ 0x1d0
 801270e:	f362 0307 	bfi	r3, r2, #0, #8
 8012712:	ed8d 2a6e 	vstr	s4, [sp, #440]	@ 0x1b8
 8012716:	ed8d 2a6f 	vstr	s4, [sp, #444]	@ 0x1bc
 801271a:	f362 230f 	bfi	r3, r2, #8, #8
 801271e:	edcd 3a9b 	vstr	s7, [sp, #620]	@ 0x26c
 8012722:	f8ad 3114 	strh.w	r3, [sp, #276]	@ 0x114
 8012726:	2a00      	cmp	r2, #0
 8012728:	f000 8405 	beq.w	8012f36 <iNemoEngine_API_Update+0x2326>
 801272c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012738:	dd18      	ble.n	801276c <iNemoEngine_API_Update+0x1b5c>
 801273a:	f8ad 1113 	strh.w	r1, [sp, #275]	@ 0x113
 801273e:	f88d 1115 	strb.w	r1, [sp, #277]	@ 0x115
 8012742:	e013      	b.n	801276c <iNemoEngine_API_Update+0x1b5c>
 8012744:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012746:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012748:	f362 0307 	bfi	r3, r2, #0, #8
 801274c:	f362 230f 	bfi	r3, r2, #8, #8
 8012750:	7bba      	ldrb	r2, [r7, #14]
 8012752:	f362 4317 	bfi	r3, r2, #16, #8
 8012756:	2a00      	cmp	r2, #0
 8012758:	bf08      	it	eq
 801275a:	f041 0101 	orreq.w	r1, r1, #1
 801275e:	f88d 2115 	strb.w	r2, [sp, #277]	@ 0x115
 8012762:	f362 631f 	bfi	r3, r2, #24, #8
 8012766:	9112      	str	r1, [sp, #72]	@ 0x48
 8012768:	f8cd 3111 	str.w	r3, [sp, #273]	@ 0x111
 801276c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012774:	f340 81aa 	ble.w	8012acc <iNemoEngine_API_Update+0x1ebc>
 8012778:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 801277c:	eef4 7a49 	vcmp.f32	s15, s18
 8012780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012784:	f2c0 81a2 	blt.w	8012acc <iNemoEngine_API_Update+0x1ebc>
 8012788:	2c00      	cmp	r4, #0
 801278a:	f000 819f 	beq.w	8012acc <iNemoEngine_API_Update+0x1ebc>
 801278e:	ed5f 7a59 	vldr	s15, [pc, #-356]	@ 801262c <iNemoEngine_API_Update+0x1a1c>
 8012792:	2300      	movs	r3, #0
 8012794:	eeb4 eae7 	vcmpe.f32	s28, s15
 8012798:	ed5f 7a5b 	vldr	s15, [pc, #-364]	@ 8012630 <iNemoEngine_API_Update+0x1a20>
 801279c:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 80127a0:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 80127a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a8:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 80127ac:	eeb4 eae7 	vcmpe.f32	s28, s15
 80127b0:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 80127b4:	bfc8      	it	gt
 80127b6:	2301      	movgt	r3, #1
 80127b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127bc:	bf48      	it	mi
 80127be:	f043 0301 	orrmi.w	r3, r3, #1
 80127c2:	b90b      	cbnz	r3, 80127c8 <iNemoEngine_API_Update+0x1bb8>
 80127c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80127c6:	b943      	cbnz	r3, 80127da <iNemoEngine_API_Update+0x1bca>
 80127c8:	2300      	movs	r3, #0
 80127ca:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 80127ce:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 80127d2:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 80127d6:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 80127da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80127dc:	2b00      	cmp	r3, #0
 80127de:	f001 82fe 	beq.w	8013dde <iNemoEngine_API_Update+0x31ce>
 80127e2:	2300      	movs	r3, #0
 80127e4:	f8ad 3113 	strh.w	r3, [sp, #275]	@ 0x113
 80127e8:	f88d 3115 	strb.w	r3, [sp, #277]	@ 0x115
 80127ec:	f8ad 3119 	strh.w	r3, [sp, #281]	@ 0x119
 80127f0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80127f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127f6:	eef4 5ae7 	vcmpe.f32	s11, s15
 80127fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fe:	f340 818f 	ble.w	8012b20 <iNemoEngine_API_Update+0x1f10>
 8012802:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012806:	ed9d 7a1c 	vldr	s14, [sp, #112]	@ 0x70
 801280a:	2200      	movs	r2, #0
 801280c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8012810:	f8ad 2110 	strh.w	r2, [sp, #272]	@ 0x110
 8012814:	f88d 2112 	strb.w	r2, [sp, #274]	@ 0x112
 8012818:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801281c:	ee23 3a27 	vmul.f32	s6, s6, s15
 8012820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012824:	ed8d 3a9a 	vstr	s6, [sp, #616]	@ 0x268
 8012828:	edcd 7a9c 	vstr	s15, [sp, #624]	@ 0x270
 801282c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8012830:	eef4 5ae7 	vcmpe.f32	s11, s15
 8012834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012838:	dd03      	ble.n	8012842 <iNemoEngine_API_Update+0x1c32>
 801283a:	f88d 2119 	strb.w	r2, [sp, #281]	@ 0x119
 801283e:	f88d 211b 	strb.w	r2, [sp, #283]	@ 0x11b
 8012842:	2b0e      	cmp	r3, #14
 8012844:	f340 838a 	ble.w	8012f5c <iNemoEngine_API_Update+0x234c>
 8012848:	eddd 7a1f 	vldr	s15, [sp, #124]	@ 0x7c
 801284c:	ed9d 7a23 	vldr	s14, [sp, #140]	@ 0x8c
 8012850:	eef4 7aee 	vcmpe.f32	s15, s29
 8012854:	eddd 7a1e 	vldr	s15, [sp, #120]	@ 0x78
 8012858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801285c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012860:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8012864:	ed9d 7a24 	vldr	s14, [sp, #144]	@ 0x90
 8012868:	bfcc      	ite	gt
 801286a:	2101      	movgt	r1, #1
 801286c:	2100      	movle	r1, #0
 801286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012876:	f001 0101 	and.w	r1, r1, #1
 801287a:	bfd8      	it	le
 801287c:	2100      	movle	r1, #0
 801287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012882:	f001 0001 	and.w	r0, r1, #1
 8012886:	bfd8      	it	le
 8012888:	2000      	movle	r0, #0
 801288a:	2800      	cmp	r0, #0
 801288c:	f041 8389 	bne.w	8013fa2 <iNemoEngine_API_Update+0x3392>
 8012890:	2300      	movs	r3, #0
 8012892:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012894:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8012898:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801289c:	2a00      	cmp	r2, #0
 801289e:	f040 8351 	bne.w	8012f44 <iNemoEngine_API_Update+0x2334>
 80128a2:	2300      	movs	r3, #0
 80128a4:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 80128a8:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 80128ac:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 80128b0:	707b      	strb	r3, [r7, #1]
 80128b2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80128b6:	93a3      	str	r3, [sp, #652]	@ 0x28c
 80128b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80128bc:	93a4      	str	r3, [sp, #656]	@ 0x290
 80128be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80128c2:	93a5      	str	r3, [sp, #660]	@ 0x294
 80128c4:	ed5f 7aa5 	vldr	s15, [pc, #-660]	@ 8012634 <iNemoEngine_API_Update+0x1a24>
 80128c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80128cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d0:	f2c0 813a 	blt.w	8012b48 <iNemoEngine_API_Update+0x1f38>
 80128d4:	2300      	movs	r3, #0
 80128d6:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 80128da:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 80128de:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 80128e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	f000 8140 	beq.w	8012b6a <iNemoEngine_API_Update+0x1f5a>
 80128ea:	edd7 3a75 	vldr	s7, [r7, #468]	@ 0x1d4
 80128ee:	ab91      	add	r3, sp, #580	@ 0x244
 80128f0:	ed97 4a7f 	vldr	s8, [r7, #508]	@ 0x1fc
 80128f4:	aa9d      	add	r2, sp, #628	@ 0x274
 80128f6:	eddd 2a6d 	vldr	s5, [sp, #436]	@ 0x1b4
 80128fa:	a944      	add	r1, sp, #272	@ 0x110
 80128fc:	ed9d 3a6e 	vldr	s6, [sp, #440]	@ 0x1b8
 8012900:	f507 70d6 	add.w	r0, r7, #428	@ 0x1ac
 8012904:	edd7 4a89 	vldr	s9, [r7, #548]	@ 0x224
 8012908:	eee2 3aa2 	vfma.f32	s7, s5, s5
 801290c:	edd7 5a93 	vldr	s11, [r7, #588]	@ 0x24c
 8012910:	eea3 4a03 	vfma.f32	s8, s6, s6
 8012914:	ed97 6a9d 	vldr	s12, [r7, #628]	@ 0x274
 8012918:	edd7 6aa7 	vldr	s13, [r7, #668]	@ 0x29c
 801291c:	ed97 7ab1 	vldr	s14, [r7, #708]	@ 0x2c4
 8012920:	edd7 7abb 	vldr	s15, [r7, #748]	@ 0x2ec
 8012924:	ed97 5ac5 	vldr	s10, [r7, #788]	@ 0x314
 8012928:	eddd 0a6f 	vldr	s1, [sp, #444]	@ 0x1bc
 801292c:	ed9d 1a70 	vldr	s2, [sp, #448]	@ 0x1c0
 8012930:	eddd 1a71 	vldr	s3, [sp, #452]	@ 0x1c4
 8012934:	eee0 4aa0 	vfma.f32	s9, s1, s1
 8012938:	ed9d 2a72 	vldr	s4, [sp, #456]	@ 0x1c8
 801293c:	eee1 5a01 	vfma.f32	s11, s2, s2
 8012940:	eddd 2a73 	vldr	s5, [sp, #460]	@ 0x1cc
 8012944:	eea1 6aa1 	vfma.f32	s12, s3, s3
 8012948:	ed9d 3a74 	vldr	s6, [sp, #464]	@ 0x1d0
 801294c:	eee2 6a02 	vfma.f32	s13, s4, s4
 8012950:	ed9d 0a75 	vldr	s0, [sp, #468]	@ 0x1d4
 8012954:	eea2 7aa2 	vfma.f32	s14, s5, s5
 8012958:	eee3 7a03 	vfma.f32	s15, s6, s6
 801295c:	edc7 3a75 	vstr	s7, [r7, #468]	@ 0x1d4
 8012960:	eea0 5a00 	vfma.f32	s10, s0, s0
 8012964:	ed87 4a7f 	vstr	s8, [r7, #508]	@ 0x1fc
 8012968:	9300      	str	r3, [sp, #0]
 801296a:	edc7 5a93 	vstr	s11, [r7, #588]	@ 0x24c
 801296e:	ed87 6a9d 	vstr	s12, [r7, #628]	@ 0x274
 8012972:	edc7 6aa7 	vstr	s13, [r7, #668]	@ 0x29c
 8012976:	ed87 7ab1 	vstr	s14, [r7, #708]	@ 0x2c4
 801297a:	edc7 7abb 	vstr	s15, [r7, #748]	@ 0x2ec
 801297e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012980:	edc7 4a89 	vstr	s9, [r7, #548]	@ 0x224
 8012984:	ed87 5ac5 	vstr	s10, [r7, #788]	@ 0x314
 8012988:	edcd 8a97 	vstr	s17, [sp, #604]	@ 0x25c
 801298c:	edcd 8a98 	vstr	s17, [sp, #608]	@ 0x260
 8012990:	edcd 8a99 	vstr	s17, [sp, #612]	@ 0x264
 8012994:	f7fc fc64 	bl	800f260 <kf_update>
 8012998:	ed97 6a6d 	vldr	s12, [r7, #436]	@ 0x1b4
 801299c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80129a0:	edd7 5a6c 	vldr	s11, [r7, #432]	@ 0x1b0
 80129a4:	ee26 7a06 	vmul.f32	s14, s12, s12
 80129a8:	edd7 6a6e 	vldr	s13, [r7, #440]	@ 0x1b8
 80129ac:	eea5 7aa5 	vfma.f32	s14, s11, s11
 80129b0:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80129b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129bc:	f100 80bf 	bmi.w	8012b3e <iNemoEngine_API_Update+0x1f2e>
 80129c0:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 8012d08 <iNemoEngine_API_Update+0x20f8>
 80129c4:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80129c8:	edcd 5a60 	vstr	s11, [sp, #384]	@ 0x180
 80129cc:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 80129d0:	ed8d 6a61 	vstr	s12, [sp, #388]	@ 0x184
 80129d4:	edcd 6a62 	vstr	s13, [sp, #392]	@ 0x188
 80129d8:	aa58      	add	r2, sp, #352	@ 0x160
 80129da:	edcd 7a63 	vstr	s15, [sp, #396]	@ 0x18c
 80129de:	4648      	mov	r0, r9
 80129e0:	4611      	mov	r1, r2
 80129e2:	ad7e      	add	r5, sp, #504	@ 0x1f8
 80129e4:	eeb1 5ac7 	vsqrt.f32	s10, s14
 80129e8:	ee84 7a85 	vdiv.f32	s14, s9, s10
 80129ec:	ee67 5a25 	vmul.f32	s11, s14, s11
 80129f0:	ee27 6a06 	vmul.f32	s12, s14, s12
 80129f4:	ee67 6a26 	vmul.f32	s13, s14, s13
 80129f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129fc:	edc9 5a00 	vstr	s11, [r9]
 8012a00:	ed89 6a01 	vstr	s12, [r9, #4]
 8012a04:	edc9 6a02 	vstr	s13, [r9, #8]
 8012a08:	edc9 7a03 	vstr	s15, [r9, #12]
 8012a0c:	f7fc fa60 	bl	800eed0 <qmult>
 8012a10:	edd2 6a01 	vldr	s13, [r2, #4]
 8012a14:	ed92 6a00 	vldr	s12, [r2]
 8012a18:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8012a1c:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012a20:	ed92 7a02 	vldr	s14, [r2, #8]
 8012a24:	edd2 5a03 	vldr	s11, [r2, #12]
 8012a28:	f50d 7cec 	add.w	ip, sp, #472	@ 0x1d8
 8012a2c:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 8012a2e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012a32:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012a36:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012a3a:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8012a3e:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8012a42:	ee27 6a86 	vmul.f32	s12, s15, s12
 8012a46:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8012a4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012a4e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012a52:	ed8d 6a54 	vstr	s12, [sp, #336]	@ 0x150
 8012a56:	edcd 6a55 	vstr	s13, [sp, #340]	@ 0x154
 8012a5a:	ed8d 7a56 	vstr	s14, [sp, #344]	@ 0x158
 8012a5e:	edcd 7a57 	vstr	s15, [sp, #348]	@ 0x15c
 8012a62:	4664      	mov	r4, ip
 8012a64:	3610      	adds	r6, #16
 8012a66:	f10c 0c10 	add.w	ip, ip, #16
 8012a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a6c:	42ac      	cmp	r4, r5
 8012a6e:	f846 0c10 	str.w	r0, [r6, #-16]
 8012a72:	f846 1c0c 	str.w	r1, [r6, #-12]
 8012a76:	f846 2c08 	str.w	r2, [r6, #-8]
 8012a7a:	f846 3c04 	str.w	r3, [r6, #-4]
 8012a7e:	d1f0      	bne.n	8012a62 <iNemoEngine_API_Update+0x1e52>
 8012a80:	f8dc 0000 	ldr.w	r0, [ip]
 8012a84:	ac54      	add	r4, sp, #336	@ 0x150
 8012a86:	6030      	str	r0, [r6, #0]
 8012a88:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8012a8c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8012a8e:	6013      	str	r3, [r2, #0]
 8012a90:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8012a94:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8012a96:	6013      	str	r3, [r2, #0]
 8012a98:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8012a9c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8012a9e:	6013      	str	r3, [r2, #0]
 8012aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012aa2:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8012aa4:	60e3      	str	r3, [r4, #12]
 8012aa6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8012aa8:	6020      	str	r0, [r4, #0]
 8012aaa:	6061      	str	r1, [r4, #4]
 8012aac:	60a2      	str	r2, [r4, #8]
 8012aae:	edd7 8a75 	vldr	s17, [r7, #468]	@ 0x1d4
 8012ab2:	ed83 6a00 	vstr	s12, [r3]
 8012ab6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8012ab8:	edc3 6a00 	vstr	s13, [r3]
 8012abc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8012abe:	ed83 7a00 	vstr	s14, [r3]
 8012ac2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012ac4:	edc3 7a00 	vstr	s15, [r3]
 8012ac8:	f7fe b955 	b.w	8010d76 <iNemoEngine_API_Update+0x166>
 8012acc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f43f ae7a 	beq.w	80127c8 <iNemoEngine_API_Update+0x1bb8>
 8012ad4:	eddf 7a8d 	vldr	s15, [pc, #564]	@ 8012d0c <iNemoEngine_API_Update+0x20fc>
 8012ad8:	2301      	movs	r3, #1
 8012ada:	eeb4 eae7 	vcmpe.f32	s28, s15
 8012ade:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 8012ae2:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 8012ae6:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 8012aea:	f240 1301 	movw	r3, #257	@ 0x101
 8012aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af2:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 8012af6:	f73f ae67 	bgt.w	80127c8 <iNemoEngine_API_Update+0x1bb8>
 8012afa:	eddf 7a85 	vldr	s15, [pc, #532]	@ 8012d10 <iNemoEngine_API_Update+0x2100>
 8012afe:	eeb4 eae7 	vcmpe.f32	s28, s15
 8012b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b06:	f53f ae5f 	bmi.w	80127c8 <iNemoEngine_API_Update+0x1bb8>
 8012b0a:	eddd 7a31 	vldr	s15, [sp, #196]	@ 0xc4
 8012b0e:	fe84 4a27 	vmaxnm.f32	s8, s8, s15
 8012b12:	ed8d 4a91 	vstr	s8, [sp, #580]	@ 0x244
 8012b16:	ed8d 4a92 	vstr	s8, [sp, #584]	@ 0x248
 8012b1a:	ed8d 4a93 	vstr	s8, [sp, #588]	@ 0x24c
 8012b1e:	e65c      	b.n	80127da <iNemoEngine_API_Update+0x1bca>
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	f340 829a 	ble.w	801305a <iNemoEngine_API_Update+0x244a>
 8012b26:	3b01      	subs	r3, #1
 8012b28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 8012b30:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 8012b34:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 8012b38:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 8012b3c:	e684      	b.n	8012848 <iNemoEngine_API_Update+0x1c38>
 8012b3e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8012b42:	eef1 7ac5 	vsqrt.f32	s15, s10
 8012b46:	e73d      	b.n	80129c4 <iNemoEngine_API_Update+0x1db4>
 8012b48:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8012b4c:	2b31      	cmp	r3, #49	@ 0x31
 8012b4e:	f63f aec8 	bhi.w	80128e2 <iNemoEngine_API_Update+0x1cd2>
 8012b52:	3301      	adds	r3, #1
 8012b54:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8012b58:	2300      	movs	r3, #0
 8012b5a:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8012b5e:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8012b62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	f47f aec0 	bne.w	80128ea <iNemoEngine_API_Update+0x1cda>
 8012b6a:	eef6 4a08 	vmov.f32	s9, #104	@ 0x3f400000  0.750
 8012b6e:	ed9d 5a94 	vldr	s10, [sp, #592]	@ 0x250
 8012b72:	eddd 6a6d 	vldr	s13, [sp, #436]	@ 0x1b4
 8012b76:	eddd 5a95 	vldr	s11, [sp, #596]	@ 0x254
 8012b7a:	ed9d 7a6e 	vldr	s14, [sp, #440]	@ 0x1b8
 8012b7e:	ee25 5a24 	vmul.f32	s10, s10, s9
 8012b82:	ed9d 6a96 	vldr	s12, [sp, #600]	@ 0x258
 8012b86:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012b8a:	eddd 7a6f 	vldr	s15, [sp, #444]	@ 0x1bc
 8012b8e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8012b92:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012b96:	ed8d 5a94 	vstr	s10, [sp, #592]	@ 0x250
 8012b9a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012b9e:	edcd 6a6d 	vstr	s13, [sp, #436]	@ 0x1b4
 8012ba2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012ba6:	edcd 5a95 	vstr	s11, [sp, #596]	@ 0x254
 8012baa:	ed8d 7a6e 	vstr	s14, [sp, #440]	@ 0x1b8
 8012bae:	ed8d 6a96 	vstr	s12, [sp, #600]	@ 0x258
 8012bb2:	edcd 7a6f 	vstr	s15, [sp, #444]	@ 0x1bc
 8012bb6:	e698      	b.n	80128ea <iNemoEngine_API_Update+0x1cda>
 8012bb8:	eef1 7a67 	vneg.f32	s15, s15
 8012bbc:	f7fe bfd2 	b.w	8011b64 <iNemoEngine_API_Update+0xf54>
 8012bc0:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8012d08 <iNemoEngine_API_Update+0x20f8>
 8012bc4:	f7fe bfc3 	b.w	8011b4e <iNemoEngine_API_Update+0xf3e>
 8012bc8:	f9b7 3974 	ldrsh.w	r3, [r7, #2420]	@ 0x974
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	f341 8140 	ble.w	8013e52 <iNemoEngine_API_Update+0x3242>
 8012bd2:	3b01      	subs	r3, #1
 8012bd4:	f8a7 3974 	strh.w	r3, [r7, #2420]	@ 0x974
 8012bd8:	f7fe b841 	b.w	8010c5e <iNemoEngine_API_Update+0x4e>
 8012bdc:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 8012be0:	ee6a 9a08 	vmul.f32	s19, s20, s16
 8012be4:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8012be8:	eee8 9a89 	vfma.f32	s19, s17, s18
 8012bec:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012bf0:	eee8 7a48 	vfms.f32	s15, s16, s16
 8012bf4:	ee17 0a90 	vmov	r0, s15
 8012bf8:	f7ed fe70 	bl	80008dc <__aeabi_f2d>
 8012bfc:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8012c00:	ec41 0b18 	vmov	d8, r0, r1
 8012c04:	ee17 0a90 	vmov	r0, s15
 8012c08:	f7ed fe68 	bl	80008dc <__aeabi_f2d>
 8012c0c:	eeb0 1a48 	vmov.f32	s2, s16
 8012c10:	eef0 1a68 	vmov.f32	s3, s17
 8012c14:	ec41 0b10 	vmov	d0, r0, r1
 8012c18:	f007 fe30 	bl	801a87c <atan2>
 8012c1c:	a338      	add	r3, pc, #224	@ (adr r3, 8012d00 <iNemoEngine_API_Update+0x20f0>)
 8012c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c22:	ec51 0b10 	vmov	r0, r1, d0
 8012c26:	f7ed fbcb 	bl	80003c0 <__aeabi_dmul>
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	4b39      	ldr	r3, [pc, #228]	@ (8012d14 <iNemoEngine_API_Update+0x2104>)
 8012c2e:	f7ed fcf7 	bl	8000620 <__adddf3>
 8012c32:	f7ed ff33 	bl	8000a9c <__aeabi_d2f>
 8012c36:	ee09 0a90 	vmov	s19, r0
 8012c3a:	f7fe b927 	b.w	8010e8c <iNemoEngine_API_Update+0x27c>
 8012c3e:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 8012c42:	ee6a 9a08 	vmul.f32	s19, s20, s16
 8012c46:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8012c4a:	eee8 9a89 	vfma.f32	s19, s17, s18
 8012c4e:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012c52:	eee8 7a48 	vfms.f32	s15, s16, s16
 8012c56:	ee17 0a90 	vmov	r0, s15
 8012c5a:	f7ed fe3f 	bl	80008dc <__aeabi_f2d>
 8012c5e:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8012c62:	ec41 0b18 	vmov	d8, r0, r1
 8012c66:	ee17 0a90 	vmov	r0, s15
 8012c6a:	f7ed fe37 	bl	80008dc <__aeabi_f2d>
 8012c6e:	eeb0 1a48 	vmov.f32	s2, s16
 8012c72:	eef0 1a68 	vmov.f32	s3, s17
 8012c76:	ec41 0b10 	vmov	d0, r0, r1
 8012c7a:	f007 fdff 	bl	801a87c <atan2>
 8012c7e:	a320      	add	r3, pc, #128	@ (adr r3, 8012d00 <iNemoEngine_API_Update+0x20f0>)
 8012c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c84:	ec51 0b10 	vmov	r0, r1, d0
 8012c88:	f7ed fb9a 	bl	80003c0 <__aeabi_dmul>
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	4b21      	ldr	r3, [pc, #132]	@ (8012d14 <iNemoEngine_API_Update+0x2104>)
 8012c90:	f7ed fcc4 	bl	800061c <__aeabi_dsub>
 8012c94:	f7ed ff02 	bl	8000a9c <__aeabi_d2f>
 8012c98:	ee09 0a90 	vmov	s19, r0
 8012c9c:	f7fe b8f6 	b.w	8010e8c <iNemoEngine_API_Update+0x27c>
 8012ca0:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 8012d18 <iNemoEngine_API_Update+0x2108>
 8012ca4:	eddf 2a1d 	vldr	s5, [pc, #116]	@ 8012d1c <iNemoEngine_API_Update+0x210c>
 8012ca8:	ee68 8a88 	vmul.f32	s17, s17, s16
 8012cac:	ed9f 4a1c 	vldr	s8, [pc, #112]	@ 8012d20 <iNemoEngine_API_Update+0x2110>
 8012cb0:	eddf 4a1c 	vldr	s9, [pc, #112]	@ 8012d24 <iNemoEngine_API_Update+0x2114>
 8012cb4:	ed9f 5a1c 	vldr	s10, [pc, #112]	@ 8012d28 <iNemoEngine_API_Update+0x2118>
 8012cb8:	e4c8      	b.n	801264c <iNemoEngine_API_Update+0x1a3c>
 8012cba:	ed97 8a73 	vldr	s16, [r7, #460]	@ 0x1cc
 8012cbe:	2401      	movs	r4, #1
 8012cc0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8012d2c <iNemoEngine_API_Update+0x211c>
 8012cc4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012cc8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012d30 <iNemoEngine_API_Update+0x2120>
 8012ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012cd4:	bf4c      	ite	mi
 8012cd6:	4623      	movmi	r3, r4
 8012cd8:	2300      	movpl	r3, #0
 8012cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cde:	f003 0301 	and.w	r3, r3, #1
 8012ce2:	bfd8      	it	le
 8012ce4:	2300      	movle	r3, #0
 8012ce6:	f7ff bbbe 	b.w	8012466 <iNemoEngine_API_Update+0x1856>
 8012cea:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8012cee:	eef0 2a08 	vmov.f32	s5, #8	@ 0x40400000  3.0
 8012cf2:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8012cf6:	eea7 3aa2 	vfma.f32	s6, s15, s5
 8012cfa:	f7ff bb7c 	b.w	80123f6 <iNemoEngine_API_Update+0x17e6>
 8012cfe:	bf00      	nop
 8012d00:	20000000 	.word	0x20000000
 8012d04:	404ca5dc 	.word	0x404ca5dc
 8012d08:	00000000 	.word	0x00000000
 8012d0c:	3fb33333 	.word	0x3fb33333
 8012d10:	3ecccccd 	.word	0x3ecccccd
 8012d14:	40568000 	.word	0x40568000
 8012d18:	43168000 	.word	0x43168000
 8012d1c:	391d4951 	.word	0x391d4951
 8012d20:	383cbe62 	.word	0x383cbe62
 8012d24:	3c75c28f 	.word	0x3c75c28f
 8012d28:	469c3e00 	.word	0x469c3e00
 8012d2c:	3f99999a 	.word	0x3f99999a
 8012d30:	3f4ccccd 	.word	0x3f4ccccd
 8012d34:	3dcccccd 	.word	0x3dcccccd
 8012d38:	edd7 5a48 	vldr	s11, [r7, #288]	@ 0x120
 8012d3c:	eef4 5ac9 	vcmpe.f32	s11, s18
 8012d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d44:	f341 80f4 	ble.w	8013f30 <iNemoEngine_API_Update+0x3320>
 8012d48:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 8012d4c:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8012d50:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8012d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d58:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012d5c:	f141 851e 	bpl.w	801479c <iNemoEngine_API_Update+0x3b8c>
 8012d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d64:	f281 8553 	bge.w	801480e <iNemoEngine_API_Update+0x3bfe>
 8012d68:	ed97 3a31 	vldr	s6, [r7, #196]	@ 0xc4
 8012d6c:	ee37 7a45 	vsub.f32	s14, s14, s10
 8012d70:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8012d74:	ee39 5a45 	vsub.f32	s10, s18, s10
 8012d78:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8012d7c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012d80:	eec7 da87 	vdiv.f32	s27, s15, s14
 8012d84:	ee7d da83 	vadd.f32	s27, s27, s6
 8012d88:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8012d8c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d94:	f2c1 8553 	blt.w	801483e <iNemoEngine_API_Update+0x3c2e>
 8012d98:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8012d9c:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8012da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da4:	f141 8793 	bpl.w	8014cce <iNemoEngine_API_Update+0x40be>
 8012da8:	ed97 3a37 	vldr	s6, [r7, #220]	@ 0xdc
 8012dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012db0:	ed97 5a39 	vldr	s10, [r7, #228]	@ 0xe4
 8012db4:	ee79 7a67 	vsub.f32	s15, s18, s15
 8012db8:	ee35 5a43 	vsub.f32	s10, s10, s6
 8012dbc:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012dc0:	eec5 da07 	vdiv.f32	s27, s10, s14
 8012dc4:	ee7d da83 	vadd.f32	s27, s27, s6
 8012dc8:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8012dcc:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd4:	f2c1 8553 	blt.w	801487e <iNemoEngine_API_Update+0x3c6e>
 8012dd8:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8012ddc:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8012de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de4:	f141 8796 	bpl.w	8014d14 <iNemoEngine_API_Update+0x4104>
 8012de8:	ed97 3a3b 	vldr	s6, [r7, #236]	@ 0xec
 8012dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012df0:	ed97 5a3d 	vldr	s10, [r7, #244]	@ 0xf4
 8012df4:	ee79 7a67 	vsub.f32	s15, s18, s15
 8012df8:	ee35 5a43 	vsub.f32	s10, s10, s6
 8012dfc:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012e00:	eec5 da07 	vdiv.f32	s27, s10, s14
 8012e04:	ee7d da83 	vadd.f32	s27, s27, s6
 8012e08:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8012e0c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e14:	f2c1 8553 	blt.w	80148be <iNemoEngine_API_Update+0x3cae>
 8012e18:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8012e1c:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8012e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e24:	f142 8065 	bpl.w	8014ef2 <iNemoEngine_API_Update+0x42e2>
 8012e28:	ed97 3a3f 	vldr	s6, [r7, #252]	@ 0xfc
 8012e2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e30:	ed97 5a41 	vldr	s10, [r7, #260]	@ 0x104
 8012e34:	ee79 7a67 	vsub.f32	s15, s18, s15
 8012e38:	ee35 5a43 	vsub.f32	s10, s10, s6
 8012e3c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012e40:	eec5 da07 	vdiv.f32	s27, s10, s14
 8012e44:	ee7d da83 	vadd.f32	s27, s27, s6
 8012e48:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8012e4c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e54:	f2c1 8553 	blt.w	80148fe <iNemoEngine_API_Update+0x3cee>
 8012e58:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8012e5c:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8012e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e64:	f142 800f 	bpl.w	8014e86 <iNemoEngine_API_Update+0x4276>
 8012e68:	ed97 3a43 	vldr	s6, [r7, #268]	@ 0x10c
 8012e6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e70:	ed97 5a45 	vldr	s10, [r7, #276]	@ 0x114
 8012e74:	ee79 7a67 	vsub.f32	s15, s18, s15
 8012e78:	ee35 5a43 	vsub.f32	s10, s10, s6
 8012e7c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012e80:	eec5 da07 	vdiv.f32	s27, s10, s14
 8012e84:	ee7d da83 	vadd.f32	s27, s27, s6
 8012e88:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8012e8c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e94:	f6ff a8e1 	blt.w	801205a <iNemoEngine_API_Update+0x144a>
 8012e98:	ed97 5a47 	vldr	s10, [r7, #284]	@ 0x11c
 8012e9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8012ea0:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 8012ea4:	ee79 7a67 	vsub.f32	s15, s18, s15
 8012ea8:	ee37 7a45 	vsub.f32	s14, s14, s10
 8012eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012eb0:	eec7 daa5 	vdiv.f32	s27, s15, s11
 8012eb4:	ee7d da85 	vadd.f32	s27, s27, s10
 8012eb8:	f7ff b8cf 	b.w	801205a <iNemoEngine_API_Update+0x144a>
 8012ebc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8012ec0:	ee17 0a90 	vmov	r0, s15
 8012ec4:	f7ed fd0a 	bl	80008dc <__aeabi_f2d>
 8012ec8:	ec41 0b10 	vmov	d0, r0, r1
 8012ecc:	f007 ffb0 	bl	801ae30 <floor>
 8012ed0:	ec51 0b10 	vmov	r0, r1, d0
 8012ed4:	f7ed fde2 	bl	8000a9c <__aeabi_d2f>
 8012ed8:	ee08 0a10 	vmov	s16, r0
 8012edc:	f7fe bc71 	b.w	80117c2 <iNemoEngine_API_Update+0xbb2>
 8012ee0:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8012ee4:	ee17 0a90 	vmov	r0, s15
 8012ee8:	f7ed fcf8 	bl	80008dc <__aeabi_f2d>
 8012eec:	ec41 0b10 	vmov	d0, r0, r1
 8012ef0:	f007 ff9e 	bl	801ae30 <floor>
 8012ef4:	ec51 0b10 	vmov	r0, r1, d0
 8012ef8:	f7ed fdd0 	bl	8000a9c <__aeabi_d2f>
 8012efc:	ee0d 0a90 	vmov	s27, r0
 8012f00:	f7fe bc34 	b.w	801176c <iNemoEngine_API_Update+0xb5c>
 8012f04:	ee79 7a27 	vadd.f32	s15, s18, s15
 8012f08:	ee17 0a90 	vmov	r0, s15
 8012f0c:	f7ed fce6 	bl	80008dc <__aeabi_f2d>
 8012f10:	ec41 0b10 	vmov	d0, r0, r1
 8012f14:	f007 ff8c 	bl	801ae30 <floor>
 8012f18:	ec51 0b10 	vmov	r0, r1, d0
 8012f1c:	f7ed fdbe 	bl	8000a9c <__aeabi_d2f>
 8012f20:	ee09 0a10 	vmov	s18, r0
 8012f24:	f7fe bbf7 	b.w	8011716 <iNemoEngine_API_Update+0xb06>
 8012f28:	eef0 8a67 	vmov.f32	s17, s15
 8012f2c:	ed1f aa7f 	vldr	s20, [pc, #-508]	@ 8012d34 <iNemoEngine_API_Update+0x2124>
 8012f30:	4ade      	ldr	r2, [pc, #888]	@ (80132ac <iNemoEngine_API_Update+0x269c>)
 8012f32:	f7fe b84f 	b.w	8010fd4 <iNemoEngine_API_Update+0x3c4>
 8012f36:	2301      	movs	r3, #1
 8012f38:	9312      	str	r3, [sp, #72]	@ 0x48
 8012f3a:	e417      	b.n	801276c <iNemoEngine_API_Update+0x1b5c>
 8012f3c:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 80132b0 <iNemoEngine_API_Update+0x26a0>
 8012f40:	f7fe b86a 	b.w	8011018 <iNemoEngine_API_Update+0x408>
 8012f44:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 8012f48:	2a01      	cmp	r2, #1
 8012f4a:	f040 8686 	bne.w	8013c5a <iNemoEngine_API_Update+0x304a>
 8012f4e:	930e      	str	r3, [sp, #56]	@ 0x38
 8012f50:	2300      	movs	r3, #0
 8012f52:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 8012f56:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8012f5a:	e4aa      	b.n	80128b2 <iNemoEngine_API_Update+0x1ca2>
 8012f5c:	3305      	adds	r3, #5
 8012f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012f60:	e472      	b.n	8012848 <iNemoEngine_API_Update+0x1c38>
 8012f62:	ee79 7a27 	vadd.f32	s15, s18, s15
 8012f66:	ee17 0a90 	vmov	r0, s15
 8012f6a:	f7ed fcb7 	bl	80008dc <__aeabi_f2d>
 8012f6e:	ec41 0b10 	vmov	d0, r0, r1
 8012f72:	f007 ff5d 	bl	801ae30 <floor>
 8012f76:	ec51 0b10 	vmov	r0, r1, d0
 8012f7a:	f7ed fd8f 	bl	8000a9c <__aeabi_d2f>
 8012f7e:	ee09 0a10 	vmov	s18, r0
 8012f82:	f7fe bb5f 	b.w	8011644 <iNemoEngine_API_Update+0xa34>
 8012f86:	ee78 7a27 	vadd.f32	s15, s16, s15
 8012f8a:	ee17 0a90 	vmov	r0, s15
 8012f8e:	f7ed fca5 	bl	80008dc <__aeabi_f2d>
 8012f92:	ec41 0b10 	vmov	d0, r0, r1
 8012f96:	f007 ff4b 	bl	801ae30 <floor>
 8012f9a:	ec51 0b10 	vmov	r0, r1, d0
 8012f9e:	f7ed fd7d 	bl	8000a9c <__aeabi_d2f>
 8012fa2:	ee08 0a10 	vmov	s16, r0
 8012fa6:	f7fe ba63 	b.w	8011470 <iNemoEngine_API_Update+0x860>
 8012faa:	ee78 7a27 	vadd.f32	s15, s16, s15
 8012fae:	ee17 0a90 	vmov	r0, s15
 8012fb2:	f7ed fc93 	bl	80008dc <__aeabi_f2d>
 8012fb6:	ec41 0b10 	vmov	d0, r0, r1
 8012fba:	f007 ff39 	bl	801ae30 <floor>
 8012fbe:	ec51 0b10 	vmov	r0, r1, d0
 8012fc2:	f7ed fd6b 	bl	8000a9c <__aeabi_d2f>
 8012fc6:	ee08 0a10 	vmov	s16, r0
 8012fca:	f7fe bae5 	b.w	8011598 <iNemoEngine_API_Update+0x988>
 8012fce:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8012fd2:	ee17 0a90 	vmov	r0, s15
 8012fd6:	f7ed fc81 	bl	80008dc <__aeabi_f2d>
 8012fda:	ec41 0b10 	vmov	d0, r0, r1
 8012fde:	f007 ff27 	bl	801ae30 <floor>
 8012fe2:	ec51 0b10 	vmov	r0, r1, d0
 8012fe6:	f7ed fd59 	bl	8000a9c <__aeabi_d2f>
 8012fea:	ee0d 0a90 	vmov	s27, r0
 8012fee:	f7fe ba6a 	b.w	80114c6 <iNemoEngine_API_Update+0x8b6>
 8012ff2:	ee79 7a27 	vadd.f32	s15, s18, s15
 8012ff6:	ee17 0a90 	vmov	r0, s15
 8012ffa:	f7ed fc6f 	bl	80008dc <__aeabi_f2d>
 8012ffe:	ec41 0b10 	vmov	d0, r0, r1
 8013002:	f007 ff15 	bl	801ae30 <floor>
 8013006:	ec51 0b10 	vmov	r0, r1, d0
 801300a:	f7ed fd47 	bl	8000a9c <__aeabi_d2f>
 801300e:	ee09 0a10 	vmov	s18, r0
 8013012:	f7fe b9f6 	b.w	8011402 <iNemoEngine_API_Update+0x7f2>
 8013016:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 801301a:	ee17 0a90 	vmov	r0, s15
 801301e:	f7ed fc5d 	bl	80008dc <__aeabi_f2d>
 8013022:	ec41 0b10 	vmov	d0, r0, r1
 8013026:	f007 ff03 	bl	801ae30 <floor>
 801302a:	ec51 0b10 	vmov	r0, r1, d0
 801302e:	f7ed fd35 	bl	8000a9c <__aeabi_d2f>
 8013032:	ee0d 0a90 	vmov	s27, r0
 8013036:	f7fe bada 	b.w	80115ee <iNemoEngine_API_Update+0x9de>
 801303a:	eef1 8a04 	vmov.f32	s17, #20	@ 0x40a00000  5.0
 801303e:	ed97 aa05 	vldr	s20, [r7, #20]
 8013042:	4a9c      	ldr	r2, [pc, #624]	@ (80132b4 <iNemoEngine_API_Update+0x26a4>)
 8013044:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8013048:	f7fd bfc4 	b.w	8010fd4 <iNemoEngine_API_Update+0x3c4>
 801304c:	eef0 8a67 	vmov.f32	s17, s15
 8013050:	ed97 aa05 	vldr	s20, [r7, #20]
 8013054:	4a98      	ldr	r2, [pc, #608]	@ (80132b8 <iNemoEngine_API_Update+0x26a8>)
 8013056:	f7fd bfbd 	b.w	8010fd4 <iNemoEngine_API_Update+0x3c4>
 801305a:	eef5 7a08 	vmov.f32	s15, #88	@ 0x3ec00000  0.375
 801305e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8013062:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013064:	eeb4 7a67 	vcmp.f32	s14, s15
 8013068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801306c:	dd02      	ble.n	8013074 <iNemoEngine_API_Update+0x2464>
 801306e:	2a00      	cmp	r2, #0
 8013070:	f301 8330 	bgt.w	80146d4 <iNemoEngine_API_Update+0x3ac4>
 8013074:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8013078:	ed9d 7a1f 	vldr	s14, [sp, #124]	@ 0x7c
 801307c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013080:	eef4 eac7 	vcmpe.f32	s29, s14
 8013084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013088:	f57f abde 	bpl.w	8012848 <iNemoEngine_API_Update+0x1c38>
 801308c:	ed9d 7a20 	vldr	s14, [sp, #128]	@ 0x80
 8013090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013094:	ed9d 7a24 	vldr	s14, [sp, #144]	@ 0x90
 8013098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130a0:	f57f abd2 	bpl.w	8012848 <iNemoEngine_API_Update+0x1c38>
 80130a4:	eddd 7a1e 	vldr	s15, [sp, #120]	@ 0x78
 80130a8:	ed9d 7a23 	vldr	s14, [sp, #140]	@ 0x8c
 80130ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80130b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80130b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130b8:	f341 8613 	ble.w	8014ce2 <iNemoEngine_API_Update+0x40d2>
 80130bc:	3303      	adds	r3, #3
 80130be:	e533      	b.n	8012b28 <iNemoEngine_API_Update+0x1f18>
 80130c0:	ed9f 5a7e 	vldr	s10, [pc, #504]	@ 80132bc <iNemoEngine_API_Update+0x26ac>
 80130c4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80130c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130cc:	f57f aa77 	bpl.w	80125be <iNemoEngine_API_Update+0x19ae>
 80130d0:	ed9f 5a7b 	vldr	s10, [pc, #492]	@ 80132c0 <iNemoEngine_API_Update+0x26b0>
 80130d4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80130d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130dc:	f280 80b0 	bge.w	8013240 <iNemoEngine_API_Update+0x2630>
 80130e0:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 80130e4:	eddf 4a77 	vldr	s9, [pc, #476]	@ 80132c4 <iNemoEngine_API_Update+0x26b4>
 80130e8:	eef4 7ae4 	vcmpe.f32	s15, s9
 80130ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f0:	f280 80b8 	bge.w	8013264 <iNemoEngine_API_Update+0x2654>
 80130f4:	eddf 4a74 	vldr	s9, [pc, #464]	@ 80132c8 <iNemoEngine_API_Update+0x26b8>
 80130f8:	eef4 7ae4 	vcmpe.f32	s15, s9
 80130fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013100:	f280 80c2 	bge.w	8013288 <iNemoEngine_API_Update+0x2678>
 8013104:	eddf 4a7f 	vldr	s9, [pc, #508]	@ 8013304 <iNemoEngine_API_Update+0x26f4>
 8013108:	eef4 7ae4 	vcmpe.f32	s15, s9
 801310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013110:	f280 8102 	bge.w	8013318 <iNemoEngine_API_Update+0x2708>
 8013114:	eddf 4a66 	vldr	s9, [pc, #408]	@ 80132b0 <iNemoEngine_API_Update+0x26a0>
 8013118:	eef4 7ae4 	vcmpe.f32	s15, s9
 801311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013120:	f280 810c 	bge.w	801333c <iNemoEngine_API_Update+0x272c>
 8013124:	eef6 4a00 	vmov.f32	s9, #96	@ 0x3f000000  0.5
 8013128:	eef4 7ae4 	vcmpe.f32	s15, s9
 801312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013130:	db09      	blt.n	8013146 <iNemoEngine_API_Update+0x2536>
 8013132:	eef6 4a00 	vmov.f32	s9, #96	@ 0x3f000000  0.5
 8013136:	ed9f 4a65 	vldr	s8, [pc, #404]	@ 80132cc <iNemoEngine_API_Update+0x26bc>
 801313a:	ed9f 5a65 	vldr	s10, [pc, #404]	@ 80132d0 <iNemoEngine_API_Update+0x26c0>
 801313e:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8013142:	eea4 5a84 	vfma.f32	s10, s9, s8
 8013146:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 801314a:	ed9f 3a62 	vldr	s6, [pc, #392]	@ 80132d4 <iNemoEngine_API_Update+0x26c4>
 801314e:	eef0 3a00 	vmov.f32	s7, #0	@ 0x40000000  2.0
 8013152:	eef4 7ac3 	vcmpe.f32	s15, s6
 8013156:	ee35 4a04 	vadd.f32	s8, s10, s8
 801315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801315e:	eec3 4a84 	vdiv.f32	s9, s7, s8
 8013162:	ed9f 4a57 	vldr	s8, [pc, #348]	@ 80132c0 <iNemoEngine_API_Update+0x26b0>
 8013166:	eddf 3a55 	vldr	s7, [pc, #340]	@ 80132bc <iNemoEngine_API_Update+0x26ac>
 801316a:	fec4 4a84 	vmaxnm.f32	s9, s9, s8
 801316e:	ed9f 4a5a 	vldr	s8, [pc, #360]	@ 80132d8 <iNemoEngine_API_Update+0x26c8>
 8013172:	ee64 2aa3 	vmul.f32	s5, s9, s7
 8013176:	ee24 4a84 	vmul.f32	s8, s9, s8
 801317a:	f141 842a 	bpl.w	80149d2 <iNemoEngine_API_Update+0x3dc2>
 801317e:	eef4 7ae3 	vcmpe.f32	s15, s7
 8013182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013186:	f2c1 842a 	blt.w	80149de <iNemoEngine_API_Update+0x3dce>
 801318a:	eddf 3a4d 	vldr	s7, [pc, #308]	@ 80132c0 <iNemoEngine_API_Update+0x26b0>
 801318e:	eef4 7ae3 	vcmpe.f32	s15, s7
 8013192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013196:	f141 83d4 	bpl.w	8014942 <iNemoEngine_API_Update+0x3d32>
 801319a:	eddf 3a48 	vldr	s7, [pc, #288]	@ 80132bc <iNemoEngine_API_Update+0x26ac>
 801319e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80131a2:	ed9f 3a4e 	vldr	s6, [pc, #312]	@ 80132dc <iNemoEngine_API_Update+0x26cc>
 80131a6:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80131aa:	eea3 8a83 	vfma.f32	s16, s7, s6
 80131ae:	eddf 3a45 	vldr	s7, [pc, #276]	@ 80132c4 <iNemoEngine_API_Update+0x26b4>
 80131b2:	eef4 7ae3 	vcmpe.f32	s15, s7
 80131b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ba:	f2c1 83d4 	blt.w	8014966 <iNemoEngine_API_Update+0x3d56>
 80131be:	eddf 3a42 	vldr	s7, [pc, #264]	@ 80132c8 <iNemoEngine_API_Update+0x26b8>
 80131c2:	eef4 7ae3 	vcmpe.f32	s15, s7
 80131c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ca:	f141 83d4 	bpl.w	8014976 <iNemoEngine_API_Update+0x3d66>
 80131ce:	eddf 3a3d 	vldr	s7, [pc, #244]	@ 80132c4 <iNemoEngine_API_Update+0x26b4>
 80131d2:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 80132e0 <iNemoEngine_API_Update+0x26d0>
 80131d6:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80131da:	ed9f 8a42 	vldr	s16, [pc, #264]	@ 80132e4 <iNemoEngine_API_Update+0x26d4>
 80131de:	eea3 8a83 	vfma.f32	s16, s7, s6
 80131e2:	eddf 3a48 	vldr	s7, [pc, #288]	@ 8013304 <iNemoEngine_API_Update+0x26f4>
 80131e6:	eef4 7ae3 	vcmpe.f32	s15, s7
 80131ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ee:	f2c1 83d4 	blt.w	801499a <iNemoEngine_API_Update+0x3d8a>
 80131f2:	eddf 3a2f 	vldr	s7, [pc, #188]	@ 80132b0 <iNemoEngine_API_Update+0x26a0>
 80131f6:	eef4 7ae3 	vcmpe.f32	s15, s7
 80131fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131fe:	f141 83d4 	bpl.w	80149aa <iNemoEngine_API_Update+0x3d9a>
 8013202:	eddf 3a40 	vldr	s7, [pc, #256]	@ 8013304 <iNemoEngine_API_Update+0x26f4>
 8013206:	eeb7 8a0c 	vmov.f32	s16, #124	@ 0x3fe00000  1.750
 801320a:	ed9f 3a37 	vldr	s6, [pc, #220]	@ 80132e8 <iNemoEngine_API_Update+0x26d8>
 801320e:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013212:	eea3 8a83 	vfma.f32	s16, s7, s6
 8013216:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 801321a:	eef4 7ae3 	vcmpe.f32	s15, s7
 801321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013222:	db09      	blt.n	8013238 <iNemoEngine_API_Update+0x2628>
 8013224:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8013228:	ed9f 3a30 	vldr	s6, [pc, #192]	@ 80132ec <iNemoEngine_API_Update+0x26dc>
 801322c:	ed9f 8a30 	vldr	s16, [pc, #192]	@ 80132f0 <iNemoEngine_API_Update+0x26e0>
 8013230:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013234:	eea3 8a83 	vfma.f32	s16, s7, s6
 8013238:	ee68 8a88 	vmul.f32	s17, s17, s16
 801323c:	f7ff ba06 	b.w	801264c <iNemoEngine_API_Update+0x1a3c>
 8013240:	ed9f 5a20 	vldr	s10, [pc, #128]	@ 80132c4 <iNemoEngine_API_Update+0x26b4>
 8013244:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801324c:	d50a      	bpl.n	8013264 <iNemoEngine_API_Update+0x2654>
 801324e:	eddf 4a1c 	vldr	s9, [pc, #112]	@ 80132c0 <iNemoEngine_API_Update+0x26b0>
 8013252:	ed9f 4a28 	vldr	s8, [pc, #160]	@ 80132f4 <iNemoEngine_API_Update+0x26e4>
 8013256:	ee77 4ae4 	vsub.f32	s9, s15, s9
 801325a:	ed9f 5a27 	vldr	s10, [pc, #156]	@ 80132f8 <iNemoEngine_API_Update+0x26e8>
 801325e:	eea4 5a84 	vfma.f32	s10, s9, s8
 8013262:	e747      	b.n	80130f4 <iNemoEngine_API_Update+0x24e4>
 8013264:	ed9f 5a18 	vldr	s10, [pc, #96]	@ 80132c8 <iNemoEngine_API_Update+0x26b8>
 8013268:	eef4 7ac5 	vcmpe.f32	s15, s10
 801326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013270:	d50a      	bpl.n	8013288 <iNemoEngine_API_Update+0x2678>
 8013272:	eddf 4a14 	vldr	s9, [pc, #80]	@ 80132c4 <iNemoEngine_API_Update+0x26b4>
 8013276:	eeb0 5a00 	vmov.f32	s10, #0	@ 0x40000000  2.0
 801327a:	ed9f 4a20 	vldr	s8, [pc, #128]	@ 80132fc <iNemoEngine_API_Update+0x26ec>
 801327e:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8013282:	eea4 5a84 	vfma.f32	s10, s9, s8
 8013286:	e73d      	b.n	8013104 <iNemoEngine_API_Update+0x24f4>
 8013288:	ed9f 5a1e 	vldr	s10, [pc, #120]	@ 8013304 <iNemoEngine_API_Update+0x26f4>
 801328c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013294:	d540      	bpl.n	8013318 <iNemoEngine_API_Update+0x2708>
 8013296:	eddf 4a0c 	vldr	s9, [pc, #48]	@ 80132c8 <iNemoEngine_API_Update+0x26b8>
 801329a:	eeb1 5a04 	vmov.f32	s10, #20	@ 0x40a00000  5.0
 801329e:	ed9f 4a18 	vldr	s8, [pc, #96]	@ 8013300 <iNemoEngine_API_Update+0x26f0>
 80132a2:	ee77 4ae4 	vsub.f32	s9, s15, s9
 80132a6:	eea4 5a84 	vfma.f32	s10, s9, s8
 80132aa:	e733      	b.n	8013114 <iNemoEngine_API_Update+0x2504>
 80132ac:	3a83126f 	.word	0x3a83126f
 80132b0:	3e4ccccd 	.word	0x3e4ccccd
 80132b4:	3727c5ac 	.word	0x3727c5ac
 80132b8:	3ac49ba6 	.word	0x3ac49ba6
 80132bc:	3c23d70a 	.word	0x3c23d70a
 80132c0:	3c75c28f 	.word	0x3c75c28f
 80132c4:	3cf5c28f 	.word	0x3cf5c28f
 80132c8:	3d4ccccd 	.word	0x3d4ccccd
 80132cc:	47179000 	.word	0x47179000
 80132d0:	4415c000 	.word	0x4415c000
 80132d4:	3ba3d70a 	.word	0x3ba3d70a
 80132d8:	3b449ba6 	.word	0x3b449ba6
 80132dc:	411ffff6 	.word	0x411ffff6
 80132e0:	418c0000 	.word	0x418c0000
 80132e4:	3f933333 	.word	0x3f933333
 80132e8:	42af0000 	.word	0x42af0000
 80132ec:	43480000 	.word	0x43480000
 80132f0:	424a0000 	.word	0x424a0000
 80132f4:	41d55556 	.word	0x41d55556
 80132f8:	3fcccccd 	.word	0x3fcccccd
 80132fc:	4315ffff 	.word	0x4315ffff
 8013300:	43200000 	.word	0x43200000
 8013304:	3dcccccd 	.word	0x3dcccccd
 8013308:	44848000 	.word	0x44848000
 801330c:	3e4ccccd 	.word	0x3e4ccccd
 8013310:	44c80000 	.word	0x44c80000
 8013314:	42ee0000 	.word	0x42ee0000
 8013318:	ed1f 5a04 	vldr	s10, [pc, #-16]	@ 801330c <iNemoEngine_API_Update+0x26fc>
 801331c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013324:	d50a      	bpl.n	801333c <iNemoEngine_API_Update+0x272c>
 8013326:	ed5f 4a09 	vldr	s9, [pc, #-36]	@ 8013304 <iNemoEngine_API_Update+0x26f4>
 801332a:	eeb2 5a0a 	vmov.f32	s10, #42	@ 0x41500000  13.0
 801332e:	ed1f 4a0a 	vldr	s8, [pc, #-40]	@ 8013308 <iNemoEngine_API_Update+0x26f8>
 8013332:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8013336:	eea4 5a84 	vfma.f32	s10, s9, s8
 801333a:	e6f3      	b.n	8013124 <iNemoEngine_API_Update+0x2514>
 801333c:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8013340:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013348:	f57f aef3 	bpl.w	8013132 <iNemoEngine_API_Update+0x2522>
 801334c:	ed5f 4a11 	vldr	s9, [pc, #-68]	@ 801330c <iNemoEngine_API_Update+0x26fc>
 8013350:	ed1f 4a11 	vldr	s8, [pc, #-68]	@ 8013310 <iNemoEngine_API_Update+0x2700>
 8013354:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8013358:	ed1f 5a12 	vldr	s10, [pc, #-72]	@ 8013314 <iNemoEngine_API_Update+0x2704>
 801335c:	eea4 5a84 	vfma.f32	s10, s9, s8
 8013360:	e6f1      	b.n	8013146 <iNemoEngine_API_Update+0x2536>
 8013362:	2300      	movs	r3, #0
 8013364:	f207 4ab4 	addw	sl, r7, #1204	@ 0x4b4
 8013368:	f887 3318 	strb.w	r3, [r7, #792]	@ 0x318
 801336c:	4b9a      	ldr	r3, [pc, #616]	@ (80135d8 <iNemoEngine_API_Update+0x29c8>)
 801336e:	f8ca 3000 	str.w	r3, [sl]
 8013372:	f207 6324 	addw	r3, r7, #1572	@ 0x624
 8013376:	461a      	mov	r2, r3
 8013378:	9304      	str	r3, [sp, #16]
 801337a:	4b98      	ldr	r3, [pc, #608]	@ (80135dc <iNemoEngine_API_Update+0x29cc>)
 801337c:	6013      	str	r3, [r2, #0]
 801337e:	f207 7394 	addw	r3, r7, #1940	@ 0x794
 8013382:	461a      	mov	r2, r3
 8013384:	9305      	str	r3, [sp, #20]
 8013386:	4b96      	ldr	r3, [pc, #600]	@ (80135e0 <iNemoEngine_API_Update+0x29d0>)
 8013388:	6013      	str	r3, [r2, #0]
 801338a:	f897 64b1 	ldrb.w	r6, [r7, #1201]	@ 0x4b1
 801338e:	2e00      	cmp	r6, #0
 8013390:	f001 8503 	beq.w	8014d9a <iNemoEngine_API_Update+0x418a>
 8013394:	eddf 7a93 	vldr	s15, [pc, #588]	@ 80135e4 <iNemoEngine_API_Update+0x29d4>
 8013398:	eef6 aa00 	vmov.f32	s21, #96	@ 0x3f000000  0.5
 801339c:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 80133a0:	ed9f aa97 	vldr	s20, [pc, #604]	@ 8013600 <iNemoEngine_API_Update+0x29f0>
 80133a4:	ee29 da27 	vmul.f32	s26, s18, s15
 80133a8:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 80133ac:	ee28 ea27 	vmul.f32	s28, s16, s15
 80133b0:	46ab      	mov	fp, r5
 80133b2:	ee6d eaa7 	vmul.f32	s29, s27, s15
 80133b6:	ee7d 7a6a 	vsub.f32	s15, s26, s21
 80133ba:	eef0 cace 	vabs.f32	s25, s28
 80133be:	ee17 0a90 	vmov	r0, s15
 80133c2:	eef0 7acd 	vabs.f32	s15, s26
 80133c6:	edcd 7a02 	vstr	s15, [sp, #8]
 80133ca:	f7ed fa87 	bl	80008dc <__aeabi_f2d>
 80133ce:	ee7d 7a2a 	vadd.f32	s15, s26, s21
 80133d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80133d6:	ee17 0a90 	vmov	r0, s15
 80133da:	f7ed fa7f 	bl	80008dc <__aeabi_f2d>
 80133de:	ee7e 7a6a 	vsub.f32	s15, s28, s21
 80133e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80133e6:	ee17 0a90 	vmov	r0, s15
 80133ea:	f7ed fa77 	bl	80008dc <__aeabi_f2d>
 80133ee:	ee7e 7a2a 	vadd.f32	s15, s28, s21
 80133f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80133f6:	ee17 0a90 	vmov	r0, s15
 80133fa:	f7ed fa6f 	bl	80008dc <__aeabi_f2d>
 80133fe:	ee7e 7aea 	vsub.f32	s15, s29, s21
 8013402:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013406:	ee17 0a90 	vmov	r0, s15
 801340a:	f7ed fa67 	bl	80008dc <__aeabi_f2d>
 801340e:	ee7e 7aaa 	vadd.f32	s15, s29, s21
 8013412:	460a      	mov	r2, r1
 8013414:	4601      	mov	r1, r0
 8013416:	eef0 aaee 	vabs.f32	s21, s29
 801341a:	ee17 0a90 	vmov	r0, s15
 801341e:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
 8013422:	f7ed fa5b 	bl	80008dc <__aeabi_f2d>
 8013426:	220c      	movs	r2, #12
 8013428:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801342c:	fb12 5606 	smlabb	r6, r2, r6, r5
 8013430:	e05e      	b.n	80134f0 <iNemoEngine_API_Update+0x28e0>
 8013432:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 80135e8 <iNemoEngine_API_Update+0x29d8>
 8013436:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801343e:	f280 8259 	bge.w	80138f4 <iNemoEngine_API_Update+0x2ce4>
 8013442:	eddf 7a6a 	vldr	s15, [pc, #424]	@ 80135ec <iNemoEngine_API_Update+0x29dc>
 8013446:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801344e:	f300 8269 	bgt.w	8013924 <iNemoEngine_API_Update+0x2d14>
 8013452:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013456:	f007 fc77 	bl	801ad48 <ceil>
 801345a:	ec51 0b10 	vmov	r0, r1, d0
 801345e:	f7ed fb1d 	bl	8000a9c <__aeabi_d2f>
 8013462:	4603      	mov	r3, r0
 8013464:	eef4 caca 	vcmpe.f32	s25, s20
 8013468:	f8cb 3000 	str.w	r3, [fp]
 801346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013470:	d54e      	bpl.n	8013510 <iNemoEngine_API_Update+0x2900>
 8013472:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80135e8 <iNemoEngine_API_Update+0x29d8>
 8013476:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347e:	f280 822f 	bge.w	80138e0 <iNemoEngine_API_Update+0x2cd0>
 8013482:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 80135ec <iNemoEngine_API_Update+0x29dc>
 8013486:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801348a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801348e:	f300 8247 	bgt.w	8013920 <iNemoEngine_API_Update+0x2d10>
 8013492:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013496:	f007 fc57 	bl	801ad48 <ceil>
 801349a:	ec51 0b10 	vmov	r0, r1, d0
 801349e:	f7ed fafd 	bl	8000a9c <__aeabi_d2f>
 80134a2:	4603      	mov	r3, r0
 80134a4:	eef4 aaca 	vcmpe.f32	s21, s20
 80134a8:	f8cb 3004 	str.w	r3, [fp, #4]
 80134ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134b0:	d537      	bpl.n	8013522 <iNemoEngine_API_Update+0x2912>
 80134b2:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80135e8 <iNemoEngine_API_Update+0x29d8>
 80134b6:	eef4 dae7 	vcmpe.f32	s27, s15
 80134ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134be:	f280 8223 	bge.w	8013908 <iNemoEngine_API_Update+0x2cf8>
 80134c2:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80135ec <iNemoEngine_API_Update+0x29dc>
 80134c6:	eef4 dae7 	vcmpe.f32	s27, s15
 80134ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ce:	f300 8225 	bgt.w	801391c <iNemoEngine_API_Update+0x2d0c>
 80134d2:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 80134d6:	f007 fc37 	bl	801ad48 <ceil>
 80134da:	ec51 0b10 	vmov	r0, r1, d0
 80134de:	f7ed fadd 	bl	8000a9c <__aeabi_d2f>
 80134e2:	4603      	mov	r3, r0
 80134e4:	f8cb 3008 	str.w	r3, [fp, #8]
 80134e8:	f10b 0b0c 	add.w	fp, fp, #12
 80134ec:	455e      	cmp	r6, fp
 80134ee:	d020      	beq.n	8013532 <iNemoEngine_API_Update+0x2922>
 80134f0:	eddd 7a02 	vldr	s15, [sp, #8]
 80134f4:	eef4 7aca 	vcmpe.f32	s15, s20
 80134f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134fc:	d499      	bmi.n	8013432 <iNemoEngine_API_Update+0x2822>
 80134fe:	eef4 caca 	vcmpe.f32	s25, s20
 8013502:	ee1d 3a10 	vmov	r3, s26
 8013506:	f8cb 3000 	str.w	r3, [fp]
 801350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801350e:	d4b0      	bmi.n	8013472 <iNemoEngine_API_Update+0x2862>
 8013510:	eef4 aaca 	vcmpe.f32	s21, s20
 8013514:	ee1e 3a10 	vmov	r3, s28
 8013518:	f8cb 3004 	str.w	r3, [fp, #4]
 801351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013520:	d4c7      	bmi.n	80134b2 <iNemoEngine_API_Update+0x28a2>
 8013522:	ee1e 3a90 	vmov	r3, s29
 8013526:	f10b 0b0c 	add.w	fp, fp, #12
 801352a:	f84b 3c04 	str.w	r3, [fp, #-4]
 801352e:	455e      	cmp	r6, fp
 8013530:	d1de      	bne.n	80134f0 <iNemoEngine_API_Update+0x28e0>
 8013532:	f897 b621 	ldrb.w	fp, [r7, #1569]	@ 0x621
 8013536:	f1bb 0f00 	cmp.w	fp, #0
 801353a:	f001 8445 	beq.w	8014dc8 <iNemoEngine_API_Update+0x41b8>
 801353e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80135f0 <iNemoEngine_API_Update+0x29e0>
 8013542:	eef6 aa00 	vmov.f32	s21, #96	@ 0x3f000000  0.5
 8013546:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 801354a:	ed9f aa2d 	vldr	s20, [pc, #180]	@ 8013600 <iNemoEngine_API_Update+0x29f0>
 801354e:	ee2b daa7 	vmul.f32	s26, s23, s15
 8013552:	ee2c ea27 	vmul.f32	s28, s24, s15
 8013556:	46b1      	mov	r9, r6
 8013558:	ee6b ea27 	vmul.f32	s29, s22, s15
 801355c:	ee7d 7a6a 	vsub.f32	s15, s26, s21
 8013560:	eef0 cace 	vabs.f32	s25, s28
 8013564:	ee17 0a90 	vmov	r0, s15
 8013568:	eef0 7acd 	vabs.f32	s15, s26
 801356c:	edcd 7a02 	vstr	s15, [sp, #8]
 8013570:	f7ed f9b4 	bl	80008dc <__aeabi_f2d>
 8013574:	ee7d 7a2a 	vadd.f32	s15, s26, s21
 8013578:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801357c:	ee17 0a90 	vmov	r0, s15
 8013580:	f7ed f9ac 	bl	80008dc <__aeabi_f2d>
 8013584:	ee7e 7a6a 	vsub.f32	s15, s28, s21
 8013588:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801358c:	ee17 0a90 	vmov	r0, s15
 8013590:	f7ed f9a4 	bl	80008dc <__aeabi_f2d>
 8013594:	ee7e 7a2a 	vadd.f32	s15, s28, s21
 8013598:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801359c:	ee17 0a90 	vmov	r0, s15
 80135a0:	f7ed f99c 	bl	80008dc <__aeabi_f2d>
 80135a4:	ee7e 7aea 	vsub.f32	s15, s29, s21
 80135a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80135ac:	ee17 0a90 	vmov	r0, s15
 80135b0:	f7ed f994 	bl	80008dc <__aeabi_f2d>
 80135b4:	ee7e 7aaa 	vadd.f32	s15, s29, s21
 80135b8:	460a      	mov	r2, r1
 80135ba:	4601      	mov	r1, r0
 80135bc:	eef0 aaee 	vabs.f32	s21, s29
 80135c0:	ee17 0a90 	vmov	r0, s15
 80135c4:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
 80135c8:	f7ed f988 	bl	80008dc <__aeabi_f2d>
 80135cc:	220c      	movs	r2, #12
 80135ce:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80135d2:	fb12 6b0b 	smlabb	fp, r2, fp, r6
 80135d6:	e078      	b.n	80136ca <iNemoEngine_API_Update+0x2aba>
 80135d8:	3a7001e0 	.word	0x3a7001e0
 80135dc:	3a000100 	.word	0x3a000100
 80135e0:	3a8c0118 	.word	0x3a8c0118
 80135e4:	44888777 	.word	0x44888777
 80135e8:	39f001e1 	.word	0x39f001e1
 80135ec:	b9f001e1 	.word	0xb9f001e1
 80135f0:	44fffe00 	.word	0x44fffe00
 80135f4:	39800100 	.word	0x39800100
 80135f8:	b9800100 	.word	0xb9800100
 80135fc:	446a0ccd 	.word	0x446a0ccd
 8013600:	4b000000 	.word	0x4b000000
 8013604:	3cfaad3b 	.word	0x3cfaad3b
 8013608:	bcfaad3b 	.word	0xbcfaad3b
 801360c:	ed5f 7a07 	vldr	s15, [pc, #-28]	@ 80135f4 <iNemoEngine_API_Update+0x29e4>
 8013610:	eef4 bae7 	vcmpe.f32	s23, s15
 8013614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013618:	f280 828f 	bge.w	8013b3a <iNemoEngine_API_Update+0x2f2a>
 801361c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80135f8 <iNemoEngine_API_Update+0x29e8>
 8013620:	eef4 bae7 	vcmpe.f32	s23, s15
 8013624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013628:	f300 82a1 	bgt.w	8013b6e <iNemoEngine_API_Update+0x2f5e>
 801362c:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013630:	f007 fb8a 	bl	801ad48 <ceil>
 8013634:	ec51 0b10 	vmov	r0, r1, d0
 8013638:	f7ed fa30 	bl	8000a9c <__aeabi_d2f>
 801363c:	4603      	mov	r3, r0
 801363e:	eef4 caca 	vcmpe.f32	s25, s20
 8013642:	f8c9 3000 	str.w	r3, [r9]
 8013646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801364a:	d54e      	bpl.n	80136ea <iNemoEngine_API_Update+0x2ada>
 801364c:	ed5f 7a17 	vldr	s15, [pc, #-92]	@ 80135f4 <iNemoEngine_API_Update+0x29e4>
 8013650:	eeb4 cae7 	vcmpe.f32	s24, s15
 8013654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013658:	f280 8265 	bge.w	8013b26 <iNemoEngine_API_Update+0x2f16>
 801365c:	ed5f 7a1a 	vldr	s15, [pc, #-104]	@ 80135f8 <iNemoEngine_API_Update+0x29e8>
 8013660:	eeb4 cae7 	vcmpe.f32	s24, s15
 8013664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013668:	f300 827e 	bgt.w	8013b68 <iNemoEngine_API_Update+0x2f58>
 801366c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013670:	f007 fb6a 	bl	801ad48 <ceil>
 8013674:	ec51 0b10 	vmov	r0, r1, d0
 8013678:	f7ed fa10 	bl	8000a9c <__aeabi_d2f>
 801367c:	4603      	mov	r3, r0
 801367e:	eef4 aaca 	vcmpe.f32	s21, s20
 8013682:	f8c9 3004 	str.w	r3, [r9, #4]
 8013686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801368a:	d537      	bpl.n	80136fc <iNemoEngine_API_Update+0x2aec>
 801368c:	ed5f 7a27 	vldr	s15, [pc, #-156]	@ 80135f4 <iNemoEngine_API_Update+0x29e4>
 8013690:	eeb4 bae7 	vcmpe.f32	s22, s15
 8013694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013698:	f280 8259 	bge.w	8013b4e <iNemoEngine_API_Update+0x2f3e>
 801369c:	ed5f 7a2a 	vldr	s15, [pc, #-168]	@ 80135f8 <iNemoEngine_API_Update+0x29e8>
 80136a0:	eeb4 bae7 	vcmpe.f32	s22, s15
 80136a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136a8:	f300 825b 	bgt.w	8013b62 <iNemoEngine_API_Update+0x2f52>
 80136ac:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 80136b0:	f007 fb4a 	bl	801ad48 <ceil>
 80136b4:	ec51 0b10 	vmov	r0, r1, d0
 80136b8:	f7ed f9f0 	bl	8000a9c <__aeabi_d2f>
 80136bc:	4603      	mov	r3, r0
 80136be:	f8c9 3008 	str.w	r3, [r9, #8]
 80136c2:	f109 090c 	add.w	r9, r9, #12
 80136c6:	45d9      	cmp	r9, fp
 80136c8:	d020      	beq.n	801370c <iNemoEngine_API_Update+0x2afc>
 80136ca:	eddd 7a02 	vldr	s15, [sp, #8]
 80136ce:	eef4 7aca 	vcmpe.f32	s15, s20
 80136d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d6:	d499      	bmi.n	801360c <iNemoEngine_API_Update+0x29fc>
 80136d8:	eef4 caca 	vcmpe.f32	s25, s20
 80136dc:	ee1d 3a10 	vmov	r3, s26
 80136e0:	f8c9 3000 	str.w	r3, [r9]
 80136e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136e8:	d4b0      	bmi.n	801364c <iNemoEngine_API_Update+0x2a3c>
 80136ea:	eef4 aaca 	vcmpe.f32	s21, s20
 80136ee:	ee1e 3a10 	vmov	r3, s28
 80136f2:	f8c9 3004 	str.w	r3, [r9, #4]
 80136f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136fa:	d4c7      	bmi.n	801368c <iNemoEngine_API_Update+0x2a7c>
 80136fc:	ee1e 3a90 	vmov	r3, s29
 8013700:	f109 090c 	add.w	r9, r9, #12
 8013704:	f849 3c04 	str.w	r3, [r9, #-4]
 8013708:	45d9      	cmp	r9, fp
 801370a:	d1de      	bne.n	80136ca <iNemoEngine_API_Update+0x2aba>
 801370c:	f897 b791 	ldrb.w	fp, [r7, #1937]	@ 0x791
 8013710:	f1bb 0f00 	cmp.w	fp, #0
 8013714:	f001 8353 	beq.w	8014dbe <iNemoEngine_API_Update+0x41ae>
 8013718:	ed5f 7a48 	vldr	s15, [pc, #-288]	@ 80135fc <iNemoEngine_API_Update+0x29ec>
 801371c:	eef6 aa00 	vmov.f32	s21, #96	@ 0x3f000000  0.5
 8013720:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
 8013724:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8013728:	ee2f daa7 	vmul.f32	s26, s31, s15
 801372c:	ed1f aa4c 	vldr	s20, [pc, #-304]	@ 8013600 <iNemoEngine_API_Update+0x29f0>
 8013730:	ee67 ea27 	vmul.f32	s29, s14, s15
 8013734:	4699      	mov	r9, r3
 8013736:	ee2f ea27 	vmul.f32	s28, s30, s15
 801373a:	930c      	str	r3, [sp, #48]	@ 0x30
 801373c:	ee7d 7a6a 	vsub.f32	s15, s26, s21
 8013740:	eef0 cace 	vabs.f32	s25, s28
 8013744:	ee17 0a90 	vmov	r0, s15
 8013748:	eef0 7acd 	vabs.f32	s15, s26
 801374c:	edcd 7a02 	vstr	s15, [sp, #8]
 8013750:	f7ed f8c4 	bl	80008dc <__aeabi_f2d>
 8013754:	ee7d 7a2a 	vadd.f32	s15, s26, s21
 8013758:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801375c:	ee17 0a90 	vmov	r0, s15
 8013760:	f7ed f8bc 	bl	80008dc <__aeabi_f2d>
 8013764:	ee7e 7a6a 	vsub.f32	s15, s28, s21
 8013768:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801376c:	ee17 0a90 	vmov	r0, s15
 8013770:	f7ed f8b4 	bl	80008dc <__aeabi_f2d>
 8013774:	ee7e 7a2a 	vadd.f32	s15, s28, s21
 8013778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801377c:	ee17 0a90 	vmov	r0, s15
 8013780:	f7ed f8ac 	bl	80008dc <__aeabi_f2d>
 8013784:	ee7e 7aea 	vsub.f32	s15, s29, s21
 8013788:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801378c:	ee17 0a90 	vmov	r0, s15
 8013790:	f7ed f8a4 	bl	80008dc <__aeabi_f2d>
 8013794:	ee7e 7aaa 	vadd.f32	s15, s29, s21
 8013798:	460a      	mov	r2, r1
 801379a:	4601      	mov	r1, r0
 801379c:	eef0 aaee 	vabs.f32	s21, s29
 80137a0:	ee17 0a90 	vmov	r0, s15
 80137a4:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
 80137a8:	f7ed f898 	bl	80008dc <__aeabi_f2d>
 80137ac:	eef0 7a6b 	vmov.f32	s15, s23
 80137b0:	220c      	movs	r2, #12
 80137b2:	eef0 ba4c 	vmov.f32	s23, s24
 80137b6:	fb12 9b0b 	smlabb	fp, r2, fp, r9
 80137ba:	eeb0 ca67 	vmov.f32	s24, s15
 80137be:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 80137c2:	e064      	b.n	801388e <iNemoEngine_API_Update+0x2c7e>
 80137c4:	eddd 7a19 	vldr	s15, [sp, #100]	@ 0x64
 80137c8:	ed1f 7a72 	vldr	s14, [pc, #-456]	@ 8013604 <iNemoEngine_API_Update+0x29f4>
 80137cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80137d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d4:	f280 81d8 	bge.w	8013b88 <iNemoEngine_API_Update+0x2f78>
 80137d8:	ed1f 7a75 	vldr	s14, [pc, #-468]	@ 8013608 <iNemoEngine_API_Update+0x29f8>
 80137dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80137e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137e4:	f300 81ea 	bgt.w	8013bbc <iNemoEngine_API_Update+0x2fac>
 80137e8:	ed9d 0b08 	vldr	d0, [sp, #32]
 80137ec:	f007 faac 	bl	801ad48 <ceil>
 80137f0:	ec51 0b10 	vmov	r0, r1, d0
 80137f4:	f7ed f952 	bl	8000a9c <__aeabi_d2f>
 80137f8:	4603      	mov	r3, r0
 80137fa:	eef4 caca 	vcmpe.f32	s25, s20
 80137fe:	f8c9 3000 	str.w	r3, [r9]
 8013802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013806:	d552      	bpl.n	80138ae <iNemoEngine_API_Update+0x2c9e>
 8013808:	eddd 7a1a 	vldr	s15, [sp, #104]	@ 0x68
 801380c:	ed1f 7a83 	vldr	s14, [pc, #-524]	@ 8013604 <iNemoEngine_API_Update+0x29f4>
 8013810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013818:	f280 81ac 	bge.w	8013b74 <iNemoEngine_API_Update+0x2f64>
 801381c:	ed1f 7a86 	vldr	s14, [pc, #-536]	@ 8013608 <iNemoEngine_API_Update+0x29f8>
 8013820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013828:	f300 81c5 	bgt.w	8013bb6 <iNemoEngine_API_Update+0x2fa6>
 801382c:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 8013830:	f007 fa8a 	bl	801ad48 <ceil>
 8013834:	ec51 0b10 	vmov	r0, r1, d0
 8013838:	f7ed f930 	bl	8000a9c <__aeabi_d2f>
 801383c:	4603      	mov	r3, r0
 801383e:	eef4 aaca 	vcmpe.f32	s21, s20
 8013842:	f8c9 3004 	str.w	r3, [r9, #4]
 8013846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801384a:	d539      	bpl.n	80138c0 <iNemoEngine_API_Update+0x2cb0>
 801384c:	eddd 7a07 	vldr	s15, [sp, #28]
 8013850:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8013604 <iNemoEngine_API_Update+0x29f4>
 8013854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801385c:	f280 819e 	bge.w	8013b9c <iNemoEngine_API_Update+0x2f8c>
 8013860:	ed1f 7a97 	vldr	s14, [pc, #-604]	@ 8013608 <iNemoEngine_API_Update+0x29f8>
 8013864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801386c:	f300 81a0 	bgt.w	8013bb0 <iNemoEngine_API_Update+0x2fa0>
 8013870:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8013874:	f007 fa68 	bl	801ad48 <ceil>
 8013878:	ec51 0b10 	vmov	r0, r1, d0
 801387c:	f7ed f90e 	bl	8000a9c <__aeabi_d2f>
 8013880:	4603      	mov	r3, r0
 8013882:	f8c9 3008 	str.w	r3, [r9, #8]
 8013886:	f109 090c 	add.w	r9, r9, #12
 801388a:	45d9      	cmp	r9, fp
 801388c:	d020      	beq.n	80138d0 <iNemoEngine_API_Update+0x2cc0>
 801388e:	eddd 7a02 	vldr	s15, [sp, #8]
 8013892:	eef4 7aca 	vcmpe.f32	s15, s20
 8013896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801389a:	d493      	bmi.n	80137c4 <iNemoEngine_API_Update+0x2bb4>
 801389c:	eef4 caca 	vcmpe.f32	s25, s20
 80138a0:	ee1d 3a10 	vmov	r3, s26
 80138a4:	f8c9 3000 	str.w	r3, [r9]
 80138a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ac:	d4ac      	bmi.n	8013808 <iNemoEngine_API_Update+0x2bf8>
 80138ae:	eef4 aaca 	vcmpe.f32	s21, s20
 80138b2:	ee1e 3a10 	vmov	r3, s28
 80138b6:	f8c9 3004 	str.w	r3, [r9, #4]
 80138ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138be:	d4c5      	bmi.n	801384c <iNemoEngine_API_Update+0x2c3c>
 80138c0:	ee1e 3a90 	vmov	r3, s29
 80138c4:	f109 090c 	add.w	r9, r9, #12
 80138c8:	f849 3c04 	str.w	r3, [r9, #-4]
 80138cc:	45d9      	cmp	r9, fp
 80138ce:	d1de      	bne.n	801388e <iNemoEngine_API_Update+0x2c7e>
 80138d0:	eef0 7a4c 	vmov.f32	s15, s24
 80138d4:	eeb0 ca6b 	vmov.f32	s24, s23
 80138d8:	eef0 ba67 	vmov.f32	s23, s15
 80138dc:	f7fd bc9d 	b.w	801121a <iNemoEngine_API_Update+0x60a>
 80138e0:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 80138e4:	f007 faa4 	bl	801ae30 <floor>
 80138e8:	ec51 0b10 	vmov	r0, r1, d0
 80138ec:	f7ed f8d6 	bl	8000a9c <__aeabi_d2f>
 80138f0:	4603      	mov	r3, r0
 80138f2:	e5d7      	b.n	80134a4 <iNemoEngine_API_Update+0x2894>
 80138f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80138f8:	f007 fa9a 	bl	801ae30 <floor>
 80138fc:	ec51 0b10 	vmov	r0, r1, d0
 8013900:	f7ed f8cc 	bl	8000a9c <__aeabi_d2f>
 8013904:	4603      	mov	r3, r0
 8013906:	e5ad      	b.n	8013464 <iNemoEngine_API_Update+0x2854>
 8013908:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801390c:	f007 fa90 	bl	801ae30 <floor>
 8013910:	ec51 0b10 	vmov	r0, r1, d0
 8013914:	f7ed f8c2 	bl	8000a9c <__aeabi_d2f>
 8013918:	4603      	mov	r3, r0
 801391a:	e5e3      	b.n	80134e4 <iNemoEngine_API_Update+0x28d4>
 801391c:	464b      	mov	r3, r9
 801391e:	e5e1      	b.n	80134e4 <iNemoEngine_API_Update+0x28d4>
 8013920:	464b      	mov	r3, r9
 8013922:	e5bf      	b.n	80134a4 <iNemoEngine_API_Update+0x2894>
 8013924:	464b      	mov	r3, r9
 8013926:	e59d      	b.n	8013464 <iNemoEngine_API_Update+0x2854>
 8013928:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 801392c:	2100      	movs	r1, #0
 801392e:	4ba8      	ldr	r3, [pc, #672]	@ (8013bd0 <iNemoEngine_API_Update+0x2fc0>)
 8013930:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8013934:	f8c7 51cc 	str.w	r5, [r7, #460]	@ 0x1cc
 8013938:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 801393c:	f8c7 51d0 	str.w	r5, [r7, #464]	@ 0x1d0
 8013940:	f04f 567d 	mov.w	r6, #1061158912	@ 0x3f400000
 8013944:	f887 11ac 	strb.w	r1, [r7, #428]	@ 0x1ac
 8013948:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 801394c:	f004 ff39 	bl	80187c2 <memset>
 8013950:	edd7 7a02 	vldr	s15, [r7, #8]
 8013954:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8013bd4 <iNemoEngine_API_Update+0x2fc4>
 8013958:	2200      	movs	r2, #0
 801395a:	f8df c2d8 	ldr.w	ip, [pc, #728]	@ 8013c34 <iNemoEngine_API_Update+0x3024>
 801395e:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8013962:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013966:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8013bd8 <iNemoEngine_API_Update+0x2fc8>
 801396a:	f8c7 c0d4 	str.w	ip, [r7, #212]	@ 0xd4
 801396e:	f8df c2c8 	ldr.w	ip, [pc, #712]	@ 8013c38 <iNemoEngine_API_Update+0x3028>
 8013972:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013976:	edc7 6a34 	vstr	s13, [r7, #208]	@ 0xd0
 801397a:	ee67 2aa3 	vmul.f32	s5, s15, s7
 801397e:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8013bdc <iNemoEngine_API_Update+0x2fcc>
 8013982:	f8c7 c13c 	str.w	ip, [r7, #316]	@ 0x13c
 8013986:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801398a:	f8df c2b0 	ldr.w	ip, [pc, #688]	@ 8013c3c <iNemoEngine_API_Update+0x302c>
 801398e:	ed9f 5a94 	vldr	s10, [pc, #592]	@ 8013be0 <iNemoEngine_API_Update+0x2fd0>
 8013992:	4b94      	ldr	r3, [pc, #592]	@ (8013be4 <iNemoEngine_API_Update+0x2fd4>)
 8013994:	edc7 6a4e 	vstr	s13, [r7, #312]	@ 0x138
 8013998:	ee27 5a85 	vmul.f32	s10, s15, s10
 801399c:	eddf 6a92 	vldr	s13, [pc, #584]	@ 8013be8 <iNemoEngine_API_Update+0x2fd8>
 80139a0:	f8c7 c144 	str.w	ip, [r7, #324]	@ 0x144
 80139a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80139a8:	f8df c294 	ldr.w	ip, [pc, #660]	@ 8013c40 <iNemoEngine_API_Update+0x3030>
 80139ac:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80139b0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 80139b4:	edc7 6a50 	vstr	s13, [r7, #320]	@ 0x140
 80139b8:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8013bec <iNemoEngine_API_Update+0x2fdc>
 80139bc:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80139c0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80139c4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80139c8:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 80139cc:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80139d0:	edc7 6a38 	vstr	s13, [r7, #224]	@ 0xe0
 80139d4:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8013bf0 <iNemoEngine_API_Update+0x2fe0>
 80139d8:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 80139dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80139e0:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80139e4:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 80139e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80139ec:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80139f0:	edc7 6a52 	vstr	s13, [r7, #328]	@ 0x148
 80139f4:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8013bf4 <iNemoEngine_API_Update+0x2fe4>
 80139f8:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 80139fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013a00:	4a7d      	ldr	r2, [pc, #500]	@ (8013bf8 <iNemoEngine_API_Update+0x2fe8>)
 8013a02:	f8c7 c14c 	str.w	ip, [r7, #332]	@ 0x14c
 8013a06:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 8013c44 <iNemoEngine_API_Update+0x3034>
 8013a0a:	f8c7 50c4 	str.w	r5, [r7, #196]	@ 0xc4
 8013a0e:	f8c7 512c 	str.w	r5, [r7, #300]	@ 0x12c
 8013a12:	f8c7 50cc 	str.w	r5, [r7, #204]	@ 0xcc
 8013a16:	f8c7 5134 	str.w	r5, [r7, #308]	@ 0x134
 8013a1a:	f04f 557f 	mov.w	r5, #1069547520	@ 0x3fc00000
 8013a1e:	edc7 6a3a 	vstr	s13, [r7, #232]	@ 0xe8
 8013a22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8013a26:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8013a2a:	ed87 7a32 	vstr	s14, [r7, #200]	@ 0xc8
 8013a2e:	ed87 7a4c 	vstr	s14, [r7, #304]	@ 0x130
 8013a32:	ed87 5a36 	vstr	s10, [r7, #216]	@ 0xd8
 8013a36:	f8c7 c0ec 	str.w	ip, [r7, #236]	@ 0xec
 8013a3a:	ed87 5a54 	vstr	s10, [r7, #336]	@ 0x150
 8013a3e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8013a42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8013a46:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013a4a:	4b6c      	ldr	r3, [pc, #432]	@ (8013bfc <iNemoEngine_API_Update+0x2fec>)
 8013a4c:	ed9f 3a6c 	vldr	s6, [pc, #432]	@ 8013c00 <iNemoEngine_API_Update+0x2ff0>
 8013a50:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8013a54:	4b6b      	ldr	r3, [pc, #428]	@ (8013c04 <iNemoEngine_API_Update+0x2ff4>)
 8013a56:	ee27 2a83 	vmul.f32	s4, s15, s6
 8013a5a:	ed9f 4a6b 	vldr	s8, [pc, #428]	@ 8013c08 <iNemoEngine_API_Update+0x2ff8>
 8013a5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8013a62:	4b6a      	ldr	r3, [pc, #424]	@ (8013c0c <iNemoEngine_API_Update+0x2ffc>)
 8013a64:	ee67 1a84 	vmul.f32	s3, s15, s8
 8013a68:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8013c10 <iNemoEngine_API_Update+0x3000>
 8013a6c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8013a70:	4b68      	ldr	r3, [pc, #416]	@ (8013c14 <iNemoEngine_API_Update+0x3004>)
 8013a72:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8013a76:	ed9f 6a76 	vldr	s12, [pc, #472]	@ 8013c50 <iNemoEngine_API_Update+0x3040>
 8013a7a:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8013c18 <iNemoEngine_API_Update+0x3008>
 8013a7e:	eddf 4a67 	vldr	s9, [pc, #412]	@ 8013c1c <iNemoEngine_API_Update+0x300c>
 8013a82:	ee27 6a86 	vmul.f32	s12, s15, s12
 8013a86:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8013a8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013a8e:	4b64      	ldr	r3, [pc, #400]	@ (8013c20 <iNemoEngine_API_Update+0x3010>)
 8013a90:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8013a94:	4a63      	ldr	r2, [pc, #396]	@ (8013c24 <iNemoEngine_API_Update+0x3014>)
 8013a96:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8013a9a:	4863      	ldr	r0, [pc, #396]	@ (8013c28 <iNemoEngine_API_Update+0x3018>)
 8013a9c:	4b63      	ldr	r3, [pc, #396]	@ (8013c2c <iNemoEngine_API_Update+0x301c>)
 8013a9e:	4964      	ldr	r1, [pc, #400]	@ (8013c30 <iNemoEngine_API_Update+0x3020>)
 8013aa0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8013aa4:	ed87 3a3d 	vstr	s6, [r7, #244]	@ 0xf4
 8013aa8:	f8c7 6104 	str.w	r6, [r7, #260]	@ 0x104
 8013aac:	f8c7 5114 	str.w	r5, [r7, #276]	@ 0x114
 8013ab0:	edc7 1a46 	vstr	s3, [r7, #280]	@ 0x118
 8013ab4:	edc7 4a60 	vstr	s9, [r7, #384]	@ 0x180
 8013ab8:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8013abc:	f8c7 118c 	str.w	r1, [r7, #396]	@ 0x18c
 8013ac0:	edc7 3a66 	vstr	s7, [r7, #408]	@ 0x198
 8013ac4:	ed87 4a65 	vstr	s8, [r7, #404]	@ 0x194
 8013ac8:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8013acc:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8013ad0:	edc7 5a3c 	vstr	s11, [r7, #240]	@ 0xf0
 8013ad4:	edc7 5a56 	vstr	s11, [r7, #344]	@ 0x158
 8013ad8:	ed87 6a3e 	vstr	s12, [r7, #248]	@ 0xf8
 8013adc:	ed87 6a58 	vstr	s12, [r7, #352]	@ 0x160
 8013ae0:	edc7 6a40 	vstr	s13, [r7, #256]	@ 0x100
 8013ae4:	edc7 6a5a 	vstr	s13, [r7, #360]	@ 0x168
 8013ae8:	ed87 2a42 	vstr	s4, [r7, #264]	@ 0x108
 8013aec:	ed87 2a5c 	vstr	s4, [r7, #368]	@ 0x170
 8013af0:	edc7 2a44 	vstr	s5, [r7, #272]	@ 0x110
 8013af4:	edc7 2a5e 	vstr	s5, [r7, #376]	@ 0x178
 8013af8:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
 8013afc:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
 8013b00:	ed87 7a64 	vstr	s14, [r7, #400]	@ 0x190
 8013b04:	787b      	ldrb	r3, [r7, #1]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	f000 8216 	beq.w	8013f38 <iNemoEngine_API_Update+0x3328>
 8013b0c:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 8013b10:	932d      	str	r3, [sp, #180]	@ 0xb4
 8013b12:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8013b16:	932e      	str	r3, [sp, #184]	@ 0xb8
 8013b18:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8013b1c:	932f      	str	r3, [sp, #188]	@ 0xbc
 8013b1e:	2300      	movs	r3, #0
 8013b20:	707b      	strb	r3, [r7, #1]
 8013b22:	f7fd bb66 	b.w	80111f2 <iNemoEngine_API_Update+0x5e2>
 8013b26:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 8013b2a:	f007 f981 	bl	801ae30 <floor>
 8013b2e:	ec51 0b10 	vmov	r0, r1, d0
 8013b32:	f7ec ffb3 	bl	8000a9c <__aeabi_d2f>
 8013b36:	4603      	mov	r3, r0
 8013b38:	e5a1      	b.n	801367e <iNemoEngine_API_Update+0x2a6e>
 8013b3a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8013b3e:	f007 f977 	bl	801ae30 <floor>
 8013b42:	ec51 0b10 	vmov	r0, r1, d0
 8013b46:	f7ec ffa9 	bl	8000a9c <__aeabi_d2f>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	e577      	b.n	801363e <iNemoEngine_API_Update+0x2a2e>
 8013b4e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8013b52:	f007 f96d 	bl	801ae30 <floor>
 8013b56:	ec51 0b10 	vmov	r0, r1, d0
 8013b5a:	f7ec ff9f 	bl	8000a9c <__aeabi_d2f>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	e5ad      	b.n	80136be <iNemoEngine_API_Update+0x2aae>
 8013b62:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013b66:	e5aa      	b.n	80136be <iNemoEngine_API_Update+0x2aae>
 8013b68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013b6c:	e587      	b.n	801367e <iNemoEngine_API_Update+0x2a6e>
 8013b6e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013b72:	e564      	b.n	801363e <iNemoEngine_API_Update+0x2a2e>
 8013b74:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 8013b78:	f007 f95a 	bl	801ae30 <floor>
 8013b7c:	ec51 0b10 	vmov	r0, r1, d0
 8013b80:	f7ec ff8c 	bl	8000a9c <__aeabi_d2f>
 8013b84:	4603      	mov	r3, r0
 8013b86:	e65a      	b.n	801383e <iNemoEngine_API_Update+0x2c2e>
 8013b88:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8013b8c:	f007 f950 	bl	801ae30 <floor>
 8013b90:	ec51 0b10 	vmov	r0, r1, d0
 8013b94:	f7ec ff82 	bl	8000a9c <__aeabi_d2f>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	e62e      	b.n	80137fa <iNemoEngine_API_Update+0x2bea>
 8013b9c:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 8013ba0:	f007 f946 	bl	801ae30 <floor>
 8013ba4:	ec51 0b10 	vmov	r0, r1, d0
 8013ba8:	f7ec ff78 	bl	8000a9c <__aeabi_d2f>
 8013bac:	4603      	mov	r3, r0
 8013bae:	e668      	b.n	8013882 <iNemoEngine_API_Update+0x2c72>
 8013bb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013bb4:	e665      	b.n	8013882 <iNemoEngine_API_Update+0x2c72>
 8013bb6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013bba:	e640      	b.n	801383e <iNemoEngine_API_Update+0x2c2e>
 8013bbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013bc0:	e61b      	b.n	80137fa <iNemoEngine_API_Update+0x2bea>
 8013bc2:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8013bc6:	ee69 9a87 	vmul.f32	s19, s19, s14
 8013bca:	f7fe bbf0 	b.w	80123ae <iNemoEngine_API_Update+0x179e>
 8013bce:	bf00      	nop
 8013bd0:	bf666666 	.word	0xbf666666
 8013bd4:	3d072b02 	.word	0x3d072b02
 8013bd8:	3ca3d70a 	.word	0x3ca3d70a
 8013bdc:	3cb43958 	.word	0x3cb43958
 8013be0:	3d4ccccd 	.word	0x3d4ccccd
 8013be4:	40a00000 	.word	0x40a00000
 8013be8:	3cf5c28f 	.word	0x3cf5c28f
 8013bec:	3d75c28f 	.word	0x3d75c28f
 8013bf0:	3d23d70a 	.word	0x3d23d70a
 8013bf4:	3d8f5c29 	.word	0x3d8f5c29
 8013bf8:	3eb33333 	.word	0x3eb33333
 8013bfc:	3fa66666 	.word	0x3fa66666
 8013c00:	3ecccccd 	.word	0x3ecccccd
 8013c04:	3f19999a 	.word	0x3f19999a
 8013c08:	3f4ccccd 	.word	0x3f4ccccd
 8013c0c:	3fb9999a 	.word	0x3fb9999a
 8013c10:	3dcccccd 	.word	0x3dcccccd
 8013c14:	3fcccccd 	.word	0x3fcccccd
 8013c18:	3e99999a 	.word	0x3e99999a
 8013c1c:	3f666666 	.word	0x3f666666
 8013c20:	3fe66666 	.word	0x3fe66666
 8013c24:	3f99999a 	.word	0x3f99999a
 8013c28:	40200000 	.word	0x40200000
 8013c2c:	3f333333 	.word	0x3f333333
 8013c30:	40400000 	.word	0x40400000
 8013c34:	3ee66666 	.word	0x3ee66666
 8013c38:	3f866666 	.word	0x3f866666
 8013c3c:	3f8ccccd 	.word	0x3f8ccccd
 8013c40:	3f933333 	.word	0x3f933333
 8013c44:	3ebd70a4 	.word	0x3ebd70a4
 8013c48:	3d088889 	.word	0x3d088889
 8013c4c:	80000000 	.word	0x80000000
 8013c50:	3e4ccccd 	.word	0x3e4ccccd
 8013c54:	3f99999a 	.word	0x3f99999a
 8013c58:	2301      	movs	r3, #1
 8013c5a:	9302      	str	r3, [sp, #8]
 8013c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c5e:	2b02      	cmp	r3, #2
 8013c60:	f041 803c 	bne.w	8014cdc <iNemoEngine_API_Update+0x40cc>
 8013c64:	eddd 7a23 	vldr	s15, [sp, #140]	@ 0x8c
 8013c68:	eef4 4a00 	vmov.f32	s9, #64	@ 0x3e000000  0.125
 8013c6c:	ed9d 7a1e 	vldr	s14, [sp, #120]	@ 0x78
 8013c70:	f240 1301 	movw	r3, #257	@ 0x101
 8013c74:	eddd 5a20 	vldr	s11, [sp, #128]	@ 0x80
 8013c78:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8013c7c:	eddd 7a1f 	vldr	s15, [sp, #124]	@ 0x7c
 8013c80:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8013c84:	2301      	movs	r3, #1
 8013c86:	f897 21a4 	ldrb.w	r2, [r7, #420]	@ 0x1a4
 8013c8a:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8013c8e:	ee8e 5aa7 	vdiv.f32	s10, s29, s15
 8013c92:	eddd 7a24 	vldr	s15, [sp, #144]	@ 0x90
 8013c96:	eec7 7aa5 	vdiv.f32	s15, s15, s11
 8013c9a:	edd7 5a64 	vldr	s11, [r7, #400]	@ 0x190
 8013c9e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8013ca2:	ed8d 7a47 	vstr	s14, [sp, #284]	@ 0x11c
 8013ca6:	eef4 5ac9 	vcmpe.f32	s11, s18
 8013caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cae:	ed8d 5a48 	vstr	s10, [sp, #288]	@ 0x120
 8013cb2:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 8013cb6:	f280 833d 	bge.w	8014334 <iNemoEngine_API_Update+0x3724>
 8013cba:	2900      	cmp	r1, #0
 8013cbc:	f000 8770 	beq.w	8014ba0 <iNemoEngine_API_Update+0x3f90>
 8013cc0:	eef5 5a00 	vmov.f32	s11, #80	@ 0x3e800000  0.250
 8013cc4:	eef4 6a65 	vcmp.f32	s13, s11
 8013cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ccc:	f140 8768 	bpl.w	8014ba0 <iNemoEngine_API_Update+0x3f90>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	f000 8765 	beq.w	8014ba0 <iNemoEngine_API_Update+0x3f90>
 8013cd6:	ee37 7a05 	vadd.f32	s14, s14, s10
 8013cda:	eef7 5a08 	vmov.f32	s11, #120	@ 0x3fc00000  1.5
 8013cde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ce2:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cea:	f140 8759 	bpl.w	8014ba0 <iNemoEngine_API_Update+0x3f90>
 8013cee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 8013cf8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013cfc:	2a00      	cmp	r2, #0
 8013cfe:	f040 833b 	bne.w	8014378 <iNemoEngine_API_Update+0x3768>
 8013d02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013d04:	4632      	mov	r2, r6
 8013d06:	ac4a      	add	r4, sp, #296	@ 0x128
 8013d08:	f04f 30ff 	mov.w	r0, #4294967295
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	edd1 7a00 	vldr	s15, [r1]
 8013d12:	3001      	adds	r0, #1
 8013d14:	3104      	adds	r1, #4
 8013d16:	330c      	adds	r3, #12
 8013d18:	461d      	mov	r5, r3
 8013d1a:	330c      	adds	r3, #12
 8013d1c:	ed95 7a00 	vldr	s14, [r5]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d26:	d1f7      	bne.n	8013d18 <iNemoEngine_API_Update+0x3108>
 8013d28:	2802      	cmp	r0, #2
 8013d2a:	f102 0204 	add.w	r2, r2, #4
 8013d2e:	ece4 7a01 	vstmia	r4!, {s15}
 8013d32:	d1eb      	bne.n	8013d0c <iNemoEngine_API_Update+0x30fc>
 8013d34:	ed5f 7a3c 	vldr	s15, [pc, #-240]	@ 8013c48 <iNemoEngine_API_Update+0x3038>
 8013d38:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8013d3c:	ed9d 5a4a 	vldr	s10, [sp, #296]	@ 0x128
 8013d40:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 8013d44:	eddd 5a4b 	vldr	s11, [sp, #300]	@ 0x12c
 8013d48:	4602      	mov	r2, r0
 8013d4a:	ed9d 6a4c 	vldr	s12, [sp, #304]	@ 0x130
 8013d4e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013d52:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013d56:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
 8013d58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013d5c:	edd2 7a7c 	vldr	s15, [r2, #496]	@ 0x1f0
 8013d60:	f5a2 73ae 	sub.w	r3, r2, #348	@ 0x15c
 8013d64:	ed93 7ad6 	vldr	s14, [r3, #856]	@ 0x358
 8013d68:	330c      	adds	r3, #12
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8013d70:	d1f8      	bne.n	8013d64 <iNemoEngine_API_Update+0x3154>
 8013d72:	1d1a      	adds	r2, r3, #4
 8013d74:	ece4 7a01 	vstmia	r4!, {s15}
 8013d78:	428a      	cmp	r2, r1
 8013d7a:	d1ef      	bne.n	8013d5c <iNemoEngine_API_Update+0x314c>
 8013d7c:	eddd 4a47 	vldr	s9, [sp, #284]	@ 0x11c
 8013d80:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 8013d84:	ed9d 7a49 	vldr	s14, [sp, #292]	@ 0x124
 8013d88:	eedd 4a05 	vfnms.f32	s9, s26, s10
 8013d8c:	eedd 7a25 	vfnms.f32	s15, s26, s11
 8013d90:	787b      	ldrb	r3, [r7, #1]
 8013d92:	ee9d 7a06 	vfnms.f32	s14, s26, s12
 8013d96:	edcd 4a4a 	vstr	s9, [sp, #296]	@ 0x128
 8013d9a:	eeb0 5a67 	vmov.f32	s10, s15
 8013d9e:	edcd 7a4b 	vstr	s15, [sp, #300]	@ 0x12c
 8013da2:	ed8d 7a4c 	vstr	s14, [sp, #304]	@ 0x130
 8013da6:	b13b      	cbz	r3, 8013db8 <iNemoEngine_API_Update+0x31a8>
 8013da8:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8013dac:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db4:	f101 800c 	bmi.w	8014dd0 <iNemoEngine_API_Update+0x41c0>
 8013db8:	f897 21a1 	ldrb.w	r2, [r7, #417]	@ 0x1a1
 8013dbc:	2a1e      	cmp	r2, #30
 8013dbe:	f001 80a6 	beq.w	8014f0e <iNemoEngine_API_Update+0x42fe>
 8013dc2:	1c53      	adds	r3, r2, #1
 8013dc4:	2aff      	cmp	r2, #255	@ 0xff
 8013dc6:	bf14      	ite	ne
 8013dc8:	b2db      	uxtbne	r3, r3
 8013dca:	23ff      	moveq	r3, #255	@ 0xff
 8013dcc:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
 8013dd0:	9b02      	ldr	r3, [sp, #8]
 8013dd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8013dda:	f7fe bd73 	b.w	80128c4 <iNemoEngine_API_Update+0x1cb4>
 8013dde:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8013de2:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8013de6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013dea:	eeb0 7ae7 	vabs.f32	s14, s15
 8013dee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013df2:	fe87 7a23 	vmaxnm.f32	s14, s14, s7
 8013df6:	ed8d 7a9b 	vstr	s14, [sp, #620]	@ 0x26c
 8013dfa:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e02:	f77e acf5 	ble.w	80127f0 <iNemoEngine_API_Update+0x1be0>
 8013e06:	ed9d 7a94 	vldr	s14, [sp, #592]	@ 0x250
 8013e0a:	ee27 5a07 	vmul.f32	s10, s14, s14
 8013e0e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e16:	f77e aceb 	ble.w	80127f0 <iNemoEngine_API_Update+0x1be0>
 8013e1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013e1e:	ed8d 7a94 	vstr	s14, [sp, #592]	@ 0x250
 8013e22:	ed9d 7a95 	vldr	s14, [sp, #596]	@ 0x254
 8013e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e2a:	ed8d 7a95 	vstr	s14, [sp, #596]	@ 0x254
 8013e2e:	ed9d 7a96 	vldr	s14, [sp, #600]	@ 0x258
 8013e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e36:	edcd 7a96 	vstr	s15, [sp, #600]	@ 0x258
 8013e3a:	f7fe bcd9 	b.w	80127f0 <iNemoEngine_API_Update+0x1be0>
 8013e3e:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8013e42:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8013e46:	eef0 7ac8 	vabs.f32	s15, s16
 8013e4a:	ee77 7aae 	vadd.f32	s15, s15, s29
 8013e4e:	f7fe bb99 	b.w	8012584 <iNemoEngine_API_Update+0x1974>
 8013e52:	f207 4ab4 	addw	sl, r7, #1204	@ 0x4b4
 8013e56:	f207 6324 	addw	r3, r7, #1572	@ 0x624
 8013e5a:	f507 6097 	add.w	r0, r7, #1208	@ 0x4b8
 8013e5e:	f607 1168 	addw	r1, r7, #2408	@ 0x968
 8013e62:	ed9a 0a00 	vldr	s0, [sl]
 8013e66:	f507 6217 	add.w	r2, r7, #2416	@ 0x970
 8013e6a:	f7fb f86b 	bl	800ef44 <dataDerivative5>
 8013e6e:	eeb0 2a40 	vmov.f32	s4, s0
 8013e72:	ed93 0a00 	vldr	s0, [r3]
 8013e76:	f207 7394 	addw	r3, r7, #1940	@ 0x794
 8013e7a:	f507 60c5 	add.w	r0, r7, #1576	@ 0x628
 8013e7e:	f7fb f861 	bl	800ef44 <dataDerivative5>
 8013e82:	f507 60f3 	add.w	r0, r7, #1944	@ 0x798
 8013e86:	eef0 1a40 	vmov.f32	s3, s0
 8013e8a:	ed93 0a00 	vldr	s0, [r3]
 8013e8e:	f7fb f859 	bl	800ef44 <dataDerivative5>
 8013e92:	f9b7 3976 	ldrsh.w	r3, [r7, #2422]	@ 0x976
 8013e96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013e9a:	f607 106c 	addw	r0, r7, #2412	@ 0x96c
 8013e9e:	ee07 3a90 	vmov	s15, r3
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	ed91 5a00 	vldr	s10, [r1]
 8013ea8:	eef0 6a40 	vmov.f32	s13, s0
 8013eac:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8013eb0:	ee07 3a90 	vmov	s15, r3
 8013eb4:	b21b      	sxth	r3, r3
 8013eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013eba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8013ebe:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8013ec2:	ed90 7a00 	vldr	s14, [r0]
 8013ec6:	eef0 7a42 	vmov.f32	s15, s4
 8013eca:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013ece:	eeb0 7a61 	vmov.f32	s14, s3
 8013ed2:	eea5 7a85 	vfma.f32	s14, s11, s10
 8013ed6:	ed92 5a00 	vldr	s10, [r2]
 8013eda:	eee5 6a85 	vfma.f32	s13, s11, s10
 8013ede:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013ee2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013ee6:	edc0 7a00 	vstr	s15, [r0]
 8013eea:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013eee:	ed81 7a00 	vstr	s14, [r1]
 8013ef2:	edc2 6a00 	vstr	s13, [r2]
 8013ef6:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 8013efa:	f47c aeb0 	bne.w	8010c5e <iNemoEngine_API_Update+0x4e>
 8013efe:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013f02:	2300      	movs	r3, #0
 8013f04:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013f08:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013f0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013f10:	ed87 7a07 	vstr	s14, [r7, #28]
 8013f14:	edc7 6a08 	vstr	s13, [r7, #32]
 8013f18:	edc7 7a06 	vstr	s15, [r7, #24]
 8013f1c:	6003      	str	r3, [r0, #0]
 8013f1e:	600b      	str	r3, [r1, #0]
 8013f20:	6013      	str	r3, [r2, #0]
 8013f22:	2300      	movs	r3, #0
 8013f24:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 8013f28:	f887 3978 	strb.w	r3, [r7, #2424]	@ 0x978
 8013f2c:	f7fc be97 	b.w	8010c5e <iNemoEngine_API_Update+0x4e>
 8013f30:	edd7 da49 	vldr	s27, [r7, #292]	@ 0x124
 8013f34:	f7fe b891 	b.w	801205a <iNemoEngine_API_Update+0x144a>
 8013f38:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 8013f3c:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 8013f40:	f607 1148 	addw	r1, r7, #2376	@ 0x948
 8013f44:	932d      	str	r3, [sp, #180]	@ 0xb4
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	922e      	str	r2, [sp, #184]	@ 0xb8
 8013f4a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8013f4e:	6813      	ldr	r3, [r2, #0]
 8013f50:	912f      	str	r1, [sp, #188]	@ 0xbc
 8013f52:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8013f56:	680b      	ldr	r3, [r1, #0]
 8013f58:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8013f5c:	e5df      	b.n	8013b1e <iNemoEngine_API_Update+0x2f0e>
 8013f5e:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 8013f62:	ee69 9a87 	vmul.f32	s19, s19, s14
 8013f66:	f7fe ba22 	b.w	80123ae <iNemoEngine_API_Update+0x179e>
 8013f6a:	ed1f 9ac8 	vldr	s18, [pc, #-800]	@ 8013c4c <iNemoEngine_API_Update+0x303c>
 8013f6e:	f7fd bb69 	b.w	8011644 <iNemoEngine_API_Update+0xa34>
 8013f72:	ed1f 9aca 	vldr	s18, [pc, #-808]	@ 8013c4c <iNemoEngine_API_Update+0x303c>
 8013f76:	f7fd ba44 	b.w	8011402 <iNemoEngine_API_Update+0x7f2>
 8013f7a:	ed5f dacc 	vldr	s27, [pc, #-816]	@ 8013c4c <iNemoEngine_API_Update+0x303c>
 8013f7e:	f7fd bb36 	b.w	80115ee <iNemoEngine_API_Update+0x9de>
 8013f82:	ed1f 8ace 	vldr	s16, [pc, #-824]	@ 8013c4c <iNemoEngine_API_Update+0x303c>
 8013f86:	f7fd ba73 	b.w	8011470 <iNemoEngine_API_Update+0x860>
 8013f8a:	ed5f dad0 	vldr	s27, [pc, #-832]	@ 8013c4c <iNemoEngine_API_Update+0x303c>
 8013f8e:	f7fd bbed 	b.w	801176c <iNemoEngine_API_Update+0xb5c>
 8013f92:	ed1f 9ad2 	vldr	s18, [pc, #-840]	@ 8013c4c <iNemoEngine_API_Update+0x303c>
 8013f96:	f7fd bbbe 	b.w	8011716 <iNemoEngine_API_Update+0xb06>
 8013f9a:	ed1f 8ad4 	vldr	s16, [pc, #-848]	@ 8013c4c <iNemoEngine_API_Update+0x303c>
 8013f9e:	f7fd bc10 	b.w	80117c2 <iNemoEngine_API_Update+0xbb2>
 8013fa2:	eeb0 7aef 	vabs.f32	s14, s31
 8013fa6:	ed5f 7ad6 	vldr	s15, [pc, #-856]	@ 8013c50 <iNemoEngine_API_Update+0x3040>
 8013faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb2:	f57e ac6d 	bpl.w	8012890 <iNemoEngine_API_Update+0x1c80>
 8013fb6:	eeb0 7acf 	vabs.f32	s14, s30
 8013fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc2:	f57e ac65 	bpl.w	8012890 <iNemoEngine_API_Update+0x1c80>
 8013fc6:	ed9d 7a0f 	vldr	s14, [sp, #60]	@ 0x3c
 8013fca:	eeb0 7ac7 	vabs.f32	s14, s14
 8013fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd6:	f57e ac5b 	bpl.w	8012890 <iNemoEngine_API_Update+0x1c80>
 8013fda:	eef0 baeb 	vabs.f32	s23, s23
 8013fde:	ed5f 7ae3 	vldr	s15, [pc, #-908]	@ 8013c54 <iNemoEngine_API_Update+0x3044>
 8013fe2:	eef4 bae7 	vcmpe.f32	s23, s15
 8013fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fea:	f57e ac51 	bpl.w	8012890 <iNemoEngine_API_Update+0x1c80>
 8013fee:	eeb0 cacc 	vabs.f32	s24, s24
 8013ff2:	eeb4 cae7 	vcmpe.f32	s24, s15
 8013ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffa:	f57e ac49 	bpl.w	8012890 <iNemoEngine_API_Update+0x1c80>
 8013ffe:	eeb0 bacb 	vabs.f32	s22, s22
 8014002:	eeb4 bae7 	vcmpe.f32	s22, s15
 8014006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801400a:	f57e ac41 	bpl.w	8012890 <iNemoEngine_API_Update+0x1c80>
 801400e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014010:	f507 62f9 	add.w	r2, r7, #1992	@ 0x7c8
 8014014:	edd3 7a00 	vldr	s15, [r3]
 8014018:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 801401c:	ed92 5a00 	vldr	s10, [r2]
 8014020:	edd3 3a00 	vldr	s7, [r3]
 8014024:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014028:	ed93 4a00 	vldr	s8, [r3]
 801402c:	f207 73bc 	addw	r3, r7, #1980	@ 0x7bc
 8014030:	ee77 5aa3 	vadd.f32	s11, s15, s7
 8014034:	fe87 7aa3 	vmaxnm.f32	s14, s15, s7
 8014038:	edd3 4a00 	vldr	s9, [r3]
 801403c:	fec7 7ae3 	vminnm.f32	s15, s15, s7
 8014040:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 8014044:	fe87 7a04 	vmaxnm.f32	s14, s14, s8
 8014048:	ee75 5a84 	vadd.f32	s11, s11, s8
 801404c:	fec7 7ac4 	vminnm.f32	s15, s15, s8
 8014050:	2b09      	cmp	r3, #9
 8014052:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
 8014056:	fec7 7ae4 	vminnm.f32	s15, s15, s9
 801405a:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 801405e:	bf8c      	ite	hi
 8014060:	220a      	movhi	r2, #10
 8014062:	2205      	movls	r2, #5
 8014064:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8014068:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 801406c:	2a05      	cmp	r2, #5
 801406e:	ee75 5a85 	vadd.f32	s11, s11, s10
 8014072:	d031      	beq.n	80140d8 <iNemoEngine_API_Update+0x34c8>
 8014074:	f207 74d4 	addw	r4, r7, #2004	@ 0x7d4
 8014078:	ed94 5a00 	vldr	s10, [r4]
 801407c:	f507 64fc 	add.w	r4, r7, #2016	@ 0x7e0
 8014080:	ee75 5a85 	vadd.f32	s11, s11, s10
 8014084:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 8014088:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 801408c:	ed94 5a00 	vldr	s10, [r4]
 8014090:	f207 74ec 	addw	r4, r7, #2028	@ 0x7ec
 8014094:	ee75 5a85 	vadd.f32	s11, s11, s10
 8014098:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 801409c:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 80140a0:	ed94 5a00 	vldr	s10, [r4]
 80140a4:	f507 64ff 	add.w	r4, r7, #2040	@ 0x7f8
 80140a8:	ee75 5a85 	vadd.f32	s11, s11, s10
 80140ac:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 80140b0:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 80140b4:	ed94 5a00 	vldr	s10, [r4]
 80140b8:	f607 0404 	addw	r4, r7, #2052	@ 0x804
 80140bc:	ee75 5a85 	vadd.f32	s11, s11, s10
 80140c0:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 80140c4:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 80140c8:	ed94 5a00 	vldr	s10, [r4]
 80140cc:	ee75 5a85 	vadd.f32	s11, s11, s10
 80140d0:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 80140d4:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 80140d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140dc:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 801431c <iNemoEngine_API_Update+0x370c>
 80140e0:	ee25 7a87 	vmul.f32	s14, s11, s14
 80140e4:	eddf 5a8e 	vldr	s11, [pc, #568]	@ 8014320 <iNemoEngine_API_Update+0x3710>
 80140e8:	ee67 7a8d 	vmul.f32	s15, s15, s26
 80140ec:	eef4 7ae5 	vcmpe.f32	s15, s11
 80140f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f4:	f73e abcc 	bgt.w	8012890 <iNemoEngine_API_Update+0x1c80>
 80140f8:	eef0 7ac7 	vabs.f32	s15, s14
 80140fc:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8014324 <iNemoEngine_API_Update+0x3714>
 8014100:	ee67 7a8d 	vmul.f32	s15, s15, s26
 8014104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410c:	f73e abc0 	bgt.w	8012890 <iNemoEngine_API_Update+0x1c80>
 8014110:	9c38      	ldr	r4, [sp, #224]	@ 0xe0
 8014112:	2a05      	cmp	r2, #5
 8014114:	edd4 7a00 	vldr	s15, [r4]
 8014118:	f507 64f5 	add.w	r4, r7, #1960	@ 0x7a8
 801411c:	edd4 3a00 	vldr	s7, [r4]
 8014120:	f207 74b4 	addw	r4, r7, #1972	@ 0x7b4
 8014124:	ee77 5aa3 	vadd.f32	s11, s15, s7
 8014128:	ed94 4a00 	vldr	s8, [r4]
 801412c:	f507 64f8 	add.w	r4, r7, #1984	@ 0x7c0
 8014130:	fe87 7aa3 	vmaxnm.f32	s14, s15, s7
 8014134:	fec7 7ae3 	vminnm.f32	s15, s15, s7
 8014138:	fe87 7a04 	vmaxnm.f32	s14, s14, s8
 801413c:	ee75 5a84 	vadd.f32	s11, s11, s8
 8014140:	edd4 4a00 	vldr	s9, [r4]
 8014144:	f207 74cc 	addw	r4, r7, #1996	@ 0x7cc
 8014148:	fec7 7ac4 	vminnm.f32	s15, s15, s8
 801414c:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
 8014150:	fec7 7ae4 	vminnm.f32	s15, s15, s9
 8014154:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8014158:	ed94 5a00 	vldr	s10, [r4]
 801415c:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 8014160:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 8014164:	ee75 5a85 	vadd.f32	s11, s11, s10
 8014168:	d031      	beq.n	80141ce <iNemoEngine_API_Update+0x35be>
 801416a:	f507 64fb 	add.w	r4, r7, #2008	@ 0x7d8
 801416e:	ed94 5a00 	vldr	s10, [r4]
 8014172:	f207 74e4 	addw	r4, r7, #2020	@ 0x7e4
 8014176:	ee75 5a85 	vadd.f32	s11, s11, s10
 801417a:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 801417e:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 8014182:	ed94 5a00 	vldr	s10, [r4]
 8014186:	f507 64fe 	add.w	r4, r7, #2032	@ 0x7f0
 801418a:	ee75 5a85 	vadd.f32	s11, s11, s10
 801418e:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 8014192:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 8014196:	ed94 5a00 	vldr	s10, [r4]
 801419a:	f207 74fc 	addw	r4, r7, #2044	@ 0x7fc
 801419e:	ee75 5a85 	vadd.f32	s11, s11, s10
 80141a2:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 80141a6:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 80141aa:	ed94 5a00 	vldr	s10, [r4]
 80141ae:	f607 0408 	addw	r4, r7, #2056	@ 0x808
 80141b2:	ee75 5a85 	vadd.f32	s11, s11, s10
 80141b6:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 80141ba:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 80141be:	ed94 5a00 	vldr	s10, [r4]
 80141c2:	ee75 5a85 	vadd.f32	s11, s11, s10
 80141c6:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 80141ca:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 80141ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141d2:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 801431c <iNemoEngine_API_Update+0x370c>
 80141d6:	ee25 7a87 	vmul.f32	s14, s11, s14
 80141da:	eddf 5a51 	vldr	s11, [pc, #324]	@ 8014320 <iNemoEngine_API_Update+0x3710>
 80141de:	ee67 7a8d 	vmul.f32	s15, s15, s26
 80141e2:	eef4 7ae5 	vcmpe.f32	s15, s11
 80141e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ea:	f73e ab51 	bgt.w	8012890 <iNemoEngine_API_Update+0x1c80>
 80141ee:	eef0 7ac7 	vabs.f32	s15, s14
 80141f2:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8014324 <iNemoEngine_API_Update+0x3714>
 80141f6:	ee67 7a8d 	vmul.f32	s15, s15, s26
 80141fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014202:	f73e ab45 	bgt.w	8012890 <iNemoEngine_API_Update+0x1c80>
 8014206:	9c39      	ldr	r4, [sp, #228]	@ 0xe4
 8014208:	2a05      	cmp	r2, #5
 801420a:	edd4 3a00 	vldr	s7, [r4]
 801420e:	f207 74ac 	addw	r4, r7, #1964	@ 0x7ac
 8014212:	ed94 7a00 	vldr	s14, [r4]
 8014216:	f507 64f7 	add.w	r4, r7, #1976	@ 0x7b8
 801421a:	ee37 5a23 	vadd.f32	s10, s14, s7
 801421e:	ed94 4a00 	vldr	s8, [r4]
 8014222:	f207 74c4 	addw	r4, r7, #1988	@ 0x7c4
 8014226:	fec7 7a23 	vmaxnm.f32	s15, s14, s7
 801422a:	fe87 7a63 	vminnm.f32	s14, s14, s7
 801422e:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8014232:	ee34 5a05 	vadd.f32	s10, s8, s10
 8014236:	edd4 4a00 	vldr	s9, [r4]
 801423a:	f507 64fa 	add.w	r4, r7, #2000	@ 0x7d0
 801423e:	fe87 7a44 	vminnm.f32	s14, s14, s8
 8014242:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 8014246:	fe87 7a64 	vminnm.f32	s14, s14, s9
 801424a:	ee34 5a85 	vadd.f32	s10, s9, s10
 801424e:	edd4 5a00 	vldr	s11, [r4]
 8014252:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
 8014256:	fe87 7a65 	vminnm.f32	s14, s14, s11
 801425a:	ee35 5a85 	vadd.f32	s10, s11, s10
 801425e:	d031      	beq.n	80142c4 <iNemoEngine_API_Update+0x36b4>
 8014260:	f207 72dc 	addw	r2, r7, #2012	@ 0x7dc
 8014264:	edd2 5a00 	vldr	s11, [r2]
 8014268:	f507 62fd 	add.w	r2, r7, #2024	@ 0x7e8
 801426c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8014270:	fec5 7aa7 	vmaxnm.f32	s15, s11, s15
 8014274:	fec5 5ac7 	vminnm.f32	s11, s11, s14
 8014278:	ed92 7a00 	vldr	s14, [r2]
 801427c:	f207 72f4 	addw	r2, r7, #2036	@ 0x7f4
 8014280:	ee37 5a05 	vadd.f32	s10, s14, s10
 8014284:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8014288:	fec5 5ac7 	vminnm.f32	s11, s11, s14
 801428c:	ed92 7a00 	vldr	s14, [r2]
 8014290:	f507 6200 	add.w	r2, r7, #2048	@ 0x800
 8014294:	ee37 5a05 	vadd.f32	s10, s14, s10
 8014298:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801429c:	fec5 5ac7 	vminnm.f32	s11, s11, s14
 80142a0:	ed92 7a00 	vldr	s14, [r2]
 80142a4:	f607 020c 	addw	r2, r7, #2060	@ 0x80c
 80142a8:	ee37 5a05 	vadd.f32	s10, s14, s10
 80142ac:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80142b0:	fec5 5ac7 	vminnm.f32	s11, s11, s14
 80142b4:	ed92 7a00 	vldr	s14, [r2]
 80142b8:	ee37 5a05 	vadd.f32	s10, s14, s10
 80142bc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80142c0:	fe85 7ac7 	vminnm.f32	s14, s11, s14
 80142c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142c8:	eddf 5a15 	vldr	s11, [pc, #84]	@ 8014320 <iNemoEngine_API_Update+0x3710>
 80142cc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 801431c <iNemoEngine_API_Update+0x370c>
 80142d0:	ee67 7a8d 	vmul.f32	s15, s15, s26
 80142d4:	ee25 7a07 	vmul.f32	s14, s10, s14
 80142d8:	eef4 7ae5 	vcmpe.f32	s15, s11
 80142dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e0:	f73e aad6 	bgt.w	8012890 <iNemoEngine_API_Update+0x1c80>
 80142e4:	eef0 7ac7 	vabs.f32	s15, s14
 80142e8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8014324 <iNemoEngine_API_Update+0x3714>
 80142ec:	ee67 7a8d 	vmul.f32	s15, s15, s26
 80142f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f8:	f73e aaca 	bgt.w	8012890 <iNemoEngine_API_Update+0x1c80>
 80142fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80142fe:	2a00      	cmp	r2, #0
 8014300:	f040 8261 	bne.w	80147c6 <iNemoEngine_API_Update+0x3bb6>
 8014304:	2301      	movs	r3, #1
 8014306:	930e      	str	r3, [sp, #56]	@ 0x38
 8014308:	f7fe bacb 	b.w	80128a2 <iNemoEngine_API_Update+0x1c92>
 801430c:	ed9f 8a06 	vldr	s16, [pc, #24]	@ 8014328 <iNemoEngine_API_Update+0x3718>
 8014310:	f7fd b942 	b.w	8011598 <iNemoEngine_API_Update+0x988>
 8014314:	eddf da04 	vldr	s27, [pc, #16]	@ 8014328 <iNemoEngine_API_Update+0x3718>
 8014318:	f7fd b8d5 	b.w	80114c6 <iNemoEngine_API_Update+0x8b6>
 801431c:	3dcccccd 	.word	0x3dcccccd
 8014320:	3be56041 	.word	0x3be56041
 8014324:	3e333333 	.word	0x3e333333
 8014328:	80000000 	.word	0x80000000
 801432c:	3e4cccce 	.word	0x3e4cccce
 8014330:	3eaaaaab 	.word	0x3eaaaaab
 8014334:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8014338:	3301      	adds	r3, #1
 801433a:	b29b      	uxth	r3, r3
 801433c:	2a00      	cmp	r2, #0
 801433e:	f040 853a 	bne.w	8014db6 <iNemoEngine_API_Update+0x41a6>
 8014342:	ed5f 7a06 	vldr	s15, [pc, #-24]	@ 801432c <iNemoEngine_API_Update+0x371c>
 8014346:	2b31      	cmp	r3, #49	@ 0x31
 8014348:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8014330 <iNemoEngine_API_Update+0x3720>
 801434c:	bf98      	it	ls
 801434e:	eef0 7a47 	vmovls.f32	s15, s14
 8014352:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 8014356:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801435a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801435e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014362:	f5b3 0f8c 	cmp.w	r3, #4587520	@ 0x460000
 8014366:	f000 851c 	beq.w	8014da2 <iNemoEngine_API_Update+0x4192>
 801436a:	f5b3 0fc8 	cmp.w	r3, #6553600	@ 0x640000
 801436e:	f47f acc5 	bne.w	8013cfc <iNemoEngine_API_Update+0x30ec>
 8014372:	2301      	movs	r3, #1
 8014374:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
 8014378:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 801437c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8014380:	465e      	mov	r6, fp
 8014382:	a84d      	add	r0, sp, #308	@ 0x134
 8014384:	edd3 5a00 	vldr	s11, [r3]
 8014388:	f507 63f1 	add.w	r3, r7, #1928	@ 0x788
 801438c:	465a      	mov	r2, fp
 801438e:	a947      	add	r1, sp, #284	@ 0x11c
 8014390:	ed93 7a00 	vldr	s14, [r3]
 8014394:	f207 6314 	addw	r3, r7, #1556	@ 0x614
 8014398:	ee65 7aa5 	vmul.f32	s15, s11, s11
 801439c:	464c      	mov	r4, r9
 801439e:	ed93 5a00 	vldr	s10, [r3]
 80143a2:	f207 7384 	addw	r3, r7, #1924	@ 0x784
 80143a6:	ee27 6a07 	vmul.f32	s12, s14, s14
 80143aa:	eee5 7a05 	vfma.f32	s15, s10, s10
 80143ae:	edd3 6a00 	vldr	s13, [r3]
 80143b2:	f207 631c 	addw	r3, r7, #1564	@ 0x61c
 80143b6:	eea6 6aa6 	vfma.f32	s12, s13, s13
 80143ba:	edd3 4a00 	vldr	s9, [r3]
 80143be:	f207 738c 	addw	r3, r7, #1932	@ 0x78c
 80143c2:	eee4 7aa4 	vfma.f32	s15, s9, s9
 80143c6:	eef1 3ae7 	vsqrt.f32	s7, s15
 80143ca:	eec4 7a23 	vdiv.f32	s15, s8, s7
 80143ce:	ee27 5a85 	vmul.f32	s10, s15, s10
 80143d2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80143d6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80143da:	ed8d 5a47 	vstr	s10, [sp, #284]	@ 0x11c
 80143de:	edcd 5a48 	vstr	s11, [sp, #288]	@ 0x120
 80143e2:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 80143e6:	edd3 7a00 	vldr	s15, [r3]
 80143ea:	eea7 6aa7 	vfma.f32	s12, s15, s15
 80143ee:	eef1 5ac6 	vsqrt.f32	s11, s12
 80143f2:	ee84 6a25 	vdiv.f32	s12, s8, s11
 80143f6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80143fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80143fe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014402:	ed8d 7a4e 	vstr	s14, [sp, #312]	@ 0x138
 8014406:	edcd 7a4f 	vstr	s15, [sp, #316]	@ 0x13c
 801440a:	edcd 6a4d 	vstr	s13, [sp, #308]	@ 0x134
 801440e:	f7fa fe7f 	bl	800f110 <getRotationMatrix>
 8014412:	46ae      	mov	lr, r5
 8014414:	46ac      	mov	ip, r5
 8014416:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014418:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801441c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801441e:	6836      	ldr	r6, [r6, #0]
 8014420:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014424:	f8ce 6000 	str.w	r6, [lr]
 8014428:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801442c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801442e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014434:	ed95 7a00 	vldr	s14, [r5]
 8014438:	edd5 7a01 	vldr	s15, [r5, #4]
 801443c:	eeb0 7ac7 	vabs.f32	s14, s14
 8014440:	6026      	str	r6, [r4, #0]
 8014442:	eef0 7ae7 	vabs.f32	s15, s15
 8014446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444e:	f100 8544 	bmi.w	8014eda <iNemoEngine_API_Update+0x42ca>
 8014452:	f04f 0a04 	mov.w	sl, #4
 8014456:	eef0 7a47 	vmov.f32	s15, s14
 801445a:	2000      	movs	r0, #0
 801445c:	2606      	movs	r6, #6
 801445e:	f04f 0e07 	mov.w	lr, #7
 8014462:	2103      	movs	r1, #3
 8014464:	4652      	mov	r2, sl
 8014466:	f04f 0c01 	mov.w	ip, #1
 801446a:	9003      	str	r0, [sp, #12]
 801446c:	ed95 7a02 	vldr	s14, [r5, #8]
 8014470:	eeb0 7ac7 	vabs.f32	s14, s14
 8014474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801447c:	f300 851b 	bgt.w	8014eb6 <iNemoEngine_API_Update+0x42a6>
 8014480:	2305      	movs	r3, #5
 8014482:	2408      	movs	r4, #8
 8014484:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014488:	2302      	movs	r3, #2
 801448a:	eb05 040a 	add.w	r4, r5, sl
 801448e:	4428      	add	r0, r5
 8014490:	9d03      	ldr	r5, [sp, #12]
 8014492:	edd4 6a00 	vldr	s13, [r4]
 8014496:	eb09 0483 	add.w	r4, r9, r3, lsl #2
 801449a:	ed90 7a00 	vldr	s14, [r0]
 801449e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80144a2:	eb09 008c 	add.w	r0, r9, ip, lsl #2
 80144a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144aa:	009b      	lsls	r3, r3, #2
 80144ac:	edc0 7a00 	vstr	s15, [r0]
 80144b0:	ed94 7a00 	vldr	s14, [r4]
 80144b4:	edd5 7a00 	vldr	s15, [r5]
 80144b8:	9d03      	ldr	r5, [sp, #12]
 80144ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80144be:	00ad      	lsls	r5, r5, #2
 80144c0:	edc4 6a00 	vstr	s13, [r4]
 80144c4:	eb09 0482 	add.w	r4, r9, r2, lsl #2
 80144c8:	ed90 6a00 	vldr	s12, [r0]
 80144cc:	eb09 0081 	add.w	r0, r9, r1, lsl #2
 80144d0:	edd4 7a00 	vldr	s15, [r4]
 80144d4:	0089      	lsls	r1, r1, #2
 80144d6:	ed90 7a00 	vldr	s14, [r0]
 80144da:	9107      	str	r1, [sp, #28]
 80144dc:	eee6 7a47 	vfms.f32	s15, s12, s14
 80144e0:	edc4 7a00 	vstr	s15, [r4]
 80144e4:	edd0 7a00 	vldr	s15, [r0]
 80144e8:	9804      	ldr	r0, [sp, #16]
 80144ea:	eb09 0180 	add.w	r1, r9, r0, lsl #2
 80144ee:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 80144f2:	ed91 7a00 	vldr	s14, [r1]
 80144f6:	00b0      	lsls	r0, r6, #2
 80144f8:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80144fc:	9006      	str	r0, [sp, #24]
 80144fe:	eb09 008e 	add.w	r0, r9, lr, lsl #2
 8014502:	ed81 7a00 	vstr	s14, [r1]
 8014506:	eb09 0186 	add.w	r1, r9, r6, lsl #2
 801450a:	edd0 7a00 	vldr	s15, [r0]
 801450e:	eef0 5ac7 	vabs.f32	s11, s14
 8014512:	ed91 5a00 	vldr	s10, [r1]
 8014516:	9e05      	ldr	r6, [sp, #20]
 8014518:	eee6 7a45 	vfms.f32	s15, s12, s10
 801451c:	edc0 7a00 	vstr	s15, [r0]
 8014520:	ed91 6a00 	vldr	s12, [r1]
 8014524:	eb09 0186 	add.w	r1, r9, r6, lsl #2
 8014528:	00b6      	lsls	r6, r6, #2
 801452a:	edd1 7a00 	vldr	s15, [r1]
 801452e:	eee6 7ac6 	vfms.f32	s15, s13, s12
 8014532:	edc1 7a00 	vstr	s15, [r1]
 8014536:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801453a:	edd4 6a00 	vldr	s13, [r4]
 801453e:	0094      	lsls	r4, r2, #2
 8014540:	eeb0 6ae6 	vabs.f32	s12, s13
 8014544:	9404      	str	r4, [sp, #16]
 8014546:	ea4f 048e 	mov.w	r4, lr, lsl #2
 801454a:	eef4 5ac6 	vcmpe.f32	s11, s12
 801454e:	9403      	str	r4, [sp, #12]
 8014550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014554:	f300 849a 	bgt.w	8014e8c <iNemoEngine_API_Update+0x427c>
 8014558:	ed90 6a00 	vldr	s12, [r0]
 801455c:	eec7 2a26 	vdiv.f32	s5, s14, s13
 8014560:	9a03      	ldr	r2, [sp, #12]
 8014562:	44ca      	add	sl, r9
 8014564:	444e      	add	r6, r9
 8014566:	444a      	add	r2, r9
 8014568:	9c04      	ldr	r4, [sp, #16]
 801456a:	4658      	mov	r0, fp
 801456c:	444c      	add	r4, r9
 801456e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8014572:	eee2 7ac6 	vfms.f32	s15, s5, s12
 8014576:	edca 2a00 	vstr	s5, [sl]
 801457a:	edc6 7a00 	vstr	s15, [r6]
 801457e:	ee81 2a27 	vdiv.f32	s4, s2, s15
 8014582:	ed92 3a00 	vldr	s6, [r2]
 8014586:	9a06      	ldr	r2, [sp, #24]
 8014588:	edd4 7a00 	vldr	s15, [r4]
 801458c:	444a      	add	r2, r9
 801458e:	ee81 4a27 	vdiv.f32	s8, s2, s15
 8014592:	edd2 3a00 	vldr	s7, [r2]
 8014596:	9a07      	ldr	r2, [sp, #28]
 8014598:	444a      	add	r2, r9
 801459a:	edd2 4a00 	vldr	s9, [r2]
 801459e:	9a02      	ldr	r2, [sp, #8]
 80145a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80145a2:	eb09 0201 	add.w	r2, r9, r1
 80145a6:	ed92 6a00 	vldr	s12, [r2]
 80145aa:	eb09 0203 	add.w	r2, r9, r3
 80145ae:	edd2 1a00 	vldr	s3, [r2]
 80145b2:	aa76      	add	r2, sp, #472	@ 0x1d8
 80145b4:	442a      	add	r2, r5
 80145b6:	edd2 6a00 	vldr	s13, [r2]
 80145ba:	aa76      	add	r2, sp, #472	@ 0x1d8
 80145bc:	440a      	add	r2, r1
 80145be:	edd2 7a00 	vldr	s15, [r2]
 80145c2:	aa76      	add	r2, sp, #472	@ 0x1d8
 80145c4:	441a      	add	r2, r3
 80145c6:	eee6 7a66 	vfms.f32	s15, s12, s13
 80145ca:	ed92 7a00 	vldr	s14, [r2]
 80145ce:	aa79      	add	r2, sp, #484	@ 0x1e4
 80145d0:	eea1 7ae6 	vfms.f32	s14, s3, s13
 80145d4:	442a      	add	r2, r5
 80145d6:	eea2 7ae7 	vfms.f32	s14, s5, s15
 80145da:	ee22 7a07 	vmul.f32	s14, s4, s14
 80145de:	eee3 7a47 	vfms.f32	s15, s6, s14
 80145e2:	ed8b 7a02 	vstr	s14, [fp, #8]
 80145e6:	eee3 6ac7 	vfms.f32	s13, s7, s14
 80145ea:	ed92 7a00 	vldr	s14, [r2]
 80145ee:	aa79      	add	r2, sp, #484	@ 0x1e4
 80145f0:	440a      	add	r2, r1
 80145f2:	ee64 7a27 	vmul.f32	s15, s8, s15
 80145f6:	eee4 6ae7 	vfms.f32	s13, s9, s15
 80145fa:	edcb 7a01 	vstr	s15, [fp, #4]
 80145fe:	eef0 0a66 	vmov.f32	s1, s13
 8014602:	edd2 6a00 	vldr	s13, [r2]
 8014606:	aa79      	add	r2, sp, #484	@ 0x1e4
 8014608:	eee6 6a47 	vfms.f32	s13, s12, s14
 801460c:	441a      	add	r2, r3
 801460e:	edd2 5a00 	vldr	s11, [r2]
 8014612:	aa7c      	add	r2, sp, #496	@ 0x1f0
 8014614:	4411      	add	r1, r2
 8014616:	4413      	add	r3, r2
 8014618:	442a      	add	r2, r5
 801461a:	444d      	add	r5, r9
 801461c:	ed91 5a00 	vldr	s10, [r1]
 8014620:	eee1 5ac7 	vfms.f32	s11, s3, s14
 8014624:	edd2 7a00 	vldr	s15, [r2]
 8014628:	a960      	add	r1, sp, #384	@ 0x180
 801462a:	ed95 0a00 	vldr	s0, [r5]
 801462e:	eea7 5ac6 	vfms.f32	s10, s15, s12
 8014632:	ed93 6a00 	vldr	s12, [r3]
 8014636:	2300      	movs	r3, #0
 8014638:	eea7 6ae1 	vfms.f32	s12, s15, s3
 801463c:	eec1 1a00 	vdiv.f32	s3, s2, s0
 8014640:	eee2 5ae6 	vfms.f32	s11, s5, s13
 8014644:	eea2 6ac5 	vfms.f32	s12, s5, s10
 8014648:	ee62 5a25 	vmul.f32	s11, s4, s11
 801464c:	ee26 6a02 	vmul.f32	s12, s12, s4
 8014650:	eee3 6a65 	vfms.f32	s13, s6, s11
 8014654:	edcb 5a05 	vstr	s11, [fp, #20]
 8014658:	eea6 5a43 	vfms.f32	s10, s12, s6
 801465c:	ed8b 6a08 	vstr	s12, [fp, #32]
 8014660:	eea3 7ae5 	vfms.f32	s14, s7, s11
 8014664:	eee6 7a63 	vfms.f32	s15, s12, s7
 8014668:	ee21 6aa0 	vmul.f32	s12, s3, s1
 801466c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8014670:	ed8b 6a00 	vstr	s12, [fp]
 8014674:	ee24 6a05 	vmul.f32	s12, s8, s10
 8014678:	eea4 7ae6 	vfms.f32	s14, s9, s13
 801467c:	edcb 6a04 	vstr	s13, [fp, #16]
 8014680:	eee6 7a64 	vfms.f32	s15, s12, s9
 8014684:	ed8b 6a07 	vstr	s12, [fp, #28]
 8014688:	ee21 7a87 	vmul.f32	s14, s3, s14
 801468c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8014690:	ed8b 7a03 	vstr	s14, [fp, #12]
 8014694:	edcb 7a06 	vstr	s15, [fp, #24]
 8014698:	f7fa fc98 	bl	800efcc <b_dcm2q>
 801469c:	eddd 6a61 	vldr	s13, [sp, #388]	@ 0x184
 80146a0:	eddd 7a62 	vldr	s15, [sp, #392]	@ 0x188
 80146a4:	ed9d 7a60 	vldr	s14, [sp, #384]	@ 0x180
 80146a8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80146ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80146b0:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 80146b4:	ee37 7a07 	vadd.f32	s14, s14, s14
 80146b8:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 80146bc:	edcd 6a48 	vstr	s13, [sp, #288]	@ 0x120
 80146c0:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 80146c4:	ed8d 7a47 	vstr	s14, [sp, #284]	@ 0x11c
 80146c8:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 80146cc:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 80146d0:	f7fe b8f8 	b.w	80128c4 <iNemoEngine_API_Update+0x1cb4>
 80146d4:	3a01      	subs	r2, #1
 80146d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80146d8:	f7fe b8b6 	b.w	8012848 <iNemoEngine_API_Update+0x1c38>
 80146dc:	a958      	add	r1, sp, #352	@ 0x160
 80146de:	a876      	add	r0, sp, #472	@ 0x1d8
 80146e0:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80146e4:	edcd 5a08 	vstr	s11, [sp, #32]
 80146e8:	ed8d 0a07 	vstr	s0, [sp, #28]
 80146ec:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80146f0:	ed8d 6a06 	vstr	s12, [sp, #24]
 80146f4:	edcd 6a05 	vstr	s13, [sp, #20]
 80146f8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80146fc:	f7fa fc66 	bl	800efcc <b_dcm2q>
 8014700:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 8014704:	4621      	mov	r1, r4
 8014706:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 801470a:	ed87 8a73 	vstr	s16, [r7, #460]	@ 0x1cc
 801470e:	edc7 7a72 	vstr	s15, [r7, #456]	@ 0x1c8
 8014712:	f004 f856 	bl	80187c2 <memset>
 8014716:	4bc1      	ldr	r3, [pc, #772]	@ (8014a1c <iNemoEngine_API_Update+0x3e0c>)
 8014718:	ed9d 7a5b 	vldr	s14, [sp, #364]	@ 0x16c
 801471c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8014720:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8014724:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8014728:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 801472c:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8014730:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8014734:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8014738:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801473c:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8014740:	2301      	movs	r3, #1
 8014742:	ed8d 7a2b 	vstr	s14, [sp, #172]	@ 0xac
 8014746:	eddd aa59 	vldr	s21, [sp, #356]	@ 0x164
 801474a:	eddd ca58 	vldr	s25, [sp, #352]	@ 0x160
 801474e:	ed9d aa5a 	vldr	s20, [sp, #360]	@ 0x168
 8014752:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8014756:	eddd 5a08 	vldr	s11, [sp, #32]
 801475a:	ed9d 0a07 	vldr	s0, [sp, #28]
 801475e:	ed9d 6a06 	vldr	s12, [sp, #24]
 8014762:	eddd 6a05 	vldr	s13, [sp, #20]
 8014766:	ed9d 7a04 	vldr	s14, [sp, #16]
 801476a:	703c      	strb	r4, [r7, #0]
 801476c:	f7fd be7b 	b.w	8012466 <iNemoEngine_API_Update+0x1856>
 8014770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014774:	f340 817a 	ble.w	8014a6c <iNemoEngine_API_Update+0x3e5c>
 8014778:	ed97 3a4d 	vldr	s6, [r7, #308]	@ 0x134
 801477c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014780:	ed97 5a4f 	vldr	s10, [r7, #316]	@ 0x13c
 8014784:	ee39 7a47 	vsub.f32	s14, s18, s14
 8014788:	ee35 5a43 	vsub.f32	s10, s10, s6
 801478c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8014790:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8014794:	ee37 7a03 	vadd.f32	s14, s14, s6
 8014798:	f7fd bc95 	b.w	80120c6 <iNemoEngine_API_Update+0x14b6>
 801479c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a0:	d535      	bpl.n	801480e <iNemoEngine_API_Update+0x3bfe>
 80147a2:	ed97 3a33 	vldr	s6, [r7, #204]	@ 0xcc
 80147a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80147aa:	ed97 5a35 	vldr	s10, [r7, #212]	@ 0xd4
 80147ae:	ee39 7a47 	vsub.f32	s14, s18, s14
 80147b2:	ee35 5a43 	vsub.f32	s10, s10, s6
 80147b6:	ee25 7a07 	vmul.f32	s14, s10, s14
 80147ba:	eec7 da27 	vdiv.f32	s27, s14, s15
 80147be:	ee7d da83 	vadd.f32	s27, s27, s6
 80147c2:	f7fe bae1 	b.w	8012d88 <iNemoEngine_API_Update+0x2178>
 80147c6:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 80147ca:	2a01      	cmp	r2, #1
 80147cc:	f47f aa44 	bne.w	8013c58 <iNemoEngine_API_Update+0x3048>
 80147d0:	2b0a      	cmp	r3, #10
 80147d2:	f000 82a2 	beq.w	8014d1a <iNemoEngine_API_Update+0x410a>
 80147d6:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 8014a60 <iNemoEngine_API_Update+0x3e50>
 80147da:	3301      	adds	r3, #1
 80147dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80147e0:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 80147e4:	2300      	movs	r3, #0
 80147e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ea:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 80147ee:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 80147f2:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 80147f6:	f280 82b9 	bge.w	8014d6c <iNemoEngine_API_Update+0x415c>
 80147fa:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 80147fe:	2b31      	cmp	r3, #49	@ 0x31
 8014800:	f63e a9b3 	bhi.w	8012b6a <iNemoEngine_API_Update+0x1f5a>
 8014804:	3301      	adds	r3, #1
 8014806:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 801480a:	f7fe b9ae 	b.w	8012b6a <iNemoEngine_API_Update+0x1f5a>
 801480e:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8014812:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8014816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481a:	f140 83a3 	bpl.w	8014f64 <iNemoEngine_API_Update+0x4354>
 801481e:	ed97 3a35 	vldr	s6, [r7, #212]	@ 0xd4
 8014822:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014826:	ed97 5a37 	vldr	s10, [r7, #220]	@ 0xdc
 801482a:	ee79 7a67 	vsub.f32	s15, s18, s15
 801482e:	ee35 5a43 	vsub.f32	s10, s10, s6
 8014832:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014836:	eec5 da07 	vdiv.f32	s27, s10, s14
 801483a:	ee7d da83 	vadd.f32	s27, s27, s6
 801483e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8014842:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801484a:	f6fe aabd 	blt.w	8012dc8 <iNemoEngine_API_Update+0x21b8>
 801484e:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 8014852:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8014856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801485a:	f140 81f4 	bpl.w	8014c46 <iNemoEngine_API_Update+0x4036>
 801485e:	ed97 3a39 	vldr	s6, [r7, #228]	@ 0xe4
 8014862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014866:	ed97 5a3b 	vldr	s10, [r7, #236]	@ 0xec
 801486a:	ee79 7a67 	vsub.f32	s15, s18, s15
 801486e:	ee35 5a43 	vsub.f32	s10, s10, s6
 8014872:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014876:	eec5 da07 	vdiv.f32	s27, s10, s14
 801487a:	ee7d da83 	vadd.f32	s27, s27, s6
 801487e:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8014882:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801488a:	f6fe aabd 	blt.w	8012e08 <iNemoEngine_API_Update+0x21f8>
 801488e:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8014892:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8014896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801489a:	f140 826b 	bpl.w	8014d74 <iNemoEngine_API_Update+0x4164>
 801489e:	ed97 3a3d 	vldr	s6, [r7, #244]	@ 0xf4
 80148a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80148a6:	ed97 5a3f 	vldr	s10, [r7, #252]	@ 0xfc
 80148aa:	ee79 7a67 	vsub.f32	s15, s18, s15
 80148ae:	ee35 5a43 	vsub.f32	s10, s10, s6
 80148b2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80148b6:	eec5 da07 	vdiv.f32	s27, s10, s14
 80148ba:	ee7d da83 	vadd.f32	s27, s27, s6
 80148be:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80148c2:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80148c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ca:	f6fe aabd 	blt.w	8012e48 <iNemoEngine_API_Update+0x2238>
 80148ce:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 80148d2:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80148d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148da:	f140 830d 	bpl.w	8014ef8 <iNemoEngine_API_Update+0x42e8>
 80148de:	ed97 3a41 	vldr	s6, [r7, #260]	@ 0x104
 80148e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80148e6:	ed97 5a43 	vldr	s10, [r7, #268]	@ 0x10c
 80148ea:	ee79 7a67 	vsub.f32	s15, s18, s15
 80148ee:	ee35 5a43 	vsub.f32	s10, s10, s6
 80148f2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80148f6:	eec5 da07 	vdiv.f32	s27, s10, s14
 80148fa:	ee7d da83 	vadd.f32	s27, s27, s6
 80148fe:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8014902:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801490a:	f6fe aabd 	blt.w	8012e88 <iNemoEngine_API_Update+0x2278>
 801490e:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8014912:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8014916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801491a:	f140 81db 	bpl.w	8014cd4 <iNemoEngine_API_Update+0x40c4>
 801491e:	ed97 5a45 	vldr	s10, [r7, #276]	@ 0x114
 8014922:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014926:	edd7 5a47 	vldr	s11, [r7, #284]	@ 0x11c
 801492a:	ee79 7a67 	vsub.f32	s15, s18, s15
 801492e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014932:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014936:	eec7 da87 	vdiv.f32	s27, s15, s14
 801493a:	ee7d da85 	vadd.f32	s27, s27, s10
 801493e:	f7fd bb8c 	b.w	801205a <iNemoEngine_API_Update+0x144a>
 8014942:	eddf 3a37 	vldr	s7, [pc, #220]	@ 8014a20 <iNemoEngine_API_Update+0x3e10>
 8014946:	eef4 7ae3 	vcmpe.f32	s15, s7
 801494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801494e:	f57e ac36 	bpl.w	80131be <iNemoEngine_API_Update+0x25ae>
 8014952:	eddf 3a34 	vldr	s7, [pc, #208]	@ 8014a24 <iNemoEngine_API_Update+0x3e14>
 8014956:	ed9f 3a34 	vldr	s6, [pc, #208]	@ 8014a28 <iNemoEngine_API_Update+0x3e18>
 801495a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801495e:	ed9f 8a33 	vldr	s16, [pc, #204]	@ 8014a2c <iNemoEngine_API_Update+0x3e1c>
 8014962:	eea3 8a83 	vfma.f32	s16, s7, s6
 8014966:	eddf 3a32 	vldr	s7, [pc, #200]	@ 8014a30 <iNemoEngine_API_Update+0x3e20>
 801496a:	eef4 7ae3 	vcmpe.f32	s15, s7
 801496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014972:	f6fe ac36 	blt.w	80131e2 <iNemoEngine_API_Update+0x25d2>
 8014976:	eddf 3a2f 	vldr	s7, [pc, #188]	@ 8014a34 <iNemoEngine_API_Update+0x3e24>
 801497a:	eef4 7ae3 	vcmpe.f32	s15, s7
 801497e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014982:	f57e ac36 	bpl.w	80131f2 <iNemoEngine_API_Update+0x25e2>
 8014986:	eddf 3a2a 	vldr	s7, [pc, #168]	@ 8014a30 <iNemoEngine_API_Update+0x3e20>
 801498a:	eeb1 3a04 	vmov.f32	s6, #20	@ 0x40a00000  5.0
 801498e:	eeb7 8a08 	vmov.f32	s16, #120	@ 0x3fc00000  1.5
 8014992:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8014996:	eea3 8a83 	vfma.f32	s16, s7, s6
 801499a:	eddf 3a27 	vldr	s7, [pc, #156]	@ 8014a38 <iNemoEngine_API_Update+0x3e28>
 801499e:	eef4 7ae3 	vcmpe.f32	s15, s7
 80149a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a6:	f6fe ac36 	blt.w	8013216 <iNemoEngine_API_Update+0x2606>
 80149aa:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80149ae:	eef4 7ae3 	vcmpe.f32	s15, s7
 80149b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b6:	f57e ac35 	bpl.w	8013224 <iNemoEngine_API_Update+0x2614>
 80149ba:	eddf 3a1f 	vldr	s7, [pc, #124]	@ 8014a38 <iNemoEngine_API_Update+0x3e28>
 80149be:	eeb2 8a05 	vmov.f32	s16, #37	@ 0x41280000  10.5
 80149c2:	ed9f 3a1e 	vldr	s6, [pc, #120]	@ 8014a3c <iNemoEngine_API_Update+0x3e2c>
 80149c6:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80149ca:	eea3 8a83 	vfma.f32	s16, s7, s6
 80149ce:	f7fe bc33 	b.w	8013238 <iNemoEngine_API_Update+0x2628>
 80149d2:	eef4 7ae3 	vcmpe.f32	s15, s7
 80149d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149da:	f57e abd6 	bpl.w	801318a <iNemoEngine_API_Update+0x257a>
 80149de:	eddf 3a11 	vldr	s7, [pc, #68]	@ 8014a24 <iNemoEngine_API_Update+0x3e14>
 80149e2:	eef4 7ae3 	vcmpe.f32	s15, s7
 80149e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ea:	daaa      	bge.n	8014942 <iNemoEngine_API_Update+0x3d32>
 80149ec:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80149f0:	f7fe bbdd 	b.w	80131ae <iNemoEngine_API_Update+0x259e>
 80149f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80149f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80149fa:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80149fe:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014a02:	edc3 7a00 	vstr	s15, [r3]
 8014a06:	9b08      	ldr	r3, [sp, #32]
 8014a08:	2b03      	cmp	r3, #3
 8014a0a:	f43d aa8d 	beq.w	8011f28 <iNemoEngine_API_Update+0x1318>
 8014a0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014a10:	f108 0804 	add.w	r8, r8, #4
 8014a14:	3304      	adds	r3, #4
 8014a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8014a18:	f7fd b8ef 	b.w	8011bfa <iNemoEngine_API_Update+0xfea>
 8014a1c:	40a00000 	.word	0x40a00000
 8014a20:	3cf5c28f 	.word	0x3cf5c28f
 8014a24:	3c75c28f 	.word	0x3c75c28f
 8014a28:	40d5555a 	.word	0x40d5555a
 8014a2c:	3f866666 	.word	0x3f866666
 8014a30:	3d4ccccd 	.word	0x3d4ccccd
 8014a34:	3dcccccd 	.word	0x3dcccccd
 8014a38:	3e4ccccd 	.word	0x3e4ccccd
 8014a3c:	43055555 	.word	0x43055555
 8014a40:	43c7ffff 	.word	0x43c7ffff
 8014a44:	3ecccccd 	.word	0x3ecccccd
 8014a48:	3e999998 	.word	0x3e999998
 8014a4c:	3f99999a 	.word	0x3f99999a
 8014a50:	42100000 	.word	0x42100000
 8014a54:	42c7ffff 	.word	0x42c7ffff
 8014a58:	3e4cccd0 	.word	0x3e4cccd0
 8014a5c:	3f8ccccd 	.word	0x3f8ccccd
 8014a60:	42480000 	.word	0x42480000
 8014a64:	3d088889 	.word	0x3d088889
 8014a68:	3d0d3dcb 	.word	0x3d0d3dcb
 8014a6c:	ed97 7a50 	vldr	s14, [r7, #320]	@ 0x140
 8014a70:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8014a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a78:	f340 826d 	ble.w	8014f56 <iNemoEngine_API_Update+0x4346>
 8014a7c:	ed97 3a4f 	vldr	s6, [r7, #316]	@ 0x13c
 8014a80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014a84:	ed97 5a51 	vldr	s10, [r7, #324]	@ 0x144
 8014a88:	ee79 7a67 	vsub.f32	s15, s18, s15
 8014a8c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8014a90:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014a94:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8014a98:	ee37 7a83 	vadd.f32	s14, s15, s6
 8014a9c:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8014aa0:	eef4 7ac9 	vcmpe.f32	s15, s18
 8014aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa8:	f63d ab2d 	bhi.w	8012106 <iNemoEngine_API_Update+0x14f6>
 8014aac:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8014ab0:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8014ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab8:	f140 825b 	bpl.w	8014f72 <iNemoEngine_API_Update+0x4362>
 8014abc:	ed97 3a53 	vldr	s6, [r7, #332]	@ 0x14c
 8014ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014ac4:	ed97 5a55 	vldr	s10, [r7, #340]	@ 0x154
 8014ac8:	ee79 7a67 	vsub.f32	s15, s18, s15
 8014acc:	ee35 5a43 	vsub.f32	s10, s10, s6
 8014ad0:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014ad4:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8014ad8:	ee37 7a83 	vadd.f32	s14, s15, s6
 8014adc:	edd7 7a56 	vldr	s15, [r7, #344]	@ 0x158
 8014ae0:	eef4 7ac9 	vcmpe.f32	s15, s18
 8014ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae8:	f63d ab2d 	bhi.w	8012146 <iNemoEngine_API_Update+0x1536>
 8014aec:	ed97 7a58 	vldr	s14, [r7, #352]	@ 0x160
 8014af0:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8014af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014af8:	f140 80a9 	bpl.w	8014c4e <iNemoEngine_API_Update+0x403e>
 8014afc:	ed97 3a57 	vldr	s6, [r7, #348]	@ 0x15c
 8014b00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014b04:	ed97 5a59 	vldr	s10, [r7, #356]	@ 0x164
 8014b08:	ee79 7a67 	vsub.f32	s15, s18, s15
 8014b0c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8014b10:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014b14:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8014b18:	ee37 7a83 	vadd.f32	s14, s15, s6
 8014b1c:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8014b20:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b28:	f6fd ab2d 	blt.w	8012186 <iNemoEngine_API_Update+0x1576>
 8014b2c:	ed97 7a5c 	vldr	s14, [r7, #368]	@ 0x170
 8014b30:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8014b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b38:	f340 81e2 	ble.w	8014f00 <iNemoEngine_API_Update+0x42f0>
 8014b3c:	ed97 3a5b 	vldr	s6, [r7, #364]	@ 0x16c
 8014b40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014b44:	ed97 5a5d 	vldr	s10, [r7, #372]	@ 0x174
 8014b48:	ee79 7a67 	vsub.f32	s15, s18, s15
 8014b4c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8014b50:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014b54:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8014b58:	ee37 7a83 	vadd.f32	s14, s15, s6
 8014b5c:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8014b60:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b68:	f6fd ab2d 	blt.w	80121c6 <iNemoEngine_API_Update+0x15b6>
 8014b6c:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 8014b70:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8014b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b78:	f140 8181 	bpl.w	8014e7e <iNemoEngine_API_Update+0x426e>
 8014b7c:	ed97 5a5f 	vldr	s10, [r7, #380]	@ 0x17c
 8014b80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014b84:	edd7 5a61 	vldr	s11, [r7, #388]	@ 0x184
 8014b88:	ee79 7a67 	vsub.f32	s15, s18, s15
 8014b8c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014b90:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014b94:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8014b98:	ee37 7a85 	vadd.f32	s14, s15, s10
 8014b9c:	f7fd bb2a 	b.w	80121f4 <iNemoEngine_API_Update+0x15e4>
 8014ba0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8014ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba8:	dd43      	ble.n	8014c32 <iNemoEngine_API_Update+0x4022>
 8014baa:	ed5f 7a5b 	vldr	s15, [pc, #-364]	@ 8014a40 <iNemoEngine_API_Update+0x3e30>
 8014bae:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb6:	d541      	bpl.n	8014c3c <iNemoEngine_API_Update+0x402c>
 8014bb8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014bbc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bc4:	d571      	bpl.n	8014caa <iNemoEngine_API_Update+0x409a>
 8014bc6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8014bca:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd2:	da40      	bge.n	8014c56 <iNemoEngine_API_Update+0x4046>
 8014bd4:	ed1f 7a60 	vldr	s14, [pc, #-384]	@ 8014a58 <iNemoEngine_API_Update+0x3e48>
 8014bd8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014bdc:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8014be0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be8:	db46      	blt.n	8014c78 <iNemoEngine_API_Update+0x4068>
 8014bea:	ed5f 7a67 	vldr	s15, [pc, #-412]	@ 8014a50 <iNemoEngine_API_Update+0x3e40>
 8014bee:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf6:	d546      	bpl.n	8014c86 <iNemoEngine_API_Update+0x4076>
 8014bf8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8014bfc:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8014c00:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8014c04:	ee36 7a47 	vsub.f32	s14, s12, s14
 8014c08:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014c0c:	ed1f 7a6f 	vldr	s14, [pc, #-444]	@ 8014a54 <iNemoEngine_API_Update+0x3e44>
 8014c10:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c18:	db09      	blt.n	8014c2e <iNemoEngine_API_Update+0x401e>
 8014c1a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8014c1e:	ed5f 5a77 	vldr	s11, [pc, #-476]	@ 8014a44 <iNemoEngine_API_Update+0x3e34>
 8014c22:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8014c26:	ee36 7a47 	vsub.f32	s14, s12, s14
 8014c2a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014c2e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014c32:	2300      	movs	r3, #0
 8014c34:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 8014c38:	f7ff b860 	b.w	8013cfc <iNemoEngine_API_Update+0x30ec>
 8014c3c:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 8014c40:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014c44:	e7f5      	b.n	8014c32 <iNemoEngine_API_Update+0x4022>
 8014c46:	eef0 7a47 	vmov.f32	s15, s14
 8014c4a:	f7fe b8c5 	b.w	8012dd8 <iNemoEngine_API_Update+0x21c8>
 8014c4e:	eef0 7a47 	vmov.f32	s15, s14
 8014c52:	f7fd ba80 	b.w	8012156 <iNemoEngine_API_Update+0x1546>
 8014c56:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 8014c5a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c62:	d5c2      	bpl.n	8014bea <iNemoEngine_API_Update+0x3fda>
 8014c64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014c68:	ed5f 5a89 	vldr	s11, [pc, #-548]	@ 8014a48 <iNemoEngine_API_Update+0x3e38>
 8014c6c:	ed5f 7a89 	vldr	s15, [pc, #-548]	@ 8014a4c <iNemoEngine_API_Update+0x3e3c>
 8014c70:	ee36 7a47 	vsub.f32	s14, s12, s14
 8014c74:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014c78:	ed1f 7a8b 	vldr	s14, [pc, #-556]	@ 8014a50 <iNemoEngine_API_Update+0x3e40>
 8014c7c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c84:	dbc2      	blt.n	8014c0c <iNemoEngine_API_Update+0x3ffc>
 8014c86:	ed5f 7a8d 	vldr	s15, [pc, #-564]	@ 8014a54 <iNemoEngine_API_Update+0x3e44>
 8014c8a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c92:	d5c2      	bpl.n	8014c1a <iNemoEngine_API_Update+0x400a>
 8014c94:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8014c98:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8014c9c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8014ca0:	ee36 7a47 	vsub.f32	s14, s12, s14
 8014ca4:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014ca8:	e7c1      	b.n	8014c2e <iNemoEngine_API_Update+0x401e>
 8014caa:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8014cae:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cb6:	d5ce      	bpl.n	8014c56 <iNemoEngine_API_Update+0x4046>
 8014cb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014cbc:	ed5f 5a9a 	vldr	s11, [pc, #-616]	@ 8014a58 <iNemoEngine_API_Update+0x3e48>
 8014cc0:	ed5f 7a9a 	vldr	s15, [pc, #-616]	@ 8014a5c <iNemoEngine_API_Update+0x3e4c>
 8014cc4:	ee36 7a47 	vsub.f32	s14, s12, s14
 8014cc8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014ccc:	e786      	b.n	8014bdc <iNemoEngine_API_Update+0x3fcc>
 8014cce:	eef0 7a47 	vmov.f32	s15, s14
 8014cd2:	e5bc      	b.n	801484e <iNemoEngine_API_Update+0x3c3e>
 8014cd4:	eef0 7a47 	vmov.f32	s15, s14
 8014cd8:	f7fe b8de 	b.w	8012e98 <iNemoEngine_API_Update+0x2288>
 8014cdc:	9b02      	ldr	r3, [sp, #8]
 8014cde:	f7fe b936 	b.w	8012f4e <iNemoEngine_API_Update+0x233e>
 8014ce2:	2a00      	cmp	r2, #0
 8014ce4:	f73d af21 	bgt.w	8012b2a <iNemoEngine_API_Update+0x1f1a>
 8014ce8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8014cec:	eddd 7a91 	vldr	s15, [sp, #580]	@ 0x244
 8014cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cf4:	edcd 7a91 	vstr	s15, [sp, #580]	@ 0x244
 8014cf8:	eddd 7a92 	vldr	s15, [sp, #584]	@ 0x248
 8014cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d00:	edcd 7a92 	vstr	s15, [sp, #584]	@ 0x248
 8014d04:	eddd 7a93 	vldr	s15, [sp, #588]	@ 0x24c
 8014d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d0c:	edcd 7a93 	vstr	s15, [sp, #588]	@ 0x24c
 8014d10:	f7fd bd9a 	b.w	8012848 <iNemoEngine_API_Update+0x1c38>
 8014d14:	eef0 7a47 	vmov.f32	s15, s14
 8014d18:	e5b9      	b.n	801488e <iNemoEngine_API_Update+0x3c7e>
 8014d1a:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8014d1e:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8014d22:	3301      	adds	r3, #1
 8014d24:	f88d 2118 	strb.w	r2, [sp, #280]	@ 0x118
 8014d28:	edcd faa3 	vstr	s31, [sp, #652]	@ 0x28c
 8014d2c:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8014d30:	f240 1301 	movw	r3, #257	@ 0x101
 8014d34:	ed8d faa4 	vstr	s30, [sp, #656]	@ 0x290
 8014d38:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8014d3c:	787b      	ldrb	r3, [r7, #1]
 8014d3e:	edcd 7aa5 	vstr	s15, [sp, #660]	@ 0x294
 8014d42:	b13b      	cbz	r3, 8014d54 <iNemoEngine_API_Update+0x4144>
 8014d44:	2300      	movs	r3, #0
 8014d46:	edc7 fa6f 	vstr	s31, [r7, #444]	@ 0x1bc
 8014d4a:	ed87 fa70 	vstr	s30, [r7, #448]	@ 0x1c0
 8014d4e:	edc7 7a71 	vstr	s15, [r7, #452]	@ 0x1c4
 8014d52:	707b      	strb	r3, [r7, #1]
 8014d54:	ed5f 7abe 	vldr	s15, [pc, #-760]	@ 8014a60 <iNemoEngine_API_Update+0x3e50>
 8014d58:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d60:	db0c      	blt.n	8014d7c <iNemoEngine_API_Update+0x416c>
 8014d62:	2300      	movs	r3, #0
 8014d64:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8014d68:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8014d6c:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8014d70:	f7fd befb 	b.w	8012b6a <iNemoEngine_API_Update+0x1f5a>
 8014d74:	eef0 7a47 	vmov.f32	s15, s14
 8014d78:	f7fe b84e 	b.w	8012e18 <iNemoEngine_API_Update+0x2208>
 8014d7c:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8014d80:	2b31      	cmp	r3, #49	@ 0x31
 8014d82:	f63d aef2 	bhi.w	8012b6a <iNemoEngine_API_Update+0x1f5a>
 8014d86:	3301      	adds	r3, #1
 8014d88:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 8014d92:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8014d96:	f7fd bee8 	b.w	8012b6a <iNemoEngine_API_Update+0x1f5a>
 8014d9a:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 8014d9e:	f7fe bbc8 	b.w	8013532 <iNemoEngine_API_Update+0x2922>
 8014da2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8014da6:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8014daa:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8014dae:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8014db2:	f7fe bfa3 	b.w	8013cfc <iNemoEngine_API_Update+0x30ec>
 8014db6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014dba:	f7ff baca 	b.w	8014352 <iNemoEngine_API_Update+0x3742>
 8014dbe:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8014dc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8014dc4:	f7fc ba29 	b.w	801121a <iNemoEngine_API_Update+0x60a>
 8014dc8:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 8014dcc:	f7fe bc9e 	b.w	801370c <iNemoEngine_API_Update+0x2afc>
 8014dd0:	ed5f 5adc 	vldr	s11, [pc, #-880]	@ 8014a64 <iNemoEngine_API_Update+0x3e54>
 8014dd4:	ac4d      	add	r4, sp, #308	@ 0x134
 8014dd6:	ed1f 6adc 	vldr	s12, [pc, #-880]	@ 8014a68 <iNemoEngine_API_Update+0x3e58>
 8014dda:	f04f 31ff 	mov.w	r1, #4294967295
 8014dde:	edd0 7a7c 	vldr	s15, [r0, #496]	@ 0x1f0
 8014de2:	f5a0 73ae 	sub.w	r3, r0, #348	@ 0x15c
 8014de6:	3101      	adds	r1, #1
 8014de8:	eef0 6a67 	vmov.f32	s13, s15
 8014dec:	461a      	mov	r2, r3
 8014dee:	ed92 4ad6 	vldr	s8, [r2, #856]	@ 0x358
 8014df2:	320c      	adds	r2, #12
 8014df4:	4290      	cmp	r0, r2
 8014df6:	ee76 6a84 	vadd.f32	s13, s13, s8
 8014dfa:	d1f8      	bne.n	8014dee <iNemoEngine_API_Update+0x41de>
 8014dfc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014e00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014e04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014e08:	ed93 4ad6 	vldr	s8, [r3, #856]	@ 0x358
 8014e0c:	330c      	adds	r3, #12
 8014e0e:	ee34 4a66 	vsub.f32	s8, s8, s13
 8014e12:	4298      	cmp	r0, r3
 8014e14:	eee4 7a04 	vfma.f32	s15, s8, s8
 8014e18:	d1f6      	bne.n	8014e08 <iNemoEngine_API_Update+0x41f8>
 8014e1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014e1e:	2902      	cmp	r1, #2
 8014e20:	f100 0004 	add.w	r0, r0, #4
 8014e24:	ece4 7a01 	vstmia	r4!, {s15}
 8014e28:	d1d9      	bne.n	8014dde <iNemoEngine_API_Update+0x41ce>
 8014e2a:	ed9d 6a4d 	vldr	s12, [sp, #308]	@ 0x134
 8014e2e:	eef3 5a00 	vmov.f32	s11, #48	@ 0x41800000  16.0
 8014e32:	eddd 7a4e 	vldr	s15, [sp, #312]	@ 0x138
 8014e36:	eddd 6a4f 	vldr	s13, [sp, #316]	@ 0x13c
 8014e3a:	eeb1 3ac6 	vsqrt.f32	s6, s12
 8014e3e:	eef1 3ae7 	vsqrt.f32	s7, s15
 8014e42:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8014e46:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014e4a:	ed8d 3a4d 	vstr	s6, [sp, #308]	@ 0x134
 8014e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014e52:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014e56:	edcd 3a4e 	vstr	s7, [sp, #312]	@ 0x138
 8014e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e5e:	ed8d 4a4f 	vstr	s8, [sp, #316]	@ 0x13c
 8014e62:	f57e afa9 	bpl.w	8013db8 <iNemoEngine_API_Update+0x31a8>
 8014e66:	2300      	movs	r3, #0
 8014e68:	edcd 4aa3 	vstr	s9, [sp, #652]	@ 0x28c
 8014e6c:	ed8d 5aa4 	vstr	s10, [sp, #656]	@ 0x290
 8014e70:	ed8d 7aa5 	vstr	s14, [sp, #660]	@ 0x294
 8014e74:	707b      	strb	r3, [r7, #1]
 8014e76:	9b02      	ldr	r3, [sp, #8]
 8014e78:	930e      	str	r3, [sp, #56]	@ 0x38
 8014e7a:	f7fd bd23 	b.w	80128c4 <iNemoEngine_API_Update+0x1cb4>
 8014e7e:	eef0 7a47 	vmov.f32	s15, s14
 8014e82:	f7fd b9a7 	b.w	80121d4 <iNemoEngine_API_Update+0x15c4>
 8014e86:	eef0 7a47 	vmov.f32	s15, s14
 8014e8a:	e540      	b.n	801490e <iNemoEngine_API_Update+0x3cfe>
 8014e8c:	eef0 5a47 	vmov.f32	s11, s14
 8014e90:	4619      	mov	r1, r3
 8014e92:	eeb0 6a67 	vmov.f32	s12, s15
 8014e96:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8014e9a:	eeb0 7a66 	vmov.f32	s14, s13
 8014e9e:	edd0 7a00 	vldr	s15, [r0]
 8014ea2:	eef0 6a65 	vmov.f32	s13, s11
 8014ea6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
 8014eaa:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8014eae:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8014eb2:	f7ff bb53 	b.w	801455c <iNemoEngine_API_Update+0x394c>
 8014eb6:	2306      	movs	r3, #6
 8014eb8:	2608      	movs	r6, #8
 8014eba:	2204      	movs	r2, #4
 8014ebc:	2402      	movs	r4, #2
 8014ebe:	9305      	str	r3, [sp, #20]
 8014ec0:	2303      	movs	r3, #3
 8014ec2:	f04f 0e07 	mov.w	lr, #7
 8014ec6:	2105      	movs	r1, #5
 8014ec8:	9304      	str	r3, [sp, #16]
 8014eca:	4630      	mov	r0, r6
 8014ecc:	4692      	mov	sl, r2
 8014ece:	2300      	movs	r3, #0
 8014ed0:	f04f 0c01 	mov.w	ip, #1
 8014ed4:	9403      	str	r4, [sp, #12]
 8014ed6:	f7ff bad8 	b.w	801448a <iNemoEngine_API_Update+0x387a>
 8014eda:	2104      	movs	r1, #4
 8014edc:	2301      	movs	r3, #1
 8014ede:	2607      	movs	r6, #7
 8014ee0:	f04f 0e06 	mov.w	lr, #6
 8014ee4:	2203      	movs	r2, #3
 8014ee6:	4608      	mov	r0, r1
 8014ee8:	f04f 0c00 	mov.w	ip, #0
 8014eec:	9303      	str	r3, [sp, #12]
 8014eee:	f7ff babd 	b.w	801446c <iNemoEngine_API_Update+0x385c>
 8014ef2:	eef0 7a47 	vmov.f32	s15, s14
 8014ef6:	e4ea      	b.n	80148ce <iNemoEngine_API_Update+0x3cbe>
 8014ef8:	eef0 7a47 	vmov.f32	s15, s14
 8014efc:	f7fd bfac 	b.w	8012e58 <iNemoEngine_API_Update+0x2248>
 8014f00:	eef0 7a47 	vmov.f32	s15, s14
 8014f04:	f7fd b947 	b.w	8012196 <iNemoEngine_API_Update+0x1586>
 8014f08:	eef0 7a47 	vmov.f32	s15, s14
 8014f0c:	e62e      	b.n	8014b6c <iNemoEngine_API_Update+0x3f5c>
 8014f0e:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8014f12:	2b27      	cmp	r3, #39	@ 0x27
 8014f14:	d805      	bhi.n	8014f22 <iNemoEngine_API_Update+0x4312>
 8014f16:	eef0 fa64 	vmov.f32	s31, s9
 8014f1a:	ed8d 7a0f 	vstr	s14, [sp, #60]	@ 0x3c
 8014f1e:	eeb0 fa45 	vmov.f32	s30, s10
 8014f22:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8014f26:	2201      	movs	r2, #1
 8014f28:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	edcd faa3 	vstr	s31, [sp, #652]	@ 0x28c
 8014f32:	ed8d faa4 	vstr	s30, [sp, #656]	@ 0x290
 8014f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f3a:	edcd 7aa5 	vstr	s15, [sp, #660]	@ 0x294
 8014f3e:	f887 21a3 	strb.w	r2, [r7, #419]	@ 0x1a3
 8014f42:	bf14      	ite	ne
 8014f44:	b29b      	uxthne	r3, r3
 8014f46:	f64f 73ff 	movweq	r3, #65535	@ 0xffff
 8014f4a:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8
 8014f4e:	e792      	b.n	8014e76 <iNemoEngine_API_Update+0x4266>
 8014f50:	eef0 7a47 	vmov.f32	s15, s14
 8014f54:	e5aa      	b.n	8014aac <iNemoEngine_API_Update+0x3e9c>
 8014f56:	eef0 7a47 	vmov.f32	s15, s14
 8014f5a:	f7fd b8bc 	b.w	80120d6 <iNemoEngine_API_Update+0x14c6>
 8014f5e:	eef0 7a47 	vmov.f32	s15, s14
 8014f62:	e5e3      	b.n	8014b2c <iNemoEngine_API_Update+0x3f1c>
 8014f64:	eef0 7a47 	vmov.f32	s15, s14
 8014f68:	f7fd bf16 	b.w	8012d98 <iNemoEngine_API_Update+0x2188>
 8014f6c:	eef0 7a47 	vmov.f32	s15, s14
 8014f70:	e5bc      	b.n	8014aec <iNemoEngine_API_Update+0x3edc>
 8014f72:	eef0 7a47 	vmov.f32	s15, s14
 8014f76:	f7fd b8ce 	b.w	8012116 <iNemoEngine_API_Update+0x1506>
 8014f7a:	eddf 9a02 	vldr	s19, [pc, #8]	@ 8014f84 <iNemoEngine_API_Update+0x4374>
 8014f7e:	f7fb bf97 	b.w	8010eb0 <iNemoEngine_API_Update+0x2a0>
 8014f82:	bf00      	nop
 8014f84:	00000000 	.word	0x00000000

08014f88 <MEMS_runMagCal.constprop.0>:
 8014f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f8c:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 8015054 <MEMS_runMagCal.constprop.0+0xcc>
 8014f90:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8014f94:	ed2d 8b10 	vpush	{d8-d15}
 8014f98:	2a82      	cmp	r2, #130	@ 0x82
 8014f9a:	f2ad 5d64 	subw	sp, sp, #1380	@ 0x564
 8014f9e:	f102 35ff 	add.w	r5, r2, #4294967295
 8014fa2:	9201      	str	r2, [sp, #4]
 8014fa4:	d948      	bls.n	8015038 <MEMS_runMagCal.constprop.0+0xb0>
 8014fa6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014faa:	f102 007e 	add.w	r0, r2, #126	@ 0x7e
 8014fae:	f8db 300c 	ldr.w	r3, [fp, #12]
 8014fb2:	b2c0      	uxtb	r0, r0
 8014fb4:	9108      	str	r1, [sp, #32]
 8014fb6:	fb05 3311 	mls	r3, r5, r1, r3
 8014fba:	2581      	movs	r5, #129	@ 0x81
 8014fbc:	9303      	str	r3, [sp, #12]
 8014fbe:	2382      	movs	r3, #130	@ 0x82
 8014fc0:	fb01 f505 	mul.w	r5, r1, r5
 8014fc4:	461c      	mov	r4, r3
 8014fc6:	9301      	str	r3, [sp, #4]
 8014fc8:	f8db 6010 	ldr.w	r6, [fp, #16]
 8014fcc:	2300      	movs	r3, #0
 8014fce:	f50d 7aa8 	add.w	sl, sp, #336	@ 0x150
 8014fd2:	f816 c033 	ldrb.w	ip, [r6, r3, lsl #3]
 8014fd6:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8014fda:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 8014fde:	f80a c033 	strb.w	ip, [sl, r3, lsl #3]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	f8d7 c002 	ldr.w	ip, [r7, #2]
 8014fe8:	b2db      	uxtb	r3, r3
 8014fea:	88ff      	ldrh	r7, [r7, #6]
 8014fec:	f8c1 c002 	str.w	ip, [r1, #2]
 8014ff0:	42a3      	cmp	r3, r4
 8014ff2:	80cf      	strh	r7, [r1, #6]
 8014ff4:	d3ed      	bcc.n	8014fd2 <MEMS_runMagCal.constprop.0+0x4a>
 8014ff6:	2a82      	cmp	r2, #130	@ 0x82
 8014ff8:	bf38      	it	cc
 8014ffa:	2282      	movcc	r2, #130	@ 0x82
 8014ffc:	3a82      	subs	r2, #130	@ 0x82
 8014ffe:	f8ab 2008 	strh.w	r2, [fp, #8]
 8015002:	b1b0      	cbz	r0, 8015032 <MEMS_runMagCal.constprop.0+0xaa>
 8015004:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015008:	2700      	movs	r7, #0
 801500a:	3302      	adds	r3, #2
 801500c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8015010:	f893 640e 	ldrb.w	r6, [r3, #1038]	@ 0x40e
 8015014:	3308      	adds	r3, #8
 8015016:	f8d3 1408 	ldr.w	r1, [r3, #1032]	@ 0x408
 801501a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 801501e:	f883 7406 	strb.w	r7, [r3, #1030]	@ 0x406
 8015022:	f803 6c0a 	strb.w	r6, [r3, #-10]
 8015026:	f843 1c08 	str.w	r1, [r3, #-8]
 801502a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801502e:	4298      	cmp	r0, r3
 8015030:	d1ee      	bne.n	8015010 <MEMS_runMagCal.constprop.0+0x88>
 8015032:	4622      	mov	r2, r4
 8015034:	9b03      	ldr	r3, [sp, #12]
 8015036:	e011      	b.n	801505c <MEMS_runMagCal.constprop.0+0xd4>
 8015038:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 801503c:	fb03 f505 	mul.w	r5, r3, r5
 8015040:	9308      	str	r3, [sp, #32]
 8015042:	f8db 300c 	ldr.w	r3, [fp, #12]
 8015046:	1b5b      	subs	r3, r3, r5
 8015048:	9303      	str	r3, [sp, #12]
 801504a:	b12a      	cbz	r2, 8015058 <MEMS_runMagCal.constprop.0+0xd0>
 801504c:	4614      	mov	r4, r2
 801504e:	2000      	movs	r0, #0
 8015050:	e7ba      	b.n	8014fc8 <MEMS_runMagCal.constprop.0+0x40>
 8015052:	bf00      	nop
 8015054:	24000348 	.word	0x24000348
 8015058:	f8ab 2008 	strh.w	r2, [fp, #8]
 801505c:	18eb      	adds	r3, r5, r3
 801505e:	9302      	str	r3, [sp, #8]
 8015060:	f8cb 304c 	str.w	r3, [fp, #76]	@ 0x4c
 8015064:	2a00      	cmp	r2, #0
 8015066:	f000 83f0 	beq.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 801506a:	48e7      	ldr	r0, [pc, #924]	@ (8015408 <MEMS_runMagCal.constprop.0+0x480>)
 801506c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015070:	4418      	add	r0, r3
 8015072:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015076:	fb03 f101 	mul.w	r1, r3, r1
 801507a:	4288      	cmp	r0, r1
 801507c:	f0c0 83f0 	bcc.w	8015860 <MEMS_runMagCal.constprop.0+0x8d8>
 8015080:	f8db 10a4 	ldr.w	r1, [fp, #164]	@ 0xa4
 8015084:	4288      	cmp	r0, r1
 8015086:	f0c0 83eb 	bcc.w	8015860 <MEMS_runMagCal.constprop.0+0x8d8>
 801508a:	f89b 30a0 	ldrb.w	r3, [fp, #160]	@ 0xa0
 801508e:	2b00      	cmp	r3, #0
 8015090:	f000 83f0 	beq.w	8015874 <MEMS_runMagCal.constprop.0+0x8ec>
 8015094:	f04f 2380 	mov.w	r3, #2147516416	@ 0x80008000
 8015098:	1e54      	subs	r4, r2, #1
 801509a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801509e:	ed9f 7adb 	vldr	s14, [pc, #876]	@ 801540c <MEMS_runMagCal.constprop.0+0x484>
 80150a2:	9334      	str	r3, [sp, #208]	@ 0xd0
 80150a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80150a8:	b2a4      	uxth	r4, r4
 80150aa:	ed9b 8a01 	vldr	s16, [fp, #4]
 80150ae:	f8ad 30d4 	strh.w	r3, [sp, #212]	@ 0xd4
 80150b2:	f06f 2380 	mvn.w	r3, #2147516416	@ 0x80008000
 80150b6:	2c03      	cmp	r4, #3
 80150b8:	f50d 7aa8 	add.w	sl, sp, #336	@ 0x150
 80150bc:	f04f 0100 	mov.w	r1, #0
 80150c0:	9344      	str	r3, [sp, #272]	@ 0x110
 80150c2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80150c6:	eec7 8a88 	vdiv.f32	s17, s15, s16
 80150ca:	eddb 5a1f 	vldr	s11, [fp, #124]	@ 0x7c
 80150ce:	bf28      	it	cs
 80150d0:	2403      	movcs	r4, #3
 80150d2:	f8ad 3114 	strh.w	r3, [sp, #276]	@ 0x114
 80150d6:	4650      	mov	r0, sl
 80150d8:	ed9b 5a1c 	vldr	s10, [fp, #112]	@ 0x70
 80150dc:	460b      	mov	r3, r1
 80150de:	eddb 4a23 	vldr	s9, [fp, #140]	@ 0x8c
 80150e2:	eef0 7a47 	vmov.f32	s15, s14
 80150e6:	ed9b 4a1d 	vldr	s8, [fp, #116]	@ 0x74
 80150ea:	eddb 3a27 	vldr	s7, [fp, #156]	@ 0x9c
 80150ee:	ed9b 3a1e 	vldr	s6, [fp, #120]	@ 0x78
 80150f2:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 80150f6:	3301      	adds	r3, #1
 80150f8:	7805      	ldrb	r5, [r0, #0]
 80150fa:	1c4e      	adds	r6, r1, #1
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	2d00      	cmp	r5, #0
 8015100:	d050      	beq.n	80151a4 <MEMS_runMagCal.constprop.0+0x21c>
 8015102:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015106:	b271      	sxtb	r1, r6
 8015108:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 801510c:	ee07 ca10 	vmov	s14, ip
 8015110:	f9bd 50d0 	ldrsh.w	r5, [sp, #208]	@ 0xd0
 8015114:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 8015118:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801511c:	ee07 7a10 	vmov	s14, r7
 8015120:	4565      	cmp	r5, ip
 8015122:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015126:	bfb8      	it	lt
 8015128:	4665      	movlt	r5, ip
 801512a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801512e:	ee37 7a44 	vsub.f32	s14, s14, s8
 8015132:	f8ad 50d0 	strh.w	r5, [sp, #208]	@ 0xd0
 8015136:	f9bd 5110 	ldrsh.w	r5, [sp, #272]	@ 0x110
 801513a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801513e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015142:	4565      	cmp	r5, ip
 8015144:	bfa8      	it	ge
 8015146:	4665      	movge	r5, ip
 8015148:	ee27 7a07 	vmul.f32	s14, s14, s14
 801514c:	f8ad 5110 	strh.w	r5, [sp, #272]	@ 0x110
 8015150:	f9bd 50d2 	ldrsh.w	r5, [sp, #210]	@ 0xd2
 8015154:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8015158:	42bd      	cmp	r5, r7
 801515a:	bfb8      	it	lt
 801515c:	463d      	movlt	r5, r7
 801515e:	f8ad 50d2 	strh.w	r5, [sp, #210]	@ 0xd2
 8015162:	f9bd 5112 	ldrsh.w	r5, [sp, #274]	@ 0x112
 8015166:	ee77 7a87 	vadd.f32	s15, s15, s14
 801516a:	ee07 6a10 	vmov	s14, r6
 801516e:	42bd      	cmp	r5, r7
 8015170:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015174:	bfa8      	it	ge
 8015176:	463d      	movge	r5, r7
 8015178:	ee37 7a43 	vsub.f32	s14, s14, s6
 801517c:	f8ad 5112 	strh.w	r5, [sp, #274]	@ 0x112
 8015180:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	@ 0xd4
 8015184:	42b5      	cmp	r5, r6
 8015186:	ee27 7a23 	vmul.f32	s14, s14, s7
 801518a:	bfb8      	it	lt
 801518c:	4635      	movlt	r5, r6
 801518e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015192:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
 8015196:	f9bd 5114 	ldrsh.w	r5, [sp, #276]	@ 0x114
 801519a:	42b5      	cmp	r5, r6
 801519c:	bfa8      	it	ge
 801519e:	4635      	movge	r5, r6
 80151a0:	f8ad 5114 	strh.w	r5, [sp, #276]	@ 0x114
 80151a4:	42a3      	cmp	r3, r4
 80151a6:	f100 0008 	add.w	r0, r0, #8
 80151aa:	d9a4      	bls.n	80150f6 <MEMS_runMagCal.constprop.0+0x16e>
 80151ac:	4293      	cmp	r3, r2
 80151ae:	f080 86e5 	bcs.w	8015f7c <MEMS_runMagCal.constprop.0+0xff4>
 80151b2:	1ad2      	subs	r2, r2, r3
 80151b4:	f10a 0708 	add.w	r7, sl, #8
 80151b8:	f04f 0c00 	mov.w	ip, #0
 80151bc:	3a01      	subs	r2, #1
 80151be:	fa13 f282 	uxtah	r2, r3, r2
 80151c2:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 80151c6:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
 80151ca:	781a      	ldrb	r2, [r3, #0]
 80151cc:	1c4e      	adds	r6, r1, #1
 80151ce:	2a00      	cmp	r2, #0
 80151d0:	f000 808c 	beq.w	80152ec <MEMS_runMagCal.constprop.0+0x364>
 80151d4:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80151d8:	b271      	sxtb	r1, r6
 80151da:	f9bd 50d0 	ldrsh.w	r5, [sp, #208]	@ 0xd0
 80151de:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80151e2:	ee06 0a90 	vmov	s13, r0
 80151e6:	4285      	cmp	r5, r0
 80151e8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80151ec:	ee07 4a10 	vmov	s14, r4
 80151f0:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80151f4:	bfb8      	it	lt
 80151f6:	4605      	movlt	r5, r0
 80151f8:	f933 6c14 	ldrsh.w	r6, [r3, #-20]
 80151fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015200:	ee06 2a90 	vmov	s13, r2
 8015204:	f8ad 50d0 	strh.w	r5, [sp, #208]	@ 0xd0
 8015208:	ee36 6a45 	vsub.f32	s12, s12, s10
 801520c:	f9bd 5110 	ldrsh.w	r5, [sp, #272]	@ 0x110
 8015210:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015214:	ee37 7a44 	vsub.f32	s14, s14, s8
 8015218:	4285      	cmp	r5, r0
 801521a:	ee26 6a25 	vmul.f32	s12, s12, s11
 801521e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8015222:	bfa8      	it	ge
 8015224:	4605      	movge	r5, r0
 8015226:	ee27 7a24 	vmul.f32	s14, s14, s9
 801522a:	f8ad 5110 	strh.w	r5, [sp, #272]	@ 0x110
 801522e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8015232:	f9bd 50d2 	ldrsh.w	r5, [sp, #210]	@ 0xd2
 8015236:	ee27 7a07 	vmul.f32	s14, s14, s14
 801523a:	42a5      	cmp	r5, r4
 801523c:	eea6 7a06 	vfma.f32	s14, s12, s12
 8015240:	bfb8      	it	lt
 8015242:	4625      	movlt	r5, r4
 8015244:	f8ad 50d2 	strh.w	r5, [sp, #210]	@ 0xd2
 8015248:	f9bd 5112 	ldrsh.w	r5, [sp, #274]	@ 0x112
 801524c:	42a5      	cmp	r5, r4
 801524e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015252:	bfa8      	it	ge
 8015254:	4625      	movge	r5, r4
 8015256:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801525a:	f8ad 5112 	strh.w	r5, [sp, #274]	@ 0x112
 801525e:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	@ 0xd4
 8015262:	4295      	cmp	r5, r2
 8015264:	bfb8      	it	lt
 8015266:	4615      	movlt	r5, r2
 8015268:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
 801526c:	f9bd 5114 	ldrsh.w	r5, [sp, #276]	@ 0x114
 8015270:	4295      	cmp	r5, r2
 8015272:	bfa8      	it	ge
 8015274:	4615      	movge	r5, r2
 8015276:	f8ad 5114 	strh.w	r5, [sp, #276]	@ 0x114
 801527a:	f933 5c04 	ldrsh.w	r5, [r3, #-4]
 801527e:	1bad      	subs	r5, r5, r6
 8015280:	f933 6c1c 	ldrsh.w	r6, [r3, #-28]
 8015284:	1ba4      	subs	r4, r4, r6
 8015286:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 801528a:	f933 5c06 	ldrsh.w	r5, [r3, #-6]
 801528e:	ee07 4a10 	vmov	s14, r4
 8015292:	f933 4c16 	ldrsh.w	r4, [r3, #-22]
 8015296:	1b2d      	subs	r5, r5, r4
 8015298:	f933 4c1e 	ldrsh.w	r4, [r3, #-30]
 801529c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152a0:	1b00      	subs	r0, r0, r4
 80152a2:	f933 4c02 	ldrsh.w	r4, [r3, #-2]
 80152a6:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80152aa:	f933 5c1a 	ldrsh.w	r5, [r3, #-26]
 80152ae:	eeb0 7ac7 	vabs.f32	s14, s14
 80152b2:	ee06 0a10 	vmov	s12, r0
 80152b6:	f933 0c12 	ldrsh.w	r0, [r3, #-18]
 80152ba:	1b52      	subs	r2, r2, r5
 80152bc:	1a20      	subs	r0, r4, r0
 80152be:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80152c2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80152c6:	eeb0 6ac6 	vabs.f32	s12, s12
 80152ca:	ee06 2a90 	vmov	s13, r2
 80152ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80152d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80152d6:	eef0 6ae6 	vabs.f32	s13, s13
 80152da:	ee37 7a26 	vadd.f32	s14, s14, s13
 80152de:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80152e2:	ee17 2a10 	vmov	r2, s14
 80152e6:	4594      	cmp	ip, r2
 80152e8:	bf38      	it	cc
 80152ea:	4694      	movcc	ip, r2
 80152ec:	3308      	adds	r3, #8
 80152ee:	429f      	cmp	r7, r3
 80152f0:	f47f af6b 	bne.w	80151ca <MEMS_runMagCal.constprop.0+0x242>
 80152f4:	2900      	cmp	r1, #0
 80152f6:	f000 82af 	beq.w	8015858 <MEMS_runMagCal.constprop.0+0x8d0>
 80152fa:	f9bd 20d0 	ldrsh.w	r2, [sp, #208]	@ 0xd0
 80152fe:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8015302:	f280 82a8 	bge.w	8015856 <MEMS_runMagCal.constprop.0+0x8ce>
 8015306:	f9bd 4110 	ldrsh.w	r4, [sp, #272]	@ 0x110
 801530a:	f514 4f80 	cmn.w	r4, #16384	@ 0x4000
 801530e:	f2c0 82a2 	blt.w	8015856 <MEMS_runMagCal.constprop.0+0x8ce>
 8015312:	f9bd 30d2 	ldrsh.w	r3, [sp, #210]	@ 0xd2
 8015316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801531a:	f280 829c 	bge.w	8015856 <MEMS_runMagCal.constprop.0+0x8ce>
 801531e:	f9bd 7112 	ldrsh.w	r7, [sp, #274]	@ 0x112
 8015322:	f517 4f80 	cmn.w	r7, #16384	@ 0x4000
 8015326:	f2c0 8296 	blt.w	8015856 <MEMS_runMagCal.constprop.0+0x8ce>
 801532a:	f9bd 00d4 	ldrsh.w	r0, [sp, #212]	@ 0xd4
 801532e:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8015332:	f280 8290 	bge.w	8015856 <MEMS_runMagCal.constprop.0+0x8ce>
 8015336:	f9bd 5114 	ldrsh.w	r5, [sp, #276]	@ 0x114
 801533a:	f515 4f80 	cmn.w	r5, #16384	@ 0x4000
 801533e:	f2c0 828a 	blt.w	8015856 <MEMS_runMagCal.constprop.0+0x8ce>
 8015342:	ee07 1a10 	vmov	s14, r1
 8015346:	1b12      	subs	r2, r2, r4
 8015348:	1bd9      	subs	r1, r3, r7
 801534a:	1b40      	subs	r0, r0, r5
 801534c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8015350:	4613      	mov	r3, r2
 8015352:	428a      	cmp	r2, r1
 8015354:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8015410 <MEMS_runMagCal.constprop.0+0x488>
 8015358:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801535c:	bfb8      	it	lt
 801535e:	460b      	movlt	r3, r1
 8015360:	4283      	cmp	r3, r0
 8015362:	bfb8      	it	lt
 8015364:	4603      	movlt	r3, r0
 8015366:	ee28 7a87 	vmul.f32	s14, s17, s14
 801536a:	eef1 7ae6 	vsqrt.f32	s15, s13
 801536e:	ee06 3a90 	vmov	s13, r3
 8015372:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015376:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801537a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015382:	f100 8268 	bmi.w	8015856 <MEMS_runMagCal.constprop.0+0x8ce>
 8015386:	ee07 ca10 	vmov	s14, ip
 801538a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8015414 <MEMS_runMagCal.constprop.0+0x48c>
 801538e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015392:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015396:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801539e:	f300 825a 	bgt.w	8015856 <MEMS_runMagCal.constprop.0+0x8ce>
 80153a2:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 80153a6:	ee28 6a86 	vmul.f32	s12, s17, s12
 80153aa:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80153ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153b2:	f300 85e7 	bgt.w	8015f84 <MEMS_runMagCal.constprop.0+0xffc>
 80153b6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80153ba:	ee26 7a07 	vmul.f32	s14, s12, s14
 80153be:	eef4 6ac7 	vcmpe.f32	s13, s14
 80153c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c6:	f300 85ee 	bgt.w	8015fa6 <MEMS_runMagCal.constprop.0+0x101e>
 80153ca:	2300      	movs	r3, #0
 80153cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80153ce:	9307      	str	r3, [sp, #28]
 80153d0:	2100      	movs	r1, #0
 80153d2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8015418 <MEMS_runMagCal.constprop.0+0x490>
 80153d6:	f89b 206c 	ldrb.w	r2, [fp, #108]	@ 0x6c
 80153da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80153de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e2:	f140 8252 	bpl.w	801588a <MEMS_runMagCal.constprop.0+0x902>
 80153e6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801541c <MEMS_runMagCal.constprop.0+0x494>
 80153ea:	2a01      	cmp	r2, #1
 80153ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80153f0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80153f4:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 80153f8:	ee17 3a10 	vmov	r3, s14
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	d91f      	bls.n	8015440 <MEMS_runMagCal.constprop.0+0x4b8>
 8015400:	2bc7      	cmp	r3, #199	@ 0xc7
 8015402:	f200 8569 	bhi.w	8015ed8 <MEMS_runMagCal.constprop.0+0xf50>
 8015406:	e011      	b.n	801542c <MEMS_runMagCal.constprop.0+0x4a4>
 8015408:	000186a0 	.word	0x000186a0
 801540c:	00000000 	.word	0x00000000
 8015410:	43020000 	.word	0x43020000
 8015414:	447a0000 	.word	0x447a0000
 8015418:	4423d666 	.word	0x4423d666
 801541c:	42c80000 	.word	0x42c80000
 8015420:	427c0000 	.word	0x427c0000
 8015424:	3f666666 	.word	0x3f666666
 8015428:	3eaaaaab 	.word	0x3eaaaaab
 801542c:	2200      	movs	r2, #0
 801542e:	23ff      	movs	r3, #255	@ 0xff
 8015430:	f88b 206c 	strb.w	r2, [fp, #108]	@ 0x6c
 8015434:	f88b 20a0 	strb.w	r2, [fp, #160]	@ 0xa0
 8015438:	f88b 2054 	strb.w	r2, [fp, #84]	@ 0x54
 801543c:	f88b 30a2 	strb.w	r3, [fp, #162]	@ 0xa2
 8015440:	2900      	cmp	r1, #0
 8015442:	f040 81f9 	bne.w	8015838 <MEMS_runMagCal.constprop.0+0x8b0>
 8015446:	f99b 3026 	ldrsb.w	r3, [fp, #38]	@ 0x26
 801544a:	f89b 1025 	ldrb.w	r1, [fp, #37]	@ 0x25
 801544e:	2b00      	cmp	r3, #0
 8015450:	f2c0 850f 	blt.w	8015e72 <MEMS_runMagCal.constprop.0+0xeea>
 8015454:	3301      	adds	r3, #1
 8015456:	fbb3 f0f1 	udiv	r0, r3, r1
 801545a:	fb01 3310 	mls	r3, r1, r0, r3
 801545e:	b25b      	sxtb	r3, r3
 8015460:	461c      	mov	r4, r3
 8015462:	f88b 3026 	strb.w	r3, [fp, #38]	@ 0x26
 8015466:	fef8 7a67 	vrinta.f32	s15, s15
 801546a:	f89b 3024 	ldrb.w	r3, [fp, #36]	@ 0x24
 801546e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015472:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
 8015476:	3301      	adds	r3, #1
 8015478:	ee17 5a90 	vmov	r5, s15
 801547c:	428b      	cmp	r3, r1
 801547e:	8505      	strh	r5, [r0, #40]	@ 0x28
 8015480:	bfa8      	it	ge
 8015482:	460b      	movge	r3, r1
 8015484:	f8db 0020 	ldr.w	r0, [fp, #32]
 8015488:	b2dd      	uxtb	r5, r3
 801548a:	f88b 5024 	strb.w	r5, [fp, #36]	@ 0x24
 801548e:	b128      	cbz	r0, 801549c <MEMS_runMagCal.constprop.0+0x514>
 8015490:	f500 6796 	add.w	r7, r0, #1200	@ 0x4b0
 8015494:	9e02      	ldr	r6, [sp, #8]
 8015496:	42be      	cmp	r6, r7
 8015498:	f0c0 81d7 	bcc.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 801549c:	9e07      	ldr	r6, [sp, #28]
 801549e:	2e00      	cmp	r6, #0
 80154a0:	f040 81d3 	bne.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 80154a4:	1e97      	subs	r7, r2, #2
 80154a6:	2f01      	cmp	r7, #1
 80154a8:	f240 8525 	bls.w	8015ef6 <MEMS_runMagCal.constprop.0+0xf6e>
 80154ac:	f8db 801c 	ldr.w	r8, [fp, #28]
 80154b0:	f89b 3054 	ldrb.w	r3, [fp, #84]	@ 0x54
 80154b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80154b6:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80154ba:	ed5f 7a27 	vldr	s15, [pc, #-156]	@ 8015420 <MEMS_runMagCal.constprop.0+0x498>
 80154be:	f8db 30a4 	ldr.w	r3, [fp, #164]	@ 0xa4
 80154c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80154c6:	eef7 5a08 	vmov.f32	s11, #120	@ 0x3fc00000  1.5
 80154ca:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 8015424 <MEMS_runMagCal.constprop.0+0x49c>
 80154ce:	ee28 0a80 	vmul.f32	s0, s17, s0
 80154d2:	441a      	add	r2, r3
 80154d4:	f89b 40a0 	ldrb.w	r4, [fp, #160]	@ 0xa0
 80154d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80154dc:	ee20 5a00 	vmul.f32	s10, s0, s0
 80154e0:	ee60 5a25 	vmul.f32	s11, s0, s11
 80154e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80154e8:	ee25 5a07 	vmul.f32	s10, s10, s14
 80154ec:	ee17 1a90 	vmov	r1, s15
 80154f0:	b28f      	uxth	r7, r1
 80154f2:	9902      	ldr	r1, [sp, #8]
 80154f4:	4291      	cmp	r1, r2
 80154f6:	d94d      	bls.n	8015594 <MEMS_runMagCal.constprop.0+0x60c>
 80154f8:	f242 3528 	movw	r5, #9000	@ 0x2328
 80154fc:	f89b 00a1 	ldrb.w	r0, [fp, #161]	@ 0xa1
 8015500:	42a9      	cmp	r1, r5
 8015502:	bf14      	ite	ne
 8015504:	1b4d      	subne	r5, r1, r5
 8015506:	2500      	moveq	r5, #0
 8015508:	f99b 10a2 	ldrsb.w	r1, [fp, #162]	@ 0xa2
 801550c:	42a0      	cmp	r0, r4
 801550e:	f101 0101 	add.w	r1, r1, #1
 8015512:	f000 859c 	beq.w	801604e <MEMS_runMagCal.constprop.0+0x10c6>
 8015516:	1b0a      	subs	r2, r1, r4
 8015518:	fb92 f1f0 	sdiv	r1, r2, r0
 801551c:	fb00 2111 	mls	r1, r0, r1, r2
 8015520:	2900      	cmp	r1, #0
 8015522:	bfb8      	it	lt
 8015524:	1809      	addlt	r1, r1, r0
 8015526:	b209      	sxth	r1, r1
 8015528:	2c00      	cmp	r4, #0
 801552a:	f000 8639 	beq.w	80161a0 <MEMS_runMagCal.constprop.0+0x1218>
 801552e:	1b5b      	subs	r3, r3, r5
 8015530:	eb04 0c01 	add.w	ip, r4, r1
 8015534:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8015538:	b29e      	uxth	r6, r3
 801553a:	e006      	b.n	801554a <MEMS_runMagCal.constprop.0+0x5c2>
 801553c:	3101      	adds	r1, #1
 801553e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8015542:	458c      	cmp	ip, r1
 8015544:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8015548:	d01b      	beq.n	8015582 <MEMS_runMagCal.constprop.0+0x5fa>
 801554a:	fb91 f3f0 	sdiv	r3, r1, r0
 801554e:	fb00 1313 	mls	r3, r0, r3, r1
 8015552:	b2db      	uxtb	r3, r3
 8015554:	3304      	adds	r3, #4
 8015556:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 801555a:	f8b2 20a0 	ldrh.w	r2, [r2, #160]	@ 0xa0
 801555e:	4432      	add	r2, r6
 8015560:	b212      	sxth	r2, r2
 8015562:	2a00      	cmp	r2, #0
 8015564:	daea      	bge.n	801553c <MEMS_runMagCal.constprop.0+0x5b4>
 8015566:	2c00      	cmp	r4, #0
 8015568:	f000 847f 	beq.w	8015e6a <MEMS_runMagCal.constprop.0+0xee2>
 801556c:	3101      	adds	r1, #1
 801556e:	3c01      	subs	r4, #1
 8015570:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8015574:	f04f 0e01 	mov.w	lr, #1
 8015578:	458c      	cmp	ip, r1
 801557a:	b2e4      	uxtb	r4, r4
 801557c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8015580:	d1e3      	bne.n	801554a <MEMS_runMagCal.constprop.0+0x5c2>
 8015582:	f1be 0f01 	cmp.w	lr, #1
 8015586:	f88b 40a0 	strb.w	r4, [fp, #160]	@ 0xa0
 801558a:	f000 859b 	beq.w	80160c4 <MEMS_runMagCal.constprop.0+0x113c>
 801558e:	462b      	mov	r3, r5
 8015590:	f8cb 50a4 	str.w	r5, [fp, #164]	@ 0xa4
 8015594:	2c00      	cmp	r4, #0
 8015596:	f000 8498 	beq.w	8015eca <MEMS_runMagCal.constprop.0+0xf42>
 801559a:	f99b 20a2 	ldrsb.w	r2, [fp, #162]	@ 0xa2
 801559e:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80155a2:	f9b2 10c0 	ldrsh.w	r1, [r2, #192]	@ 0xc0
 80155a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80155aa:	440a      	add	r2, r1
 80155ac:	441a      	add	r2, r3
 80155ae:	9b03      	ldr	r3, [sp, #12]
 80155b0:	429a      	cmp	r2, r3
 80155b2:	f0c0 847e 	bcc.w	8015eb2 <MEMS_runMagCal.constprop.0+0xf2a>
 80155b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80155b8:	b913      	cbnz	r3, 80155c0 <MEMS_runMagCal.constprop.0+0x638>
 80155ba:	2c0a      	cmp	r4, #10
 80155bc:	f240 8489 	bls.w	8015ed2 <MEMS_runMagCal.constprop.0+0xf4a>
 80155c0:	ed5f 6a67 	vldr	s13, [pc, #-412]	@ 8015428 <MEMS_runMagCal.constprop.0+0x4a0>
 80155c4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80155c8:	2300      	movs	r3, #0
 80155ca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80155ce:	ee68 6a26 	vmul.f32	s13, s16, s13
 80155d2:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80155d6:	ee28 6a86 	vmul.f32	s12, s17, s12
 80155da:	9204      	str	r2, [sp, #16]
 80155dc:	461c      	mov	r4, r3
 80155de:	9a07      	ldr	r2, [sp, #28]
 80155e0:	eef0 4a66 	vmov.f32	s9, s13
 80155e4:	461d      	mov	r5, r3
 80155e6:	9300      	str	r3, [sp, #0]
 80155e8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80155ea:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
 80155ee:	eb0a 01c4 	add.w	r1, sl, r4, lsl #3
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	f000 81a3 	beq.w	801593e <MEMS_runMagCal.constprop.0+0x9b6>
 80155f8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80155fc:	f8d1 6002 	ldr.w	r6, [r1, #2]
 8015600:	ee07 3a90 	vmov	s15, r3
 8015604:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8015608:	6849      	ldr	r1, [r1, #4]
 801560a:	f346 4c0f 	sbfx	ip, r6, #16, #16
 801560e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015612:	910c      	str	r1, [sp, #48]	@ 0x30
 8015614:	1431      	asrs	r1, r6, #16
 8015616:	eef0 7ae7 	vabs.f32	s15, s15
 801561a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015622:	d516      	bpl.n	8015652 <MEMS_runMagCal.constprop.0+0x6ca>
 8015624:	ee07 1a90 	vmov	s15, r1
 8015628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801562c:	eef0 7ae7 	vabs.f32	s15, s15
 8015630:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015638:	dd0b      	ble.n	8015652 <MEMS_runMagCal.constprop.0+0x6ca>
 801563a:	ee07 2a90 	vmov	s15, r2
 801563e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015642:	eef0 7ae7 	vabs.f32	s15, s15
 8015646:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801564e:	f300 8176 	bgt.w	801593e <MEMS_runMagCal.constprop.0+0x9b6>
 8015652:	f89b 00a0 	ldrb.w	r0, [fp, #160]	@ 0xa0
 8015656:	9006      	str	r0, [sp, #24]
 8015658:	2800      	cmp	r0, #0
 801565a:	f000 8373 	beq.w	8015d44 <MEMS_runMagCal.constprop.0+0xdbc>
 801565e:	f9bb 53ba 	ldrsh.w	r5, [fp, #954]	@ 0x3ba
 8015662:	f9bb c3b8 	ldrsh.w	ip, [fp, #952]	@ 0x3b8
 8015666:	1a6d      	subs	r5, r5, r1
 8015668:	ebac 0c03 	sub.w	ip, ip, r3
 801566c:	fb05 f505 	mul.w	r5, r5, r5
 8015670:	fb0c 5c0c 	mla	ip, ip, ip, r5
 8015674:	f9bb 53bc 	ldrsh.w	r5, [fp, #956]	@ 0x3bc
 8015678:	1aad      	subs	r5, r5, r2
 801567a:	fb05 c505 	mla	r5, r5, r5, ip
 801567e:	ee07 5a90 	vmov	s15, r5
 8015682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015686:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801568a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801568e:	f300 8156 	bgt.w	801593e <MEMS_runMagCal.constprop.0+0x9b6>
 8015692:	fb93 f5f7 	sdiv	r5, r3, r7
 8015696:	fb07 3515 	mls	r5, r7, r5, r3
 801569a:	2d00      	cmp	r5, #0
 801569c:	bfb8      	it	lt
 801569e:	19ed      	addlt	r5, r5, r7
 80156a0:	b228      	sxth	r0, r5
 80156a2:	ee07 0a90 	vmov	s15, r0
 80156a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156aa:	fb91 f5f7 	sdiv	r5, r1, r7
 80156ae:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80156b2:	fb07 1515 	mls	r5, r7, r5, r1
 80156b6:	2d00      	cmp	r5, #0
 80156b8:	fef8 7a67 	vrinta.f32	s15, s15
 80156bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80156c0:	bfb8      	it	lt
 80156c2:	19ed      	addlt	r5, r5, r7
 80156c4:	edcd 7a05 	vstr	s15, [sp, #20]
 80156c8:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80156cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80156ce:	b228      	sxth	r0, r5
 80156d0:	ee07 0a90 	vmov	s15, r0
 80156d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156d8:	fb92 f5f7 	sdiv	r5, r2, r7
 80156dc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80156e0:	fb07 2515 	mls	r5, r7, r5, r2
 80156e4:	2d00      	cmp	r5, #0
 80156e6:	fef8 7a67 	vrinta.f32	s15, s15
 80156ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80156ee:	bfb8      	it	lt
 80156f0:	19ed      	addlt	r5, r5, r7
 80156f2:	edcd 7a05 	vstr	s15, [sp, #20]
 80156f6:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80156fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80156fc:	b228      	sxth	r0, r5
 80156fe:	ee07 0a90 	vmov	s15, r0
 8015702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015706:	e9db 5c2a 	ldrd	r5, ip, [fp, #168]	@ 0xa8
 801570a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801570e:	fef8 7a67 	vrinta.f32	s15, s15
 8015712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015716:	edcd 7a05 	vstr	s15, [sp, #20]
 801571a:	f89d 0014 	ldrb.w	r0, [sp, #20]
 801571e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015720:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015722:	281f      	cmp	r0, #31
 8015724:	f240 838d 	bls.w	8015e42 <MEMS_runMagCal.constprop.0+0xeba>
 8015728:	f1a0 0e20 	sub.w	lr, r0, #32
 801572c:	2001      	movs	r0, #1
 801572e:	fa00 fe0e 	lsl.w	lr, r0, lr
 8015732:	ea0e 0e05 	and.w	lr, lr, r5
 8015736:	fabe f08e 	clz	r0, lr
 801573a:	0940      	lsrs	r0, r0, #5
 801573c:	9005      	str	r0, [sp, #20]
 801573e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015740:	281f      	cmp	r0, #31
 8015742:	e9db 892c 	ldrd	r8, r9, [fp, #176]	@ 0xb0
 8015746:	f240 8389 	bls.w	8015e5c <MEMS_runMagCal.constprop.0+0xed4>
 801574a:	f1a0 0c20 	sub.w	ip, r0, #32
 801574e:	2001      	movs	r0, #1
 8015750:	fa00 fc0c 	lsl.w	ip, r0, ip
 8015754:	ea0c 0c08 	and.w	ip, ip, r8
 8015758:	f8db 50bc 	ldr.w	r5, [fp, #188]	@ 0xbc
 801575c:	fabc f98c 	clz	r9, ip
 8015760:	f8db 00b8 	ldr.w	r0, [fp, #184]	@ 0xb8
 8015764:	950e      	str	r5, [sp, #56]	@ 0x38
 8015766:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801576a:	4605      	mov	r5, r0
 801576c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801576e:	281f      	cmp	r0, #31
 8015770:	f240 836d 	bls.w	8015e4e <MEMS_runMagCal.constprop.0+0xec6>
 8015774:	f04f 0801 	mov.w	r8, #1
 8015778:	3820      	subs	r0, #32
 801577a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801577c:	fa08 f000 	lsl.w	r0, r8, r0
 8015780:	ea00 0805 	and.w	r8, r0, r5
 8015784:	9805      	ldr	r0, [sp, #20]
 8015786:	ea40 0509 	orr.w	r5, r0, r9
 801578a:	f1b8 0f00 	cmp.w	r8, #0
 801578e:	f040 8084 	bne.w	801589a <MEMS_runMagCal.constprop.0+0x912>
 8015792:	2d00      	cmp	r5, #0
 8015794:	f000 8083 	beq.w	801589e <MEMS_runMagCal.constprop.0+0x916>
 8015798:	ea5e 0c0c 	orrs.w	ip, lr, ip
 801579c:	d17f      	bne.n	801589e <MEMS_runMagCal.constprop.0+0x916>
 801579e:	f99b 10a2 	ldrsb.w	r1, [fp, #162]	@ 0xa2
 80157a2:	f89b 80a1 	ldrb.w	r8, [fp, #161]	@ 0xa1
 80157a6:	f101 0e01 	add.w	lr, r1, #1
 80157aa:	9906      	ldr	r1, [sp, #24]
 80157ac:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80157ae:	3101      	adds	r1, #1
 80157b0:	fb9e f0f8 	sdiv	r0, lr, r8
 80157b4:	fb08 e010 	mls	r0, r8, r0, lr
 80157b8:	4541      	cmp	r1, r8
 80157ba:	b240      	sxtb	r0, r0
 80157bc:	bfa8      	it	ge
 80157be:	4641      	movge	r1, r8
 80157c0:	f88b 00a2 	strb.w	r0, [fp, #162]	@ 0xa2
 80157c4:	3004      	adds	r0, #4
 80157c6:	b2c9      	uxtb	r1, r1
 80157c8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 80157cc:	4541      	cmp	r1, r8
 80157ce:	f88b 10a0 	strb.w	r1, [fp, #160]	@ 0xa0
 80157d2:	f8a0 30a2 	strh.w	r3, [r0, #162]	@ 0xa2
 80157d6:	f8db 30a4 	ldr.w	r3, [fp, #164]	@ 0xa4
 80157da:	f8c0 50a4 	str.w	r5, [r0, #164]	@ 0xa4
 80157de:	f8ab 23bc 	strh.w	r2, [fp, #956]	@ 0x3bc
 80157e2:	9a03      	ldr	r2, [sp, #12]
 80157e4:	f8cb 63b8 	str.w	r6, [fp, #952]	@ 0x3b8
 80157e8:	eba2 0303 	sub.w	r3, r2, r3
 80157ec:	9a00      	ldr	r2, [sp, #0]
 80157ee:	4413      	add	r3, r2
 80157f0:	f8a0 30a0 	strh.w	r3, [r0, #160]	@ 0xa0
 80157f4:	f000 84cf 	beq.w	8016196 <MEMS_runMagCal.constprop.0+0x120e>
 80157f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157fa:	2b1f      	cmp	r3, #31
 80157fc:	f200 83c8 	bhi.w	8015f90 <MEMS_runMagCal.constprop.0+0x1008>
 8015800:	2201      	movs	r2, #1
 8015802:	409a      	lsls	r2, r3
 8015804:	f8db 30ac 	ldr.w	r3, [fp, #172]	@ 0xac
 8015808:	4313      	orrs	r3, r2
 801580a:	f8cb 30ac 	str.w	r3, [fp, #172]	@ 0xac
 801580e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015810:	2b1f      	cmp	r3, #31
 8015812:	f240 840c 	bls.w	801602e <MEMS_runMagCal.constprop.0+0x10a6>
 8015816:	f1a3 0220 	sub.w	r2, r3, #32
 801581a:	2301      	movs	r3, #1
 801581c:	fa03 f202 	lsl.w	r2, r3, r2
 8015820:	f8db 30b0 	ldr.w	r3, [fp, #176]	@ 0xb0
 8015824:	4313      	orrs	r3, r2
 8015826:	f8cb 30b0 	str.w	r3, [fp, #176]	@ 0xb0
 801582a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801582c:	2b1f      	cmp	r3, #31
 801582e:	f240 83f6 	bls.w	801601e <MEMS_runMagCal.constprop.0+0x1096>
 8015832:	f1a3 0220 	sub.w	r2, r3, #32
 8015836:	e2f9      	b.n	8015e2c <MEMS_runMagCal.constprop.0+0xea4>
 8015838:	2200      	movs	r2, #0
 801583a:	23ff      	movs	r3, #255	@ 0xff
 801583c:	9902      	ldr	r1, [sp, #8]
 801583e:	f88b 20a0 	strb.w	r2, [fp, #160]	@ 0xa0
 8015842:	f8cb 1020 	str.w	r1, [fp, #32]
 8015846:	f88b 30a2 	strb.w	r3, [fp, #162]	@ 0xa2
 801584a:	f20d 5d64 	addw	sp, sp, #1380	@ 0x564
 801584e:	ecbd 8b10 	vpop	{d8-d15}
 8015852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015856:	2102      	movs	r1, #2
 8015858:	2300      	movs	r3, #0
 801585a:	930d      	str	r3, [sp, #52]	@ 0x34
 801585c:	9307      	str	r3, [sp, #28]
 801585e:	e5b8      	b.n	80153d2 <MEMS_runMagCal.constprop.0+0x44a>
 8015860:	3b00      	subs	r3, #0
 8015862:	bf18      	it	ne
 8015864:	2301      	movne	r3, #1
 8015866:	e9cb 3306 	strd	r3, r3, [fp, #24]
 801586a:	2300      	movs	r3, #0
 801586c:	f88b 30a0 	strb.w	r3, [fp, #160]	@ 0xa0
 8015870:	f8cb 3020 	str.w	r3, [fp, #32]
 8015874:	2300      	movs	r3, #0
 8015876:	e9cb 332a 	strd	r3, r3, [fp, #168]	@ 0xa8
 801587a:	e9cb 332c 	strd	r3, r3, [fp, #176]	@ 0xb0
 801587e:	e9cb 332e 	strd	r3, r3, [fp, #184]	@ 0xb8
 8015882:	23ff      	movs	r3, #255	@ 0xff
 8015884:	f88b 30a2 	strb.w	r3, [fp, #162]	@ 0xa2
 8015888:	e404      	b.n	8015094 <MEMS_runMagCal.constprop.0+0x10c>
 801588a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80158d0 <MEMS_runMagCal.constprop.0+0x948>
 801588e:	2a01      	cmp	r2, #1
 8015890:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 8015894:	f67f add4 	bls.w	8015440 <MEMS_runMagCal.constprop.0+0x4b8>
 8015898:	e5c8      	b.n	801542c <MEMS_runMagCal.constprop.0+0x4a4>
 801589a:	2d00      	cmp	r5, #0
 801589c:	d04f      	beq.n	801593e <MEMS_runMagCal.constprop.0+0x9b6>
 801589e:	f89b 80a1 	ldrb.w	r8, [fp, #161]	@ 0xa1
 80158a2:	9806      	ldr	r0, [sp, #24]
 80158a4:	f99b 50a2 	ldrsb.w	r5, [fp, #162]	@ 0xa2
 80158a8:	4540      	cmp	r0, r8
 80158aa:	f105 0e01 	add.w	lr, r5, #1
 80158ae:	f000 83c7 	beq.w	8016040 <MEMS_runMagCal.constprop.0+0x10b8>
 80158b2:	ebae 0500 	sub.w	r5, lr, r0
 80158b6:	fb95 fcf8 	sdiv	ip, r5, r8
 80158ba:	fb08 5c1c 	mls	ip, r8, ip, r5
 80158be:	f1bc 0f00 	cmp.w	ip, #0
 80158c2:	bfb8      	it	lt
 80158c4:	44c4      	addlt	ip, r8
 80158c6:	fa0f fc8c 	sxth.w	ip, ip
 80158ca:	eb00 090c 	add.w	r9, r0, ip
 80158ce:	e008      	b.n	80158e2 <MEMS_runMagCal.constprop.0+0x95a>
 80158d0:	477fff00 	.word	0x477fff00
 80158d4:	42340000 	.word	0x42340000
 80158d8:	3faccccd 	.word	0x3faccccd
 80158dc:	45cc      	cmp	ip, r9
 80158de:	f43f af64 	beq.w	80157aa <MEMS_runMagCal.constprop.0+0x822>
 80158e2:	fb9c f0f8 	sdiv	r0, ip, r8
 80158e6:	fb08 c010 	mls	r0, r8, r0, ip
 80158ea:	f10c 0c01 	add.w	ip, ip, #1
 80158ee:	b2c0      	uxtb	r0, r0
 80158f0:	3004      	adds	r0, #4
 80158f2:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 80158f6:	f9b0 50a2 	ldrsh.w	r5, [r0, #162]	@ 0xa2
 80158fa:	1b5d      	subs	r5, r3, r5
 80158fc:	ee07 5a90 	vmov	s15, r5
 8015900:	f9b0 50a4 	ldrsh.w	r5, [r0, #164]	@ 0xa4
 8015904:	f9b0 00a6 	ldrsh.w	r0, [r0, #166]	@ 0xa6
 8015908:	1b4d      	subs	r5, r1, r5
 801590a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801590e:	1a10      	subs	r0, r2, r0
 8015910:	ee06 5a90 	vmov	s13, r5
 8015914:	ee07 0a10 	vmov	s14, r0
 8015918:	eef0 7ae7 	vabs.f32	s15, s15
 801591c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015924:	eef0 6ae6 	vabs.f32	s13, s13
 8015928:	eeb0 7ac7 	vabs.f32	s14, s14
 801592c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015930:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015934:	eef4 5ae7 	vcmpe.f32	s11, s15
 8015938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801593c:	ddce      	ble.n	80158dc <MEMS_runMagCal.constprop.0+0x954>
 801593e:	9b00      	ldr	r3, [sp, #0]
 8015940:	3401      	adds	r4, #1
 8015942:	9a04      	ldr	r2, [sp, #16]
 8015944:	b224      	sxth	r4, r4
 8015946:	4413      	add	r3, r2
 8015948:	4625      	mov	r5, r4
 801594a:	b29b      	uxth	r3, r3
 801594c:	9300      	str	r3, [sp, #0]
 801594e:	9b01      	ldr	r3, [sp, #4]
 8015950:	429c      	cmp	r4, r3
 8015952:	f6ff ae4a 	blt.w	80155ea <MEMS_runMagCal.constprop.0+0x662>
 8015956:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801595a:	f89b 3014 	ldrb.w	r3, [fp, #20]
 801595e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015960:	431a      	orrs	r2, r3
 8015962:	b2d3      	uxtb	r3, r2
 8015964:	f88b 3014 	strb.w	r3, [fp, #20]
 8015968:	2b00      	cmp	r3, #0
 801596a:	f43f af6e 	beq.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 801596e:	f89b 30a0 	ldrb.w	r3, [fp, #160]	@ 0xa0
 8015972:	2b19      	cmp	r3, #25
 8015974:	9300      	str	r3, [sp, #0]
 8015976:	f67f af68 	bls.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 801597a:	f1b8 0f00 	cmp.w	r8, #0
 801597e:	d004      	beq.n	801598a <MEMS_runMagCal.constprop.0+0xa02>
 8015980:	f8db 3018 	ldr.w	r3, [fp, #24]
 8015984:	2b00      	cmp	r3, #0
 8015986:	f040 8333 	bne.w	8015ff0 <MEMS_runMagCal.constprop.0+0x1068>
 801598a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801598c:	2b00      	cmp	r3, #0
 801598e:	f040 8365 	bne.w	801605c <MEMS_runMagCal.constprop.0+0x10d4>
 8015992:	9807      	ldr	r0, [sp, #28]
 8015994:	2300      	movs	r3, #0
 8015996:	f8db c0b0 	ldr.w	ip, [fp, #176]	@ 0xb0
 801599a:	2501      	movs	r5, #1
 801599c:	f8db 70bc 	ldr.w	r7, [fp, #188]	@ 0xbc
 80159a0:	4602      	mov	r2, r0
 80159a2:	4604      	mov	r4, r0
 80159a4:	932b      	str	r3, [sp, #172]	@ 0xac
 80159a6:	e9db a92a 	ldrd	sl, r9, [fp, #168]	@ 0xa8
 80159aa:	e9db 8e2d 	ldrd	r8, lr, [fp, #180]	@ 0xb4
 80159ae:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80159b2:	e9cd 3329 	strd	r3, r3, [sp, #164]	@ 0xa4
 80159b6:	2b1f      	cmp	r3, #31
 80159b8:	f240 81b0 	bls.w	8015d1c <MEMS_runMagCal.constprop.0+0xd94>
 80159bc:	f1a3 0120 	sub.w	r1, r3, #32
 80159c0:	fa05 f101 	lsl.w	r1, r5, r1
 80159c4:	ea1a 0f01 	tst.w	sl, r1
 80159c8:	d001      	beq.n	80159ce <MEMS_runMagCal.constprop.0+0xa46>
 80159ca:	3001      	adds	r0, #1
 80159cc:	b2c0      	uxtb	r0, r0
 80159ce:	ea1c 0f01 	tst.w	ip, r1
 80159d2:	d001      	beq.n	80159d8 <MEMS_runMagCal.constprop.0+0xa50>
 80159d4:	3401      	adds	r4, #1
 80159d6:	b2e4      	uxtb	r4, r4
 80159d8:	4039      	ands	r1, r7
 80159da:	3301      	adds	r3, #1
 80159dc:	2900      	cmp	r1, #0
 80159de:	bf18      	it	ne
 80159e0:	3201      	addne	r2, #1
 80159e2:	2b40      	cmp	r3, #64	@ 0x40
 80159e4:	b2d2      	uxtb	r2, r2
 80159e6:	d1e6      	bne.n	80159b6 <MEMS_runMagCal.constprop.0+0xa2e>
 80159e8:	2805      	cmp	r0, #5
 80159ea:	f240 8193 	bls.w	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 80159ee:	2c05      	cmp	r4, #5
 80159f0:	f240 8190 	bls.w	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 80159f4:	2a05      	cmp	r2, #5
 80159f6:	f240 818d 	bls.w	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 80159fa:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	@ 0xa2
 80159fe:	f89b 90a1 	ldrb.w	r9, [fp, #161]	@ 0xa1
 8015a02:	461e      	mov	r6, r3
 8015a04:	f103 0a01 	add.w	sl, r3, #1
 8015a08:	9b00      	ldr	r3, [sp, #0]
 8015a0a:	454b      	cmp	r3, r9
 8015a0c:	f000 83ce 	beq.w	80161ac <MEMS_runMagCal.constprop.0+0x1224>
 8015a10:	ebaa 0203 	sub.w	r2, sl, r3
 8015a14:	fb92 f3f9 	sdiv	r3, r2, r9
 8015a18:	fb09 2213 	mls	r2, r9, r3, r2
 8015a1c:	2a00      	cmp	r2, #0
 8015a1e:	bfb8      	it	lt
 8015a20:	444a      	addlt	r2, r9
 8015a22:	b212      	sxth	r2, r2
 8015a24:	f102 0315 	add.w	r3, r2, #21
 8015a28:	9900      	ldr	r1, [sp, #0]
 8015a2a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8015a2e:	eb01 0802 	add.w	r8, r1, r2
 8015a32:	f9b3 401a 	ldrsh.w	r4, [r3, #26]
 8015a36:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 8015a3a:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 8015a3e:	46a6      	mov	lr, r4
 8015a40:	4684      	mov	ip, r0
 8015a42:	460f      	mov	r7, r1
 8015a44:	fb92 f3f9 	sdiv	r3, r2, r9
 8015a48:	fb09 2313 	mls	r3, r9, r3, r2
 8015a4c:	3201      	adds	r2, #1
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	3315      	adds	r3, #21
 8015a52:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8015a56:	f9b3 501a 	ldrsh.w	r5, [r3, #26]
 8015a5a:	42ac      	cmp	r4, r5
 8015a5c:	bfb8      	it	lt
 8015a5e:	462c      	movlt	r4, r5
 8015a60:	45ae      	cmp	lr, r5
 8015a62:	bfa8      	it	ge
 8015a64:	46ae      	movge	lr, r5
 8015a66:	f9b3 501c 	ldrsh.w	r5, [r3, #28]
 8015a6a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8015a6e:	42a8      	cmp	r0, r5
 8015a70:	bfb8      	it	lt
 8015a72:	4628      	movlt	r0, r5
 8015a74:	45ac      	cmp	ip, r5
 8015a76:	bfa8      	it	ge
 8015a78:	46ac      	movge	ip, r5
 8015a7a:	4299      	cmp	r1, r3
 8015a7c:	bfb8      	it	lt
 8015a7e:	4619      	movlt	r1, r3
 8015a80:	429f      	cmp	r7, r3
 8015a82:	bfa8      	it	ge
 8015a84:	461f      	movge	r7, r3
 8015a86:	4590      	cmp	r8, r2
 8015a88:	d1dc      	bne.n	8015a44 <MEMS_runMagCal.constprop.0+0xabc>
 8015a8a:	eba4 030e 	sub.w	r3, r4, lr
 8015a8e:	ed5f 7a6f 	vldr	s15, [pc, #-444]	@ 80158d4 <MEMS_runMagCal.constprop.0+0x94c>
 8015a92:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8015a96:	f89b 206c 	ldrb.w	r2, [fp, #108]	@ 0x6c
 8015a9a:	b21b      	sxth	r3, r3
 8015a9c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015aa0:	f89b 5054 	ldrb.w	r5, [fp, #84]	@ 0x54
 8015aa4:	ee06 3a90 	vmov	s13, r3
 8015aa8:	9201      	str	r2, [sp, #4]
 8015aaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015aae:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8015ab2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8015ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aba:	f300 82e6 	bgt.w	801608a <MEMS_runMagCal.constprop.0+0x1102>
 8015abe:	eba0 020c 	sub.w	r2, r0, ip
 8015ac2:	b212      	sxth	r2, r2
 8015ac4:	ee06 2a90 	vmov	s13, r2
 8015ac8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015acc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ad4:	f100 82d9 	bmi.w	801608a <MEMS_runMagCal.constprop.0+0x1102>
 8015ad8:	1bc9      	subs	r1, r1, r7
 8015ada:	b209      	sxth	r1, r1
 8015adc:	ee05 1a90 	vmov	s11, r1
 8015ae0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015ae4:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8015ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aec:	f100 82cd 	bmi.w	801608a <MEMS_runMagCal.constprop.0+0x1102>
 8015af0:	429a      	cmp	r2, r3
 8015af2:	4610      	mov	r0, r2
 8015af4:	ac17      	add	r4, sp, #92	@ 0x5c
 8015af6:	bfb8      	it	lt
 8015af8:	4618      	movlt	r0, r3
 8015afa:	4288      	cmp	r0, r1
 8015afc:	bfb8      	it	lt
 8015afe:	4608      	movlt	r0, r1
 8015b00:	429a      	cmp	r2, r3
 8015b02:	4607      	mov	r7, r0
 8015b04:	4610      	mov	r0, r2
 8015b06:	bfa8      	it	ge
 8015b08:	4618      	movge	r0, r3
 8015b0a:	4288      	cmp	r0, r1
 8015b0c:	bfa8      	it	ge
 8015b0e:	4608      	movge	r0, r1
 8015b10:	429f      	cmp	r7, r3
 8015b12:	dd02      	ble.n	8015b1a <MEMS_runMagCal.constprop.0+0xb92>
 8015b14:	4298      	cmp	r0, r3
 8015b16:	f2c0 83cb 	blt.w	80162b0 <MEMS_runMagCal.constprop.0+0x1328>
 8015b1a:	8060      	strh	r0, [r4, #2]
 8015b1c:	4297      	cmp	r7, r2
 8015b1e:	dd02      	ble.n	8015b26 <MEMS_runMagCal.constprop.0+0xb9e>
 8015b20:	4290      	cmp	r0, r2
 8015b22:	bfb8      	it	lt
 8015b24:	8062      	strhlt	r2, [r4, #2]
 8015b26:	42b9      	cmp	r1, r7
 8015b28:	da02      	bge.n	8015b30 <MEMS_runMagCal.constprop.0+0xba8>
 8015b2a:	4281      	cmp	r1, r0
 8015b2c:	bfc8      	it	gt
 8015b2e:	8061      	strhgt	r1, [r4, #2]
 8015b30:	9b01      	ldr	r3, [sp, #4]
 8015b32:	432b      	orrs	r3, r5
 8015b34:	f040 8353 	bne.w	80161de <MEMS_runMagCal.constprop.0+0x1256>
 8015b38:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015b3c:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 80158d8 <MEMS_runMagCal.constprop.0+0x950>
 8015b40:	ee05 7a10 	vmov	s10, r7
 8015b44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b4c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015b50:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015b54:	bfcc      	ite	gt
 8015b56:	2301      	movgt	r3, #1
 8015b58:	2300      	movle	r3, #0
 8015b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b5e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8015b62:	bfc8      	it	gt
 8015b64:	f043 0301 	orrgt.w	r3, r3, #1
 8015b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b6c:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8015b70:	bfc8      	it	gt
 8015b72:	f043 0301 	orrgt.w	r3, r3, #1
 8015b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b7a:	9303      	str	r3, [sp, #12]
 8015b7c:	f2c0 80b2 	blt.w	8015ce4 <MEMS_runMagCal.constprop.0+0xd5c>
 8015b80:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015b84:	eeb7 7a02 	vmov.f32	s14, #114	@ 0x3f900000  1.125
 8015b88:	ee05 3a10 	vmov	s10, r3
 8015b8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015b90:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015b94:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8015b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b9c:	f2c0 80a2 	blt.w	8015ce4 <MEMS_runMagCal.constprop.0+0xd5c>
 8015ba0:	ebb7 0f40 	cmp.w	r7, r0, lsl #1
 8015ba4:	f280 809e 	bge.w	8015ce4 <MEMS_runMagCal.constprop.0+0xd5c>
 8015ba8:	ee07 0a10 	vmov	s14, r0
 8015bac:	eeb7 5a04 	vmov.f32	s10, #116	@ 0x3fa00000  1.250
 8015bb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015bb4:	ee27 7a05 	vmul.f32	s14, s14, s10
 8015bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bc0:	f140 8090 	bpl.w	8015ce4 <MEMS_runMagCal.constprop.0+0xd5c>
 8015bc4:	9b00      	ldr	r3, [sp, #0]
 8015bc6:	454b      	cmp	r3, r9
 8015bc8:	f001 83a5 	beq.w	8017316 <MEMS_runMagCal.constprop.0+0x238e>
 8015bcc:	ebaa 0303 	sub.w	r3, sl, r3
 8015bd0:	fb93 f2f9 	sdiv	r2, r3, r9
 8015bd4:	fb09 3312 	mls	r3, r9, r2, r3
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	bfb8      	it	lt
 8015bdc:	444b      	addlt	r3, r9
 8015bde:	b21b      	sxth	r3, r3
 8015be0:	fa4f fe83 	sxtb.w	lr, r3
 8015be4:	9b00      	ldr	r3, [sp, #0]
 8015be6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8015bea:	ee06 7a10 	vmov	s12, r7
 8015bee:	1e5e      	subs	r6, r3, #1
 8015bf0:	46e0      	mov	r8, ip
 8015bf2:	fa5e f386 	uxtab	r3, lr, r6
 8015bf6:	9606      	str	r6, [sp, #24]
 8015bf8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8015bfc:	e050      	b.n	8015ca0 <MEMS_runMagCal.constprop.0+0xd18>
 8015bfe:	1a09      	subs	r1, r1, r0
 8015c00:	b20e      	sxth	r6, r1
 8015c02:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8015c06:	f9b1 50a4 	ldrsh.w	r5, [r1, #164]	@ 0xa4
 8015c0a:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
 8015c0e:	f9b1 40a4 	ldrsh.w	r4, [r1, #164]	@ 0xa4
 8015c12:	b2a9      	uxth	r1, r5
 8015c14:	42a5      	cmp	r5, r4
 8015c16:	b2a0      	uxth	r0, r4
 8015c18:	f2c0 82c5 	blt.w	80161a6 <MEMS_runMagCal.constprop.0+0x121e>
 8015c1c:	1a09      	subs	r1, r1, r0
 8015c1e:	b20f      	sxth	r7, r1
 8015c20:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8015c24:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8015c28:	f9b1 50a6 	ldrsh.w	r5, [r1, #166]	@ 0xa6
 8015c2c:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
 8015c30:	f9b1 40a6 	ldrsh.w	r4, [r1, #166]	@ 0xa6
 8015c34:	b2a9      	uxth	r1, r5
 8015c36:	b2a0      	uxth	r0, r4
 8015c38:	42a5      	cmp	r5, r4
 8015c3a:	bfb4      	ite	lt
 8015c3c:	1a41      	sublt	r1, r0, r1
 8015c3e:	1a09      	subge	r1, r1, r0
 8015c40:	eb0b 00c2 	add.w	r0, fp, r2, lsl #3
 8015c44:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8015c48:	b209      	sxth	r1, r1
 8015c4a:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	@ 0xa0
 8015c4e:	1ad2      	subs	r2, r2, r3
 8015c50:	b212      	sxth	r2, r2
 8015c52:	2a00      	cmp	r2, #0
 8015c54:	dd20      	ble.n	8015c98 <MEMS_runMagCal.constprop.0+0xd10>
 8015c56:	19bb      	adds	r3, r7, r6
 8015c58:	ee07 2a90 	vmov	s15, r2
 8015c5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015c60:	f10c 0c01 	add.w	ip, ip, #1
 8015c64:	440b      	add	r3, r1
 8015c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015c6a:	fa5f fc8c 	uxtb.w	ip, ip
 8015c6e:	fb02 f303 	mul.w	r3, r2, r3
 8015c72:	ee07 3a90 	vmov	s15, r3
 8015c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015c7a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015c7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8015c82:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8015c86:	ee17 3a90 	vmov	r3, s15
 8015c8a:	b21b      	sxth	r3, r3
 8015c8c:	2b96      	cmp	r3, #150	@ 0x96
 8015c8e:	dd03      	ble.n	8015c98 <MEMS_runMagCal.constprop.0+0xd10>
 8015c90:	f108 0801 	add.w	r8, r8, #1
 8015c94:	fa5f f888 	uxtb.w	r8, r8
 8015c98:	9b04      	ldr	r3, [sp, #16]
 8015c9a:	4573      	cmp	r3, lr
 8015c9c:	f000 830a 	beq.w	80162b4 <MEMS_runMagCal.constprop.0+0x132c>
 8015ca0:	4671      	mov	r1, lr
 8015ca2:	f10e 0e01 	add.w	lr, lr, #1
 8015ca6:	fb91 f3f9 	sdiv	r3, r1, r9
 8015caa:	fb09 1113 	mls	r1, r9, r3, r1
 8015cae:	fb9e f3f9 	sdiv	r3, lr, r9
 8015cb2:	b24a      	sxtb	r2, r1
 8015cb4:	fb09 e313 	mls	r3, r9, r3, lr
 8015cb8:	2a00      	cmp	r2, #0
 8015cba:	b25b      	sxtb	r3, r3
 8015cbc:	da01      	bge.n	8015cc2 <MEMS_runMagCal.constprop.0+0xd3a>
 8015cbe:	4449      	add	r1, r9
 8015cc0:	b24a      	sxtb	r2, r1
 8015cc2:	3304      	adds	r3, #4
 8015cc4:	3204      	adds	r2, #4
 8015cc6:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8015cca:	f9b1 50a2 	ldrsh.w	r5, [r1, #162]	@ 0xa2
 8015cce:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
 8015cd2:	f9b1 40a2 	ldrsh.w	r4, [r1, #162]	@ 0xa2
 8015cd6:	b2a9      	uxth	r1, r5
 8015cd8:	42a5      	cmp	r5, r4
 8015cda:	b2a0      	uxth	r0, r4
 8015cdc:	da8f      	bge.n	8015bfe <MEMS_runMagCal.constprop.0+0xc76>
 8015cde:	1a40      	subs	r0, r0, r1
 8015ce0:	b206      	sxth	r6, r0
 8015ce2:	e78e      	b.n	8015c02 <MEMS_runMagCal.constprop.0+0xc7a>
 8015ce4:	eeb7 7a02 	vmov.f32	s14, #114	@ 0x3f900000  1.125
 8015ce8:	ee26 6a07 	vmul.f32	s12, s12, s14
 8015cec:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf4:	dc0e      	bgt.n	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 8015cf6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015cfa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d02:	dc07      	bgt.n	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 8015d04:	ee25 7a87 	vmul.f32	s14, s11, s14
 8015d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d10:	f77f af58 	ble.w	8015bc4 <MEMS_runMagCal.constprop.0+0xc3c>
 8015d14:	2300      	movs	r3, #0
 8015d16:	f88b 3014 	strb.w	r3, [fp, #20]
 8015d1a:	e596      	b.n	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 8015d1c:	fa05 f103 	lsl.w	r1, r5, r3
 8015d20:	ea19 0f01 	tst.w	r9, r1
 8015d24:	d001      	beq.n	8015d2a <MEMS_runMagCal.constprop.0+0xda2>
 8015d26:	3001      	adds	r0, #1
 8015d28:	b2c0      	uxtb	r0, r0
 8015d2a:	ea18 0f01 	tst.w	r8, r1
 8015d2e:	d001      	beq.n	8015d34 <MEMS_runMagCal.constprop.0+0xdac>
 8015d30:	3401      	adds	r4, #1
 8015d32:	b2e4      	uxtb	r4, r4
 8015d34:	ea0e 0101 	and.w	r1, lr, r1
 8015d38:	3301      	adds	r3, #1
 8015d3a:	2900      	cmp	r1, #0
 8015d3c:	bf18      	it	ne
 8015d3e:	3201      	addne	r2, #1
 8015d40:	b2d2      	uxtb	r2, r2
 8015d42:	e638      	b.n	80159b6 <MEMS_runMagCal.constprop.0+0xa2e>
 8015d44:	9803      	ldr	r0, [sp, #12]
 8015d46:	f8cb 63b8 	str.w	r6, [fp, #952]	@ 0x3b8
 8015d4a:	9e08      	ldr	r6, [sp, #32]
 8015d4c:	f8ab 30c2 	strh.w	r3, [fp, #194]	@ 0xc2
 8015d50:	fb06 0505 	mla	r5, r6, r5, r0
 8015d54:	f04f 0001 	mov.w	r0, #1
 8015d58:	f8ab 20c6 	strh.w	r2, [fp, #198]	@ 0xc6
 8015d5c:	f88b 00a0 	strb.w	r0, [fp, #160]	@ 0xa0
 8015d60:	9806      	ldr	r0, [sp, #24]
 8015d62:	f8ab 23bc 	strh.w	r2, [fp, #956]	@ 0x3bc
 8015d66:	f88b 00a2 	strb.w	r0, [fp, #162]	@ 0xa2
 8015d6a:	f8ab 00c0 	strh.w	r0, [fp, #192]	@ 0xc0
 8015d6e:	f8ab c0c4 	strh.w	ip, [fp, #196]	@ 0xc4
 8015d72:	f8cb 50a4 	str.w	r5, [fp, #164]	@ 0xa4
 8015d76:	fb93 f0f7 	sdiv	r0, r3, r7
 8015d7a:	fb07 3310 	mls	r3, r7, r0, r3
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	bfb8      	it	lt
 8015d82:	19db      	addlt	r3, r3, r7
 8015d84:	b21b      	sxth	r3, r3
 8015d86:	ee07 3a90 	vmov	s15, r3
 8015d8a:	fb91 f3f7 	sdiv	r3, r1, r7
 8015d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d92:	fb07 1113 	mls	r1, r7, r3, r1
 8015d96:	2900      	cmp	r1, #0
 8015d98:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015d9c:	bfb8      	it	lt
 8015d9e:	19c9      	addlt	r1, r1, r7
 8015da0:	fef8 7a67 	vrinta.f32	s15, s15
 8015da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015da8:	b209      	sxth	r1, r1
 8015daa:	edcd 7a05 	vstr	s15, [sp, #20]
 8015dae:	ee07 1a90 	vmov	s15, r1
 8015db2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015dba:	fb92 f1f7 	sdiv	r1, r2, r7
 8015dbe:	fb07 2211 	mls	r2, r7, r1, r2
 8015dc2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015dc6:	2a00      	cmp	r2, #0
 8015dc8:	fef8 7a67 	vrinta.f32	s15, s15
 8015dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015dd0:	bfb8      	it	lt
 8015dd2:	19d2      	addlt	r2, r2, r7
 8015dd4:	2b1f      	cmp	r3, #31
 8015dd6:	b212      	sxth	r2, r2
 8015dd8:	edcd 7a05 	vstr	s15, [sp, #20]
 8015ddc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015de0:	ee07 2a90 	vmov	s15, r2
 8015de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015de8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015dec:	fef8 7a67 	vrinta.f32	s15, s15
 8015df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015df4:	edcd 7a05 	vstr	s15, [sp, #20]
 8015df8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8015dfc:	d951      	bls.n	8015ea2 <MEMS_runMagCal.constprop.0+0xf1a>
 8015dfe:	3b20      	subs	r3, #32
 8015e00:	2001      	movs	r0, #1
 8015e02:	4098      	lsls	r0, r3
 8015e04:	f8db 30a8 	ldr.w	r3, [fp, #168]	@ 0xa8
 8015e08:	4303      	orrs	r3, r0
 8015e0a:	f8cb 30a8 	str.w	r3, [fp, #168]	@ 0xa8
 8015e0e:	291f      	cmp	r1, #31
 8015e10:	d933      	bls.n	8015e7a <MEMS_runMagCal.constprop.0+0xef2>
 8015e12:	2301      	movs	r3, #1
 8015e14:	3920      	subs	r1, #32
 8015e16:	2a1f      	cmp	r2, #31
 8015e18:	fa03 f101 	lsl.w	r1, r3, r1
 8015e1c:	f8db 30b0 	ldr.w	r3, [fp, #176]	@ 0xb0
 8015e20:	ea43 0301 	orr.w	r3, r3, r1
 8015e24:	f8cb 30b0 	str.w	r3, [fp, #176]	@ 0xb0
 8015e28:	d932      	bls.n	8015e90 <MEMS_runMagCal.constprop.0+0xf08>
 8015e2a:	3a20      	subs	r2, #32
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	fa03 f202 	lsl.w	r2, r3, r2
 8015e32:	f8db 30bc 	ldr.w	r3, [fp, #188]	@ 0xbc
 8015e36:	4313      	orrs	r3, r2
 8015e38:	f8cb 30bc 	str.w	r3, [fp, #188]	@ 0xbc
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015e40:	e57d      	b.n	801593e <MEMS_runMagCal.constprop.0+0x9b6>
 8015e42:	2501      	movs	r5, #1
 8015e44:	fa05 fe00 	lsl.w	lr, r5, r0
 8015e48:	ea0e 0e0c 	and.w	lr, lr, ip
 8015e4c:	e473      	b.n	8015736 <MEMS_runMagCal.constprop.0+0x7ae>
 8015e4e:	f04f 0801 	mov.w	r8, #1
 8015e52:	fa08 f800 	lsl.w	r8, r8, r0
 8015e56:	ea08 0805 	and.w	r8, r8, r5
 8015e5a:	e493      	b.n	8015784 <MEMS_runMagCal.constprop.0+0x7fc>
 8015e5c:	f04f 0c01 	mov.w	ip, #1
 8015e60:	fa0c fc00 	lsl.w	ip, ip, r0
 8015e64:	ea0c 0c09 	and.w	ip, ip, r9
 8015e68:	e476      	b.n	8015758 <MEMS_runMagCal.constprop.0+0x7d0>
 8015e6a:	f04f 0e01 	mov.w	lr, #1
 8015e6e:	f7ff bb65 	b.w	801553c <MEMS_runMagCal.constprop.0+0x5b4>
 8015e72:	2400      	movs	r4, #0
 8015e74:	4623      	mov	r3, r4
 8015e76:	f7ff baf4 	b.w	8015462 <MEMS_runMagCal.constprop.0+0x4da>
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	2a1f      	cmp	r2, #31
 8015e7e:	fa03 f101 	lsl.w	r1, r3, r1
 8015e82:	f8db 30b4 	ldr.w	r3, [fp, #180]	@ 0xb4
 8015e86:	ea43 0301 	orr.w	r3, r3, r1
 8015e8a:	f8cb 30b4 	str.w	r3, [fp, #180]	@ 0xb4
 8015e8e:	d8cc      	bhi.n	8015e2a <MEMS_runMagCal.constprop.0+0xea2>
 8015e90:	2301      	movs	r3, #1
 8015e92:	fa03 f202 	lsl.w	r2, r3, r2
 8015e96:	f8db 30b8 	ldr.w	r3, [fp, #184]	@ 0xb8
 8015e9a:	4313      	orrs	r3, r2
 8015e9c:	f8cb 30b8 	str.w	r3, [fp, #184]	@ 0xb8
 8015ea0:	e7cc      	b.n	8015e3c <MEMS_runMagCal.constprop.0+0xeb4>
 8015ea2:	2001      	movs	r0, #1
 8015ea4:	4098      	lsls	r0, r3
 8015ea6:	f8db 30ac 	ldr.w	r3, [fp, #172]	@ 0xac
 8015eaa:	4303      	orrs	r3, r0
 8015eac:	f8cb 30ac 	str.w	r3, [fp, #172]	@ 0xac
 8015eb0:	e7ad      	b.n	8015e0e <MEMS_runMagCal.constprop.0+0xe86>
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	f88b 30a0 	strb.w	r3, [fp, #160]	@ 0xa0
 8015eb8:	e9cb 332a 	strd	r3, r3, [fp, #168]	@ 0xa8
 8015ebc:	e9cb 332c 	strd	r3, r3, [fp, #176]	@ 0xb0
 8015ec0:	e9cb 332e 	strd	r3, r3, [fp, #184]	@ 0xb8
 8015ec4:	23ff      	movs	r3, #255	@ 0xff
 8015ec6:	f88b 30a2 	strb.w	r3, [fp, #162]	@ 0xa2
 8015eca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	f47f ab77 	bne.w	80155c0 <MEMS_runMagCal.constprop.0+0x638>
 8015ed2:	9b07      	ldr	r3, [sp, #28]
 8015ed4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015ed6:	e540      	b.n	801595a <MEMS_runMagCal.constprop.0+0x9d2>
 8015ed8:	f241 205b 	movw	r0, #4699	@ 0x125b
 8015edc:	4283      	cmp	r3, r0
 8015ede:	f67f aaaf 	bls.w	8015440 <MEMS_runMagCal.constprop.0+0x4b8>
 8015ee2:	48de      	ldr	r0, [pc, #888]	@ (801625c <MEMS_runMagCal.constprop.0+0x12d4>)
 8015ee4:	4418      	add	r0, r3
 8015ee6:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8015eea:	b280      	uxth	r0, r0
 8015eec:	4298      	cmp	r0, r3
 8015eee:	f67f aaa7 	bls.w	8015440 <MEMS_runMagCal.constprop.0+0x4b8>
 8015ef2:	f7ff ba9b 	b.w	801542c <MEMS_runMagCal.constprop.0+0x4a4>
 8015ef6:	428d      	cmp	r5, r1
 8015ef8:	f000 80eb 	beq.w	80160d2 <MEMS_runMagCal.constprop.0+0x114a>
 8015efc:	2a03      	cmp	r2, #3
 8015efe:	f47f aad5 	bne.w	80154ac <MEMS_runMagCal.constprop.0+0x524>
 8015f02:	ee07 0a90 	vmov	s15, r0
 8015f06:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8016260 <MEMS_runMagCal.constprop.0+0x12d8>
 8015f0a:	ed9b 7a06 	vldr	s14, [fp, #24]
 8015f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f12:	f89b 3054 	ldrb.w	r3, [fp, #84]	@ 0x54
 8015f16:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015f1a:	f8db 801c 	ldr.w	r8, [fp, #28]
 8015f1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015f20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015f24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f2c:	f77f aabe 	ble.w	80154ac <MEMS_runMagCal.constprop.0+0x524>
 8015f30:	f1b8 0f00 	cmp.w	r8, #0
 8015f34:	f43f aabc 	beq.w	80154b0 <MEMS_runMagCal.constprop.0+0x528>
 8015f38:	eddd 7a02 	vldr	s15, [sp, #8]
 8015f3c:	f108 030a 	add.w	r3, r8, #10
 8015f40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015f44:	ee07 3a90 	vmov	s15, r3
 8015f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f58:	f77f aaaa 	ble.w	80154b0 <MEMS_runMagCal.constprop.0+0x528>
 8015f5c:	f89b 3015 	ldrb.w	r3, [fp, #21]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	f47f aaa5 	bne.w	80154b0 <MEMS_runMagCal.constprop.0+0x528>
 8015f66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	f43f ac6e 	beq.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 8015f6e:	f89b 305c 	ldrb.w	r3, [fp, #92]	@ 0x5c
 8015f72:	2bff      	cmp	r3, #255	@ 0xff
 8015f74:	f47f ac69 	bne.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 8015f78:	f7ff ba9d 	b.w	80154b6 <MEMS_runMagCal.constprop.0+0x52e>
 8015f7c:	f04f 0c00 	mov.w	ip, #0
 8015f80:	f7ff b9b8 	b.w	80152f4 <MEMS_runMagCal.constprop.0+0x36c>
 8015f84:	2300      	movs	r3, #0
 8015f86:	930d      	str	r3, [sp, #52]	@ 0x34
 8015f88:	2301      	movs	r3, #1
 8015f8a:	9307      	str	r3, [sp, #28]
 8015f8c:	f7ff ba20 	b.w	80153d0 <MEMS_runMagCal.constprop.0+0x448>
 8015f90:	f1a3 0220 	sub.w	r2, r3, #32
 8015f94:	2301      	movs	r3, #1
 8015f96:	fa03 f202 	lsl.w	r2, r3, r2
 8015f9a:	f8db 30a8 	ldr.w	r3, [fp, #168]	@ 0xa8
 8015f9e:	4313      	orrs	r3, r2
 8015fa0:	f8cb 30a8 	str.w	r3, [fp, #168]	@ 0xa8
 8015fa4:	e433      	b.n	801580e <MEMS_runMagCal.constprop.0+0x886>
 8015fa6:	ee07 2a10 	vmov	s14, r2
 8015faa:	ee36 6a06 	vadd.f32	s12, s12, s12
 8015fae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015fb2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fba:	f77f aa06 	ble.w	80153ca <MEMS_runMagCal.constprop.0+0x442>
 8015fbe:	ee07 1a10 	vmov	s14, r1
 8015fc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015fc6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8015fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fce:	f57f a9fc 	bpl.w	80153ca <MEMS_runMagCal.constprop.0+0x442>
 8015fd2:	ee07 0a10 	vmov	s14, r0
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015fdc:	9307      	str	r3, [sp, #28]
 8015fde:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8015fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe6:	bf48      	it	mi
 8015fe8:	2301      	movmi	r3, #1
 8015fea:	930d      	str	r3, [sp, #52]	@ 0x34
 8015fec:	f7ff b9f0 	b.w	80153d0 <MEMS_runMagCal.constprop.0+0x448>
 8015ff0:	ee07 3a90 	vmov	s15, r3
 8015ff4:	ed9d 7a02 	vldr	s14, [sp, #8]
 8015ff8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8016260 <MEMS_runMagCal.constprop.0+0x12d8>
 8015ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016000:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016002:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016006:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801600a:	bb3b      	cbnz	r3, 801605c <MEMS_runMagCal.constprop.0+0x10d4>
 801600c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8016010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016018:	f63f acb7 	bhi.w	801598a <MEMS_runMagCal.constprop.0+0xa02>
 801601c:	e415      	b.n	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 801601e:	2201      	movs	r2, #1
 8016020:	409a      	lsls	r2, r3
 8016022:	f8db 30b8 	ldr.w	r3, [fp, #184]	@ 0xb8
 8016026:	4313      	orrs	r3, r2
 8016028:	f8cb 30b8 	str.w	r3, [fp, #184]	@ 0xb8
 801602c:	e706      	b.n	8015e3c <MEMS_runMagCal.constprop.0+0xeb4>
 801602e:	2201      	movs	r2, #1
 8016030:	409a      	lsls	r2, r3
 8016032:	f8db 30b4 	ldr.w	r3, [fp, #180]	@ 0xb4
 8016036:	4313      	orrs	r3, r2
 8016038:	f8cb 30b4 	str.w	r3, [fp, #180]	@ 0xb4
 801603c:	f7ff bbf5 	b.w	801582a <MEMS_runMagCal.constprop.0+0x8a2>
 8016040:	fb9e fcf0 	sdiv	ip, lr, r0
 8016044:	fb00 ec1c 	mls	ip, r0, ip, lr
 8016048:	fa0f fc8c 	sxth.w	ip, ip
 801604c:	e43d      	b.n	80158ca <MEMS_runMagCal.constprop.0+0x942>
 801604e:	fb91 f2f4 	sdiv	r2, r1, r4
 8016052:	fb04 1112 	mls	r1, r4, r2, r1
 8016056:	b209      	sxth	r1, r1
 8016058:	f7ff ba66 	b.w	8015528 <MEMS_runMagCal.constprop.0+0x5a0>
 801605c:	ee07 8a90 	vmov	s15, r8
 8016060:	ed9d 7a02 	vldr	s14, [sp, #8]
 8016064:	ed9f 6a7e 	vldr	s12, [pc, #504]	@ 8016260 <MEMS_runMagCal.constprop.0+0x12d8>
 8016068:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 801606c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016070:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016074:	eed7 7a06 	vfnms.f32	s15, s14, s12
 8016078:	eef4 7ae6 	vcmpe.f32	s15, s13
 801607c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016080:	bf4c      	ite	mi
 8016082:	2301      	movmi	r3, #1
 8016084:	2300      	movpl	r3, #0
 8016086:	930d      	str	r3, [sp, #52]	@ 0x34
 8016088:	e483      	b.n	8015992 <MEMS_runMagCal.constprop.0+0xa0a>
 801608a:	eb0b 03c6 	add.w	r3, fp, r6, lsl #3
 801608e:	f8db 20a4 	ldr.w	r2, [fp, #164]	@ 0xa4
 8016092:	f8db 1020 	ldr.w	r1, [fp, #32]
 8016096:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 801609a:	4413      	add	r3, r2
 801609c:	4299      	cmp	r1, r3
 801609e:	f4bf ae39 	bcs.w	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 80160a2:	f8db 301c 	ldr.w	r3, [fp, #28]
 80160a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80160aa:	2100      	movs	r1, #0
 80160ac:	fb00 f303 	mul.w	r3, r0, r3
 80160b0:	f88b 1014 	strb.w	r1, [fp, #20]
 80160b4:	3364      	adds	r3, #100	@ 0x64
 80160b6:	4293      	cmp	r3, r2
 80160b8:	bf38      	it	cc
 80160ba:	4613      	movcc	r3, r2
 80160bc:	f8cb 3020 	str.w	r3, [fp, #32]
 80160c0:	f7ff bbc3 	b.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 80160c4:	4638      	mov	r0, r7
 80160c6:	f7fa f919 	bl	80102fc <MEMS_updateMagBufferIndex.constprop.0>
 80160ca:	f89b 40a0 	ldrb.w	r4, [fp, #160]	@ 0xa0
 80160ce:	f7ff ba5e 	b.w	801558e <MEMS_runMagCal.constprop.0+0x606>
 80160d2:	3401      	adds	r4, #1
 80160d4:	eddf 6a72 	vldr	s13, [pc, #456]	@ 80162a0 <MEMS_runMagCal.constprop.0+0x1318>
 80160d8:	fb94 f7f1 	sdiv	r7, r4, r1
 80160dc:	fb01 4717 	mls	r7, r1, r7, r4
 80160e0:	ac14      	add	r4, sp, #80	@ 0x50
 80160e2:	edcd 6a13 	vstr	s13, [sp, #76]	@ 0x4c
 80160e6:	edc4 6a00 	vstr	s13, [r4]
 80160ea:	2900      	cmp	r1, #0
 80160ec:	f000 80da 	beq.w	80162a4 <MEMS_runMagCal.constprop.0+0x131c>
 80160f0:	b2bf      	uxth	r7, r7
 80160f2:	eeb0 6a66 	vmov.f32	s12, s13
 80160f6:	f241 2c5c 	movw	ip, #4700	@ 0x125c
 80160fa:	eb01 0807 	add.w	r8, r1, r7
 80160fe:	fbb7 f5f1 	udiv	r5, r7, r1
 8016102:	fb01 7515 	mls	r5, r1, r5, r7
 8016106:	3701      	adds	r7, #1
 8016108:	eb0b 0545 	add.w	r5, fp, r5, lsl #1
 801610c:	8d2e      	ldrh	r6, [r5, #40]	@ 0x28
 801610e:	4566      	cmp	r6, ip
 8016110:	ebac 0506 	sub.w	r5, ip, r6
 8016114:	eba6 0e0c 	sub.w	lr, r6, ip
 8016118:	ee07 6a90 	vmov	s15, r6
 801611c:	b2ad      	uxth	r5, r5
 801611e:	bf88      	it	hi
 8016120:	fa1f f58e 	uxthhi.w	r5, lr
 8016124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016128:	45b8      	cmp	r8, r7
 801612a:	fb05 f505 	mul.w	r5, r5, r5
 801612e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8016132:	ee07 5a90 	vmov	s15, r5
 8016136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801613a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801613e:	d1de      	bne.n	80160fe <MEMS_runMagCal.constprop.0+0x1176>
 8016140:	ee07 3a90 	vmov	s15, r3
 8016144:	ed9f 5a47 	vldr	s10, [pc, #284]	@ 8016264 <MEMS_runMagCal.constprop.0+0x12dc>
 8016148:	eddf 5a47 	vldr	s11, [pc, #284]	@ 8016268 <MEMS_runMagCal.constprop.0+0x12e0>
 801614c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016154:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8016158:	eef1 7ac7 	vsqrt.f32	s15, s14
 801615c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8016160:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016168:	edcd 6a13 	vstr	s13, [sp, #76]	@ 0x4c
 801616c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016170:	edc4 7a00 	vstr	s15, [r4]
 8016174:	dd20      	ble.n	80161b8 <MEMS_runMagCal.constprop.0+0x1230>
 8016176:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 801626c <MEMS_runMagCal.constprop.0+0x12e4>
 801617a:	2302      	movs	r3, #2
 801617c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016180:	f88b 306c 	strb.w	r3, [fp, #108]	@ 0x6c
 8016184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016188:	f77f a990 	ble.w	80154ac <MEMS_runMagCal.constprop.0+0x524>
 801618c:	2301      	movs	r3, #1
 801618e:	f88b 3015 	strb.w	r3, [fp, #21]
 8016192:	f7ff b98b 	b.w	80154ac <MEMS_runMagCal.constprop.0+0x524>
 8016196:	4638      	mov	r0, r7
 8016198:	f7fa f8b0 	bl	80102fc <MEMS_updateMagBufferIndex.constprop.0>
 801619c:	f7ff bb2c 	b.w	80157f8 <MEMS_runMagCal.constprop.0+0x870>
 80161a0:	f8cb 50a4 	str.w	r5, [fp, #164]	@ 0xa4
 80161a4:	e691      	b.n	8015eca <MEMS_runMagCal.constprop.0+0xf42>
 80161a6:	1a40      	subs	r0, r0, r1
 80161a8:	b207      	sxth	r7, r0
 80161aa:	e539      	b.n	8015c20 <MEMS_runMagCal.constprop.0+0xc98>
 80161ac:	fb9a f2f3 	sdiv	r2, sl, r3
 80161b0:	fb03 a212 	mls	r2, r3, r2, sl
 80161b4:	b212      	sxth	r2, r2
 80161b6:	e435      	b.n	8015a24 <MEMS_runMagCal.constprop.0+0xa9c>
 80161b8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8016270 <MEMS_runMagCal.constprop.0+0x12e8>
 80161bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80161c0:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 801626c <MEMS_runMagCal.constprop.0+0x12e4>
 80161c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c8:	d43a      	bmi.n	8016240 <MEMS_runMagCal.constprop.0+0x12b8>
 80161ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80161ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161d2:	f77f ae93 	ble.w	8015efc <MEMS_runMagCal.constprop.0+0xf74>
 80161d6:	2301      	movs	r3, #1
 80161d8:	f88b 3015 	strb.w	r3, [fp, #21]
 80161dc:	e68e      	b.n	8015efc <MEMS_runMagCal.constprop.0+0xf74>
 80161de:	ed9b 5a23 	vldr	s10, [fp, #140]	@ 0x8c
 80161e2:	eef7 4a02 	vmov.f32	s9, #114	@ 0x3f900000  1.125
 80161e6:	ed9b 7a1f 	vldr	s14, [fp, #124]	@ 0x7c
 80161ea:	eddb 3a27 	vldr	s7, [fp, #156]	@ 0x9c
 80161ee:	ee37 7a05 	vadd.f32	s14, s14, s10
 80161f2:	ed9f 4a20 	vldr	s8, [pc, #128]	@ 8016274 <MEMS_runMagCal.constprop.0+0x12ec>
 80161f6:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 80161fa:	ee37 7a23 	vadd.f32	s14, s14, s7
 80161fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016202:	fe87 7a64 	vminnm.f32	s14, s14, s9
 8016206:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
 801620a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801620e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016216:	f73f ad7d 	bgt.w	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 801621a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801621e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016226:	f73f ad75 	bgt.w	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 801622a:	ee65 5a87 	vmul.f32	s11, s11, s14
 801622e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016236:	f73f ad6d 	bgt.w	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 801623a:	9b07      	ldr	r3, [sp, #28]
 801623c:	9303      	str	r3, [sp, #12]
 801623e:	e4c1      	b.n	8015bc4 <MEMS_runMagCal.constprop.0+0xc3c>
 8016240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016244:	2303      	movs	r3, #3
 8016246:	f88b 306c 	strb.w	r3, [fp, #108]	@ 0x6c
 801624a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801624e:	bfd4      	ite	le
 8016250:	2300      	movle	r3, #0
 8016252:	2301      	movgt	r3, #1
 8016254:	f88b 3015 	strb.w	r3, [fp, #21]
 8016258:	e653      	b.n	8015f02 <MEMS_runMagCal.constprop.0+0xf7a>
 801625a:	bf00      	nop
 801625c:	ffffeda4 	.word	0xffffeda4
 8016260:	3a83126f 	.word	0x3a83126f
 8016264:	4b095440 	.word	0x4b095440
 8016268:	3c23d70a 	.word	0x3c23d70a
 801626c:	481c4000 	.word	0x481c4000
 8016270:	471c4000 	.word	0x471c4000
 8016274:	3eaaaaab 	.word	0x3eaaaaab
 8016278:	42960000 	.word	0x42960000
 801627c:	430d0000 	.word	0x430d0000
 8016280:	41966667 	.word	0x41966667
 8016284:	433c0000 	.word	0x433c0000
 8016288:	3c2e4c41 	.word	0x3c2e4c41
 801628c:	423c0000 	.word	0x423c0000
 8016290:	3dcccccd 	.word	0x3dcccccd
 8016294:	2b8cbccb 	.word	0x2b8cbccb
 8016298:	358637bd 	.word	0x358637bd
 801629c:	3e99999a 	.word	0x3e99999a
 80162a0:	00000000 	.word	0x00000000
 80162a4:	2303      	movs	r3, #3
 80162a6:	f88b 5015 	strb.w	r5, [fp, #21]
 80162aa:	f88b 306c 	strb.w	r3, [fp, #108]	@ 0x6c
 80162ae:	e628      	b.n	8015f02 <MEMS_runMagCal.constprop.0+0xf7a>
 80162b0:	8063      	strh	r3, [r4, #2]
 80162b2:	e433      	b.n	8015b1c <MEMS_runMagCal.constprop.0+0xb94>
 80162b4:	fa0f f888 	sxth.w	r8, r8
 80162b8:	9d05      	ldr	r5, [sp, #20]
 80162ba:	ee16 7a10 	vmov	r7, s12
 80162be:	9e06      	ldr	r6, [sp, #24]
 80162c0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80162c4:	45e0      	cmp	r8, ip
 80162c6:	f77f ad25 	ble.w	8015d14 <MEMS_runMagCal.constprop.0+0xd8c>
 80162ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162cc:	b923      	cbnz	r3, 80162d8 <MEMS_runMagCal.constprop.0+0x1350>
 80162ce:	9b01      	ldr	r3, [sp, #4]
 80162d0:	3b02      	subs	r3, #2
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	f240 87ca 	bls.w	801726c <MEMS_runMagCal.constprop.0+0x22e4>
 80162d8:	9b00      	ldr	r3, [sp, #0]
 80162da:	454b      	cmp	r3, r9
 80162dc:	f000 87be 	beq.w	801725c <MEMS_runMagCal.constprop.0+0x22d4>
 80162e0:	ebaa 0303 	sub.w	r3, sl, r3
 80162e4:	fb93 f2f9 	sdiv	r2, r3, r9
 80162e8:	fb09 3312 	mls	r3, r9, r2, r3
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	bfb8      	it	lt
 80162f0:	444b      	addlt	r3, r9
 80162f2:	b21b      	sxth	r3, r3
 80162f4:	ed1f 9a16 	vldr	s18, [pc, #-88]	@ 80162a0 <MEMS_runMagCal.constprop.0+0x1318>
 80162f8:	4619      	mov	r1, r3
 80162fa:	2000      	movs	r0, #0
 80162fc:	eef0 9a49 	vmov.f32	s19, s18
 8016300:	eeb0 aa49 	vmov.f32	s20, s18
 8016304:	3001      	adds	r0, #1
 8016306:	fb91 f2f9 	sdiv	r2, r1, r9
 801630a:	fb09 1212 	mls	r2, r9, r2, r1
 801630e:	b2c4      	uxtb	r4, r0
 8016310:	3101      	adds	r1, #1
 8016312:	b2d2      	uxtb	r2, r2
 8016314:	3204      	adds	r2, #4
 8016316:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 801631a:	f9b2 c0a2 	ldrsh.w	ip, [r2, #162]	@ 0xa2
 801631e:	ee07 ca90 	vmov	s15, ip
 8016322:	f9b2 c0a4 	ldrsh.w	ip, [r2, #164]	@ 0xa4
 8016326:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801632a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801632e:	ee07 ca10 	vmov	s14, ip
 8016332:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016336:	ee3a aa27 	vadd.f32	s20, s20, s15
 801633a:	ee07 2a90 	vmov	s15, r2
 801633e:	9a00      	ldr	r2, [sp, #0]
 8016340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016344:	42a2      	cmp	r2, r4
 8016346:	ee79 9a87 	vadd.f32	s19, s19, s14
 801634a:	ee39 9a27 	vadd.f32	s18, s18, s15
 801634e:	d8d9      	bhi.n	8016304 <MEMS_runMagCal.constprop.0+0x137c>
 8016350:	ee07 2a90 	vmov	s15, r2
 8016354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016358:	2100      	movs	r1, #0
 801635a:	eef8 aae7 	vcvt.f32.s32	s21, s15
 801635e:	ed5f 7a30 	vldr	s15, [pc, #-192]	@ 80162a0 <MEMS_runMagCal.constprop.0+0x1318>
 8016362:	eef0 6a67 	vmov.f32	s13, s15
 8016366:	eec7 4a2a 	vdiv.f32	s9, s14, s21
 801636a:	eef0 5a67 	vmov.f32	s11, s15
 801636e:	eeb0 5a67 	vmov.f32	s10, s15
 8016372:	eef0 ca67 	vmov.f32	s25, s15
 8016376:	eeb0 7a67 	vmov.f32	s14, s15
 801637a:	ee2a aa24 	vmul.f32	s20, s20, s9
 801637e:	ee69 9aa4 	vmul.f32	s19, s19, s9
 8016382:	ee29 9a24 	vmul.f32	s18, s18, s9
 8016386:	3101      	adds	r1, #1
 8016388:	fb93 f2f9 	sdiv	r2, r3, r9
 801638c:	fb09 3212 	mls	r2, r9, r2, r3
 8016390:	b2c8      	uxtb	r0, r1
 8016392:	3301      	adds	r3, #1
 8016394:	b2d2      	uxtb	r2, r2
 8016396:	3204      	adds	r2, #4
 8016398:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 801639c:	f9b2 40a2 	ldrsh.w	r4, [r2, #162]	@ 0xa2
 80163a0:	ee03 4a90 	vmov	s7, r4
 80163a4:	f9b2 40a4 	ldrsh.w	r4, [r2, #164]	@ 0xa4
 80163a8:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 80163ac:	ee04 4a10 	vmov	s8, r4
 80163b0:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80163b4:	ee04 2a90 	vmov	s9, r2
 80163b8:	9a00      	ldr	r2, [sp, #0]
 80163ba:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80163be:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80163c2:	4282      	cmp	r2, r0
 80163c4:	ee73 3aca 	vsub.f32	s7, s7, s20
 80163c8:	ee34 4a69 	vsub.f32	s8, s8, s19
 80163cc:	ee74 4ac9 	vsub.f32	s9, s9, s18
 80163d0:	eee3 caa3 	vfma.f32	s25, s7, s7
 80163d4:	eea3 5a84 	vfma.f32	s10, s7, s8
 80163d8:	eea4 7a04 	vfma.f32	s14, s8, s8
 80163dc:	eee3 5aa4 	vfma.f32	s11, s7, s9
 80163e0:	eee4 6a24 	vfma.f32	s13, s8, s9
 80163e4:	eee4 7aa4 	vfma.f32	s15, s9, s9
 80163e8:	d8cd      	bhi.n	8016386 <MEMS_runMagCal.constprop.0+0x13fe>
 80163ea:	ee25 4aa5 	vmul.f32	s8, s11, s11
 80163ee:	ed5f 4a56 	vldr	s9, [pc, #-344]	@ 8016298 <MEMS_runMagCal.constprop.0+0x1310>
 80163f2:	eea5 4a05 	vfma.f32	s8, s10, s10
 80163f6:	eea6 4aa6 	vfma.f32	s8, s13, s13
 80163fa:	eeb4 4ae4 	vcmpe.f32	s8, s9
 80163fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016402:	f140 865c 	bpl.w	80170be <MEMS_runMagCal.constprop.0+0x2136>
 8016406:	ee7c 6a87 	vadd.f32	s13, s25, s14
 801640a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801640e:	eeb0 6aec 	vabs.f32	s12, s25
 8016412:	eeb0 7ac7 	vabs.f32	s14, s14
 8016416:	eef0 7ae7 	vabs.f32	s15, s15
 801641a:	eeb3 5a09 	vmov.f32	s10, #57	@ 0x41c80000  25.0
 801641e:	fec7 5a46 	vminnm.f32	s11, s14, s12
 8016422:	fe87 7a06 	vmaxnm.f32	s14, s14, s12
 8016426:	fe85 6ae7 	vminnm.f32	s12, s11, s15
 801642a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801642e:	ee66 5a05 	vmul.f32	s11, s12, s10
 8016432:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643a:	f300 862d 	bgt.w	8017098 <MEMS_runMagCal.constprop.0+0x2110>
 801643e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8016442:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016446:	eef4 7a46 	vcmp.f32	s15, s12
 801644a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644e:	dd03      	ble.n	8016458 <MEMS_runMagCal.constprop.0+0x14d0>
 8016450:	9b00      	ldr	r3, [sp, #0]
 8016452:	2b22      	cmp	r3, #34	@ 0x22
 8016454:	f240 8620 	bls.w	8017098 <MEMS_runMagCal.constprop.0+0x2110>
 8016458:	ee86 6aaa 	vdiv.f32	s12, s13, s21
 801645c:	ed1f 7a7a 	vldr	s14, [pc, #-488]	@ 8016278 <MEMS_runMagCal.constprop.0+0x12f0>
 8016460:	eef1 7ac6 	vsqrt.f32	s15, s12
 8016464:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016468:	eef4 7ac7 	vcmpe.f32	s15, s14
 801646c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016470:	f300 8612 	bgt.w	8017098 <MEMS_runMagCal.constprop.0+0x2110>
 8016474:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8016478:	eef4 7ac7 	vcmpe.f32	s15, s14
 801647c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016480:	bf4c      	ite	mi
 8016482:	2301      	movmi	r3, #1
 8016484:	2300      	movpl	r3, #0
 8016486:	f100 8607 	bmi.w	8017098 <MEMS_runMagCal.constprop.0+0x2110>
 801648a:	ed5f 6a84 	vldr	s13, [pc, #-528]	@ 801627c <MEMS_runMagCal.constprop.0+0x12f4>
 801648e:	ee07 7a90 	vmov	s15, r7
 8016492:	9333      	str	r3, [sp, #204]	@ 0xcc
 8016494:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8016498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801649c:	e9cd 3330 	strd	r3, r3, [sp, #192]	@ 0xc0
 80164a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a8:	d408      	bmi.n	80164bc <MEMS_runMagCal.constprop.0+0x1534>
 80164aa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80164ae:	ee17 3a10 	vmov	r3, s14
 80164b2:	b21f      	sxth	r7, r3
 80164b4:	ee07 7a90 	vmov	s15, r7
 80164b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164bc:	ed5f 6a8d 	vldr	s13, [pc, #-564]	@ 801628c <MEMS_runMagCal.constprop.0+0x1304>
 80164c0:	ee86 7a88 	vdiv.f32	s14, s13, s16
 80164c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164cc:	dc08      	bgt.n	80164e0 <MEMS_runMagCal.constprop.0+0x1558>
 80164ce:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80164d2:	ee17 3a10 	vmov	r3, s14
 80164d6:	b21f      	sxth	r7, r3
 80164d8:	ee07 7a90 	vmov	s15, r7
 80164dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164e0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80164e4:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 8016280 <MEMS_runMagCal.constprop.0+0x12f8>
 80164e8:	eef4 7a47 	vcmp.f32	s15, s14
 80164ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164f0:	f340 869c 	ble.w	801722c <MEMS_runMagCal.constprop.0+0x22a4>
 80164f4:	ed1f 7a9d 	vldr	s14, [pc, #-628]	@ 8016284 <MEMS_runMagCal.constprop.0+0x12fc>
 80164f8:	eef4 7a47 	vcmp.f32	s15, s14
 80164fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016500:	f140 8694 	bpl.w	801722c <MEMS_runMagCal.constprop.0+0x22a4>
 8016504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016508:	ed1f 6aa1 	vldr	s12, [pc, #-644]	@ 8016288 <MEMS_runMagCal.constprop.0+0x1300>
 801650c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8016510:	eea7 7a86 	vfma.f32	s14, s15, s12
 8016514:	ee67 7a26 	vmul.f32	s15, s14, s13
 8016518:	ed1f 7aa4 	vldr	s14, [pc, #-656]	@ 801628c <MEMS_runMagCal.constprop.0+0x1304>
 801651c:	ee28 ca29 	vmul.f32	s24, s16, s19
 8016520:	ee68 ca09 	vmul.f32	s25, s16, s18
 8016524:	ed5f 9aa6 	vldr	s19, [pc, #-664]	@ 8016290 <MEMS_runMagCal.constprop.0+0x1308>
 8016528:	ee67 da87 	vmul.f32	s27, s15, s14
 801652c:	ed1f 9aa7 	vldr	s18, [pc, #-668]	@ 8016294 <MEMS_runMagCal.constprop.0+0x130c>
 8016530:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8016534:	ed5f aaa8 	vldr	s21, [pc, #-672]	@ 8016298 <MEMS_runMagCal.constprop.0+0x1310>
 8016538:	ed5f baa7 	vldr	s23, [pc, #-668]	@ 80162a0 <MEMS_runMagCal.constprop.0+0x1318>
 801653c:	ed1f baa9 	vldr	s22, [pc, #-676]	@ 801629c <MEMS_runMagCal.constprop.0+0x1314>
 8016540:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016544:	9501      	str	r5, [sp, #4]
 8016546:	ed8d aa2c 	vstr	s20, [sp, #176]	@ 0xb0
 801654a:	9d00      	ldr	r5, [sp, #0]
 801654c:	ed8d ca2d 	vstr	s24, [sp, #180]	@ 0xb4
 8016550:	edcd ca2e 	vstr	s25, [sp, #184]	@ 0xb8
 8016554:	edcd da2f 	vstr	s27, [sp, #188]	@ 0xbc
 8016558:	edcd da32 	vstr	s27, [sp, #200]	@ 0xc8
 801655c:	9600      	str	r6, [sp, #0]
 801655e:	2400      	movs	r4, #0
 8016560:	2240      	movs	r2, #64	@ 0x40
 8016562:	a834      	add	r0, sp, #208	@ 0xd0
 8016564:	4621      	mov	r1, r4
 8016566:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
 801656a:	e9cd 4421 	strd	r4, r4, [sp, #132]	@ 0x84
 801656e:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
 8016572:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
 8016576:	f002 f924 	bl	80187c2 <memset>
 801657a:	4621      	mov	r1, r4
 801657c:	2240      	movs	r2, #64	@ 0x40
 801657e:	a844      	add	r0, sp, #272	@ 0x110
 8016580:	f002 f91f 	bl	80187c2 <memset>
 8016584:	eef4 dae9 	vcmpe.f32	s27, s19
 8016588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801658c:	f100 81c8 	bmi.w	8016920 <MEMS_runMagCal.constprop.0+0x1998>
 8016590:	454d      	cmp	r5, r9
 8016592:	f000 81b3 	beq.w	80168fc <MEMS_runMagCal.constprop.0+0x1974>
 8016596:	ebaa 0305 	sub.w	r3, sl, r5
 801659a:	fb93 f2f9 	sdiv	r2, r3, r9
 801659e:	fb09 3312 	mls	r3, r9, r2, r3
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	bfb8      	it	lt
 80165a6:	444b      	addlt	r3, r9
 80165a8:	b21b      	sxth	r3, r3
 80165aa:	ed5f 6ac3 	vldr	s13, [pc, #-780]	@ 80162a0 <MEMS_runMagCal.constprop.0+0x1318>
 80165ae:	eef7 ea00 	vmov.f32	s29, #112	@ 0x3f800000  1.0
 80165b2:	2100      	movs	r1, #0
 80165b4:	eeb0 ea66 	vmov.f32	s28, s13
 80165b8:	eef0 2a66 	vmov.f32	s5, s13
 80165bc:	eeb0 da66 	vmov.f32	s26, s13
 80165c0:	eeb0 0a66 	vmov.f32	s0, s13
 80165c4:	eeb0 3a66 	vmov.f32	s6, s13
 80165c8:	eef0 3a66 	vmov.f32	s7, s13
 80165cc:	eef0 0a66 	vmov.f32	s1, s13
 80165d0:	eeb0 1a66 	vmov.f32	s2, s13
 80165d4:	eeb0 4a66 	vmov.f32	s8, s13
 80165d8:	eef0 4a66 	vmov.f32	s9, s13
 80165dc:	eeb0 5a66 	vmov.f32	s10, s13
 80165e0:	eef0 1a66 	vmov.f32	s3, s13
 80165e4:	eeb0 2a66 	vmov.f32	s4, s13
 80165e8:	ee3e fa6d 	vsub.f32	s30, s28, s27
 80165ec:	fb93 f2f9 	sdiv	r2, r3, r9
 80165f0:	fb09 3212 	mls	r2, r9, r2, r3
 80165f4:	b2d2      	uxtb	r2, r2
 80165f6:	3204      	adds	r2, #4
 80165f8:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80165fc:	f9b2 00a4 	ldrsh.w	r0, [r2, #164]	@ 0xa4
 8016600:	ee07 0a10 	vmov	s14, r0
 8016604:	f9b2 00a2 	ldrsh.w	r0, [r2, #162]	@ 0xa2
 8016608:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801660c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016610:	ee06 0a10 	vmov	s12, r0
 8016614:	ee07 2a90 	vmov	s15, r2
 8016618:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801661c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8016620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016624:	ee26 6a08 	vmul.f32	s12, s12, s16
 8016628:	ee77 5a4c 	vsub.f32	s11, s14, s24
 801662c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016630:	ee76 fa4a 	vsub.f32	s31, s12, s20
 8016634:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8016638:	ee3c 7a47 	vsub.f32	s14, s24, s14
 801663c:	ee3a 6a46 	vsub.f32	s12, s20, s12
 8016640:	eeef 5aaf 	vfma.f32	s11, s31, s31
 8016644:	ee77 faec 	vsub.f32	s31, s15, s25
 8016648:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 801664c:	eeef 5aaf 	vfma.f32	s11, s31, s31
 8016650:	eef4 5ac9 	vcmpe.f32	s11, s18
 8016654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016658:	d505      	bpl.n	8016666 <MEMS_runMagCal.constprop.0+0x16de>
 801665a:	3101      	adds	r1, #1
 801665c:	3301      	adds	r3, #1
 801665e:	b2ca      	uxtb	r2, r1
 8016660:	4295      	cmp	r5, r2
 8016662:	d8c1      	bhi.n	80165e8 <MEMS_runMagCal.constprop.0+0x1660>
 8016664:	e02c      	b.n	80166c0 <MEMS_runMagCal.constprop.0+0x1738>
 8016666:	eef1 fae5 	vsqrt.f32	s31, s11
 801666a:	3101      	adds	r1, #1
 801666c:	3301      	adds	r3, #1
 801666e:	b2ca      	uxtb	r2, r1
 8016670:	4295      	cmp	r5, r2
 8016672:	ee76 6aae 	vadd.f32	s13, s13, s29
 8016676:	ee3f ea2f 	vadd.f32	s28, s30, s31
 801667a:	ee8e faaf 	vdiv.f32	s30, s29, s31
 801667e:	ee7d 5aef 	vsub.f32	s11, s27, s31
 8016682:	ee26 6a0f 	vmul.f32	s12, s12, s30
 8016686:	ee27 7a0f 	vmul.f32	s14, s14, s30
 801668a:	ee67 7a8f 	vmul.f32	s15, s15, s30
 801668e:	eea5 2a86 	vfma.f32	s4, s11, s12
 8016692:	eee6 1a06 	vfma.f32	s3, s12, s12
 8016696:	eea6 5a07 	vfma.f32	s10, s12, s14
 801669a:	eee6 4a27 	vfma.f32	s9, s12, s15
 801669e:	eea5 1a87 	vfma.f32	s2, s11, s14
 80166a2:	eea5 0aa7 	vfma.f32	s0, s11, s15
 80166a6:	eee7 0a07 	vfma.f32	s1, s14, s14
 80166aa:	eee7 3a27 	vfma.f32	s7, s14, s15
 80166ae:	eea7 daa7 	vfma.f32	s26, s15, s15
 80166b2:	ee34 4a46 	vsub.f32	s8, s8, s12
 80166b6:	ee33 3a47 	vsub.f32	s6, s6, s14
 80166ba:	ee72 2ae7 	vsub.f32	s5, s5, s15
 80166be:	d893      	bhi.n	80165e8 <MEMS_runMagCal.constprop.0+0x1660>
 80166c0:	2240      	movs	r2, #64	@ 0x40
 80166c2:	2100      	movs	r1, #0
 80166c4:	a844      	add	r0, sp, #272	@ 0x110
 80166c6:	edcd 6a43 	vstr	s13, [sp, #268]	@ 0x10c
 80166ca:	ed8d ea22 	vstr	s28, [sp, #136]	@ 0x88
 80166ce:	ed8d da3e 	vstr	s26, [sp, #248]	@ 0xf8
 80166d2:	ed8d 0a21 	vstr	s0, [sp, #132]	@ 0x84
 80166d6:	edcd 0a39 	vstr	s1, [sp, #228]	@ 0xe4
 80166da:	ed8d 1a20 	vstr	s2, [sp, #128]	@ 0x80
 80166de:	edcd 1a34 	vstr	s3, [sp, #208]	@ 0xd0
 80166e2:	ed8d 2a1f 	vstr	s4, [sp, #124]	@ 0x7c
 80166e6:	edcd 2a3f 	vstr	s5, [sp, #252]	@ 0xfc
 80166ea:	edcd 2a42 	vstr	s5, [sp, #264]	@ 0x108
 80166ee:	ed8d 3a3b 	vstr	s6, [sp, #236]	@ 0xec
 80166f2:	ed8d 3a41 	vstr	s6, [sp, #260]	@ 0x104
 80166f6:	edcd 3a3a 	vstr	s7, [sp, #232]	@ 0xe8
 80166fa:	edcd 3a3d 	vstr	s7, [sp, #244]	@ 0xf4
 80166fe:	ed8d 4a37 	vstr	s8, [sp, #220]	@ 0xdc
 8016702:	ed8d 4a40 	vstr	s8, [sp, #256]	@ 0x100
 8016706:	edcd 4a36 	vstr	s9, [sp, #216]	@ 0xd8
 801670a:	edcd 4a3c 	vstr	s9, [sp, #240]	@ 0xf0
 801670e:	ed8d 5a35 	vstr	s10, [sp, #212]	@ 0xd4
 8016712:	ed8d 5a38 	vstr	s10, [sp, #224]	@ 0xe0
 8016716:	f002 f854 	bl	80187c2 <memset>
 801671a:	a934      	add	r1, sp, #208	@ 0xd0
 801671c:	ab44      	add	r3, sp, #272	@ 0x110
 801671e:	2000      	movs	r0, #0
 8016720:	460a      	mov	r2, r1
 8016722:	2800      	cmp	r0, #0
 8016724:	f000 858c 	beq.w	8017240 <MEMS_runMagCal.constprop.0+0x22b8>
 8016728:	eddd 7a44 	vldr	s15, [sp, #272]	@ 0x110
 801672c:	eeb0 7ae7 	vabs.f32	s14, s15
 8016730:	eeb4 7aea 	vcmpe.f32	s14, s21
 8016734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016738:	f100 80f2 	bmi.w	8016920 <MEMS_runMagCal.constprop.0+0x1998>
 801673c:	ed91 7a00 	vldr	s14, [r1]
 8016740:	b244      	sxtb	r4, r0
 8016742:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016746:	edc3 6a00 	vstr	s13, [r3]
 801674a:	2c00      	cmp	r4, #0
 801674c:	f000 8572 	beq.w	8017234 <MEMS_runMagCal.constprop.0+0x22ac>
 8016750:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 8016754:	2801      	cmp	r0, #1
 8016756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801675a:	f000 8553 	beq.w	8017204 <MEMS_runMagCal.constprop.0+0x227c>
 801675e:	ed9d 6a49 	vldr	s12, [sp, #292]	@ 0x124
 8016762:	eeb0 7ac6 	vabs.f32	s14, s12
 8016766:	eeb4 7aea 	vcmpe.f32	s14, s21
 801676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676e:	f100 80d7 	bmi.w	8016920 <MEMS_runMagCal.constprop.0+0x1998>
 8016772:	ed91 7a01 	vldr	s14, [r1, #4]
 8016776:	2802      	cmp	r0, #2
 8016778:	ee77 7a67 	vsub.f32	s15, s14, s15
 801677c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8016780:	ed83 7a01 	vstr	s14, [r3, #4]
 8016784:	eddd 7a4d 	vldr	s15, [sp, #308]	@ 0x134
 8016788:	ed9d 6a4c 	vldr	s12, [sp, #304]	@ 0x130
 801678c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016790:	eee6 7a26 	vfma.f32	s15, s12, s13
 8016794:	f000 8522 	beq.w	80171dc <MEMS_runMagCal.constprop.0+0x2254>
 8016798:	eddd 5a4e 	vldr	s11, [sp, #312]	@ 0x138
 801679c:	eeb0 6ae5 	vabs.f32	s12, s11
 80167a0:	eeb4 6aea 	vcmpe.f32	s12, s21
 80167a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167a8:	f100 80ba 	bmi.w	8016920 <MEMS_runMagCal.constprop.0+0x1998>
 80167ac:	ed91 6a02 	vldr	s12, [r1, #8]
 80167b0:	2803      	cmp	r0, #3
 80167b2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80167b6:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80167ba:	ed83 6a02 	vstr	s12, [r3, #8]
 80167be:	eddd 7a51 	vldr	s15, [sp, #324]	@ 0x144
 80167c2:	eddd 5a50 	vldr	s11, [sp, #320]	@ 0x140
 80167c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80167ca:	ed9d 7a52 	vldr	s14, [sp, #328]	@ 0x148
 80167ce:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80167d2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80167d6:	f000 8440 	beq.w	801705a <MEMS_runMagCal.constprop.0+0x20d2>
 80167da:	ed9d 6a53 	vldr	s12, [sp, #332]	@ 0x14c
 80167de:	eeb0 7ac6 	vabs.f32	s14, s12
 80167e2:	eeb4 7aea 	vcmpe.f32	s14, s21
 80167e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167ea:	f100 8099 	bmi.w	8016920 <MEMS_runMagCal.constprop.0+0x1998>
 80167ee:	ed91 7a03 	vldr	s14, [r1, #12]
 80167f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80167f6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80167fa:	edc3 6a03 	vstr	s13, [r3, #12]
 80167fe:	3001      	adds	r0, #1
 8016800:	3110      	adds	r1, #16
 8016802:	3310      	adds	r3, #16
 8016804:	3214      	adds	r2, #20
 8016806:	2804      	cmp	r0, #4
 8016808:	d18b      	bne.n	8016722 <MEMS_runMagCal.constprop.0+0x179a>
 801680a:	af1f      	add	r7, sp, #124	@ 0x7c
 801680c:	a91b      	add	r1, sp, #108	@ 0x6c
 801680e:	a844      	add	r0, sp, #272	@ 0x110
 8016810:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8016814:	463a      	mov	r2, r7
 8016816:	ed9f da41 	vldr	s26, [pc, #260]	@ 801691c <MEMS_runMagCal.constprop.0+0x1994>
 801681a:	ae23      	add	r6, sp, #140	@ 0x8c
 801681c:	2400      	movs	r4, #0
 801681e:	f7f9 fc17 	bl	8010050 <llEvaluate.constprop.0>
 8016822:	aa1f      	add	r2, sp, #124	@ 0x7c
 8016824:	a923      	add	r1, sp, #140	@ 0x8c
 8016826:	a844      	add	r0, sp, #272	@ 0x110
 8016828:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
 801682c:	e9cd 4421 	strd	r4, r4, [sp, #132]	@ 0x84
 8016830:	eca7 1a01 	vstmia	r7!, {s2}
 8016834:	f7f9 fc0c 	bl	8010050 <llEvaluate.constprop.0>
 8016838:	ecf6 7a01 	vldmia	r6!, {s15}
 801683c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016844:	f340 84ad 	ble.w	80171a2 <MEMS_runMagCal.constprop.0+0x221a>
 8016848:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801684c:	fe8d da07 	vmaxnm.f32	s26, s26, s14
 8016850:	ab22      	add	r3, sp, #136	@ 0x88
 8016852:	429f      	cmp	r7, r3
 8016854:	d1e5      	bne.n	8016822 <MEMS_runMagCal.constprop.0+0x189a>
 8016856:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 801685a:	ed9d 7a1e 	vldr	s14, [sp, #120]	@ 0x78
 801685e:	eddd 6a1c 	vldr	s13, [sp, #112]	@ 0x70
 8016862:	ed9d 6a1d 	vldr	s12, [sp, #116]	@ 0x74
 8016866:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 801686a:	ee3c ca26 	vadd.f32	s24, s24, s13
 801686e:	eef0 6ae6 	vabs.f32	s13, s13
 8016872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016876:	ee7c ca86 	vadd.f32	s25, s25, s12
 801687a:	ed8d ca2d 	vstr	s24, [sp, #180]	@ 0xb4
 801687e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016882:	edcd ca2e 	vstr	s25, [sp, #184]	@ 0xb8
 8016886:	bf48      	it	mi
 8016888:	edcd 7a1e 	vstrmi	s15, [sp, #120]	@ 0x78
 801688c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8016890:	ed9d 7a1e 	vldr	s14, [sp, #120]	@ 0x78
 8016894:	ee3a aa27 	vadd.f32	s20, s20, s15
 8016898:	eef0 7ae7 	vabs.f32	s15, s15
 801689c:	ee7d da87 	vadd.f32	s27, s27, s14
 80168a0:	eeb0 7ac7 	vabs.f32	s14, s14
 80168a4:	ed8d aa2c 	vstr	s20, [sp, #176]	@ 0xb0
 80168a8:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80168ac:	eef0 6ac6 	vabs.f32	s13, s12
 80168b0:	fec7 7aab 	vmaxnm.f32	s15, s15, s23
 80168b4:	edcd da2f 	vstr	s27, [sp, #188]	@ 0xbc
 80168b8:	fec6 7aa7 	vmaxnm.f32	s15, s13, s15
 80168bc:	eef4 7acb 	vcmpe.f32	s15, s22
 80168c0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8016908 <MEMS_runMagCal.constprop.0+0x1980>
 80168c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168c8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80168cc:	bf4c      	ite	mi
 80168ce:	2301      	movmi	r3, #1
 80168d0:	2300      	movpl	r3, #0
 80168d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168d6:	f003 0301 	and.w	r3, r3, #1
 80168da:	bf58      	it	pl
 80168dc:	2300      	movpl	r3, #0
 80168de:	b113      	cbz	r3, 80168e6 <MEMS_runMagCal.constprop.0+0x195e>
 80168e0:	f1b8 0f01 	cmp.w	r8, #1
 80168e4:	d807      	bhi.n	80168f6 <MEMS_runMagCal.constprop.0+0x196e>
 80168e6:	f108 0801 	add.w	r8, r8, #1
 80168ea:	fa5f f888 	uxtb.w	r8, r8
 80168ee:	f1b8 0f05 	cmp.w	r8, #5
 80168f2:	f47f ae34 	bne.w	801655e <MEMS_runMagCal.constprop.0+0x15d6>
 80168f6:	e9dd 6500 	ldrd	r6, r5, [sp]
 80168fa:	e019      	b.n	8016930 <MEMS_runMagCal.constprop.0+0x19a8>
 80168fc:	fb9a f3f5 	sdiv	r3, sl, r5
 8016900:	fb05 a313 	mls	r3, r5, r3, sl
 8016904:	b21b      	sxth	r3, r3
 8016906:	e650      	b.n	80165aa <MEMS_runMagCal.constprop.0+0x1622>
 8016908:	3f666666 	.word	0x3f666666
 801690c:	00000000 	.word	0x00000000
 8016910:	41f00001 	.word	0x41f00001
 8016914:	423c0000 	.word	0x423c0000
 8016918:	400ccccd 	.word	0x400ccccd
 801691c:	3dcccccd 	.word	0x3dcccccd
 8016920:	ed1f da06 	vldr	s26, [pc, #-24]	@ 801690c <MEMS_runMagCal.constprop.0+0x1984>
 8016924:	ed5f 7a06 	vldr	s15, [pc, #-24]	@ 8016910 <MEMS_runMagCal.constprop.0+0x1988>
 8016928:	eeb0 7a4d 	vmov.f32	s14, s26
 801692c:	e9dd 6500 	ldrd	r6, r5, [sp]
 8016930:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 8016934:	eddd 6a2f 	vldr	s13, [sp, #188]	@ 0xbc
 8016938:	ed5f 5a0a 	vldr	s11, [pc, #-40]	@ 8016914 <MEMS_runMagCal.constprop.0+0x198c>
 801693c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016940:	ee85 9aa6 	vdiv.f32	s18, s11, s13
 8016944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016948:	dc11      	bgt.n	801696e <MEMS_runMagCal.constprop.0+0x19e6>
 801694a:	ed5f 7a0d 	vldr	s15, [pc, #-52]	@ 8016918 <MEMS_runMagCal.constprop.0+0x1990>
 801694e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016956:	bfcc      	ite	gt
 8016958:	2401      	movgt	r4, #1
 801695a:	2400      	movle	r4, #0
 801695c:	dc07      	bgt.n	801696e <MEMS_runMagCal.constprop.0+0x19e6>
 801695e:	ed5f 7a11 	vldr	s15, [pc, #-68]	@ 801691c <MEMS_runMagCal.constprop.0+0x1994>
 8016962:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801696a:	f200 820a 	bhi.w	8016d82 <MEMS_runMagCal.constprop.0+0x1dfa>
 801696e:	4be6      	ldr	r3, [pc, #920]	@ (8016d08 <MEMS_runMagCal.constprop.0+0x1d80>)
 8016970:	ed9f dae6 	vldr	s26, [pc, #920]	@ 8016d0c <MEMS_runMagCal.constprop.0+0x1d84>
 8016974:	9323      	str	r3, [sp, #140]	@ 0x8c
 8016976:	9332      	str	r3, [sp, #200]	@ 0xc8
 8016978:	eddd 5a32 	vldr	s11, [sp, #200]	@ 0xc8
 801697c:	2300      	movs	r3, #0
 801697e:	ed9d 6a2c 	vldr	s12, [sp, #176]	@ 0xb0
 8016982:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8016986:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 801698a:	eddd 7a2e 	vldr	s15, [sp, #184]	@ 0xb8
 801698e:	ee26 6a28 	vmul.f32	s12, s12, s17
 8016992:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8016996:	ed9d 5a23 	vldr	s10, [sp, #140]	@ 0x8c
 801699a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801699e:	ed8d 9a44 	vstr	s18, [sp, #272]	@ 0x110
 80169a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169a6:	ed8d 9a48 	vstr	s18, [sp, #288]	@ 0x120
 80169aa:	ed8d 6a34 	vstr	s12, [sp, #208]	@ 0xd0
 80169ae:	ed8d 9a4c 	vstr	s18, [sp, #304]	@ 0x130
 80169b2:	edcd 6a35 	vstr	s13, [sp, #212]	@ 0xd4
 80169b6:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80169ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 80169bc:	934b      	str	r3, [sp, #300]	@ 0x12c
 80169be:	e9cd 3345 	strd	r3, r3, [sp, #276]	@ 0x114
 80169c2:	e9cd 3349 	strd	r3, r3, [sp, #292]	@ 0x124
 80169c6:	f100 8356 	bmi.w	8017076 <MEMS_runMagCal.constprop.0+0x20ee>
 80169ca:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80169ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169d2:	f100 8350 	bmi.w	8017076 <MEMS_runMagCal.constprop.0+0x20ee>
 80169d6:	eddf 7ace 	vldr	s15, [pc, #824]	@ 8016d10 <MEMS_runMagCal.constprop.0+0x1d88>
 80169da:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80169de:	ee85 7a25 	vdiv.f32	s14, s10, s11
 80169e2:	eddf 4acc 	vldr	s9, [pc, #816]	@ 8016d14 <MEMS_runMagCal.constprop.0+0x1d8c>
 80169e6:	ed9f 5acc 	vldr	s10, [pc, #816]	@ 8016d18 <MEMS_runMagCal.constprop.0+0x1d90>
 80169ea:	eddf 5acc 	vldr	s11, [pc, #816]	@ 8016d1c <MEMS_runMagCal.constprop.0+0x1d94>
 80169ee:	ee79 7a67 	vsub.f32	s15, s18, s15
 80169f2:	ee79 6a46 	vsub.f32	s13, s18, s12
 80169f6:	eef0 7ae7 	vabs.f32	s15, s15
 80169fa:	eef0 6ae6 	vabs.f32	s13, s13
 80169fe:	eef4 7ae4 	vcmpe.f32	s15, s9
 8016a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a06:	eeb4 9ac5 	vcmpe.f32	s18, s10
 8016a0a:	ee36 2a47 	vsub.f32	s4, s12, s14
 8016a0e:	bf48      	it	mi
 8016a10:	2301      	movmi	r3, #1
 8016a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a16:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016a1a:	f003 0301 	and.w	r3, r3, #1
 8016a1e:	bfd8      	it	le
 8016a20:	2300      	movle	r3, #0
 8016a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a26:	bf48      	it	mi
 8016a28:	f043 0301 	orrmi.w	r3, r3, #1
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	f000 8322 	beq.w	8017076 <MEMS_runMagCal.constprop.0+0x20ee>
 8016a32:	eddf 7abb 	vldr	s15, [pc, #748]	@ 8016d20 <MEMS_runMagCal.constprop.0+0x1d98>
 8016a36:	eeb4 7a67 	vcmp.f32	s14, s15
 8016a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a3e:	f300 831a 	bgt.w	8017076 <MEMS_runMagCal.constprop.0+0x20ee>
 8016a42:	ac19      	add	r4, sp, #100	@ 0x64
 8016a44:	aa34      	add	r2, sp, #208	@ 0xd0
 8016a46:	9f07      	ldr	r7, [sp, #28]
 8016a48:	4623      	mov	r3, r4
 8016a4a:	ecf2 7a01 	vldmia	r2!, {s15}
 8016a4e:	3701      	adds	r7, #1
 8016a50:	fef8 7a67 	vrinta.f32	s15, s15
 8016a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a58:	b2ff      	uxtb	r7, r7
 8016a5a:	ee17 1a90 	vmov	r1, s15
 8016a5e:	2f03      	cmp	r7, #3
 8016a60:	f823 1b02 	strh.w	r1, [r3], #2
 8016a64:	d1f1      	bne.n	8016a4a <MEMS_runMagCal.constprop.0+0x1ac2>
 8016a66:	eddd 7a02 	vldr	s15, [sp, #8]
 8016a6a:	ab15      	add	r3, sp, #84	@ 0x54
 8016a6c:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8016d24 <MEMS_runMagCal.constprop.0+0x1d9c>
 8016a70:	eeb0 0a48 	vmov.f32	s0, s16
 8016a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016a78:	aa16      	add	r2, sp, #88	@ 0x58
 8016a7a:	a944      	add	r1, sp, #272	@ 0x110
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016a82:	fef8 7a67 	vrinta.f32	s15, s15
 8016a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016a8a:	ee17 8a90 	vmov	r8, s15
 8016a8e:	edcb 7a06 	vstr	s15, [fp, #24]
 8016a92:	f7f9 fb55 	bl	8010140 <getMagStats.constprop.0>
 8016a96:	f89b 60a0 	ldrb.w	r6, [fp, #160]	@ 0xa0
 8016a9a:	ee06 0a90 	vmov	s13, r0
 8016a9e:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8016d28 <MEMS_runMagCal.constprop.0+0x1da0>
 8016aa2:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
 8016aa6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016aaa:	005b      	lsls	r3, r3, #1
 8016aac:	ee07 3a90 	vmov	s15, r3
 8016ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016ab8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac0:	dc12      	bgt.n	8016ae8 <MEMS_runMagCal.constprop.0+0x1b60>
 8016ac2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8016ac6:	ed9d 7a15 	vldr	s14, [sp, #84]	@ 0x54
 8016aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad2:	bfcc      	ite	gt
 8016ad4:	2301      	movgt	r3, #1
 8016ad6:	2300      	movle	r3, #0
 8016ad8:	2d00      	cmp	r5, #0
 8016ada:	bf0c      	ite	eq
 8016adc:	2300      	moveq	r3, #0
 8016ade:	f003 0301 	andne.w	r3, r3, #1
 8016ae2:	f083 0301 	eor.w	r3, r3, #1
 8016ae6:	9307      	str	r3, [sp, #28]
 8016ae8:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8016aec:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 8016d2c <MEMS_runMagCal.constprop.0+0x1da4>
 8016af0:	2200      	movs	r2, #0
 8016af2:	6820      	ldr	r0, [r4, #0]
 8016af4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016af8:	eddd 6a15 	vldr	s13, [sp, #84]	@ 0x54
 8016afc:	feb8 7a47 	vrinta.f32	s14, s14
 8016b00:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8016b04:	f8cd 809c 	str.w	r8, [sp, #156]	@ 0x9c
 8016b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016b0c:	f8cd 00a2 	str.w	r0, [sp, #162]	@ 0xa2
 8016b10:	ee17 3a10 	vmov	r3, s14
 8016b14:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
 8016b18:	ee17 3a90 	vmov	r3, s15
 8016b1c:	b29d      	uxth	r5, r3
 8016b1e:	88a3      	ldrh	r3, [r4, #4]
 8016b20:	f365 020f 	bfi	r2, r5, #0, #16
 8016b24:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
 8016b28:	9b03      	ldr	r3, [sp, #12]
 8016b2a:	f365 421f 	bfi	r2, r5, #16, #16
 8016b2e:	f8ad 50ac 	strh.w	r5, [sp, #172]	@ 0xac
 8016b32:	2b01      	cmp	r3, #1
 8016b34:	922a      	str	r2, [sp, #168]	@ 0xa8
 8016b36:	f000 828d 	beq.w	8017054 <MEMS_runMagCal.constprop.0+0x20cc>
 8016b3a:	ee28 7aa6 	vmul.f32	s14, s17, s13
 8016b3e:	eec7 7a02 	vdiv.f32	s15, s14, s4
 8016b42:	fef8 7a67 	vrinta.f32	s15, s15
 8016b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016b4a:	edcd 7a00 	vstr	s15, [sp]
 8016b4e:	f89d 9000 	ldrb.w	r9, [sp]
 8016b52:	2300      	movs	r3, #0
 8016b54:	9a07      	ldr	r2, [sp, #28]
 8016b56:	f88d 90a0 	strb.w	r9, [sp, #160]	@ 0xa0
 8016b5a:	f88b 3014 	strb.w	r3, [fp, #20]
 8016b5e:	2a00      	cmp	r2, #0
 8016b60:	f43e ae73 	beq.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 8016b64:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016b66:	f88b 3015 	strb.w	r3, [fp, #21]
 8016b6a:	2a00      	cmp	r2, #0
 8016b6c:	f040 8136 	bne.w	8016ddc <MEMS_runMagCal.constprop.0+0x1e54>
 8016b70:	ac14      	add	r4, sp, #80	@ 0x50
 8016b72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016b76:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 8016b7a:	f10d 0c9c 	add.w	ip, sp, #156	@ 0x9c
 8016b7e:	eddf 7a70 	vldr	s15, [pc, #448]	@ 8016d40 <MEMS_runMagCal.constprop.0+0x1db8>
 8016b82:	fb02 f303 	mul.w	r3, r2, r3
 8016b86:	f8df e1b4 	ldr.w	lr, [pc, #436]	@ 8016d3c <MEMS_runMagCal.constprop.0+0x1db4>
 8016b8a:	f8cb 801c 	str.w	r8, [fp, #28]
 8016b8e:	f04f 0801 	mov.w	r8, #1
 8016b92:	ee03 3a10 	vmov	s6, r3
 8016b96:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	@ 0xaa
 8016b9a:	ed9b 0a01 	vldr	s0, [fp, #4]
 8016b9e:	fb02 f303 	mul.w	r3, r2, r3
 8016ba2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016ba6:	f89b 5025 	ldrb.w	r5, [fp, #37]	@ 0x25
 8016baa:	ee03 3a90 	vmov	s7, r3
 8016bae:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	@ 0xac
 8016bb2:	ee23 3a27 	vmul.f32	s6, s6, s15
 8016bb6:	f88b 8054 	strb.w	r8, [fp, #84]	@ 0x54
 8016bba:	fb02 f303 	mul.w	r3, r2, r3
 8016bbe:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8016bc2:	ee06 3a10 	vmov	s12, r3
 8016bc6:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 8016bca:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016bce:	ed8b 3a1f 	vstr	s6, [fp, #124]	@ 0x7c
 8016bd2:	ee04 3a90 	vmov	s9, r3
 8016bd6:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 8016bda:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016bde:	ee05 3a10 	vmov	s10, r3
 8016be2:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 8016be6:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8016bea:	edcb 3a23 	vstr	s7, [fp, #140]	@ 0x8c
 8016bee:	ee05 3a90 	vmov	s11, r3
 8016bf2:	23ff      	movs	r3, #255	@ 0xff
 8016bf4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016bf8:	f88b 3026 	strb.w	r3, [fp, #38]	@ 0x26
 8016bfc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016c00:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016c04:	ed8b 6a27 	vstr	s12, [fp, #156]	@ 0x9c
 8016c08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c10:	f8dc 3000 	ldr.w	r3, [ip]
 8016c14:	f8ce 3000 	str.w	r3, [lr]
 8016c18:	f88b 806d 	strb.w	r8, [fp, #109]	@ 0x6d
 8016c1c:	edcb 4a1c 	vstr	s9, [fp, #112]	@ 0x70
 8016c20:	ed8b 5a1d 	vstr	s10, [fp, #116]	@ 0x74
 8016c24:	edcb 5a1e 	vstr	s11, [fp, #120]	@ 0x78
 8016c28:	2e00      	cmp	r6, #0
 8016c2a:	d04e      	beq.n	8016cca <MEMS_runMagCal.constprop.0+0x1d42>
 8016c2c:	ed9f 4a40 	vldr	s8, [pc, #256]	@ 8016d30 <MEMS_runMagCal.constprop.0+0x1da8>
 8016c30:	2000      	movs	r0, #0
 8016c32:	f89b 10a1 	ldrb.w	r1, [fp, #161]	@ 0xa1
 8016c36:	f04f 32ff 	mov.w	r2, #4294967295
 8016c3a:	ee20 4a04 	vmul.f32	s8, s0, s8
 8016c3e:	4684      	mov	ip, r0
 8016c40:	3201      	adds	r2, #1
 8016c42:	3001      	adds	r0, #1
 8016c44:	fbbc f3f1 	udiv	r3, ip, r1
 8016c48:	fb01 c313 	mls	r3, r1, r3, ip
 8016c4c:	fb92 fcf5 	sdiv	ip, r2, r5
 8016c50:	3315      	adds	r3, #21
 8016c52:	fb05 221c 	mls	r2, r5, ip, r2
 8016c56:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016c5a:	b252      	sxtb	r2, r2
 8016c5c:	f9b3 c01c 	ldrsh.w	ip, [r3, #28]
 8016c60:	ee07 ca90 	vmov	s15, ip
 8016c64:	f9b3 c01a 	ldrsh.w	ip, [r3, #26]
 8016c68:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8016c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c70:	ee06 ca90 	vmov	s13, ip
 8016c74:	ee07 3a10 	vmov	s14, r3
 8016c78:	fa1f fc80 	uxth.w	ip, r0
 8016c7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016c80:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
 8016c84:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8016c88:	45b4      	cmp	ip, r6
 8016c8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016c8e:	b200      	sxth	r0, r0
 8016c90:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8016c94:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8016c98:	ee37 7a65 	vsub.f32	s14, s14, s11
 8016c9c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8016ca0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016ca4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016ca8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8016cac:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016cb0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8016cb4:	ee67 7a04 	vmul.f32	s15, s14, s8
 8016cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016cbc:	ee17 ea90 	vmov	lr, s15
 8016cc0:	f8a3 e028 	strh.w	lr, [r3, #40]	@ 0x28
 8016cc4:	dbbc      	blt.n	8016c40 <MEMS_runMagCal.constprop.0+0x1cb8>
 8016cc6:	f88b 2026 	strb.w	r2, [fp, #38]	@ 0x26
 8016cca:	42b5      	cmp	r5, r6
 8016ccc:	aa13      	add	r2, sp, #76	@ 0x4c
 8016cce:	f10d 00a2 	add.w	r0, sp, #162	@ 0xa2
 8016cd2:	4623      	mov	r3, r4
 8016cd4:	bf28      	it	cs
 8016cd6:	4635      	movcs	r5, r6
 8016cd8:	4916      	ldr	r1, [pc, #88]	@ (8016d34 <MEMS_runMagCal.constprop.0+0x1dac>)
 8016cda:	f88b 5024 	strb.w	r5, [fp, #36]	@ 0x24
 8016cde:	f7f9 fa2f 	bl	8010140 <getMagStats.constprop.0>
 8016ce2:	edd2 7a00 	vldr	s15, [r2]
 8016ce6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8016cea:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8016d38 <MEMS_runMagCal.constprop.0+0x1db0>
 8016cee:	edd4 6a00 	vldr	s13, [r4]
 8016cf2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016cf6:	eef0 7ae7 	vabs.f32	s15, s15
 8016cfa:	eef4 7a47 	vcmp.f32	s15, s14
 8016cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d02:	d524      	bpl.n	8016d4e <MEMS_runMagCal.constprop.0+0x1dc6>
 8016d04:	e01e      	b.n	8016d44 <MEMS_runMagCal.constprop.0+0x1dbc>
 8016d06:	bf00      	nop
 8016d08:	423c0000 	.word	0x423c0000
 8016d0c:	41f00001 	.word	0x41f00001
 8016d10:	3f8ccccd 	.word	0x3f8ccccd
 8016d14:	3f266666 	.word	0x3f266666
 8016d18:	3ee66666 	.word	0x3ee66666
 8016d1c:	3eb33333 	.word	0x3eb33333
 8016d20:	3ecccccc 	.word	0x3ecccccc
 8016d24:	3a83126f 	.word	0x3a83126f
 8016d28:	3c23d70a 	.word	0x3c23d70a
 8016d2c:	447a0000 	.word	0x447a0000
 8016d30:	42c80000 	.word	0x42c80000
 8016d34:	240003c4 	.word	0x240003c4
 8016d38:	423c0000 	.word	0x423c0000
 8016d3c:	240003a0 	.word	0x240003a0
 8016d40:	358637bd 	.word	0x358637bd
 8016d44:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d4c:	d411      	bmi.n	8016d72 <MEMS_runMagCal.constprop.0+0x1dea>
 8016d4e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8016d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d5a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016d5e:	bf4c      	ite	mi
 8016d60:	2701      	movmi	r7, #1
 8016d62:	2700      	movpl	r7, #0
 8016d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d68:	f007 0701 	and.w	r7, r7, #1
 8016d6c:	bf58      	it	pl
 8016d6e:	2700      	movpl	r7, #0
 8016d70:	3701      	adds	r7, #1
 8016d72:	f1b9 0fc9 	cmp.w	r9, #201	@ 0xc9
 8016d76:	bf28      	it	cs
 8016d78:	2702      	movcs	r7, #2
 8016d7a:	f88b 706c 	strb.w	r7, [fp, #108]	@ 0x6c
 8016d7e:	f7fe bd64 	b.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 8016d82:	2224      	movs	r2, #36	@ 0x24
 8016d84:	4621      	mov	r1, r4
 8016d86:	a844      	add	r0, sp, #272	@ 0x110
 8016d88:	f001 fd1b 	bl	80187c2 <memset>
 8016d8c:	4623      	mov	r3, r4
 8016d8e:	a82c      	add	r0, sp, #176	@ 0xb0
 8016d90:	a934      	add	r1, sp, #208	@ 0xd0
 8016d92:	aa44      	add	r2, sp, #272	@ 0x110
 8016d94:	ecf0 7a01 	vldmia	r0!, {s15}
 8016d98:	4614      	mov	r4, r2
 8016d9a:	3301      	adds	r3, #1
 8016d9c:	3210      	adds	r2, #16
 8016d9e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016da2:	ed84 9a00 	vstr	s18, [r4]
 8016da6:	2b03      	cmp	r3, #3
 8016da8:	fef8 7a67 	vrinta.f32	s15, s15
 8016dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016db0:	ee17 4a90 	vmov	r4, s15
 8016db4:	f821 4b02 	strh.w	r4, [r1], #2
 8016db8:	d1ec      	bne.n	8016d94 <MEMS_runMagCal.constprop.0+0x1e0c>
 8016dba:	eeb0 0a48 	vmov.f32	s0, s16
 8016dbe:	ab23      	add	r3, sp, #140	@ 0x8c
 8016dc0:	aa32      	add	r2, sp, #200	@ 0xc8
 8016dc2:	a944      	add	r1, sp, #272	@ 0x110
 8016dc4:	a834      	add	r0, sp, #208	@ 0xd0
 8016dc6:	f7f9 f9bb 	bl	8010140 <getMagStats.constprop.0>
 8016dca:	eddd 7a23 	vldr	s15, [sp, #140]	@ 0x8c
 8016dce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8016dd2:	ee27 da8d 	vmul.f32	s26, s15, s26
 8016dd6:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8016dda:	e5cd      	b.n	8016978 <MEMS_runMagCal.constprop.0+0x19f0>
 8016ddc:	e9cd 3345 	strd	r3, r3, [sp, #276]	@ 0x114
 8016de0:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016de2:	ac14      	add	r4, sp, #80	@ 0x50
 8016de4:	934b      	str	r3, [sp, #300]	@ 0x12c
 8016de6:	eeb0 0a48 	vmov.f32	s0, s16
 8016dea:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 8016d40 <MEMS_runMagCal.constprop.0+0x1db8>
 8016dee:	aa13      	add	r2, sp, #76	@ 0x4c
 8016df0:	49ee      	ldr	r1, [pc, #952]	@ (80171ac <MEMS_runMagCal.constprop.0+0x2224>)
 8016df2:	e9cd 3349 	strd	r3, r3, [sp, #292]	@ 0x124
 8016df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016dfa:	f1a1 001e 	sub.w	r0, r1, #30
 8016dfe:	fb03 f305 	mul.w	r3, r3, r5
 8016e02:	ee07 3a90 	vmov	s15, r3
 8016e06:	ab34      	add	r3, sp, #208	@ 0xd0
 8016e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016e10:	edcd 7a44 	vstr	s15, [sp, #272]	@ 0x110
 8016e14:	edcd 7a48 	vstr	s15, [sp, #288]	@ 0x120
 8016e18:	edcd 7a4c 	vstr	s15, [sp, #304]	@ 0x130
 8016e1c:	f7f9 f990 	bl	8010140 <getMagStats.constprop.0>
 8016e20:	eeb0 0a48 	vmov.f32	s0, s16
 8016e24:	a944      	add	r1, sp, #272	@ 0x110
 8016e26:	4623      	mov	r3, r4
 8016e28:	f10d 00a2 	add.w	r0, sp, #162	@ 0xa2
 8016e2c:	f7f9 f988 	bl	8010140 <getMagStats.constprop.0>
 8016e30:	eddd 7a13 	vldr	s15, [sp, #76]	@ 0x4c
 8016e34:	eddf 6ade 	vldr	s13, [pc, #888]	@ 80171b0 <MEMS_runMagCal.constprop.0+0x2228>
 8016e38:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8016e3c:	ed94 6a00 	vldr	s12, [r4]
 8016e40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016e44:	eef0 7ae7 	vabs.f32	s15, s15
 8016e48:	eef4 7a47 	vcmp.f32	s15, s14
 8016e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e50:	d505      	bpl.n	8016e5e <MEMS_runMagCal.constprop.0+0x1ed6>
 8016e52:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e5a:	f100 80f9 	bmi.w	8017050 <MEMS_runMagCal.constprop.0+0x20c8>
 8016e5e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8016e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e6a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016e6e:	bf4c      	ite	mi
 8016e70:	2301      	movmi	r3, #1
 8016e72:	2300      	movpl	r3, #0
 8016e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e78:	f003 0301 	and.w	r3, r3, #1
 8016e7c:	bf58      	it	pl
 8016e7e:	2300      	movpl	r3, #0
 8016e80:	3301      	adds	r3, #1
 8016e82:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8016e86:	eddd 5a34 	vldr	s11, [sp, #208]	@ 0xd0
 8016e8a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016e8e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e96:	f57e acd8 	bpl.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 8016e9a:	f89b 206c 	ldrb.w	r2, [fp, #108]	@ 0x6c
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	f63e acd3 	bhi.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 8016ea4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8016ea8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016eac:	eef4 5ae7 	vcmpe.f32	s11, s15
 8016eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eb4:	d40c      	bmi.n	8016ed0 <MEMS_runMagCal.constprop.0+0x1f48>
 8016eb6:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8016eba:	eef4 5ae7 	vcmpe.f32	s11, s15
 8016ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ec2:	f57f ae56 	bpl.w	8016b72 <MEMS_runMagCal.constprop.0+0x1bea>
 8016ec6:	f89b 305c 	ldrb.w	r3, [fp, #92]	@ 0x5c
 8016eca:	454b      	cmp	r3, r9
 8016ecc:	f4bf ae51 	bcs.w	8016b72 <MEMS_runMagCal.constprop.0+0x1bea>
 8016ed0:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 8016ed4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8016ed8:	f9bb 2060 	ldrsh.w	r2, [fp, #96]	@ 0x60
 8016edc:	ee05 3a10 	vmov	s10, r3
 8016ee0:	f9bd e0a4 	ldrsh.w	lr, [sp, #164]	@ 0xa4
 8016ee4:	f9bb 105e 	ldrsh.w	r1, [fp, #94]	@ 0x5e
 8016ee8:	eba2 000e 	sub.w	r0, r2, lr
 8016eec:	ee15 ca10 	vmov	ip, s10
 8016ef0:	f9bb 3062 	ldrsh.w	r3, [fp, #98]	@ 0x62
 8016ef4:	eba1 0c0c 	sub.w	ip, r1, ip
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	bfb8      	it	lt
 8016efc:	4240      	neglt	r0, r0
 8016efe:	f1bc 0f00 	cmp.w	ip, #0
 8016f02:	bfb8      	it	lt
 8016f04:	f1cc 0c00 	rsblt	ip, ip, #0
 8016f08:	4560      	cmp	r0, ip
 8016f0a:	bfb8      	it	lt
 8016f0c:	4660      	movlt	r0, ip
 8016f0e:	f9bd c0a6 	ldrsh.w	ip, [sp, #166]	@ 0xa6
 8016f12:	eba3 0a0c 	sub.w	sl, r3, ip
 8016f16:	b200      	sxth	r0, r0
 8016f18:	f1ba 0f00 	cmp.w	sl, #0
 8016f1c:	bfb8      	it	lt
 8016f1e:	f1ca 0a00 	rsblt	sl, sl, #0
 8016f22:	4550      	cmp	r0, sl
 8016f24:	bfb8      	it	lt
 8016f26:	4650      	movlt	r0, sl
 8016f28:	b200      	sxth	r0, r0
 8016f2a:	ee07 0a90 	vmov	s15, r0
 8016f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f32:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f3e:	f57f ae18 	bpl.w	8016b72 <MEMS_runMagCal.constprop.0+0x1bea>
 8016f42:	ee36 6a25 	vadd.f32	s12, s12, s11
 8016f46:	ee07 1a90 	vmov	s15, r1
 8016f4a:	ee04 9a90 	vmov	s9, r9
 8016f4e:	eef8 2ac5 	vcvt.f32.s32	s5, s10
 8016f52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016f56:	ee07 2a90 	vmov	s15, r2
 8016f5a:	ee85 4a86 	vdiv.f32	s8, s11, s12
 8016f5e:	ee05 ea10 	vmov	s10, lr
 8016f62:	eeb8 2ae4 	vcvt.f32.s32	s4, s9
 8016f66:	ee04 5a90 	vmov	s9, r5
 8016f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016f6e:	ee07 3a90 	vmov	s15, r3
 8016f72:	f89b 305c 	ldrb.w	r3, [fp, #92]	@ 0x5c
 8016f76:	eef8 3ae4 	vcvt.f32.s32	s7, s9
 8016f7a:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8016f7e:	ee06 3a10 	vmov	s12, r3
 8016f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f86:	eeb8 3ac5 	vcvt.f32.s32	s6, s10
 8016f8a:	ee05 ca10 	vmov	s10, ip
 8016f8e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016f92:	f8bb 3064 	ldrh.w	r3, [fp, #100]	@ 0x64
 8016f96:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016f9a:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8016f9e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8016fa2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8016fa6:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8016faa:	eea4 6a02 	vfma.f32	s12, s8, s4
 8016fae:	eee4 7a05 	vfma.f32	s15, s8, s10
 8016fb2:	ee05 3a10 	vmov	s10, r3
 8016fb6:	f8bb 3066 	ldrh.w	r3, [fp, #102]	@ 0x66
 8016fba:	eee4 6a22 	vfma.f32	s13, s8, s5
 8016fbe:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016fc2:	ee05 3a90 	vmov	s11, r3
 8016fc6:	f8bb 3068 	ldrh.w	r3, [fp, #104]	@ 0x68
 8016fca:	ee27 7a24 	vmul.f32	s14, s14, s9
 8016fce:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8016fd2:	ee25 5a24 	vmul.f32	s10, s10, s9
 8016fd6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016fda:	ed8d 6a00 	vstr	s12, [sp]
 8016fde:	ee06 3a10 	vmov	s12, r3
 8016fe2:	eea4 5a23 	vfma.f32	s10, s8, s7
 8016fe6:	f89d 9000 	ldrb.w	r9, [sp]
 8016fea:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8016fee:	eea4 7a03 	vfma.f32	s14, s8, s6
 8016ff2:	f88d 90a0 	strb.w	r9, [sp, #160]	@ 0xa0
 8016ff6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016ffa:	eee4 5a23 	vfma.f32	s11, s8, s7
 8016ffe:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017002:	ee26 6a24 	vmul.f32	s12, s12, s9
 8017006:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 801700a:	ee16 3a90 	vmov	r3, s13
 801700e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017012:	eea4 6a23 	vfma.f32	s12, s8, s7
 8017016:	f8ad 30a2 	strh.w	r3, [sp, #162]	@ 0xa2
 801701a:	ee15 3a10 	vmov	r3, s10
 801701e:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8017022:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 8017026:	ee17 3a10 	vmov	r3, s14
 801702a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801702e:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 8017032:	ee15 3a90 	vmov	r3, s11
 8017036:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801703a:	f8ad 30aa 	strh.w	r3, [sp, #170]	@ 0xaa
 801703e:	ee17 3a90 	vmov	r3, s15
 8017042:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
 8017046:	ee16 3a10 	vmov	r3, s12
 801704a:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
 801704e:	e590      	b.n	8016b72 <MEMS_runMagCal.constprop.0+0x1bea>
 8017050:	2303      	movs	r3, #3
 8017052:	e716      	b.n	8016e82 <MEMS_runMagCal.constprop.0+0x1efa>
 8017054:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8017058:	e57b      	b.n	8016b52 <MEMS_runMagCal.constprop.0+0x1bca>
 801705a:	ed92 7a00 	vldr	s14, [r2]
 801705e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017066:	f77f ac5b 	ble.w	8016920 <MEMS_runMagCal.constprop.0+0x1998>
 801706a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801706e:	eef1 6ac7 	vsqrt.f32	s13, s14
 8017072:	f7ff bbc2 	b.w	80167fa <MEMS_runMagCal.constprop.0+0x1872>
 8017076:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80171b4 <MEMS_runMagCal.constprop.0+0x222c>
 801707a:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 801707e:	f88b 60a0 	strb.w	r6, [fp, #160]	@ 0xa0
 8017082:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8017086:	ee80 0a08 	vdiv.f32	s0, s0, s16
 801708a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801708e:	ee17 3a90 	vmov	r3, s15
 8017092:	b298      	uxth	r0, r3
 8017094:	f7f9 f932 	bl	80102fc <MEMS_updateMagBufferIndex.constprop.0>
 8017098:	eddd 7a02 	vldr	s15, [sp, #8]
 801709c:	2300      	movs	r3, #0
 801709e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80171b8 <MEMS_runMagCal.constprop.0+0x2230>
 80170a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80170a6:	f88b 3014 	strb.w	r3, [fp, #20]
 80170aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80170ae:	fef8 7a67 	vrinta.f32	s15, s15
 80170b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80170b6:	edcb 7a06 	vstr	s15, [fp, #24]
 80170ba:	f7fe bbc6 	b.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 80170be:	ee3c ba87 	vadd.f32	s22, s25, s14
 80170c2:	eddf ba3e 	vldr	s23, [pc, #248]	@ 80171bc <MEMS_runMagCal.constprop.0+0x2234>
 80170c6:	eef0 3a00 	vmov.f32	s7, #0	@ 0x40000000  2.0
 80170ca:	eddf 2a3d 	vldr	s5, [pc, #244]	@ 80171c0 <MEMS_runMagCal.constprop.0+0x2238>
 80170ce:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 80170d2:	ee3b ba27 	vadd.f32	s22, s22, s15
 80170d6:	ee2b ba2b 	vmul.f32	s22, s22, s23
 80170da:	ee37 7a4b 	vsub.f32	s14, s14, s22
 80170de:	ee3c 6acb 	vsub.f32	s12, s25, s22
 80170e2:	ee77 7acb 	vsub.f32	s15, s15, s22
 80170e6:	ee67 4a07 	vmul.f32	s9, s14, s14
 80170ea:	eee6 4a06 	vfma.f32	s9, s12, s12
 80170ee:	eee4 4a23 	vfma.f32	s9, s8, s7
 80170f2:	eee7 4aa7 	vfma.f32	s9, s15, s15
 80170f6:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80170fa:	eeb1 cae4 	vsqrt.f32	s24, s9
 80170fe:	ee83 4a0c 	vdiv.f32	s8, s6, s24
 8017102:	ee25 5a04 	vmul.f32	s10, s10, s8
 8017106:	ee67 4a84 	vmul.f32	s9, s15, s8
 801710a:	ee65 5a84 	vmul.f32	s11, s11, s8
 801710e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017112:	ee65 7a64 	vnmul.f32	s15, s10, s9
 8017116:	ee27 7a04 	vmul.f32	s14, s14, s8
 801711a:	ee26 6a04 	vmul.f32	s12, s12, s8
 801711e:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8017122:	ee26 4ae6 	vnmul.f32	s8, s13, s13
 8017126:	eea4 4a87 	vfma.f32	s8, s9, s14
 801712a:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801712e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017132:	eea6 7a85 	vfma.f32	s14, s13, s10
 8017136:	eee4 7a06 	vfma.f32	s15, s8, s12
 801713a:	eeb8 6a00 	vmov.f32	s12, #128	@ 0xc0000000 -2.0
 801713e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8017142:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801714a:	d944      	bls.n	80171d6 <MEMS_runMagCal.constprop.0+0x224e>
 801714c:	eef4 7ae3 	vcmpe.f32	s15, s7
 8017150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017154:	da3c      	bge.n	80171d0 <MEMS_runMagCal.constprop.0+0x2248>
 8017156:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801715a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801715e:	f003 fbaf 	bl	801a8c0 <acosf>
 8017162:	ee60 ba2b 	vmul.f32	s23, s0, s23
 8017166:	ee3c ca0c 	vadd.f32	s24, s24, s24
 801716a:	eeb0 0a6b 	vmov.f32	s0, s23
 801716e:	eef0 ca4b 	vmov.f32	s25, s22
 8017172:	f003 fd29 	bl	801abc8 <cosf>
 8017176:	eddf 7a13 	vldr	s15, [pc, #76]	@ 80171c4 <MEMS_runMagCal.constprop.0+0x223c>
 801717a:	eeec ca00 	vfma.f32	s25, s24, s0
 801717e:	ee3b 0aa7 	vadd.f32	s0, s23, s15
 8017182:	f003 fd21 	bl	801abc8 <cosf>
 8017186:	eef0 7a4b 	vmov.f32	s15, s22
 801718a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801718e:	eeec 7a00 	vfma.f32	s15, s24, s0
 8017192:	ee6b 6a07 	vmul.f32	s13, s22, s14
 8017196:	ee3c 7aa7 	vadd.f32	s14, s25, s15
 801719a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801719e:	f7ff b936 	b.w	801640e <MEMS_runMagCal.constprop.0+0x1486>
 80171a2:	eeb2 da04 	vmov.f32	s26, #36	@ 0x41200000  10.0
 80171a6:	f7ff bb53 	b.w	8016850 <MEMS_runMagCal.constprop.0+0x18c8>
 80171aa:	bf00      	nop
 80171ac:	240003c4 	.word	0x240003c4
 80171b0:	423c0000 	.word	0x423c0000
 80171b4:	433d0000 	.word	0x433d0000
 80171b8:	3a83126f 	.word	0x3a83126f
 80171bc:	3eaaaaab 	.word	0x3eaaaaab
 80171c0:	3e2aaaab 	.word	0x3e2aaaab
 80171c4:	40060a92 	.word	0x40060a92
 80171c8:	00000000 	.word	0x00000000
 80171cc:	3f860a92 	.word	0x3f860a92
 80171d0:	ed5f ba03 	vldr	s23, [pc, #-12]	@ 80171c8 <MEMS_runMagCal.constprop.0+0x2240>
 80171d4:	e7c7      	b.n	8017166 <MEMS_runMagCal.constprop.0+0x21de>
 80171d6:	ed5f ba03 	vldr	s23, [pc, #-12]	@ 80171cc <MEMS_runMagCal.constprop.0+0x2244>
 80171da:	e7c4      	b.n	8017166 <MEMS_runMagCal.constprop.0+0x21de>
 80171dc:	ed92 7a00 	vldr	s14, [r2]
 80171e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80171e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171e8:	f77f ab9a 	ble.w	8016920 <MEMS_runMagCal.constprop.0+0x1998>
 80171ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80171f0:	3110      	adds	r1, #16
 80171f2:	3214      	adds	r2, #20
 80171f4:	3310      	adds	r3, #16
 80171f6:	2003      	movs	r0, #3
 80171f8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80171fc:	ed03 7a02 	vstr	s14, [r3, #-8]
 8017200:	f7ff ba92 	b.w	8016728 <MEMS_runMagCal.constprop.0+0x17a0>
 8017204:	ed92 7a00 	vldr	s14, [r2]
 8017208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801720c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017210:	f77f ab86 	ble.w	8016920 <MEMS_runMagCal.constprop.0+0x1998>
 8017214:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017218:	3110      	adds	r1, #16
 801721a:	3214      	adds	r2, #20
 801721c:	3310      	adds	r3, #16
 801721e:	2002      	movs	r0, #2
 8017220:	eef1 7ac7 	vsqrt.f32	s15, s14
 8017224:	ed43 7a03 	vstr	s15, [r3, #-12]
 8017228:	f7ff ba7e 	b.w	8016728 <MEMS_runMagCal.constprop.0+0x17a0>
 801722c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017230:	f7ff b972 	b.w	8016518 <MEMS_runMagCal.constprop.0+0x1590>
 8017234:	3110      	adds	r1, #16
 8017236:	3310      	adds	r3, #16
 8017238:	3214      	adds	r2, #20
 801723a:	2001      	movs	r0, #1
 801723c:	f7ff ba74 	b.w	8016728 <MEMS_runMagCal.constprop.0+0x17a0>
 8017240:	edd2 7a00 	vldr	s15, [r2]
 8017244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801724c:	f77f ab68 	ble.w	8016920 <MEMS_runMagCal.constprop.0+0x1998>
 8017250:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8017254:	ed83 7a00 	vstr	s14, [r3]
 8017258:	f7ff bad1 	b.w	80167fe <MEMS_runMagCal.constprop.0+0x1876>
 801725c:	461a      	mov	r2, r3
 801725e:	fb9a f3f3 	sdiv	r3, sl, r3
 8017262:	fb02 a313 	mls	r3, r2, r3, sl
 8017266:	b21b      	sxth	r3, r3
 8017268:	f7ff b844 	b.w	80162f4 <MEMS_runMagCal.constprop.0+0x136c>
 801726c:	eddb 6a1c 	vldr	s13, [fp, #112]	@ 0x70
 8017270:	ac19      	add	r4, sp, #100	@ 0x64
 8017272:	ed9b 7a1d 	vldr	s14, [fp, #116]	@ 0x74
 8017276:	eeb0 0a48 	vmov.f32	s0, s16
 801727a:	fef8 6a66 	vrinta.f32	s13, s13
 801727e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017282:	eddb 7a1e 	vldr	s15, [fp, #120]	@ 0x78
 8017286:	feb8 7a47 	vrinta.f32	s14, s14
 801728a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801728e:	aa16      	add	r2, sp, #88	@ 0x58
 8017290:	ee16 3a90 	vmov	r3, s13
 8017294:	fef8 7a67 	vrinta.f32	s15, s15
 8017298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801729c:	4922      	ldr	r1, [pc, #136]	@ (8017328 <MEMS_runMagCal.constprop.0+0x23a0>)
 801729e:	8023      	strh	r3, [r4, #0]
 80172a0:	ee17 3a10 	vmov	r3, s14
 80172a4:	4620      	mov	r0, r4
 80172a6:	8063      	strh	r3, [r4, #2]
 80172a8:	ee17 3a90 	vmov	r3, s15
 80172ac:	80a3      	strh	r3, [r4, #4]
 80172ae:	ab15      	add	r3, sp, #84	@ 0x54
 80172b0:	f7f8 ff46 	bl	8010140 <getMagStats.constprop.0>
 80172b4:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 801732c <MEMS_runMagCal.constprop.0+0x23a4>
 80172b8:	ed93 7a00 	vldr	s14, [r3]
 80172bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80172c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172c4:	d50c      	bpl.n	80172e0 <MEMS_runMagCal.constprop.0+0x2358>
 80172c6:	b958      	cbnz	r0, 80172e0 <MEMS_runMagCal.constprop.0+0x2358>
 80172c8:	b17d      	cbz	r5, 80172ea <MEMS_runMagCal.constprop.0+0x2362>
 80172ca:	f89b 305d 	ldrb.w	r3, [fp, #93]	@ 0x5d
 80172ce:	ee07 3a90 	vmov	s15, r3
 80172d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172d6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80172da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172de:	dc04      	bgt.n	80172ea <MEMS_runMagCal.constprop.0+0x2362>
 80172e0:	2300      	movs	r3, #0
 80172e2:	6023      	str	r3, [r4, #0]
 80172e4:	80a3      	strh	r3, [r4, #4]
 80172e6:	f7fe bff7 	b.w	80162d8 <MEMS_runMagCal.constprop.0+0x1350>
 80172ea:	eddd 7a02 	vldr	s15, [sp, #8]
 80172ee:	2203      	movs	r2, #3
 80172f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8017330 <MEMS_runMagCal.constprop.0+0x23a8>
 80172f4:	2300      	movs	r3, #0
 80172f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80172fa:	f88b 206c 	strb.w	r2, [fp, #108]	@ 0x6c
 80172fe:	f88b 3014 	strb.w	r3, [fp, #20]
 8017302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017306:	fef8 7a67 	vrinta.f32	s15, s15
 801730a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801730e:	edcb 7a06 	vstr	s15, [fp, #24]
 8017312:	f7fe ba9a 	b.w	801584a <MEMS_runMagCal.constprop.0+0x8c2>
 8017316:	461a      	mov	r2, r3
 8017318:	fb9a f3f3 	sdiv	r3, sl, r3
 801731c:	fb02 a313 	mls	r3, r2, r3, sl
 8017320:	b21b      	sxth	r3, r3
 8017322:	f7fe bc5d 	b.w	8015be0 <MEMS_runMagCal.constprop.0+0xc58>
 8017326:	bf00      	nop
 8017328:	240003c4 	.word	0x240003c4
 801732c:	3ff4cccd 	.word	0x3ff4cccd
 8017330:	3a83126f 	.word	0x3a83126f

08017334 <MotionFX_initialize>:
 8017334:	4a4b      	ldr	r2, [pc, #300]	@ (8017464 <MotionFX_initialize+0x130>)
 8017336:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
 801733a:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 801733e:	6813      	ldr	r3, [r2, #0]
 8017340:	f023 0301 	bic.w	r3, r3, #1
 8017344:	b530      	push	{r4, r5, lr}
 8017346:	6013      	str	r3, [r2, #0]
 8017348:	f24c 2240 	movw	r2, #49728	@ 0xc240
 801734c:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 8017350:	b085      	sub	sp, #20
 8017352:	4604      	mov	r4, r0
 8017354:	400b      	ands	r3, r1
 8017356:	4293      	cmp	r3, r2
 8017358:	d013      	beq.n	8017382 <MotionFX_initialize+0x4e>
 801735a:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 801735e:	f24c 2270 	movw	r2, #49776	@ 0xc270
 8017362:	400b      	ands	r3, r1
 8017364:	4293      	cmp	r3, r2
 8017366:	d00c      	beq.n	8017382 <MotionFX_initialize+0x4e>
 8017368:	4a3f      	ldr	r2, [pc, #252]	@ (8017468 <MotionFX_initialize+0x134>)
 801736a:	2301      	movs	r3, #1
 801736c:	6093      	str	r3, [r2, #8]
 801736e:	6893      	ldr	r3, [r2, #8]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d1fc      	bne.n	801736e <MotionFX_initialize+0x3a>
 8017374:	493d      	ldr	r1, [pc, #244]	@ (801746c <MotionFX_initialize+0x138>)
 8017376:	4b3e      	ldr	r3, [pc, #248]	@ (8017470 <MotionFX_initialize+0x13c>)
 8017378:	6011      	str	r1, [r2, #0]
 801737a:	6812      	ldr	r2, [r2, #0]
 801737c:	429a      	cmp	r2, r3
 801737e:	d02c      	beq.n	80173da <MotionFX_initialize+0xa6>
 8017380:	e7fe      	b.n	8017380 <MotionFX_initialize+0x4c>
 8017382:	4b3c      	ldr	r3, [pc, #240]	@ (8017474 <MotionFX_initialize+0x140>)
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d1ee      	bne.n	8017368 <MotionFX_initialize+0x34>
 801738a:	4a3b      	ldr	r2, [pc, #236]	@ (8017478 <MotionFX_initialize+0x144>)
 801738c:	6813      	ldr	r3, [r2, #0]
 801738e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017392:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8017396:	d054      	beq.n	8017442 <MotionFX_initialize+0x10e>
 8017398:	6813      	ldr	r3, [r2, #0]
 801739a:	f240 4183 	movw	r1, #1155	@ 0x483
 801739e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80173a2:	428b      	cmp	r3, r1
 80173a4:	d04d      	beq.n	8017442 <MotionFX_initialize+0x10e>
 80173a6:	6813      	ldr	r3, [r2, #0]
 80173a8:	f240 4285 	movw	r2, #1157	@ 0x485
 80173ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80173b0:	4293      	cmp	r3, r2
 80173b2:	d046      	beq.n	8017442 <MotionFX_initialize+0x10e>
 80173b4:	4b31      	ldr	r3, [pc, #196]	@ (801747c <MotionFX_initialize+0x148>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80173bc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80173c0:	d1d2      	bne.n	8017368 <MotionFX_initialize+0x34>
 80173c2:	4a2f      	ldr	r2, [pc, #188]	@ (8017480 <MotionFX_initialize+0x14c>)
 80173c4:	2301      	movs	r3, #1
 80173c6:	6093      	str	r3, [r2, #8]
 80173c8:	6893      	ldr	r3, [r2, #8]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d1fc      	bne.n	80173c8 <MotionFX_initialize+0x94>
 80173ce:	4927      	ldr	r1, [pc, #156]	@ (801746c <MotionFX_initialize+0x138>)
 80173d0:	4b27      	ldr	r3, [pc, #156]	@ (8017470 <MotionFX_initialize+0x13c>)
 80173d2:	6011      	str	r1, [r2, #0]
 80173d4:	6812      	ldr	r2, [r2, #0]
 80173d6:	429a      	cmp	r2, r3
 80173d8:	d1d2      	bne.n	8017380 <MotionFX_initialize+0x4c>
 80173da:	4b2a      	ldr	r3, [pc, #168]	@ (8017484 <MotionFX_initialize+0x150>)
 80173dc:	2501      	movs	r5, #1
 80173de:	4a2a      	ldr	r2, [pc, #168]	@ (8017488 <MotionFX_initialize+0x154>)
 80173e0:	4620      	mov	r0, r4
 80173e2:	9303      	str	r3, [sp, #12]
 80173e4:	f882 53c4 	strb.w	r5, [r2, #964]	@ 0x3c4
 80173e8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80173ec:	f7f9 f926 	bl	801063c <MFX_emptyAttitude>
 80173f0:	a901      	add	r1, sp, #4
 80173f2:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 80173f6:	f7f7 fceb 	bl	800edd0 <updateOrientation>
 80173fa:	a903      	add	r1, sp, #12
 80173fc:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8017400:	f7f7 fce6 	bl	800edd0 <updateOrientation>
 8017404:	a902      	add	r1, sp, #8
 8017406:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801740a:	f7f7 fce1 	bl	800edd0 <updateOrientation>
 801740e:	4b1f      	ldr	r3, [pc, #124]	@ (801748c <MotionFX_initialize+0x158>)
 8017410:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8017414:	491e      	ldr	r1, [pc, #120]	@ (8017490 <MotionFX_initialize+0x15c>)
 8017416:	4a1f      	ldr	r2, [pc, #124]	@ (8017494 <MotionFX_initialize+0x160>)
 8017418:	62a3      	str	r3, [r4, #40]	@ 0x28
 801741a:	4b1f      	ldr	r3, [pc, #124]	@ (8017498 <MotionFX_initialize+0x164>)
 801741c:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801741e:	61a1      	str	r1, [r4, #24]
 8017420:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017424:	481d      	ldr	r0, [pc, #116]	@ (801749c <MotionFX_initialize+0x168>)
 8017426:	61e2      	str	r2, [r4, #28]
 8017428:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801742c:	6223      	str	r3, [r4, #32]
 801742e:	f240 1301 	movw	r3, #257	@ 0x101
 8017432:	73e5      	strb	r5, [r4, #15]
 8017434:	6360      	str	r0, [r4, #52]	@ 0x34
 8017436:	8721      	strh	r1, [r4, #56]	@ 0x38
 8017438:	80a2      	strh	r2, [r4, #4]
 801743a:	f8a4 300d 	strh.w	r3, [r4, #13]
 801743e:	b005      	add	sp, #20
 8017440:	bd30      	pop	{r4, r5, pc}
 8017442:	4a17      	ldr	r2, [pc, #92]	@ (80174a0 <MotionFX_initialize+0x16c>)
 8017444:	2301      	movs	r3, #1
 8017446:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801744a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801744e:	2b00      	cmp	r3, #0
 8017450:	d1fb      	bne.n	801744a <MotionFX_initialize+0x116>
 8017452:	4906      	ldr	r1, [pc, #24]	@ (801746c <MotionFX_initialize+0x138>)
 8017454:	4b06      	ldr	r3, [pc, #24]	@ (8017470 <MotionFX_initialize+0x13c>)
 8017456:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 801745a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801745e:	429a      	cmp	r2, r3
 8017460:	d0bb      	beq.n	80173da <MotionFX_initialize+0xa6>
 8017462:	e78d      	b.n	8017380 <MotionFX_initialize+0x4c>
 8017464:	e0002000 	.word	0xe0002000
 8017468:	40023000 	.word	0x40023000
 801746c:	f407a5c2 	.word	0xf407a5c2
 8017470:	b5e8b5cd 	.word	0xb5e8b5cd
 8017474:	e0042000 	.word	0xe0042000
 8017478:	5c001000 	.word	0x5c001000
 801747c:	50081000 	.word	0x50081000
 8017480:	4c004000 	.word	0x4c004000
 8017484:	00756e65 	.word	0x00756e65
 8017488:	24000348 	.word	0x24000348
 801748c:	3f666666 	.word	0x3f666666
 8017490:	3a51b717 	.word	0x3a51b717
 8017494:	3a378034 	.word	0x3a378034
 8017498:	3b378034 	.word	0x3b378034
 801749c:	3f2ac083 	.word	0x3f2ac083
 80174a0:	58024000 	.word	0x58024000

080174a4 <MotionFX_enable_9X>:
 80174a4:	4b0e      	ldr	r3, [pc, #56]	@ (80174e0 <MotionFX_enable_9X+0x3c>)
 80174a6:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 80174aa:	b103      	cbz	r3, 80174ae <MotionFX_enable_9X+0xa>
 80174ac:	b901      	cbnz	r1, 80174b0 <MotionFX_enable_9X+0xc>
 80174ae:	4770      	bx	lr
 80174b0:	b530      	push	{r4, r5, lr}
 80174b2:	1d05      	adds	r5, r0, #4
 80174b4:	b099      	sub	sp, #100	@ 0x64
 80174b6:	4604      	mov	r4, r0
 80174b8:	225c      	movs	r2, #92	@ 0x5c
 80174ba:	4629      	mov	r1, r5
 80174bc:	a801      	add	r0, sp, #4
 80174be:	f001 fa00 	bl	80188c2 <memcpy>
 80174c2:	4620      	mov	r0, r4
 80174c4:	f7f9 f8ba 	bl	801063c <MFX_emptyAttitude>
 80174c8:	225c      	movs	r2, #92	@ 0x5c
 80174ca:	a901      	add	r1, sp, #4
 80174cc:	4628      	mov	r0, r5
 80174ce:	f001 f9f8 	bl	80188c2 <memcpy>
 80174d2:	2301      	movs	r3, #1
 80174d4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80174d8:	7363      	strb	r3, [r4, #13]
 80174da:	b019      	add	sp, #100	@ 0x64
 80174dc:	bd30      	pop	{r4, r5, pc}
 80174de:	bf00      	nop
 80174e0:	24000348 	.word	0x24000348

080174e4 <MotionFX_update>:
 80174e4:	b430      	push	{r4, r5}
 80174e6:	4c07      	ldr	r4, [pc, #28]	@ (8017504 <MotionFX_update+0x20>)
 80174e8:	9d02      	ldr	r5, [sp, #8]
 80174ea:	f894 43c4 	ldrb.w	r4, [r4, #964]	@ 0x3c4
 80174ee:	b90c      	cbnz	r4, 80174f4 <MotionFX_update+0x10>
 80174f0:	bc30      	pop	{r4, r5}
 80174f2:	4770      	bx	lr
 80174f4:	469c      	mov	ip, r3
 80174f6:	462b      	mov	r3, r5
 80174f8:	ed9c 0a00 	vldr	s0, [ip]
 80174fc:	bc30      	pop	{r4, r5}
 80174fe:	f7f9 bb87 	b.w	8010c10 <iNemoEngine_API_Update>
 8017502:	bf00      	nop
 8017504:	24000348 	.word	0x24000348

08017508 <MotionFX_propagate>:
 8017508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801750a:	4c7a      	ldr	r4, [pc, #488]	@ (80176f4 <MotionFX_propagate+0x1ec>)
 801750c:	ed2d 8b06 	vpush	{d8-d10}
 8017510:	f894 63c4 	ldrb.w	r6, [r4, #964]	@ 0x3c4
 8017514:	b09d      	sub	sp, #116	@ 0x74
 8017516:	b91e      	cbnz	r6, 8017520 <MotionFX_propagate+0x18>
 8017518:	b01d      	add	sp, #116	@ 0x74
 801751a:	ecbd 8b06 	vpop	{d8-d10}
 801751e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017520:	4694      	mov	ip, r2
 8017522:	4604      	mov	r4, r0
 8017524:	ed93 0a00 	vldr	s0, [r3]
 8017528:	460d      	mov	r5, r1
 801752a:	68d0      	ldr	r0, [r2, #12]
 801752c:	ab0f      	add	r3, sp, #60	@ 0x3c
 801752e:	6911      	ldr	r1, [r2, #16]
 8017530:	f104 073a 	add.w	r7, r4, #58	@ 0x3a
 8017534:	6952      	ldr	r2, [r2, #20]
 8017536:	c307      	stmia	r3!, {r0, r1, r2}
 8017538:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801753c:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8017540:	f8dc 2020 	ldr.w	r2, [ip, #32]
 8017544:	c307      	stmia	r3!, {r0, r1, r2}
 8017546:	aa12      	add	r2, sp, #72	@ 0x48
 8017548:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 801754c:	a802      	add	r0, sp, #8
 801754e:	f7f7 fadf 	bl	800eb10 <rotVect>
 8017552:	7923      	ldrb	r3, [r4, #4]
 8017554:	2b00      	cmp	r3, #0
 8017556:	f000 80bf 	beq.w	80176d8 <MotionFX_propagate+0x1d0>
 801755a:	ee07 3a90 	vmov	s15, r3
 801755e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017566:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801756a:	f604 135c 	addw	r3, r4, #2396	@ 0x95c
 801756e:	eddd 5a02 	vldr	s11, [sp, #8]
 8017572:	ed9d 5a03 	vldr	s10, [sp, #12]
 8017576:	f504 6613 	add.w	r6, r4, #2352	@ 0x930
 801757a:	edd3 7a00 	vldr	s15, [r3]
 801757e:	ed9d 6a04 	vldr	s12, [sp, #16]
 8017582:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8017586:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80176f8 <MotionFX_propagate+0x1f0>
 801758a:	eddf 4a5c 	vldr	s9, [pc, #368]	@ 80176fc <MotionFX_propagate+0x1f4>
 801758e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8017592:	ee20 0a04 	vmul.f32	s0, s0, s8
 8017596:	edc3 7a00 	vstr	s15, [r3]
 801759a:	f504 6316 	add.w	r3, r4, #2400	@ 0x960
 801759e:	edd3 7a00 	vldr	s15, [r3]
 80175a2:	eee5 7a26 	vfma.f32	s15, s10, s13
 80175a6:	edc3 7a00 	vstr	s15, [r3]
 80175aa:	f604 1364 	addw	r3, r4, #2404	@ 0x964
 80175ae:	edd3 7a00 	vldr	s15, [r3]
 80175b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80175b6:	edc3 7a00 	vstr	s15, [r3]
 80175ba:	f604 1344 	addw	r3, r4, #2372	@ 0x944
 80175be:	edd3 8a00 	vldr	s17, [r3]
 80175c2:	f504 6314 	add.w	r3, r4, #2368	@ 0x940
 80175c6:	eed5 8a07 	vfnms.f32	s17, s10, s14
 80175ca:	ed93 9a00 	vldr	s18, [r3]
 80175ce:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 80175d2:	ee95 9a87 	vfnms.f32	s18, s11, s14
 80175d6:	ed93 8a00 	vldr	s16, [r3]
 80175da:	ee96 8a07 	vfnms.f32	s16, s12, s14
 80175de:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80175e2:	eee9 7a09 	vfma.f32	s15, s18, s18
 80175e6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80175ea:	eef4 7ae4 	vcmpe.f32	s15, s9
 80175ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175f2:	dd76      	ble.n	80176e2 <MotionFX_propagate+0x1da>
 80175f4:	eeb1 aae7 	vsqrt.f32	s20, s15
 80175f8:	ee6a 9a00 	vmul.f32	s19, s20, s0
 80175fc:	eeb0 0a69 	vmov.f32	s0, s19
 8017600:	f003 fa1e 	bl	801aa40 <sinf>
 8017604:	eeb0 7a40 	vmov.f32	s14, s0
 8017608:	eeb0 0a69 	vmov.f32	s0, s19
 801760c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017610:	ee29 9a27 	vmul.f32	s18, s18, s15
 8017614:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017618:	ee28 8a27 	vmul.f32	s16, s16, s15
 801761c:	f003 fad4 	bl	801abc8 <cosf>
 8017620:	a805      	add	r0, sp, #20
 8017622:	4632      	mov	r2, r6
 8017624:	4631      	mov	r1, r6
 8017626:	ed8d 0a08 	vstr	s0, [sp, #32]
 801762a:	ed8d 9a05 	vstr	s18, [sp, #20]
 801762e:	f604 133c 	addw	r3, r4, #2364	@ 0x93c
 8017632:	edcd 8a06 	vstr	s17, [sp, #24]
 8017636:	ed8d 8a07 	vstr	s16, [sp, #28]
 801763a:	f7f7 fc49 	bl	800eed0 <qmult>
 801763e:	f604 1c38 	addw	ip, r4, #2360	@ 0x938
 8017642:	f604 1e34 	addw	lr, r4, #2356	@ 0x934
 8017646:	ed96 6a00 	vldr	s12, [r6]
 801764a:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801764e:	ed9c 7a00 	vldr	s14, [ip]
 8017652:	aa0f      	add	r2, sp, #60	@ 0x3c
 8017654:	edde 6a00 	vldr	s13, [lr]
 8017658:	4639      	mov	r1, r7
 801765a:	ee67 7a07 	vmul.f32	s15, s14, s14
 801765e:	edd3 5a00 	vldr	s11, [r3]
 8017662:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017666:	eee6 7a06 	vfma.f32	s15, s12, s12
 801766a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801766e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8017672:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8017676:	ee27 3a86 	vmul.f32	s6, s15, s12
 801767a:	ee67 3aa6 	vmul.f32	s7, s15, s13
 801767e:	ee27 4a27 	vmul.f32	s8, s14, s15
 8017682:	ee67 4aa5 	vmul.f32	s9, s15, s11
 8017686:	ed86 3a00 	vstr	s6, [r6]
 801768a:	edce 3a00 	vstr	s7, [lr]
 801768e:	f105 0628 	add.w	r6, r5, #40	@ 0x28
 8017692:	ed8c 4a00 	vstr	s8, [ip]
 8017696:	edc3 4a00 	vstr	s9, [r3]
 801769a:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	@ 0x950
 801769e:	3301      	adds	r3, #1
 80176a0:	f8a4 3950 	strh.w	r3, [r4, #2384]	@ 0x950
 80176a4:	f7f7 fa34 	bl	800eb10 <rotVect>
 80176a8:	ed85 3a03 	vstr	s6, [r5, #12]
 80176ac:	edc5 3a04 	vstr	s7, [r5, #16]
 80176b0:	4601      	mov	r1, r0
 80176b2:	ed85 4a05 	vstr	s8, [r5, #20]
 80176b6:	f105 031c 	add.w	r3, r5, #28
 80176ba:	edc5 4a06 	vstr	s9, [r5, #24]
 80176be:	f105 000c 	add.w	r0, r5, #12
 80176c2:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80176c6:	e9cd 6200 	strd	r6, r2, [sp]
 80176ca:	462a      	mov	r2, r5
 80176cc:	f7f8 fee8 	bl	80104a0 <output_update>
 80176d0:	b01d      	add	sp, #116	@ 0x74
 80176d2:	ecbd 8b06 	vpop	{d8-d10}
 80176d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176d8:	2301      	movs	r3, #1
 80176da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80176de:	7123      	strb	r3, [r4, #4]
 80176e0:	e743      	b.n	801756a <MotionFX_propagate+0x62>
 80176e2:	ee29 9a00 	vmul.f32	s18, s18, s0
 80176e6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80176ea:	ee28 8a00 	vmul.f32	s16, s16, s0
 80176ee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80176f2:	e795      	b.n	8017620 <MotionFX_propagate+0x118>
 80176f4:	24000348 	.word	0x24000348
 80176f8:	3c8efa35 	.word	0x3c8efa35
 80176fc:	38d1b718 	.word	0x38d1b718

08017700 <MotionFX_MagCal_init>:
 8017700:	b570      	push	{r4, r5, r6, lr}
 8017702:	4c42      	ldr	r4, [pc, #264]	@ (801780c <MotionFX_MagCal_init+0x10c>)
 8017704:	f894 33c4 	ldrb.w	r3, [r4, #964]	@ 0x3c4
 8017708:	b903      	cbnz	r3, 801770c <MotionFX_MagCal_init+0xc>
 801770a:	bd70      	pop	{r4, r5, r6, pc}
 801770c:	1e43      	subs	r3, r0, #1
 801770e:	4605      	mov	r5, r0
 8017710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017714:	d2f9      	bcs.n	801770a <MotionFX_MagCal_init+0xa>
 8017716:	2900      	cmp	r1, #0
 8017718:	d139      	bne.n	801778e <MotionFX_MagCal_init+0x8e>
 801771a:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
 801771e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017722:	22c8      	movs	r2, #200	@ 0xc8
 8017724:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017728:	4939      	ldr	r1, [pc, #228]	@ (8017810 <MotionFX_MagCal_init+0x110>)
 801772a:	1b5b      	subs	r3, r3, r5
 801772c:	600d      	str	r5, [r1, #0]
 801772e:	ee07 3a90 	vmov	s15, r3
 8017732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017736:	fb92 f2f5 	sdiv	r2, r2, r5
 801773a:	eef0 7ae7 	vabs.f32	s15, s15
 801773e:	b2d3      	uxtb	r3, r2
 8017740:	b22d      	sxth	r5, r5
 8017742:	2b0f      	cmp	r3, #15
 8017744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017748:	bf28      	it	cs
 801774a:	230f      	movcs	r3, #15
 801774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017750:	f884 37de 	strb.w	r3, [r4, #2014]	@ 0x7de
 8017754:	dc0e      	bgt.n	8017774 <MotionFX_MagCal_init+0x74>
 8017756:	edd4 7a01 	vldr	s15, [r4, #4]
 801775a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8017814 <MotionFX_MagCal_init+0x114>
 801775e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8017818 <MotionFX_MagCal_init+0x118>
 8017762:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017766:	eef0 7ae7 	vabs.f32	s15, s15
 801776a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801776e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017772:	dd08      	ble.n	8017786 <MotionFX_MagCal_init+0x86>
 8017774:	2300      	movs	r3, #0
 8017776:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 801777a:	4a28      	ldr	r2, [pc, #160]	@ (801781c <MotionFX_MagCal_init+0x11c>)
 801777c:	8065      	strh	r5, [r4, #2]
 801777e:	8123      	strh	r3, [r4, #8]
 8017780:	60e3      	str	r3, [r4, #12]
 8017782:	8021      	strh	r1, [r4, #0]
 8017784:	6062      	str	r2, [r4, #4]
 8017786:	2300      	movs	r3, #0
 8017788:	f884 3858 	strb.w	r3, [r4, #2136]	@ 0x858
 801778c:	bd70      	pop	{r4, r5, r6, pc}
 801778e:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 8017792:	2600      	movs	r6, #0
 8017794:	f44f 0202 	mov.w	r2, #8519680	@ 0x820000
 8017798:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 801779c:	6123      	str	r3, [r4, #16]
 801779e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80177a2:	4631      	mov	r1, r6
 80177a4:	f884 6048 	strb.w	r6, [r4, #72]	@ 0x48
 80177a8:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 80177ac:	64e6      	str	r6, [r4, #76]	@ 0x4c
 80177ae:	82a6      	strh	r6, [r4, #20]
 80177b0:	e9c4 2602 	strd	r2, r6, [r4, #8]
 80177b4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80177b8:	f001 f803 	bl	80187c2 <memset>
 80177bc:	23ff      	movs	r3, #255	@ 0xff
 80177be:	225f      	movs	r2, #95	@ 0x5f
 80177c0:	4631      	mov	r1, r6
 80177c2:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 80177c6:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80177ca:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 80177ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80177d2:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
 80177d6:	2230      	movs	r2, #48	@ 0x30
 80177d8:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 80177dc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80177e0:	6226      	str	r6, [r4, #32]
 80177e2:	84a3      	strh	r3, [r4, #36]	@ 0x24
 80177e4:	e9c4 6606 	strd	r6, r6, [r4, #24]
 80177e8:	f000 ffeb 	bl	80187c2 <memset>
 80177ec:	f1a5 030a 	sub.w	r3, r5, #10
 80177f0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80177f4:	2101      	movs	r1, #1
 80177f6:	b29b      	uxth	r3, r3
 80177f8:	f884 106d 	strb.w	r1, [r4, #109]	@ 0x6d
 80177fc:	2b32      	cmp	r3, #50	@ 0x32
 80177fe:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8017800:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
 8017804:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8017808:	d889      	bhi.n	801771e <MotionFX_MagCal_init+0x1e>
 801780a:	e786      	b.n	801771a <MotionFX_MagCal_init+0x1a>
 801780c:	24000348 	.word	0x24000348
 8017810:	24000000 	.word	0x24000000
 8017814:	3dcccccd 	.word	0x3dcccccd
 8017818:	3c23d70a 	.word	0x3c23d70a
 801781c:	3dcccccd 	.word	0x3dcccccd

08017820 <MotionFX_MagCal_run>:
 8017820:	4941      	ldr	r1, [pc, #260]	@ (8017928 <MotionFX_MagCal_run+0x108>)
 8017822:	f891 33c4 	ldrb.w	r3, [r1, #964]	@ 0x3c4
 8017826:	2b00      	cmp	r3, #0
 8017828:	d07c      	beq.n	8017924 <MotionFX_MagCal_run+0x104>
 801782a:	ed90 7a00 	vldr	s14, [r0]
 801782e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 801792c <MotionFX_MagCal_run+0x10c>
 8017832:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017836:	ee67 7a27 	vmul.f32	s15, s14, s15
 801783a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017846:	bfb8      	it	lt
 8017848:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801784c:	f891 3858 	ldrb.w	r3, [r1, #2136]	@ 0x858
 8017850:	bfa8      	it	ge
 8017852:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8017856:	ed90 7a01 	vldr	s14, [r0, #4]
 801785a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801785e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017866:	ee17 ca90 	vmov	ip, s15
 801786a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801792c <MotionFX_MagCal_run+0x10c>
 801786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017872:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8017876:	bfb4      	ite	lt
 8017878:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801787c:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8017880:	ed90 7a02 	vldr	s14, [r0, #8]
 8017884:	68c0      	ldr	r0, [r0, #12]
 8017886:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801788a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801788e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017892:	ee17 2a90 	vmov	r2, s15
 8017896:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801792c <MotionFX_MagCal_run+0x10c>
 801789a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801789e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80178a2:	bfac      	ite	ge
 80178a4:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80178a8:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80178ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80178b0:	b38b      	cbz	r3, 8017916 <MotionFX_MagCal_run+0xf6>
 80178b2:	481f      	ldr	r0, [pc, #124]	@ (8017930 <MotionFX_MagCal_run+0x110>)
 80178b4:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 80178b8:	6800      	ldr	r0, [r0, #0]
 80178ba:	fb10 f003 	smulbb	r0, r0, r3
 80178be:	f8a4 07e0 	strh.w	r0, [r4, #2016]	@ 0x7e0
 80178c2:	00d8      	lsls	r0, r3, #3
 80178c4:	f647 74fe 	movw	r4, #32766	@ 0x7ffe
 80178c8:	ee17 5a90 	vmov	r5, s15
 80178cc:	4666      	mov	r6, ip
 80178ce:	4f19      	ldr	r7, [pc, #100]	@ (8017934 <MotionFX_MagCal_run+0x114>)
 80178d0:	45a4      	cmp	ip, r4
 80178d2:	bfa8      	it	ge
 80178d4:	4626      	movge	r6, r4
 80178d6:	42a5      	cmp	r5, r4
 80178d8:	bfa8      	it	ge
 80178da:	4625      	movge	r5, r4
 80178dc:	42be      	cmp	r6, r7
 80178de:	bfb8      	it	lt
 80178e0:	463e      	movlt	r6, r7
 80178e2:	42ba      	cmp	r2, r7
 80178e4:	db02      	blt.n	80178ec <MotionFX_MagCal_run+0xcc>
 80178e6:	4294      	cmp	r4, r2
 80178e8:	bfa8      	it	ge
 80178ea:	4614      	movge	r4, r2
 80178ec:	180a      	adds	r2, r1, r0
 80178ee:	4811      	ldr	r0, [pc, #68]	@ (8017934 <MotionFX_MagCal_run+0x114>)
 80178f0:	3301      	adds	r3, #1
 80178f2:	42a8      	cmp	r0, r5
 80178f4:	f8a2 67e2 	strh.w	r6, [r2, #2018]	@ 0x7e2
 80178f8:	b2db      	uxtb	r3, r3
 80178fa:	f8a2 47e4 	strh.w	r4, [r2, #2020]	@ 0x7e4
 80178fe:	bfb8      	it	lt
 8017900:	4628      	movlt	r0, r5
 8017902:	f891 57de 	ldrb.w	r5, [r1, #2014]	@ 0x7de
 8017906:	f881 3858 	strb.w	r3, [r1, #2136]	@ 0x858
 801790a:	42ab      	cmp	r3, r5
 801790c:	f8a2 07e6 	strh.w	r0, [r2, #2022]	@ 0x7e6
 8017910:	d012      	beq.n	8017938 <MotionFX_MagCal_run+0x118>
 8017912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017916:	f8c1 07d8 	str.w	r0, [r1, #2008]	@ 0x7d8
 801791a:	2001      	movs	r0, #1
 801791c:	f881 07dc 	strb.w	r0, [r1, #2012]	@ 0x7dc
 8017920:	4618      	mov	r0, r3
 8017922:	e7cf      	b.n	80178c4 <MotionFX_MagCal_run+0xa4>
 8017924:	4770      	bx	lr
 8017926:	bf00      	nop
 8017928:	24000348 	.word	0x24000348
 801792c:	43fa0000 	.word	0x43fa0000
 8017930:	24000000 	.word	0x24000000
 8017934:	ffff8002 	.word	0xffff8002
 8017938:	2200      	movs	r2, #0
 801793a:	f891 37dc 	ldrb.w	r3, [r1, #2012]	@ 0x7dc
 801793e:	f8d1 77d8 	ldr.w	r7, [r1, #2008]	@ 0x7d8
 8017942:	f881 2858 	strb.w	r2, [r1, #2136]	@ 0x858
 8017946:	2b00      	cmp	r3, #0
 8017948:	f000 8169 	beq.w	8017c1e <MotionFX_MagCal_run+0x3fe>
 801794c:	2d00      	cmp	r5, #0
 801794e:	f000 8166 	beq.w	8017c1e <MotionFX_MagCal_run+0x3fe>
 8017952:	894e      	ldrh	r6, [r1, #10]
 8017954:	2e00      	cmp	r6, #0
 8017956:	f000 8162 	beq.w	8017c1e <MotionFX_MagCal_run+0x3fe>
 801795a:	890b      	ldrh	r3, [r1, #8]
 801795c:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
 8017960:	690c      	ldr	r4, [r1, #16]
 8017962:	f04f 0901 	mov.w	r9, #1
 8017966:	42b3      	cmp	r3, r6
 8017968:	bf28      	it	cs
 801796a:	4633      	movcs	r3, r6
 801796c:	3301      	adds	r3, #1
 801796e:	b29b      	uxth	r3, r3
 8017970:	42b3      	cmp	r3, r6
 8017972:	bf28      	it	cs
 8017974:	4633      	movcs	r3, r6
 8017976:	454d      	cmp	r5, r9
 8017978:	eb03 0208 	add.w	r2, r3, r8
 801797c:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017980:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017984:	f8d1 c7e2 	ldr.w	ip, [r1, #2018]	@ 0x7e2
 8017988:	f8c2 c002 	str.w	ip, [r2, #2]
 801798c:	f9b1 07e6 	ldrsh.w	r0, [r1, #2022]	@ 0x7e6
 8017990:	f8b1 e7e0 	ldrh.w	lr, [r1, #2016]	@ 0x7e0
 8017994:	80d0      	strh	r0, [r2, #6]
 8017996:	f000 813a 	beq.w	8017c0e <MotionFX_MagCal_run+0x3ee>
 801799a:	444b      	add	r3, r9
 801799c:	b29b      	uxth	r3, r3
 801799e:	42b3      	cmp	r3, r6
 80179a0:	bf28      	it	cs
 80179a2:	4633      	movcs	r3, r6
 80179a4:	2d02      	cmp	r5, #2
 80179a6:	eb03 0208 	add.w	r2, r3, r8
 80179aa:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 80179ae:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80179b2:	f8d1 c7ea 	ldr.w	ip, [r1, #2026]	@ 0x7ea
 80179b6:	f8c2 c002 	str.w	ip, [r2, #2]
 80179ba:	f9b1 07ee 	ldrsh.w	r0, [r1, #2030]	@ 0x7ee
 80179be:	f8b1 e7e8 	ldrh.w	lr, [r1, #2024]	@ 0x7e8
 80179c2:	80d0      	strh	r0, [r2, #6]
 80179c4:	f000 8123 	beq.w	8017c0e <MotionFX_MagCal_run+0x3ee>
 80179c8:	444b      	add	r3, r9
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	42b3      	cmp	r3, r6
 80179ce:	bf28      	it	cs
 80179d0:	4633      	movcs	r3, r6
 80179d2:	2d03      	cmp	r5, #3
 80179d4:	eb03 0208 	add.w	r2, r3, r8
 80179d8:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 80179dc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80179e0:	f8d1 c7f2 	ldr.w	ip, [r1, #2034]	@ 0x7f2
 80179e4:	f8c2 c002 	str.w	ip, [r2, #2]
 80179e8:	f9b1 07f6 	ldrsh.w	r0, [r1, #2038]	@ 0x7f6
 80179ec:	f8b1 e7f0 	ldrh.w	lr, [r1, #2032]	@ 0x7f0
 80179f0:	80d0      	strh	r0, [r2, #6]
 80179f2:	f000 810c 	beq.w	8017c0e <MotionFX_MagCal_run+0x3ee>
 80179f6:	444b      	add	r3, r9
 80179f8:	b29b      	uxth	r3, r3
 80179fa:	42b3      	cmp	r3, r6
 80179fc:	bf28      	it	cs
 80179fe:	4633      	movcs	r3, r6
 8017a00:	2d04      	cmp	r5, #4
 8017a02:	eb03 0208 	add.w	r2, r3, r8
 8017a06:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017a0a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017a0e:	f8d1 c7fa 	ldr.w	ip, [r1, #2042]	@ 0x7fa
 8017a12:	f8c2 c002 	str.w	ip, [r2, #2]
 8017a16:	f9b1 07fe 	ldrsh.w	r0, [r1, #2046]	@ 0x7fe
 8017a1a:	f8b1 e7f8 	ldrh.w	lr, [r1, #2040]	@ 0x7f8
 8017a1e:	80d0      	strh	r0, [r2, #6]
 8017a20:	f000 80f5 	beq.w	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017a24:	444b      	add	r3, r9
 8017a26:	b29b      	uxth	r3, r3
 8017a28:	42b3      	cmp	r3, r6
 8017a2a:	bf28      	it	cs
 8017a2c:	4633      	movcs	r3, r6
 8017a2e:	2d05      	cmp	r5, #5
 8017a30:	eb03 0208 	add.w	r2, r3, r8
 8017a34:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017a38:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017a3c:	f8d1 c802 	ldr.w	ip, [r1, #2050]	@ 0x802
 8017a40:	f8c2 c002 	str.w	ip, [r2, #2]
 8017a44:	f9b1 0806 	ldrsh.w	r0, [r1, #2054]	@ 0x806
 8017a48:	f8b1 e800 	ldrh.w	lr, [r1, #2048]	@ 0x800
 8017a4c:	80d0      	strh	r0, [r2, #6]
 8017a4e:	f000 80de 	beq.w	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017a52:	444b      	add	r3, r9
 8017a54:	b29b      	uxth	r3, r3
 8017a56:	42b3      	cmp	r3, r6
 8017a58:	bf28      	it	cs
 8017a5a:	4633      	movcs	r3, r6
 8017a5c:	2d06      	cmp	r5, #6
 8017a5e:	4498      	add	r8, r3
 8017a60:	f804 9038 	strb.w	r9, [r4, r8, lsl #3]
 8017a64:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 8017a68:	f8d1 c80a 	ldr.w	ip, [r1, #2058]	@ 0x80a
 8017a6c:	f8c2 c002 	str.w	ip, [r2, #2]
 8017a70:	f9b1 080e 	ldrsh.w	r0, [r1, #2062]	@ 0x80e
 8017a74:	f8b1 e808 	ldrh.w	lr, [r1, #2056]	@ 0x808
 8017a78:	80d0      	strh	r0, [r2, #6]
 8017a7a:	f000 80c8 	beq.w	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017a7e:	444b      	add	r3, r9
 8017a80:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
 8017a84:	b29b      	uxth	r3, r3
 8017a86:	42b3      	cmp	r3, r6
 8017a88:	bf28      	it	cs
 8017a8a:	4633      	movcs	r3, r6
 8017a8c:	2d07      	cmp	r5, #7
 8017a8e:	eb03 0208 	add.w	r2, r3, r8
 8017a92:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017a96:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017a9a:	f8d1 c812 	ldr.w	ip, [r1, #2066]	@ 0x812
 8017a9e:	f8c2 c002 	str.w	ip, [r2, #2]
 8017aa2:	f9b1 0816 	ldrsh.w	r0, [r1, #2070]	@ 0x816
 8017aa6:	f8b1 e810 	ldrh.w	lr, [r1, #2064]	@ 0x810
 8017aaa:	80d0      	strh	r0, [r2, #6]
 8017aac:	f000 80af 	beq.w	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017ab0:	444b      	add	r3, r9
 8017ab2:	b29b      	uxth	r3, r3
 8017ab4:	42b3      	cmp	r3, r6
 8017ab6:	bf28      	it	cs
 8017ab8:	4633      	movcs	r3, r6
 8017aba:	2d08      	cmp	r5, #8
 8017abc:	eb03 0208 	add.w	r2, r3, r8
 8017ac0:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017ac4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017ac8:	f8d1 c81a 	ldr.w	ip, [r1, #2074]	@ 0x81a
 8017acc:	f8c2 c002 	str.w	ip, [r2, #2]
 8017ad0:	f9b1 081e 	ldrsh.w	r0, [r1, #2078]	@ 0x81e
 8017ad4:	f8b1 e818 	ldrh.w	lr, [r1, #2072]	@ 0x818
 8017ad8:	80d0      	strh	r0, [r2, #6]
 8017ada:	f000 8098 	beq.w	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017ade:	444b      	add	r3, r9
 8017ae0:	b29b      	uxth	r3, r3
 8017ae2:	42b3      	cmp	r3, r6
 8017ae4:	bf28      	it	cs
 8017ae6:	4633      	movcs	r3, r6
 8017ae8:	2d09      	cmp	r5, #9
 8017aea:	eb03 0208 	add.w	r2, r3, r8
 8017aee:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017af2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017af6:	f8d1 c822 	ldr.w	ip, [r1, #2082]	@ 0x822
 8017afa:	f8c2 c002 	str.w	ip, [r2, #2]
 8017afe:	f9b1 0826 	ldrsh.w	r0, [r1, #2086]	@ 0x826
 8017b02:	f8b1 e820 	ldrh.w	lr, [r1, #2080]	@ 0x820
 8017b06:	80d0      	strh	r0, [r2, #6]
 8017b08:	f000 8081 	beq.w	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017b0c:	444b      	add	r3, r9
 8017b0e:	b29b      	uxth	r3, r3
 8017b10:	42b3      	cmp	r3, r6
 8017b12:	bf28      	it	cs
 8017b14:	4633      	movcs	r3, r6
 8017b16:	2d0a      	cmp	r5, #10
 8017b18:	eb03 0208 	add.w	r2, r3, r8
 8017b1c:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017b20:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017b24:	f8d1 c82a 	ldr.w	ip, [r1, #2090]	@ 0x82a
 8017b28:	f8c2 c002 	str.w	ip, [r2, #2]
 8017b2c:	f9b1 082e 	ldrsh.w	r0, [r1, #2094]	@ 0x82e
 8017b30:	f8b1 e828 	ldrh.w	lr, [r1, #2088]	@ 0x828
 8017b34:	80d0      	strh	r0, [r2, #6]
 8017b36:	d06a      	beq.n	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017b38:	444b      	add	r3, r9
 8017b3a:	b29b      	uxth	r3, r3
 8017b3c:	42b3      	cmp	r3, r6
 8017b3e:	bf28      	it	cs
 8017b40:	4633      	movcs	r3, r6
 8017b42:	2d0b      	cmp	r5, #11
 8017b44:	eb03 0208 	add.w	r2, r3, r8
 8017b48:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017b4c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017b50:	f8d1 c832 	ldr.w	ip, [r1, #2098]	@ 0x832
 8017b54:	f8c2 c002 	str.w	ip, [r2, #2]
 8017b58:	f9b1 0836 	ldrsh.w	r0, [r1, #2102]	@ 0x836
 8017b5c:	f8b1 e830 	ldrh.w	lr, [r1, #2096]	@ 0x830
 8017b60:	80d0      	strh	r0, [r2, #6]
 8017b62:	d054      	beq.n	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017b64:	444b      	add	r3, r9
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	42b3      	cmp	r3, r6
 8017b6a:	bf28      	it	cs
 8017b6c:	4633      	movcs	r3, r6
 8017b6e:	2d0c      	cmp	r5, #12
 8017b70:	eb03 0208 	add.w	r2, r3, r8
 8017b74:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017b78:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017b7c:	f8d1 c83a 	ldr.w	ip, [r1, #2106]	@ 0x83a
 8017b80:	f8c2 c002 	str.w	ip, [r2, #2]
 8017b84:	f9b1 083e 	ldrsh.w	r0, [r1, #2110]	@ 0x83e
 8017b88:	f8b1 e838 	ldrh.w	lr, [r1, #2104]	@ 0x838
 8017b8c:	80d0      	strh	r0, [r2, #6]
 8017b8e:	d03e      	beq.n	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017b90:	444b      	add	r3, r9
 8017b92:	b29b      	uxth	r3, r3
 8017b94:	42b3      	cmp	r3, r6
 8017b96:	bf28      	it	cs
 8017b98:	4633      	movcs	r3, r6
 8017b9a:	2d0d      	cmp	r5, #13
 8017b9c:	eb03 0208 	add.w	r2, r3, r8
 8017ba0:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017ba4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017ba8:	f8d1 c842 	ldr.w	ip, [r1, #2114]	@ 0x842
 8017bac:	f8c2 c002 	str.w	ip, [r2, #2]
 8017bb0:	f9b1 0846 	ldrsh.w	r0, [r1, #2118]	@ 0x846
 8017bb4:	f8b1 e840 	ldrh.w	lr, [r1, #2112]	@ 0x840
 8017bb8:	80d0      	strh	r0, [r2, #6]
 8017bba:	d028      	beq.n	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017bbc:	444b      	add	r3, r9
 8017bbe:	b29b      	uxth	r3, r3
 8017bc0:	42b3      	cmp	r3, r6
 8017bc2:	bf28      	it	cs
 8017bc4:	4633      	movcs	r3, r6
 8017bc6:	2d0e      	cmp	r5, #14
 8017bc8:	eb03 0208 	add.w	r2, r3, r8
 8017bcc:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8017bd0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017bd4:	f8d1 c84a 	ldr.w	ip, [r1, #2122]	@ 0x84a
 8017bd8:	f8c2 c002 	str.w	ip, [r2, #2]
 8017bdc:	f9b1 084e 	ldrsh.w	r0, [r1, #2126]	@ 0x84e
 8017be0:	f8b1 e848 	ldrh.w	lr, [r1, #2120]	@ 0x848
 8017be4:	80d0      	strh	r0, [r2, #6]
 8017be6:	d012      	beq.n	8017c0e <MotionFX_MagCal_run+0x3ee>
 8017be8:	444b      	add	r3, r9
 8017bea:	b29b      	uxth	r3, r3
 8017bec:	42b3      	cmp	r3, r6
 8017bee:	bf28      	it	cs
 8017bf0:	4633      	movcs	r3, r6
 8017bf2:	4498      	add	r8, r3
 8017bf4:	f804 9038 	strb.w	r9, [r4, r8, lsl #3]
 8017bf8:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 8017bfc:	f8d1 c852 	ldr.w	ip, [r1, #2130]	@ 0x852
 8017c00:	f8c2 c002 	str.w	ip, [r2, #2]
 8017c04:	f9b1 0856 	ldrsh.w	r0, [r1, #2134]	@ 0x856
 8017c08:	f8b1 e850 	ldrh.w	lr, [r1, #2128]	@ 0x850
 8017c0c:	80d0      	strh	r0, [r2, #6]
 8017c0e:	810b      	strh	r3, [r1, #8]
 8017c10:	4477      	add	r7, lr
 8017c12:	2301      	movs	r3, #1
 8017c14:	f8c2 c002 	str.w	ip, [r2, #2]
 8017c18:	80d0      	strh	r0, [r2, #6]
 8017c1a:	7013      	strb	r3, [r2, #0]
 8017c1c:	60cf      	str	r7, [r1, #12]
 8017c1e:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	f43f ae75 	beq.w	8017912 <MotionFX_MagCal_run+0xf2>
 8017c28:	890a      	ldrh	r2, [r1, #8]
 8017c2a:	894b      	ldrh	r3, [r1, #10]
 8017c2c:	4293      	cmp	r3, r2
 8017c2e:	d022      	beq.n	8017c76 <MotionFX_MagCal_run+0x456>
 8017c30:	b32a      	cbz	r2, 8017c7e <MotionFX_MagCal_run+0x45e>
 8017c32:	68cb      	ldr	r3, [r1, #12]
 8017c34:	f242 7410 	movw	r4, #10000	@ 0x2710
 8017c38:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8017c3c:	3301      	adds	r3, #1
 8017c3e:	4403      	add	r3, r0
 8017c40:	1c58      	adds	r0, r3, #1
 8017c42:	d020      	beq.n	8017c86 <MotionFX_MagCal_run+0x466>
 8017c44:	441c      	add	r4, r3
 8017c46:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 8017c48:	42a0      	cmp	r0, r4
 8017c4a:	d901      	bls.n	8017c50 <MotionFX_MagCal_run+0x430>
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8017c50:	f8b1 4050 	ldrh.w	r4, [r1, #80]	@ 0x50
 8017c54:	4420      	add	r0, r4
 8017c56:	4283      	cmp	r3, r0
 8017c58:	f4ff ae5b 	bcc.w	8017912 <MotionFX_MagCal_run+0xf2>
 8017c5c:	b132      	cbz	r2, 8017c6c <MotionFX_MagCal_run+0x44c>
 8017c5e:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8017c62:	3a01      	subs	r2, #1
 8017c64:	68c9      	ldr	r1, [r1, #12]
 8017c66:	fb00 1212 	mls	r2, r0, r2, r1
 8017c6a:	b292      	uxth	r2, r2
 8017c6c:	1a9b      	subs	r3, r3, r2
 8017c6e:	b21b      	sxth	r3, r3
 8017c70:	42a3      	cmp	r3, r4
 8017c72:	f6ff ae4e 	blt.w	8017912 <MotionFX_MagCal_run+0xf2>
 8017c76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c7a:	f7fd b985 	b.w	8014f88 <MEMS_runMagCal.constprop.0>
 8017c7e:	f242 7410 	movw	r4, #10000	@ 0x2710
 8017c82:	4613      	mov	r3, r2
 8017c84:	e7df      	b.n	8017c46 <MotionFX_MagCal_run+0x426>
 8017c86:	2300      	movs	r3, #0
 8017c88:	e7dd      	b.n	8017c46 <MotionFX_MagCal_run+0x426>
 8017c8a:	bf00      	nop

08017c8c <MotionFX_MagCal_getParams>:
 8017c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8017d04 <MotionFX_MagCal_getParams+0x78>)
 8017c8e:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 8017c92:	b902      	cbnz	r2, 8017c96 <MotionFX_MagCal_getParams+0xa>
 8017c94:	4770      	bx	lr
 8017c96:	b530      	push	{r4, r5, lr}
 8017c98:	f103 0e6c 	add.w	lr, r3, #108	@ 0x6c
 8017c9c:	b08f      	sub	sp, #60	@ 0x3c
 8017c9e:	4604      	mov	r4, r0
 8017ca0:	f893 506c 	ldrb.w	r5, [r3, #108]	@ 0x6c
 8017ca4:	f10d 0c04 	add.w	ip, sp, #4
 8017ca8:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 8017d08 <MotionFX_MagCal_getParams+0x7c>
 8017cac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017cb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017cb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017cb8:	eddd 6a02 	vldr	s13, [sp, #8]
 8017cbc:	ed9d 7a03 	vldr	s14, [sp, #12]
 8017cc0:	eddd 7a04 	vldr	s15, [sp, #16]
 8017cc4:	eef6 6ae6 	vrintz.f32	s13, s13
 8017cc8:	eeb6 7ac7 	vrintz.f32	s14, s14
 8017ccc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017cd0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017cd4:	eef6 7ae7 	vrintz.f32	s15, s15
 8017cd8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017cdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ce0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017ce4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ce8:	f8de 3000 	ldr.w	r3, [lr]
 8017cec:	7325      	strb	r5, [r4, #12]
 8017cee:	edc4 6a00 	vstr	s13, [r4]
 8017cf2:	f8cc 3000 	str.w	r3, [ip]
 8017cf6:	ed84 7a01 	vstr	s14, [r4, #4]
 8017cfa:	edc4 7a02 	vstr	s15, [r4, #8]
 8017cfe:	b00f      	add	sp, #60	@ 0x3c
 8017d00:	bd30      	pop	{r4, r5, pc}
 8017d02:	bf00      	nop
 8017d04:	24000348 	.word	0x24000348
 8017d08:	3b03126f 	.word	0x3b03126f

08017d0c <__cvt>:
 8017d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d0e:	ed2d 8b02 	vpush	{d8}
 8017d12:	eeb0 8b40 	vmov.f64	d8, d0
 8017d16:	b085      	sub	sp, #20
 8017d18:	4617      	mov	r7, r2
 8017d1a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8017d1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017d1e:	ee18 2a90 	vmov	r2, s17
 8017d22:	f025 0520 	bic.w	r5, r5, #32
 8017d26:	2a00      	cmp	r2, #0
 8017d28:	bfb6      	itet	lt
 8017d2a:	222d      	movlt	r2, #45	@ 0x2d
 8017d2c:	2200      	movge	r2, #0
 8017d2e:	eeb1 8b40 	vneglt.f64	d8, d0
 8017d32:	2d46      	cmp	r5, #70	@ 0x46
 8017d34:	460c      	mov	r4, r1
 8017d36:	701a      	strb	r2, [r3, #0]
 8017d38:	d004      	beq.n	8017d44 <__cvt+0x38>
 8017d3a:	2d45      	cmp	r5, #69	@ 0x45
 8017d3c:	d100      	bne.n	8017d40 <__cvt+0x34>
 8017d3e:	3401      	adds	r4, #1
 8017d40:	2102      	movs	r1, #2
 8017d42:	e000      	b.n	8017d46 <__cvt+0x3a>
 8017d44:	2103      	movs	r1, #3
 8017d46:	ab03      	add	r3, sp, #12
 8017d48:	9301      	str	r3, [sp, #4]
 8017d4a:	ab02      	add	r3, sp, #8
 8017d4c:	9300      	str	r3, [sp, #0]
 8017d4e:	4622      	mov	r2, r4
 8017d50:	4633      	mov	r3, r6
 8017d52:	eeb0 0b48 	vmov.f64	d0, d8
 8017d56:	f000 fe4b 	bl	80189f0 <_dtoa_r>
 8017d5a:	2d47      	cmp	r5, #71	@ 0x47
 8017d5c:	d114      	bne.n	8017d88 <__cvt+0x7c>
 8017d5e:	07fb      	lsls	r3, r7, #31
 8017d60:	d50a      	bpl.n	8017d78 <__cvt+0x6c>
 8017d62:	1902      	adds	r2, r0, r4
 8017d64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d6c:	bf08      	it	eq
 8017d6e:	9203      	streq	r2, [sp, #12]
 8017d70:	2130      	movs	r1, #48	@ 0x30
 8017d72:	9b03      	ldr	r3, [sp, #12]
 8017d74:	4293      	cmp	r3, r2
 8017d76:	d319      	bcc.n	8017dac <__cvt+0xa0>
 8017d78:	9b03      	ldr	r3, [sp, #12]
 8017d7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017d7c:	1a1b      	subs	r3, r3, r0
 8017d7e:	6013      	str	r3, [r2, #0]
 8017d80:	b005      	add	sp, #20
 8017d82:	ecbd 8b02 	vpop	{d8}
 8017d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d88:	2d46      	cmp	r5, #70	@ 0x46
 8017d8a:	eb00 0204 	add.w	r2, r0, r4
 8017d8e:	d1e9      	bne.n	8017d64 <__cvt+0x58>
 8017d90:	7803      	ldrb	r3, [r0, #0]
 8017d92:	2b30      	cmp	r3, #48	@ 0x30
 8017d94:	d107      	bne.n	8017da6 <__cvt+0x9a>
 8017d96:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d9e:	bf1c      	itt	ne
 8017da0:	f1c4 0401 	rsbne	r4, r4, #1
 8017da4:	6034      	strne	r4, [r6, #0]
 8017da6:	6833      	ldr	r3, [r6, #0]
 8017da8:	441a      	add	r2, r3
 8017daa:	e7db      	b.n	8017d64 <__cvt+0x58>
 8017dac:	1c5c      	adds	r4, r3, #1
 8017dae:	9403      	str	r4, [sp, #12]
 8017db0:	7019      	strb	r1, [r3, #0]
 8017db2:	e7de      	b.n	8017d72 <__cvt+0x66>

08017db4 <__exponent>:
 8017db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017db6:	2900      	cmp	r1, #0
 8017db8:	bfba      	itte	lt
 8017dba:	4249      	neglt	r1, r1
 8017dbc:	232d      	movlt	r3, #45	@ 0x2d
 8017dbe:	232b      	movge	r3, #43	@ 0x2b
 8017dc0:	2909      	cmp	r1, #9
 8017dc2:	7002      	strb	r2, [r0, #0]
 8017dc4:	7043      	strb	r3, [r0, #1]
 8017dc6:	dd29      	ble.n	8017e1c <__exponent+0x68>
 8017dc8:	f10d 0307 	add.w	r3, sp, #7
 8017dcc:	461d      	mov	r5, r3
 8017dce:	270a      	movs	r7, #10
 8017dd0:	461a      	mov	r2, r3
 8017dd2:	fbb1 f6f7 	udiv	r6, r1, r7
 8017dd6:	fb07 1416 	mls	r4, r7, r6, r1
 8017dda:	3430      	adds	r4, #48	@ 0x30
 8017ddc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8017de0:	460c      	mov	r4, r1
 8017de2:	2c63      	cmp	r4, #99	@ 0x63
 8017de4:	f103 33ff 	add.w	r3, r3, #4294967295
 8017de8:	4631      	mov	r1, r6
 8017dea:	dcf1      	bgt.n	8017dd0 <__exponent+0x1c>
 8017dec:	3130      	adds	r1, #48	@ 0x30
 8017dee:	1e94      	subs	r4, r2, #2
 8017df0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017df4:	1c41      	adds	r1, r0, #1
 8017df6:	4623      	mov	r3, r4
 8017df8:	42ab      	cmp	r3, r5
 8017dfa:	d30a      	bcc.n	8017e12 <__exponent+0x5e>
 8017dfc:	f10d 0309 	add.w	r3, sp, #9
 8017e00:	1a9b      	subs	r3, r3, r2
 8017e02:	42ac      	cmp	r4, r5
 8017e04:	bf88      	it	hi
 8017e06:	2300      	movhi	r3, #0
 8017e08:	3302      	adds	r3, #2
 8017e0a:	4403      	add	r3, r0
 8017e0c:	1a18      	subs	r0, r3, r0
 8017e0e:	b003      	add	sp, #12
 8017e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017e16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8017e1a:	e7ed      	b.n	8017df8 <__exponent+0x44>
 8017e1c:	2330      	movs	r3, #48	@ 0x30
 8017e1e:	3130      	adds	r1, #48	@ 0x30
 8017e20:	7083      	strb	r3, [r0, #2]
 8017e22:	70c1      	strb	r1, [r0, #3]
 8017e24:	1d03      	adds	r3, r0, #4
 8017e26:	e7f1      	b.n	8017e0c <__exponent+0x58>

08017e28 <_printf_float>:
 8017e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e2c:	b08d      	sub	sp, #52	@ 0x34
 8017e2e:	460c      	mov	r4, r1
 8017e30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017e34:	4616      	mov	r6, r2
 8017e36:	461f      	mov	r7, r3
 8017e38:	4605      	mov	r5, r0
 8017e3a:	f000 fccb 	bl	80187d4 <_localeconv_r>
 8017e3e:	f8d0 b000 	ldr.w	fp, [r0]
 8017e42:	4658      	mov	r0, fp
 8017e44:	f7e8 fab4 	bl	80003b0 <strlen>
 8017e48:	2300      	movs	r3, #0
 8017e4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8017e50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017e54:	6822      	ldr	r2, [r4, #0]
 8017e56:	9005      	str	r0, [sp, #20]
 8017e58:	3307      	adds	r3, #7
 8017e5a:	f023 0307 	bic.w	r3, r3, #7
 8017e5e:	f103 0108 	add.w	r1, r3, #8
 8017e62:	f8c8 1000 	str.w	r1, [r8]
 8017e66:	ed93 0b00 	vldr	d0, [r3]
 8017e6a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80180c8 <_printf_float+0x2a0>
 8017e6e:	eeb0 7bc0 	vabs.f64	d7, d0
 8017e72:	eeb4 7b46 	vcmp.f64	d7, d6
 8017e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e7a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8017e7e:	dd24      	ble.n	8017eca <_printf_float+0xa2>
 8017e80:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e88:	d502      	bpl.n	8017e90 <_printf_float+0x68>
 8017e8a:	232d      	movs	r3, #45	@ 0x2d
 8017e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017e90:	498f      	ldr	r1, [pc, #572]	@ (80180d0 <_printf_float+0x2a8>)
 8017e92:	4b90      	ldr	r3, [pc, #576]	@ (80180d4 <_printf_float+0x2ac>)
 8017e94:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8017e98:	bf8c      	ite	hi
 8017e9a:	4688      	movhi	r8, r1
 8017e9c:	4698      	movls	r8, r3
 8017e9e:	f022 0204 	bic.w	r2, r2, #4
 8017ea2:	2303      	movs	r3, #3
 8017ea4:	6123      	str	r3, [r4, #16]
 8017ea6:	6022      	str	r2, [r4, #0]
 8017ea8:	f04f 0a00 	mov.w	sl, #0
 8017eac:	9700      	str	r7, [sp, #0]
 8017eae:	4633      	mov	r3, r6
 8017eb0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8017eb2:	4621      	mov	r1, r4
 8017eb4:	4628      	mov	r0, r5
 8017eb6:	f000 f9d1 	bl	801825c <_printf_common>
 8017eba:	3001      	adds	r0, #1
 8017ebc:	f040 8089 	bne.w	8017fd2 <_printf_float+0x1aa>
 8017ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ec4:	b00d      	add	sp, #52	@ 0x34
 8017ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eca:	eeb4 0b40 	vcmp.f64	d0, d0
 8017ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ed2:	d709      	bvc.n	8017ee8 <_printf_float+0xc0>
 8017ed4:	ee10 3a90 	vmov	r3, s1
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	bfbc      	itt	lt
 8017edc:	232d      	movlt	r3, #45	@ 0x2d
 8017ede:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8017ee2:	497d      	ldr	r1, [pc, #500]	@ (80180d8 <_printf_float+0x2b0>)
 8017ee4:	4b7d      	ldr	r3, [pc, #500]	@ (80180dc <_printf_float+0x2b4>)
 8017ee6:	e7d5      	b.n	8017e94 <_printf_float+0x6c>
 8017ee8:	6863      	ldr	r3, [r4, #4]
 8017eea:	1c59      	adds	r1, r3, #1
 8017eec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8017ef0:	d139      	bne.n	8017f66 <_printf_float+0x13e>
 8017ef2:	2306      	movs	r3, #6
 8017ef4:	6063      	str	r3, [r4, #4]
 8017ef6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8017efa:	2300      	movs	r3, #0
 8017efc:	6022      	str	r2, [r4, #0]
 8017efe:	9303      	str	r3, [sp, #12]
 8017f00:	ab0a      	add	r3, sp, #40	@ 0x28
 8017f02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017f06:	ab09      	add	r3, sp, #36	@ 0x24
 8017f08:	9300      	str	r3, [sp, #0]
 8017f0a:	6861      	ldr	r1, [r4, #4]
 8017f0c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017f10:	4628      	mov	r0, r5
 8017f12:	f7ff fefb 	bl	8017d0c <__cvt>
 8017f16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017f1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017f1c:	4680      	mov	r8, r0
 8017f1e:	d129      	bne.n	8017f74 <_printf_float+0x14c>
 8017f20:	1cc8      	adds	r0, r1, #3
 8017f22:	db02      	blt.n	8017f2a <_printf_float+0x102>
 8017f24:	6863      	ldr	r3, [r4, #4]
 8017f26:	4299      	cmp	r1, r3
 8017f28:	dd41      	ble.n	8017fae <_printf_float+0x186>
 8017f2a:	f1a9 0902 	sub.w	r9, r9, #2
 8017f2e:	fa5f f989 	uxtb.w	r9, r9
 8017f32:	3901      	subs	r1, #1
 8017f34:	464a      	mov	r2, r9
 8017f36:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017f3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8017f3c:	f7ff ff3a 	bl	8017db4 <__exponent>
 8017f40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f42:	1813      	adds	r3, r2, r0
 8017f44:	2a01      	cmp	r2, #1
 8017f46:	4682      	mov	sl, r0
 8017f48:	6123      	str	r3, [r4, #16]
 8017f4a:	dc02      	bgt.n	8017f52 <_printf_float+0x12a>
 8017f4c:	6822      	ldr	r2, [r4, #0]
 8017f4e:	07d2      	lsls	r2, r2, #31
 8017f50:	d501      	bpl.n	8017f56 <_printf_float+0x12e>
 8017f52:	3301      	adds	r3, #1
 8017f54:	6123      	str	r3, [r4, #16]
 8017f56:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d0a6      	beq.n	8017eac <_printf_float+0x84>
 8017f5e:	232d      	movs	r3, #45	@ 0x2d
 8017f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f64:	e7a2      	b.n	8017eac <_printf_float+0x84>
 8017f66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017f6a:	d1c4      	bne.n	8017ef6 <_printf_float+0xce>
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d1c2      	bne.n	8017ef6 <_printf_float+0xce>
 8017f70:	2301      	movs	r3, #1
 8017f72:	e7bf      	b.n	8017ef4 <_printf_float+0xcc>
 8017f74:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017f78:	d9db      	bls.n	8017f32 <_printf_float+0x10a>
 8017f7a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8017f7e:	d118      	bne.n	8017fb2 <_printf_float+0x18a>
 8017f80:	2900      	cmp	r1, #0
 8017f82:	6863      	ldr	r3, [r4, #4]
 8017f84:	dd0b      	ble.n	8017f9e <_printf_float+0x176>
 8017f86:	6121      	str	r1, [r4, #16]
 8017f88:	b913      	cbnz	r3, 8017f90 <_printf_float+0x168>
 8017f8a:	6822      	ldr	r2, [r4, #0]
 8017f8c:	07d0      	lsls	r0, r2, #31
 8017f8e:	d502      	bpl.n	8017f96 <_printf_float+0x16e>
 8017f90:	3301      	adds	r3, #1
 8017f92:	440b      	add	r3, r1
 8017f94:	6123      	str	r3, [r4, #16]
 8017f96:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017f98:	f04f 0a00 	mov.w	sl, #0
 8017f9c:	e7db      	b.n	8017f56 <_printf_float+0x12e>
 8017f9e:	b913      	cbnz	r3, 8017fa6 <_printf_float+0x17e>
 8017fa0:	6822      	ldr	r2, [r4, #0]
 8017fa2:	07d2      	lsls	r2, r2, #31
 8017fa4:	d501      	bpl.n	8017faa <_printf_float+0x182>
 8017fa6:	3302      	adds	r3, #2
 8017fa8:	e7f4      	b.n	8017f94 <_printf_float+0x16c>
 8017faa:	2301      	movs	r3, #1
 8017fac:	e7f2      	b.n	8017f94 <_printf_float+0x16c>
 8017fae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8017fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017fb4:	4299      	cmp	r1, r3
 8017fb6:	db05      	blt.n	8017fc4 <_printf_float+0x19c>
 8017fb8:	6823      	ldr	r3, [r4, #0]
 8017fba:	6121      	str	r1, [r4, #16]
 8017fbc:	07d8      	lsls	r0, r3, #31
 8017fbe:	d5ea      	bpl.n	8017f96 <_printf_float+0x16e>
 8017fc0:	1c4b      	adds	r3, r1, #1
 8017fc2:	e7e7      	b.n	8017f94 <_printf_float+0x16c>
 8017fc4:	2900      	cmp	r1, #0
 8017fc6:	bfd4      	ite	le
 8017fc8:	f1c1 0202 	rsble	r2, r1, #2
 8017fcc:	2201      	movgt	r2, #1
 8017fce:	4413      	add	r3, r2
 8017fd0:	e7e0      	b.n	8017f94 <_printf_float+0x16c>
 8017fd2:	6823      	ldr	r3, [r4, #0]
 8017fd4:	055a      	lsls	r2, r3, #21
 8017fd6:	d407      	bmi.n	8017fe8 <_printf_float+0x1c0>
 8017fd8:	6923      	ldr	r3, [r4, #16]
 8017fda:	4642      	mov	r2, r8
 8017fdc:	4631      	mov	r1, r6
 8017fde:	4628      	mov	r0, r5
 8017fe0:	47b8      	blx	r7
 8017fe2:	3001      	adds	r0, #1
 8017fe4:	d12a      	bne.n	801803c <_printf_float+0x214>
 8017fe6:	e76b      	b.n	8017ec0 <_printf_float+0x98>
 8017fe8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017fec:	f240 80e0 	bls.w	80181b0 <_printf_float+0x388>
 8017ff0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017ff4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ffc:	d133      	bne.n	8018066 <_printf_float+0x23e>
 8017ffe:	4a38      	ldr	r2, [pc, #224]	@ (80180e0 <_printf_float+0x2b8>)
 8018000:	2301      	movs	r3, #1
 8018002:	4631      	mov	r1, r6
 8018004:	4628      	mov	r0, r5
 8018006:	47b8      	blx	r7
 8018008:	3001      	adds	r0, #1
 801800a:	f43f af59 	beq.w	8017ec0 <_printf_float+0x98>
 801800e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018012:	4543      	cmp	r3, r8
 8018014:	db02      	blt.n	801801c <_printf_float+0x1f4>
 8018016:	6823      	ldr	r3, [r4, #0]
 8018018:	07d8      	lsls	r0, r3, #31
 801801a:	d50f      	bpl.n	801803c <_printf_float+0x214>
 801801c:	9b05      	ldr	r3, [sp, #20]
 801801e:	465a      	mov	r2, fp
 8018020:	4631      	mov	r1, r6
 8018022:	4628      	mov	r0, r5
 8018024:	47b8      	blx	r7
 8018026:	3001      	adds	r0, #1
 8018028:	f43f af4a 	beq.w	8017ec0 <_printf_float+0x98>
 801802c:	f04f 0900 	mov.w	r9, #0
 8018030:	f108 38ff 	add.w	r8, r8, #4294967295
 8018034:	f104 0a1a 	add.w	sl, r4, #26
 8018038:	45c8      	cmp	r8, r9
 801803a:	dc09      	bgt.n	8018050 <_printf_float+0x228>
 801803c:	6823      	ldr	r3, [r4, #0]
 801803e:	079b      	lsls	r3, r3, #30
 8018040:	f100 8107 	bmi.w	8018252 <_printf_float+0x42a>
 8018044:	68e0      	ldr	r0, [r4, #12]
 8018046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018048:	4298      	cmp	r0, r3
 801804a:	bfb8      	it	lt
 801804c:	4618      	movlt	r0, r3
 801804e:	e739      	b.n	8017ec4 <_printf_float+0x9c>
 8018050:	2301      	movs	r3, #1
 8018052:	4652      	mov	r2, sl
 8018054:	4631      	mov	r1, r6
 8018056:	4628      	mov	r0, r5
 8018058:	47b8      	blx	r7
 801805a:	3001      	adds	r0, #1
 801805c:	f43f af30 	beq.w	8017ec0 <_printf_float+0x98>
 8018060:	f109 0901 	add.w	r9, r9, #1
 8018064:	e7e8      	b.n	8018038 <_printf_float+0x210>
 8018066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018068:	2b00      	cmp	r3, #0
 801806a:	dc3b      	bgt.n	80180e4 <_printf_float+0x2bc>
 801806c:	4a1c      	ldr	r2, [pc, #112]	@ (80180e0 <_printf_float+0x2b8>)
 801806e:	2301      	movs	r3, #1
 8018070:	4631      	mov	r1, r6
 8018072:	4628      	mov	r0, r5
 8018074:	47b8      	blx	r7
 8018076:	3001      	adds	r0, #1
 8018078:	f43f af22 	beq.w	8017ec0 <_printf_float+0x98>
 801807c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018080:	ea59 0303 	orrs.w	r3, r9, r3
 8018084:	d102      	bne.n	801808c <_printf_float+0x264>
 8018086:	6823      	ldr	r3, [r4, #0]
 8018088:	07d9      	lsls	r1, r3, #31
 801808a:	d5d7      	bpl.n	801803c <_printf_float+0x214>
 801808c:	9b05      	ldr	r3, [sp, #20]
 801808e:	465a      	mov	r2, fp
 8018090:	4631      	mov	r1, r6
 8018092:	4628      	mov	r0, r5
 8018094:	47b8      	blx	r7
 8018096:	3001      	adds	r0, #1
 8018098:	f43f af12 	beq.w	8017ec0 <_printf_float+0x98>
 801809c:	f04f 0a00 	mov.w	sl, #0
 80180a0:	f104 0b1a 	add.w	fp, r4, #26
 80180a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180a6:	425b      	negs	r3, r3
 80180a8:	4553      	cmp	r3, sl
 80180aa:	dc01      	bgt.n	80180b0 <_printf_float+0x288>
 80180ac:	464b      	mov	r3, r9
 80180ae:	e794      	b.n	8017fda <_printf_float+0x1b2>
 80180b0:	2301      	movs	r3, #1
 80180b2:	465a      	mov	r2, fp
 80180b4:	4631      	mov	r1, r6
 80180b6:	4628      	mov	r0, r5
 80180b8:	47b8      	blx	r7
 80180ba:	3001      	adds	r0, #1
 80180bc:	f43f af00 	beq.w	8017ec0 <_printf_float+0x98>
 80180c0:	f10a 0a01 	add.w	sl, sl, #1
 80180c4:	e7ee      	b.n	80180a4 <_printf_float+0x27c>
 80180c6:	bf00      	nop
 80180c8:	ffffffff 	.word	0xffffffff
 80180cc:	7fefffff 	.word	0x7fefffff
 80180d0:	0801c5b4 	.word	0x0801c5b4
 80180d4:	0801c5b0 	.word	0x0801c5b0
 80180d8:	0801c5bc 	.word	0x0801c5bc
 80180dc:	0801c5b8 	.word	0x0801c5b8
 80180e0:	0801c5c0 	.word	0x0801c5c0
 80180e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80180e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80180ea:	4553      	cmp	r3, sl
 80180ec:	bfa8      	it	ge
 80180ee:	4653      	movge	r3, sl
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	4699      	mov	r9, r3
 80180f4:	dc37      	bgt.n	8018166 <_printf_float+0x33e>
 80180f6:	2300      	movs	r3, #0
 80180f8:	9307      	str	r3, [sp, #28]
 80180fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80180fe:	f104 021a 	add.w	r2, r4, #26
 8018102:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018104:	9907      	ldr	r1, [sp, #28]
 8018106:	9306      	str	r3, [sp, #24]
 8018108:	eba3 0309 	sub.w	r3, r3, r9
 801810c:	428b      	cmp	r3, r1
 801810e:	dc31      	bgt.n	8018174 <_printf_float+0x34c>
 8018110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018112:	459a      	cmp	sl, r3
 8018114:	dc3b      	bgt.n	801818e <_printf_float+0x366>
 8018116:	6823      	ldr	r3, [r4, #0]
 8018118:	07da      	lsls	r2, r3, #31
 801811a:	d438      	bmi.n	801818e <_printf_float+0x366>
 801811c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801811e:	ebaa 0903 	sub.w	r9, sl, r3
 8018122:	9b06      	ldr	r3, [sp, #24]
 8018124:	ebaa 0303 	sub.w	r3, sl, r3
 8018128:	4599      	cmp	r9, r3
 801812a:	bfa8      	it	ge
 801812c:	4699      	movge	r9, r3
 801812e:	f1b9 0f00 	cmp.w	r9, #0
 8018132:	dc34      	bgt.n	801819e <_printf_float+0x376>
 8018134:	f04f 0800 	mov.w	r8, #0
 8018138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801813c:	f104 0b1a 	add.w	fp, r4, #26
 8018140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018142:	ebaa 0303 	sub.w	r3, sl, r3
 8018146:	eba3 0309 	sub.w	r3, r3, r9
 801814a:	4543      	cmp	r3, r8
 801814c:	f77f af76 	ble.w	801803c <_printf_float+0x214>
 8018150:	2301      	movs	r3, #1
 8018152:	465a      	mov	r2, fp
 8018154:	4631      	mov	r1, r6
 8018156:	4628      	mov	r0, r5
 8018158:	47b8      	blx	r7
 801815a:	3001      	adds	r0, #1
 801815c:	f43f aeb0 	beq.w	8017ec0 <_printf_float+0x98>
 8018160:	f108 0801 	add.w	r8, r8, #1
 8018164:	e7ec      	b.n	8018140 <_printf_float+0x318>
 8018166:	4642      	mov	r2, r8
 8018168:	4631      	mov	r1, r6
 801816a:	4628      	mov	r0, r5
 801816c:	47b8      	blx	r7
 801816e:	3001      	adds	r0, #1
 8018170:	d1c1      	bne.n	80180f6 <_printf_float+0x2ce>
 8018172:	e6a5      	b.n	8017ec0 <_printf_float+0x98>
 8018174:	2301      	movs	r3, #1
 8018176:	4631      	mov	r1, r6
 8018178:	4628      	mov	r0, r5
 801817a:	9206      	str	r2, [sp, #24]
 801817c:	47b8      	blx	r7
 801817e:	3001      	adds	r0, #1
 8018180:	f43f ae9e 	beq.w	8017ec0 <_printf_float+0x98>
 8018184:	9b07      	ldr	r3, [sp, #28]
 8018186:	9a06      	ldr	r2, [sp, #24]
 8018188:	3301      	adds	r3, #1
 801818a:	9307      	str	r3, [sp, #28]
 801818c:	e7b9      	b.n	8018102 <_printf_float+0x2da>
 801818e:	9b05      	ldr	r3, [sp, #20]
 8018190:	465a      	mov	r2, fp
 8018192:	4631      	mov	r1, r6
 8018194:	4628      	mov	r0, r5
 8018196:	47b8      	blx	r7
 8018198:	3001      	adds	r0, #1
 801819a:	d1bf      	bne.n	801811c <_printf_float+0x2f4>
 801819c:	e690      	b.n	8017ec0 <_printf_float+0x98>
 801819e:	9a06      	ldr	r2, [sp, #24]
 80181a0:	464b      	mov	r3, r9
 80181a2:	4442      	add	r2, r8
 80181a4:	4631      	mov	r1, r6
 80181a6:	4628      	mov	r0, r5
 80181a8:	47b8      	blx	r7
 80181aa:	3001      	adds	r0, #1
 80181ac:	d1c2      	bne.n	8018134 <_printf_float+0x30c>
 80181ae:	e687      	b.n	8017ec0 <_printf_float+0x98>
 80181b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80181b4:	f1b9 0f01 	cmp.w	r9, #1
 80181b8:	dc01      	bgt.n	80181be <_printf_float+0x396>
 80181ba:	07db      	lsls	r3, r3, #31
 80181bc:	d536      	bpl.n	801822c <_printf_float+0x404>
 80181be:	2301      	movs	r3, #1
 80181c0:	4642      	mov	r2, r8
 80181c2:	4631      	mov	r1, r6
 80181c4:	4628      	mov	r0, r5
 80181c6:	47b8      	blx	r7
 80181c8:	3001      	adds	r0, #1
 80181ca:	f43f ae79 	beq.w	8017ec0 <_printf_float+0x98>
 80181ce:	9b05      	ldr	r3, [sp, #20]
 80181d0:	465a      	mov	r2, fp
 80181d2:	4631      	mov	r1, r6
 80181d4:	4628      	mov	r0, r5
 80181d6:	47b8      	blx	r7
 80181d8:	3001      	adds	r0, #1
 80181da:	f43f ae71 	beq.w	8017ec0 <_printf_float+0x98>
 80181de:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80181e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80181e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80181ee:	d018      	beq.n	8018222 <_printf_float+0x3fa>
 80181f0:	464b      	mov	r3, r9
 80181f2:	f108 0201 	add.w	r2, r8, #1
 80181f6:	4631      	mov	r1, r6
 80181f8:	4628      	mov	r0, r5
 80181fa:	47b8      	blx	r7
 80181fc:	3001      	adds	r0, #1
 80181fe:	d10c      	bne.n	801821a <_printf_float+0x3f2>
 8018200:	e65e      	b.n	8017ec0 <_printf_float+0x98>
 8018202:	2301      	movs	r3, #1
 8018204:	465a      	mov	r2, fp
 8018206:	4631      	mov	r1, r6
 8018208:	4628      	mov	r0, r5
 801820a:	47b8      	blx	r7
 801820c:	3001      	adds	r0, #1
 801820e:	f43f ae57 	beq.w	8017ec0 <_printf_float+0x98>
 8018212:	f108 0801 	add.w	r8, r8, #1
 8018216:	45c8      	cmp	r8, r9
 8018218:	dbf3      	blt.n	8018202 <_printf_float+0x3da>
 801821a:	4653      	mov	r3, sl
 801821c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018220:	e6dc      	b.n	8017fdc <_printf_float+0x1b4>
 8018222:	f04f 0800 	mov.w	r8, #0
 8018226:	f104 0b1a 	add.w	fp, r4, #26
 801822a:	e7f4      	b.n	8018216 <_printf_float+0x3ee>
 801822c:	2301      	movs	r3, #1
 801822e:	4642      	mov	r2, r8
 8018230:	e7e1      	b.n	80181f6 <_printf_float+0x3ce>
 8018232:	2301      	movs	r3, #1
 8018234:	464a      	mov	r2, r9
 8018236:	4631      	mov	r1, r6
 8018238:	4628      	mov	r0, r5
 801823a:	47b8      	blx	r7
 801823c:	3001      	adds	r0, #1
 801823e:	f43f ae3f 	beq.w	8017ec0 <_printf_float+0x98>
 8018242:	f108 0801 	add.w	r8, r8, #1
 8018246:	68e3      	ldr	r3, [r4, #12]
 8018248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801824a:	1a5b      	subs	r3, r3, r1
 801824c:	4543      	cmp	r3, r8
 801824e:	dcf0      	bgt.n	8018232 <_printf_float+0x40a>
 8018250:	e6f8      	b.n	8018044 <_printf_float+0x21c>
 8018252:	f04f 0800 	mov.w	r8, #0
 8018256:	f104 0919 	add.w	r9, r4, #25
 801825a:	e7f4      	b.n	8018246 <_printf_float+0x41e>

0801825c <_printf_common>:
 801825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018260:	4616      	mov	r6, r2
 8018262:	4698      	mov	r8, r3
 8018264:	688a      	ldr	r2, [r1, #8]
 8018266:	690b      	ldr	r3, [r1, #16]
 8018268:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801826c:	4293      	cmp	r3, r2
 801826e:	bfb8      	it	lt
 8018270:	4613      	movlt	r3, r2
 8018272:	6033      	str	r3, [r6, #0]
 8018274:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018278:	4607      	mov	r7, r0
 801827a:	460c      	mov	r4, r1
 801827c:	b10a      	cbz	r2, 8018282 <_printf_common+0x26>
 801827e:	3301      	adds	r3, #1
 8018280:	6033      	str	r3, [r6, #0]
 8018282:	6823      	ldr	r3, [r4, #0]
 8018284:	0699      	lsls	r1, r3, #26
 8018286:	bf42      	ittt	mi
 8018288:	6833      	ldrmi	r3, [r6, #0]
 801828a:	3302      	addmi	r3, #2
 801828c:	6033      	strmi	r3, [r6, #0]
 801828e:	6825      	ldr	r5, [r4, #0]
 8018290:	f015 0506 	ands.w	r5, r5, #6
 8018294:	d106      	bne.n	80182a4 <_printf_common+0x48>
 8018296:	f104 0a19 	add.w	sl, r4, #25
 801829a:	68e3      	ldr	r3, [r4, #12]
 801829c:	6832      	ldr	r2, [r6, #0]
 801829e:	1a9b      	subs	r3, r3, r2
 80182a0:	42ab      	cmp	r3, r5
 80182a2:	dc26      	bgt.n	80182f2 <_printf_common+0x96>
 80182a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80182a8:	6822      	ldr	r2, [r4, #0]
 80182aa:	3b00      	subs	r3, #0
 80182ac:	bf18      	it	ne
 80182ae:	2301      	movne	r3, #1
 80182b0:	0692      	lsls	r2, r2, #26
 80182b2:	d42b      	bmi.n	801830c <_printf_common+0xb0>
 80182b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80182b8:	4641      	mov	r1, r8
 80182ba:	4638      	mov	r0, r7
 80182bc:	47c8      	blx	r9
 80182be:	3001      	adds	r0, #1
 80182c0:	d01e      	beq.n	8018300 <_printf_common+0xa4>
 80182c2:	6823      	ldr	r3, [r4, #0]
 80182c4:	6922      	ldr	r2, [r4, #16]
 80182c6:	f003 0306 	and.w	r3, r3, #6
 80182ca:	2b04      	cmp	r3, #4
 80182cc:	bf02      	ittt	eq
 80182ce:	68e5      	ldreq	r5, [r4, #12]
 80182d0:	6833      	ldreq	r3, [r6, #0]
 80182d2:	1aed      	subeq	r5, r5, r3
 80182d4:	68a3      	ldr	r3, [r4, #8]
 80182d6:	bf0c      	ite	eq
 80182d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80182dc:	2500      	movne	r5, #0
 80182de:	4293      	cmp	r3, r2
 80182e0:	bfc4      	itt	gt
 80182e2:	1a9b      	subgt	r3, r3, r2
 80182e4:	18ed      	addgt	r5, r5, r3
 80182e6:	2600      	movs	r6, #0
 80182e8:	341a      	adds	r4, #26
 80182ea:	42b5      	cmp	r5, r6
 80182ec:	d11a      	bne.n	8018324 <_printf_common+0xc8>
 80182ee:	2000      	movs	r0, #0
 80182f0:	e008      	b.n	8018304 <_printf_common+0xa8>
 80182f2:	2301      	movs	r3, #1
 80182f4:	4652      	mov	r2, sl
 80182f6:	4641      	mov	r1, r8
 80182f8:	4638      	mov	r0, r7
 80182fa:	47c8      	blx	r9
 80182fc:	3001      	adds	r0, #1
 80182fe:	d103      	bne.n	8018308 <_printf_common+0xac>
 8018300:	f04f 30ff 	mov.w	r0, #4294967295
 8018304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018308:	3501      	adds	r5, #1
 801830a:	e7c6      	b.n	801829a <_printf_common+0x3e>
 801830c:	18e1      	adds	r1, r4, r3
 801830e:	1c5a      	adds	r2, r3, #1
 8018310:	2030      	movs	r0, #48	@ 0x30
 8018312:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018316:	4422      	add	r2, r4
 8018318:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801831c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018320:	3302      	adds	r3, #2
 8018322:	e7c7      	b.n	80182b4 <_printf_common+0x58>
 8018324:	2301      	movs	r3, #1
 8018326:	4622      	mov	r2, r4
 8018328:	4641      	mov	r1, r8
 801832a:	4638      	mov	r0, r7
 801832c:	47c8      	blx	r9
 801832e:	3001      	adds	r0, #1
 8018330:	d0e6      	beq.n	8018300 <_printf_common+0xa4>
 8018332:	3601      	adds	r6, #1
 8018334:	e7d9      	b.n	80182ea <_printf_common+0x8e>
	...

08018338 <_printf_i>:
 8018338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801833c:	7e0f      	ldrb	r7, [r1, #24]
 801833e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018340:	2f78      	cmp	r7, #120	@ 0x78
 8018342:	4691      	mov	r9, r2
 8018344:	4680      	mov	r8, r0
 8018346:	460c      	mov	r4, r1
 8018348:	469a      	mov	sl, r3
 801834a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801834e:	d807      	bhi.n	8018360 <_printf_i+0x28>
 8018350:	2f62      	cmp	r7, #98	@ 0x62
 8018352:	d80a      	bhi.n	801836a <_printf_i+0x32>
 8018354:	2f00      	cmp	r7, #0
 8018356:	f000 80d1 	beq.w	80184fc <_printf_i+0x1c4>
 801835a:	2f58      	cmp	r7, #88	@ 0x58
 801835c:	f000 80b8 	beq.w	80184d0 <_printf_i+0x198>
 8018360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018364:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018368:	e03a      	b.n	80183e0 <_printf_i+0xa8>
 801836a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801836e:	2b15      	cmp	r3, #21
 8018370:	d8f6      	bhi.n	8018360 <_printf_i+0x28>
 8018372:	a101      	add	r1, pc, #4	@ (adr r1, 8018378 <_printf_i+0x40>)
 8018374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018378:	080183d1 	.word	0x080183d1
 801837c:	080183e5 	.word	0x080183e5
 8018380:	08018361 	.word	0x08018361
 8018384:	08018361 	.word	0x08018361
 8018388:	08018361 	.word	0x08018361
 801838c:	08018361 	.word	0x08018361
 8018390:	080183e5 	.word	0x080183e5
 8018394:	08018361 	.word	0x08018361
 8018398:	08018361 	.word	0x08018361
 801839c:	08018361 	.word	0x08018361
 80183a0:	08018361 	.word	0x08018361
 80183a4:	080184e3 	.word	0x080184e3
 80183a8:	0801840f 	.word	0x0801840f
 80183ac:	0801849d 	.word	0x0801849d
 80183b0:	08018361 	.word	0x08018361
 80183b4:	08018361 	.word	0x08018361
 80183b8:	08018505 	.word	0x08018505
 80183bc:	08018361 	.word	0x08018361
 80183c0:	0801840f 	.word	0x0801840f
 80183c4:	08018361 	.word	0x08018361
 80183c8:	08018361 	.word	0x08018361
 80183cc:	080184a5 	.word	0x080184a5
 80183d0:	6833      	ldr	r3, [r6, #0]
 80183d2:	1d1a      	adds	r2, r3, #4
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	6032      	str	r2, [r6, #0]
 80183d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80183dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80183e0:	2301      	movs	r3, #1
 80183e2:	e09c      	b.n	801851e <_printf_i+0x1e6>
 80183e4:	6833      	ldr	r3, [r6, #0]
 80183e6:	6820      	ldr	r0, [r4, #0]
 80183e8:	1d19      	adds	r1, r3, #4
 80183ea:	6031      	str	r1, [r6, #0]
 80183ec:	0606      	lsls	r6, r0, #24
 80183ee:	d501      	bpl.n	80183f4 <_printf_i+0xbc>
 80183f0:	681d      	ldr	r5, [r3, #0]
 80183f2:	e003      	b.n	80183fc <_printf_i+0xc4>
 80183f4:	0645      	lsls	r5, r0, #25
 80183f6:	d5fb      	bpl.n	80183f0 <_printf_i+0xb8>
 80183f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80183fc:	2d00      	cmp	r5, #0
 80183fe:	da03      	bge.n	8018408 <_printf_i+0xd0>
 8018400:	232d      	movs	r3, #45	@ 0x2d
 8018402:	426d      	negs	r5, r5
 8018404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018408:	4858      	ldr	r0, [pc, #352]	@ (801856c <_printf_i+0x234>)
 801840a:	230a      	movs	r3, #10
 801840c:	e011      	b.n	8018432 <_printf_i+0xfa>
 801840e:	6821      	ldr	r1, [r4, #0]
 8018410:	6833      	ldr	r3, [r6, #0]
 8018412:	0608      	lsls	r0, r1, #24
 8018414:	f853 5b04 	ldr.w	r5, [r3], #4
 8018418:	d402      	bmi.n	8018420 <_printf_i+0xe8>
 801841a:	0649      	lsls	r1, r1, #25
 801841c:	bf48      	it	mi
 801841e:	b2ad      	uxthmi	r5, r5
 8018420:	2f6f      	cmp	r7, #111	@ 0x6f
 8018422:	4852      	ldr	r0, [pc, #328]	@ (801856c <_printf_i+0x234>)
 8018424:	6033      	str	r3, [r6, #0]
 8018426:	bf14      	ite	ne
 8018428:	230a      	movne	r3, #10
 801842a:	2308      	moveq	r3, #8
 801842c:	2100      	movs	r1, #0
 801842e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018432:	6866      	ldr	r6, [r4, #4]
 8018434:	60a6      	str	r6, [r4, #8]
 8018436:	2e00      	cmp	r6, #0
 8018438:	db05      	blt.n	8018446 <_printf_i+0x10e>
 801843a:	6821      	ldr	r1, [r4, #0]
 801843c:	432e      	orrs	r6, r5
 801843e:	f021 0104 	bic.w	r1, r1, #4
 8018442:	6021      	str	r1, [r4, #0]
 8018444:	d04b      	beq.n	80184de <_printf_i+0x1a6>
 8018446:	4616      	mov	r6, r2
 8018448:	fbb5 f1f3 	udiv	r1, r5, r3
 801844c:	fb03 5711 	mls	r7, r3, r1, r5
 8018450:	5dc7      	ldrb	r7, [r0, r7]
 8018452:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018456:	462f      	mov	r7, r5
 8018458:	42bb      	cmp	r3, r7
 801845a:	460d      	mov	r5, r1
 801845c:	d9f4      	bls.n	8018448 <_printf_i+0x110>
 801845e:	2b08      	cmp	r3, #8
 8018460:	d10b      	bne.n	801847a <_printf_i+0x142>
 8018462:	6823      	ldr	r3, [r4, #0]
 8018464:	07df      	lsls	r7, r3, #31
 8018466:	d508      	bpl.n	801847a <_printf_i+0x142>
 8018468:	6923      	ldr	r3, [r4, #16]
 801846a:	6861      	ldr	r1, [r4, #4]
 801846c:	4299      	cmp	r1, r3
 801846e:	bfde      	ittt	le
 8018470:	2330      	movle	r3, #48	@ 0x30
 8018472:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018476:	f106 36ff 	addle.w	r6, r6, #4294967295
 801847a:	1b92      	subs	r2, r2, r6
 801847c:	6122      	str	r2, [r4, #16]
 801847e:	f8cd a000 	str.w	sl, [sp]
 8018482:	464b      	mov	r3, r9
 8018484:	aa03      	add	r2, sp, #12
 8018486:	4621      	mov	r1, r4
 8018488:	4640      	mov	r0, r8
 801848a:	f7ff fee7 	bl	801825c <_printf_common>
 801848e:	3001      	adds	r0, #1
 8018490:	d14a      	bne.n	8018528 <_printf_i+0x1f0>
 8018492:	f04f 30ff 	mov.w	r0, #4294967295
 8018496:	b004      	add	sp, #16
 8018498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801849c:	6823      	ldr	r3, [r4, #0]
 801849e:	f043 0320 	orr.w	r3, r3, #32
 80184a2:	6023      	str	r3, [r4, #0]
 80184a4:	4832      	ldr	r0, [pc, #200]	@ (8018570 <_printf_i+0x238>)
 80184a6:	2778      	movs	r7, #120	@ 0x78
 80184a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80184ac:	6823      	ldr	r3, [r4, #0]
 80184ae:	6831      	ldr	r1, [r6, #0]
 80184b0:	061f      	lsls	r7, r3, #24
 80184b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80184b6:	d402      	bmi.n	80184be <_printf_i+0x186>
 80184b8:	065f      	lsls	r7, r3, #25
 80184ba:	bf48      	it	mi
 80184bc:	b2ad      	uxthmi	r5, r5
 80184be:	6031      	str	r1, [r6, #0]
 80184c0:	07d9      	lsls	r1, r3, #31
 80184c2:	bf44      	itt	mi
 80184c4:	f043 0320 	orrmi.w	r3, r3, #32
 80184c8:	6023      	strmi	r3, [r4, #0]
 80184ca:	b11d      	cbz	r5, 80184d4 <_printf_i+0x19c>
 80184cc:	2310      	movs	r3, #16
 80184ce:	e7ad      	b.n	801842c <_printf_i+0xf4>
 80184d0:	4826      	ldr	r0, [pc, #152]	@ (801856c <_printf_i+0x234>)
 80184d2:	e7e9      	b.n	80184a8 <_printf_i+0x170>
 80184d4:	6823      	ldr	r3, [r4, #0]
 80184d6:	f023 0320 	bic.w	r3, r3, #32
 80184da:	6023      	str	r3, [r4, #0]
 80184dc:	e7f6      	b.n	80184cc <_printf_i+0x194>
 80184de:	4616      	mov	r6, r2
 80184e0:	e7bd      	b.n	801845e <_printf_i+0x126>
 80184e2:	6833      	ldr	r3, [r6, #0]
 80184e4:	6825      	ldr	r5, [r4, #0]
 80184e6:	6961      	ldr	r1, [r4, #20]
 80184e8:	1d18      	adds	r0, r3, #4
 80184ea:	6030      	str	r0, [r6, #0]
 80184ec:	062e      	lsls	r6, r5, #24
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	d501      	bpl.n	80184f6 <_printf_i+0x1be>
 80184f2:	6019      	str	r1, [r3, #0]
 80184f4:	e002      	b.n	80184fc <_printf_i+0x1c4>
 80184f6:	0668      	lsls	r0, r5, #25
 80184f8:	d5fb      	bpl.n	80184f2 <_printf_i+0x1ba>
 80184fa:	8019      	strh	r1, [r3, #0]
 80184fc:	2300      	movs	r3, #0
 80184fe:	6123      	str	r3, [r4, #16]
 8018500:	4616      	mov	r6, r2
 8018502:	e7bc      	b.n	801847e <_printf_i+0x146>
 8018504:	6833      	ldr	r3, [r6, #0]
 8018506:	1d1a      	adds	r2, r3, #4
 8018508:	6032      	str	r2, [r6, #0]
 801850a:	681e      	ldr	r6, [r3, #0]
 801850c:	6862      	ldr	r2, [r4, #4]
 801850e:	2100      	movs	r1, #0
 8018510:	4630      	mov	r0, r6
 8018512:	f7e7 fefd 	bl	8000310 <memchr>
 8018516:	b108      	cbz	r0, 801851c <_printf_i+0x1e4>
 8018518:	1b80      	subs	r0, r0, r6
 801851a:	6060      	str	r0, [r4, #4]
 801851c:	6863      	ldr	r3, [r4, #4]
 801851e:	6123      	str	r3, [r4, #16]
 8018520:	2300      	movs	r3, #0
 8018522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018526:	e7aa      	b.n	801847e <_printf_i+0x146>
 8018528:	6923      	ldr	r3, [r4, #16]
 801852a:	4632      	mov	r2, r6
 801852c:	4649      	mov	r1, r9
 801852e:	4640      	mov	r0, r8
 8018530:	47d0      	blx	sl
 8018532:	3001      	adds	r0, #1
 8018534:	d0ad      	beq.n	8018492 <_printf_i+0x15a>
 8018536:	6823      	ldr	r3, [r4, #0]
 8018538:	079b      	lsls	r3, r3, #30
 801853a:	d413      	bmi.n	8018564 <_printf_i+0x22c>
 801853c:	68e0      	ldr	r0, [r4, #12]
 801853e:	9b03      	ldr	r3, [sp, #12]
 8018540:	4298      	cmp	r0, r3
 8018542:	bfb8      	it	lt
 8018544:	4618      	movlt	r0, r3
 8018546:	e7a6      	b.n	8018496 <_printf_i+0x15e>
 8018548:	2301      	movs	r3, #1
 801854a:	4632      	mov	r2, r6
 801854c:	4649      	mov	r1, r9
 801854e:	4640      	mov	r0, r8
 8018550:	47d0      	blx	sl
 8018552:	3001      	adds	r0, #1
 8018554:	d09d      	beq.n	8018492 <_printf_i+0x15a>
 8018556:	3501      	adds	r5, #1
 8018558:	68e3      	ldr	r3, [r4, #12]
 801855a:	9903      	ldr	r1, [sp, #12]
 801855c:	1a5b      	subs	r3, r3, r1
 801855e:	42ab      	cmp	r3, r5
 8018560:	dcf2      	bgt.n	8018548 <_printf_i+0x210>
 8018562:	e7eb      	b.n	801853c <_printf_i+0x204>
 8018564:	2500      	movs	r5, #0
 8018566:	f104 0619 	add.w	r6, r4, #25
 801856a:	e7f5      	b.n	8018558 <_printf_i+0x220>
 801856c:	0801c5c2 	.word	0x0801c5c2
 8018570:	0801c5d3 	.word	0x0801c5d3

08018574 <std>:
 8018574:	2300      	movs	r3, #0
 8018576:	b510      	push	{r4, lr}
 8018578:	4604      	mov	r4, r0
 801857a:	e9c0 3300 	strd	r3, r3, [r0]
 801857e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018582:	6083      	str	r3, [r0, #8]
 8018584:	8181      	strh	r1, [r0, #12]
 8018586:	6643      	str	r3, [r0, #100]	@ 0x64
 8018588:	81c2      	strh	r2, [r0, #14]
 801858a:	6183      	str	r3, [r0, #24]
 801858c:	4619      	mov	r1, r3
 801858e:	2208      	movs	r2, #8
 8018590:	305c      	adds	r0, #92	@ 0x5c
 8018592:	f000 f916 	bl	80187c2 <memset>
 8018596:	4b0d      	ldr	r3, [pc, #52]	@ (80185cc <std+0x58>)
 8018598:	6263      	str	r3, [r4, #36]	@ 0x24
 801859a:	4b0d      	ldr	r3, [pc, #52]	@ (80185d0 <std+0x5c>)
 801859c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801859e:	4b0d      	ldr	r3, [pc, #52]	@ (80185d4 <std+0x60>)
 80185a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80185a2:	4b0d      	ldr	r3, [pc, #52]	@ (80185d8 <std+0x64>)
 80185a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80185a6:	4b0d      	ldr	r3, [pc, #52]	@ (80185dc <std+0x68>)
 80185a8:	6224      	str	r4, [r4, #32]
 80185aa:	429c      	cmp	r4, r3
 80185ac:	d006      	beq.n	80185bc <std+0x48>
 80185ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80185b2:	4294      	cmp	r4, r2
 80185b4:	d002      	beq.n	80185bc <std+0x48>
 80185b6:	33d0      	adds	r3, #208	@ 0xd0
 80185b8:	429c      	cmp	r4, r3
 80185ba:	d105      	bne.n	80185c8 <std+0x54>
 80185bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80185c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185c4:	f000 b97a 	b.w	80188bc <__retarget_lock_init_recursive>
 80185c8:	bd10      	pop	{r4, pc}
 80185ca:	bf00      	nop
 80185cc:	0801873d 	.word	0x0801873d
 80185d0:	0801875f 	.word	0x0801875f
 80185d4:	08018797 	.word	0x08018797
 80185d8:	080187bb 	.word	0x080187bb
 80185dc:	240018c0 	.word	0x240018c0

080185e0 <stdio_exit_handler>:
 80185e0:	4a02      	ldr	r2, [pc, #8]	@ (80185ec <stdio_exit_handler+0xc>)
 80185e2:	4903      	ldr	r1, [pc, #12]	@ (80185f0 <stdio_exit_handler+0x10>)
 80185e4:	4803      	ldr	r0, [pc, #12]	@ (80185f4 <stdio_exit_handler+0x14>)
 80185e6:	f000 b869 	b.w	80186bc <_fwalk_sglue>
 80185ea:	bf00      	nop
 80185ec:	24000164 	.word	0x24000164
 80185f0:	0801a3dd 	.word	0x0801a3dd
 80185f4:	24000174 	.word	0x24000174

080185f8 <cleanup_stdio>:
 80185f8:	6841      	ldr	r1, [r0, #4]
 80185fa:	4b0c      	ldr	r3, [pc, #48]	@ (801862c <cleanup_stdio+0x34>)
 80185fc:	4299      	cmp	r1, r3
 80185fe:	b510      	push	{r4, lr}
 8018600:	4604      	mov	r4, r0
 8018602:	d001      	beq.n	8018608 <cleanup_stdio+0x10>
 8018604:	f001 feea 	bl	801a3dc <_fflush_r>
 8018608:	68a1      	ldr	r1, [r4, #8]
 801860a:	4b09      	ldr	r3, [pc, #36]	@ (8018630 <cleanup_stdio+0x38>)
 801860c:	4299      	cmp	r1, r3
 801860e:	d002      	beq.n	8018616 <cleanup_stdio+0x1e>
 8018610:	4620      	mov	r0, r4
 8018612:	f001 fee3 	bl	801a3dc <_fflush_r>
 8018616:	68e1      	ldr	r1, [r4, #12]
 8018618:	4b06      	ldr	r3, [pc, #24]	@ (8018634 <cleanup_stdio+0x3c>)
 801861a:	4299      	cmp	r1, r3
 801861c:	d004      	beq.n	8018628 <cleanup_stdio+0x30>
 801861e:	4620      	mov	r0, r4
 8018620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018624:	f001 beda 	b.w	801a3dc <_fflush_r>
 8018628:	bd10      	pop	{r4, pc}
 801862a:	bf00      	nop
 801862c:	240018c0 	.word	0x240018c0
 8018630:	24001928 	.word	0x24001928
 8018634:	24001990 	.word	0x24001990

08018638 <global_stdio_init.part.0>:
 8018638:	b510      	push	{r4, lr}
 801863a:	4b0b      	ldr	r3, [pc, #44]	@ (8018668 <global_stdio_init.part.0+0x30>)
 801863c:	4c0b      	ldr	r4, [pc, #44]	@ (801866c <global_stdio_init.part.0+0x34>)
 801863e:	4a0c      	ldr	r2, [pc, #48]	@ (8018670 <global_stdio_init.part.0+0x38>)
 8018640:	601a      	str	r2, [r3, #0]
 8018642:	4620      	mov	r0, r4
 8018644:	2200      	movs	r2, #0
 8018646:	2104      	movs	r1, #4
 8018648:	f7ff ff94 	bl	8018574 <std>
 801864c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018650:	2201      	movs	r2, #1
 8018652:	2109      	movs	r1, #9
 8018654:	f7ff ff8e 	bl	8018574 <std>
 8018658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801865c:	2202      	movs	r2, #2
 801865e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018662:	2112      	movs	r1, #18
 8018664:	f7ff bf86 	b.w	8018574 <std>
 8018668:	240019f8 	.word	0x240019f8
 801866c:	240018c0 	.word	0x240018c0
 8018670:	080185e1 	.word	0x080185e1

08018674 <__sfp_lock_acquire>:
 8018674:	4801      	ldr	r0, [pc, #4]	@ (801867c <__sfp_lock_acquire+0x8>)
 8018676:	f000 b922 	b.w	80188be <__retarget_lock_acquire_recursive>
 801867a:	bf00      	nop
 801867c:	24001a01 	.word	0x24001a01

08018680 <__sfp_lock_release>:
 8018680:	4801      	ldr	r0, [pc, #4]	@ (8018688 <__sfp_lock_release+0x8>)
 8018682:	f000 b91d 	b.w	80188c0 <__retarget_lock_release_recursive>
 8018686:	bf00      	nop
 8018688:	24001a01 	.word	0x24001a01

0801868c <__sinit>:
 801868c:	b510      	push	{r4, lr}
 801868e:	4604      	mov	r4, r0
 8018690:	f7ff fff0 	bl	8018674 <__sfp_lock_acquire>
 8018694:	6a23      	ldr	r3, [r4, #32]
 8018696:	b11b      	cbz	r3, 80186a0 <__sinit+0x14>
 8018698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801869c:	f7ff bff0 	b.w	8018680 <__sfp_lock_release>
 80186a0:	4b04      	ldr	r3, [pc, #16]	@ (80186b4 <__sinit+0x28>)
 80186a2:	6223      	str	r3, [r4, #32]
 80186a4:	4b04      	ldr	r3, [pc, #16]	@ (80186b8 <__sinit+0x2c>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d1f5      	bne.n	8018698 <__sinit+0xc>
 80186ac:	f7ff ffc4 	bl	8018638 <global_stdio_init.part.0>
 80186b0:	e7f2      	b.n	8018698 <__sinit+0xc>
 80186b2:	bf00      	nop
 80186b4:	080185f9 	.word	0x080185f9
 80186b8:	240019f8 	.word	0x240019f8

080186bc <_fwalk_sglue>:
 80186bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186c0:	4607      	mov	r7, r0
 80186c2:	4688      	mov	r8, r1
 80186c4:	4614      	mov	r4, r2
 80186c6:	2600      	movs	r6, #0
 80186c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80186cc:	f1b9 0901 	subs.w	r9, r9, #1
 80186d0:	d505      	bpl.n	80186de <_fwalk_sglue+0x22>
 80186d2:	6824      	ldr	r4, [r4, #0]
 80186d4:	2c00      	cmp	r4, #0
 80186d6:	d1f7      	bne.n	80186c8 <_fwalk_sglue+0xc>
 80186d8:	4630      	mov	r0, r6
 80186da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186de:	89ab      	ldrh	r3, [r5, #12]
 80186e0:	2b01      	cmp	r3, #1
 80186e2:	d907      	bls.n	80186f4 <_fwalk_sglue+0x38>
 80186e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80186e8:	3301      	adds	r3, #1
 80186ea:	d003      	beq.n	80186f4 <_fwalk_sglue+0x38>
 80186ec:	4629      	mov	r1, r5
 80186ee:	4638      	mov	r0, r7
 80186f0:	47c0      	blx	r8
 80186f2:	4306      	orrs	r6, r0
 80186f4:	3568      	adds	r5, #104	@ 0x68
 80186f6:	e7e9      	b.n	80186cc <_fwalk_sglue+0x10>

080186f8 <siprintf>:
 80186f8:	b40e      	push	{r1, r2, r3}
 80186fa:	b510      	push	{r4, lr}
 80186fc:	b09d      	sub	sp, #116	@ 0x74
 80186fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8018700:	9002      	str	r0, [sp, #8]
 8018702:	9006      	str	r0, [sp, #24]
 8018704:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018708:	480a      	ldr	r0, [pc, #40]	@ (8018734 <siprintf+0x3c>)
 801870a:	9107      	str	r1, [sp, #28]
 801870c:	9104      	str	r1, [sp, #16]
 801870e:	490a      	ldr	r1, [pc, #40]	@ (8018738 <siprintf+0x40>)
 8018710:	f853 2b04 	ldr.w	r2, [r3], #4
 8018714:	9105      	str	r1, [sp, #20]
 8018716:	2400      	movs	r4, #0
 8018718:	a902      	add	r1, sp, #8
 801871a:	6800      	ldr	r0, [r0, #0]
 801871c:	9301      	str	r3, [sp, #4]
 801871e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8018720:	f001 fb9a 	bl	8019e58 <_svfiprintf_r>
 8018724:	9b02      	ldr	r3, [sp, #8]
 8018726:	701c      	strb	r4, [r3, #0]
 8018728:	b01d      	add	sp, #116	@ 0x74
 801872a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801872e:	b003      	add	sp, #12
 8018730:	4770      	bx	lr
 8018732:	bf00      	nop
 8018734:	24000170 	.word	0x24000170
 8018738:	ffff0208 	.word	0xffff0208

0801873c <__sread>:
 801873c:	b510      	push	{r4, lr}
 801873e:	460c      	mov	r4, r1
 8018740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018744:	f000 f86c 	bl	8018820 <_read_r>
 8018748:	2800      	cmp	r0, #0
 801874a:	bfab      	itete	ge
 801874c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801874e:	89a3      	ldrhlt	r3, [r4, #12]
 8018750:	181b      	addge	r3, r3, r0
 8018752:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018756:	bfac      	ite	ge
 8018758:	6563      	strge	r3, [r4, #84]	@ 0x54
 801875a:	81a3      	strhlt	r3, [r4, #12]
 801875c:	bd10      	pop	{r4, pc}

0801875e <__swrite>:
 801875e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018762:	461f      	mov	r7, r3
 8018764:	898b      	ldrh	r3, [r1, #12]
 8018766:	05db      	lsls	r3, r3, #23
 8018768:	4605      	mov	r5, r0
 801876a:	460c      	mov	r4, r1
 801876c:	4616      	mov	r6, r2
 801876e:	d505      	bpl.n	801877c <__swrite+0x1e>
 8018770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018774:	2302      	movs	r3, #2
 8018776:	2200      	movs	r2, #0
 8018778:	f000 f840 	bl	80187fc <_lseek_r>
 801877c:	89a3      	ldrh	r3, [r4, #12]
 801877e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018786:	81a3      	strh	r3, [r4, #12]
 8018788:	4632      	mov	r2, r6
 801878a:	463b      	mov	r3, r7
 801878c:	4628      	mov	r0, r5
 801878e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018792:	f000 b857 	b.w	8018844 <_write_r>

08018796 <__sseek>:
 8018796:	b510      	push	{r4, lr}
 8018798:	460c      	mov	r4, r1
 801879a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801879e:	f000 f82d 	bl	80187fc <_lseek_r>
 80187a2:	1c43      	adds	r3, r0, #1
 80187a4:	89a3      	ldrh	r3, [r4, #12]
 80187a6:	bf15      	itete	ne
 80187a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80187aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80187ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80187b2:	81a3      	strheq	r3, [r4, #12]
 80187b4:	bf18      	it	ne
 80187b6:	81a3      	strhne	r3, [r4, #12]
 80187b8:	bd10      	pop	{r4, pc}

080187ba <__sclose>:
 80187ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187be:	f000 b80d 	b.w	80187dc <_close_r>

080187c2 <memset>:
 80187c2:	4402      	add	r2, r0
 80187c4:	4603      	mov	r3, r0
 80187c6:	4293      	cmp	r3, r2
 80187c8:	d100      	bne.n	80187cc <memset+0xa>
 80187ca:	4770      	bx	lr
 80187cc:	f803 1b01 	strb.w	r1, [r3], #1
 80187d0:	e7f9      	b.n	80187c6 <memset+0x4>
	...

080187d4 <_localeconv_r>:
 80187d4:	4800      	ldr	r0, [pc, #0]	@ (80187d8 <_localeconv_r+0x4>)
 80187d6:	4770      	bx	lr
 80187d8:	240002b0 	.word	0x240002b0

080187dc <_close_r>:
 80187dc:	b538      	push	{r3, r4, r5, lr}
 80187de:	4d06      	ldr	r5, [pc, #24]	@ (80187f8 <_close_r+0x1c>)
 80187e0:	2300      	movs	r3, #0
 80187e2:	4604      	mov	r4, r0
 80187e4:	4608      	mov	r0, r1
 80187e6:	602b      	str	r3, [r5, #0]
 80187e8:	f7e9 fac8 	bl	8001d7c <_close>
 80187ec:	1c43      	adds	r3, r0, #1
 80187ee:	d102      	bne.n	80187f6 <_close_r+0x1a>
 80187f0:	682b      	ldr	r3, [r5, #0]
 80187f2:	b103      	cbz	r3, 80187f6 <_close_r+0x1a>
 80187f4:	6023      	str	r3, [r4, #0]
 80187f6:	bd38      	pop	{r3, r4, r5, pc}
 80187f8:	240019fc 	.word	0x240019fc

080187fc <_lseek_r>:
 80187fc:	b538      	push	{r3, r4, r5, lr}
 80187fe:	4d07      	ldr	r5, [pc, #28]	@ (801881c <_lseek_r+0x20>)
 8018800:	4604      	mov	r4, r0
 8018802:	4608      	mov	r0, r1
 8018804:	4611      	mov	r1, r2
 8018806:	2200      	movs	r2, #0
 8018808:	602a      	str	r2, [r5, #0]
 801880a:	461a      	mov	r2, r3
 801880c:	f7e9 fadd 	bl	8001dca <_lseek>
 8018810:	1c43      	adds	r3, r0, #1
 8018812:	d102      	bne.n	801881a <_lseek_r+0x1e>
 8018814:	682b      	ldr	r3, [r5, #0]
 8018816:	b103      	cbz	r3, 801881a <_lseek_r+0x1e>
 8018818:	6023      	str	r3, [r4, #0]
 801881a:	bd38      	pop	{r3, r4, r5, pc}
 801881c:	240019fc 	.word	0x240019fc

08018820 <_read_r>:
 8018820:	b538      	push	{r3, r4, r5, lr}
 8018822:	4d07      	ldr	r5, [pc, #28]	@ (8018840 <_read_r+0x20>)
 8018824:	4604      	mov	r4, r0
 8018826:	4608      	mov	r0, r1
 8018828:	4611      	mov	r1, r2
 801882a:	2200      	movs	r2, #0
 801882c:	602a      	str	r2, [r5, #0]
 801882e:	461a      	mov	r2, r3
 8018830:	f7e9 fa6b 	bl	8001d0a <_read>
 8018834:	1c43      	adds	r3, r0, #1
 8018836:	d102      	bne.n	801883e <_read_r+0x1e>
 8018838:	682b      	ldr	r3, [r5, #0]
 801883a:	b103      	cbz	r3, 801883e <_read_r+0x1e>
 801883c:	6023      	str	r3, [r4, #0]
 801883e:	bd38      	pop	{r3, r4, r5, pc}
 8018840:	240019fc 	.word	0x240019fc

08018844 <_write_r>:
 8018844:	b538      	push	{r3, r4, r5, lr}
 8018846:	4d07      	ldr	r5, [pc, #28]	@ (8018864 <_write_r+0x20>)
 8018848:	4604      	mov	r4, r0
 801884a:	4608      	mov	r0, r1
 801884c:	4611      	mov	r1, r2
 801884e:	2200      	movs	r2, #0
 8018850:	602a      	str	r2, [r5, #0]
 8018852:	461a      	mov	r2, r3
 8018854:	f7e9 fa76 	bl	8001d44 <_write>
 8018858:	1c43      	adds	r3, r0, #1
 801885a:	d102      	bne.n	8018862 <_write_r+0x1e>
 801885c:	682b      	ldr	r3, [r5, #0]
 801885e:	b103      	cbz	r3, 8018862 <_write_r+0x1e>
 8018860:	6023      	str	r3, [r4, #0]
 8018862:	bd38      	pop	{r3, r4, r5, pc}
 8018864:	240019fc 	.word	0x240019fc

08018868 <__errno>:
 8018868:	4b01      	ldr	r3, [pc, #4]	@ (8018870 <__errno+0x8>)
 801886a:	6818      	ldr	r0, [r3, #0]
 801886c:	4770      	bx	lr
 801886e:	bf00      	nop
 8018870:	24000170 	.word	0x24000170

08018874 <__libc_init_array>:
 8018874:	b570      	push	{r4, r5, r6, lr}
 8018876:	4d0d      	ldr	r5, [pc, #52]	@ (80188ac <__libc_init_array+0x38>)
 8018878:	4c0d      	ldr	r4, [pc, #52]	@ (80188b0 <__libc_init_array+0x3c>)
 801887a:	1b64      	subs	r4, r4, r5
 801887c:	10a4      	asrs	r4, r4, #2
 801887e:	2600      	movs	r6, #0
 8018880:	42a6      	cmp	r6, r4
 8018882:	d109      	bne.n	8018898 <__libc_init_array+0x24>
 8018884:	4d0b      	ldr	r5, [pc, #44]	@ (80188b4 <__libc_init_array+0x40>)
 8018886:	4c0c      	ldr	r4, [pc, #48]	@ (80188b8 <__libc_init_array+0x44>)
 8018888:	f003 fd80 	bl	801c38c <_init>
 801888c:	1b64      	subs	r4, r4, r5
 801888e:	10a4      	asrs	r4, r4, #2
 8018890:	2600      	movs	r6, #0
 8018892:	42a6      	cmp	r6, r4
 8018894:	d105      	bne.n	80188a2 <__libc_init_array+0x2e>
 8018896:	bd70      	pop	{r4, r5, r6, pc}
 8018898:	f855 3b04 	ldr.w	r3, [r5], #4
 801889c:	4798      	blx	r3
 801889e:	3601      	adds	r6, #1
 80188a0:	e7ee      	b.n	8018880 <__libc_init_array+0xc>
 80188a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80188a6:	4798      	blx	r3
 80188a8:	3601      	adds	r6, #1
 80188aa:	e7f2      	b.n	8018892 <__libc_init_array+0x1e>
 80188ac:	0801cee8 	.word	0x0801cee8
 80188b0:	0801cee8 	.word	0x0801cee8
 80188b4:	0801cee8 	.word	0x0801cee8
 80188b8:	0801ceec 	.word	0x0801ceec

080188bc <__retarget_lock_init_recursive>:
 80188bc:	4770      	bx	lr

080188be <__retarget_lock_acquire_recursive>:
 80188be:	4770      	bx	lr

080188c0 <__retarget_lock_release_recursive>:
 80188c0:	4770      	bx	lr

080188c2 <memcpy>:
 80188c2:	440a      	add	r2, r1
 80188c4:	4291      	cmp	r1, r2
 80188c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80188ca:	d100      	bne.n	80188ce <memcpy+0xc>
 80188cc:	4770      	bx	lr
 80188ce:	b510      	push	{r4, lr}
 80188d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80188d8:	4291      	cmp	r1, r2
 80188da:	d1f9      	bne.n	80188d0 <memcpy+0xe>
 80188dc:	bd10      	pop	{r4, pc}

080188de <quorem>:
 80188de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188e2:	6903      	ldr	r3, [r0, #16]
 80188e4:	690c      	ldr	r4, [r1, #16]
 80188e6:	42a3      	cmp	r3, r4
 80188e8:	4607      	mov	r7, r0
 80188ea:	db7e      	blt.n	80189ea <quorem+0x10c>
 80188ec:	3c01      	subs	r4, #1
 80188ee:	f101 0814 	add.w	r8, r1, #20
 80188f2:	00a3      	lsls	r3, r4, #2
 80188f4:	f100 0514 	add.w	r5, r0, #20
 80188f8:	9300      	str	r3, [sp, #0]
 80188fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80188fe:	9301      	str	r3, [sp, #4]
 8018900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018908:	3301      	adds	r3, #1
 801890a:	429a      	cmp	r2, r3
 801890c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018910:	fbb2 f6f3 	udiv	r6, r2, r3
 8018914:	d32e      	bcc.n	8018974 <quorem+0x96>
 8018916:	f04f 0a00 	mov.w	sl, #0
 801891a:	46c4      	mov	ip, r8
 801891c:	46ae      	mov	lr, r5
 801891e:	46d3      	mov	fp, sl
 8018920:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018924:	b298      	uxth	r0, r3
 8018926:	fb06 a000 	mla	r0, r6, r0, sl
 801892a:	0c02      	lsrs	r2, r0, #16
 801892c:	0c1b      	lsrs	r3, r3, #16
 801892e:	fb06 2303 	mla	r3, r6, r3, r2
 8018932:	f8de 2000 	ldr.w	r2, [lr]
 8018936:	b280      	uxth	r0, r0
 8018938:	b292      	uxth	r2, r2
 801893a:	1a12      	subs	r2, r2, r0
 801893c:	445a      	add	r2, fp
 801893e:	f8de 0000 	ldr.w	r0, [lr]
 8018942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018946:	b29b      	uxth	r3, r3
 8018948:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801894c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018950:	b292      	uxth	r2, r2
 8018952:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018956:	45e1      	cmp	r9, ip
 8018958:	f84e 2b04 	str.w	r2, [lr], #4
 801895c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018960:	d2de      	bcs.n	8018920 <quorem+0x42>
 8018962:	9b00      	ldr	r3, [sp, #0]
 8018964:	58eb      	ldr	r3, [r5, r3]
 8018966:	b92b      	cbnz	r3, 8018974 <quorem+0x96>
 8018968:	9b01      	ldr	r3, [sp, #4]
 801896a:	3b04      	subs	r3, #4
 801896c:	429d      	cmp	r5, r3
 801896e:	461a      	mov	r2, r3
 8018970:	d32f      	bcc.n	80189d2 <quorem+0xf4>
 8018972:	613c      	str	r4, [r7, #16]
 8018974:	4638      	mov	r0, r7
 8018976:	f001 f90b 	bl	8019b90 <__mcmp>
 801897a:	2800      	cmp	r0, #0
 801897c:	db25      	blt.n	80189ca <quorem+0xec>
 801897e:	4629      	mov	r1, r5
 8018980:	2000      	movs	r0, #0
 8018982:	f858 2b04 	ldr.w	r2, [r8], #4
 8018986:	f8d1 c000 	ldr.w	ip, [r1]
 801898a:	fa1f fe82 	uxth.w	lr, r2
 801898e:	fa1f f38c 	uxth.w	r3, ip
 8018992:	eba3 030e 	sub.w	r3, r3, lr
 8018996:	4403      	add	r3, r0
 8018998:	0c12      	lsrs	r2, r2, #16
 801899a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801899e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80189a2:	b29b      	uxth	r3, r3
 80189a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80189a8:	45c1      	cmp	r9, r8
 80189aa:	f841 3b04 	str.w	r3, [r1], #4
 80189ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80189b2:	d2e6      	bcs.n	8018982 <quorem+0xa4>
 80189b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80189b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80189bc:	b922      	cbnz	r2, 80189c8 <quorem+0xea>
 80189be:	3b04      	subs	r3, #4
 80189c0:	429d      	cmp	r5, r3
 80189c2:	461a      	mov	r2, r3
 80189c4:	d30b      	bcc.n	80189de <quorem+0x100>
 80189c6:	613c      	str	r4, [r7, #16]
 80189c8:	3601      	adds	r6, #1
 80189ca:	4630      	mov	r0, r6
 80189cc:	b003      	add	sp, #12
 80189ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189d2:	6812      	ldr	r2, [r2, #0]
 80189d4:	3b04      	subs	r3, #4
 80189d6:	2a00      	cmp	r2, #0
 80189d8:	d1cb      	bne.n	8018972 <quorem+0x94>
 80189da:	3c01      	subs	r4, #1
 80189dc:	e7c6      	b.n	801896c <quorem+0x8e>
 80189de:	6812      	ldr	r2, [r2, #0]
 80189e0:	3b04      	subs	r3, #4
 80189e2:	2a00      	cmp	r2, #0
 80189e4:	d1ef      	bne.n	80189c6 <quorem+0xe8>
 80189e6:	3c01      	subs	r4, #1
 80189e8:	e7ea      	b.n	80189c0 <quorem+0xe2>
 80189ea:	2000      	movs	r0, #0
 80189ec:	e7ee      	b.n	80189cc <quorem+0xee>
	...

080189f0 <_dtoa_r>:
 80189f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189f4:	ed2d 8b02 	vpush	{d8}
 80189f8:	69c7      	ldr	r7, [r0, #28]
 80189fa:	b091      	sub	sp, #68	@ 0x44
 80189fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018a00:	ec55 4b10 	vmov	r4, r5, d0
 8018a04:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8018a06:	9107      	str	r1, [sp, #28]
 8018a08:	4681      	mov	r9, r0
 8018a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018a0c:	930d      	str	r3, [sp, #52]	@ 0x34
 8018a0e:	b97f      	cbnz	r7, 8018a30 <_dtoa_r+0x40>
 8018a10:	2010      	movs	r0, #16
 8018a12:	f000 fd95 	bl	8019540 <malloc>
 8018a16:	4602      	mov	r2, r0
 8018a18:	f8c9 001c 	str.w	r0, [r9, #28]
 8018a1c:	b920      	cbnz	r0, 8018a28 <_dtoa_r+0x38>
 8018a1e:	4ba0      	ldr	r3, [pc, #640]	@ (8018ca0 <_dtoa_r+0x2b0>)
 8018a20:	21ef      	movs	r1, #239	@ 0xef
 8018a22:	48a0      	ldr	r0, [pc, #640]	@ (8018ca4 <_dtoa_r+0x2b4>)
 8018a24:	f001 fdc0 	bl	801a5a8 <__assert_func>
 8018a28:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018a2c:	6007      	str	r7, [r0, #0]
 8018a2e:	60c7      	str	r7, [r0, #12]
 8018a30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018a34:	6819      	ldr	r1, [r3, #0]
 8018a36:	b159      	cbz	r1, 8018a50 <_dtoa_r+0x60>
 8018a38:	685a      	ldr	r2, [r3, #4]
 8018a3a:	604a      	str	r2, [r1, #4]
 8018a3c:	2301      	movs	r3, #1
 8018a3e:	4093      	lsls	r3, r2
 8018a40:	608b      	str	r3, [r1, #8]
 8018a42:	4648      	mov	r0, r9
 8018a44:	f000 fe72 	bl	801972c <_Bfree>
 8018a48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	601a      	str	r2, [r3, #0]
 8018a50:	1e2b      	subs	r3, r5, #0
 8018a52:	bfbb      	ittet	lt
 8018a54:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018a58:	9303      	strlt	r3, [sp, #12]
 8018a5a:	2300      	movge	r3, #0
 8018a5c:	2201      	movlt	r2, #1
 8018a5e:	bfac      	ite	ge
 8018a60:	6033      	strge	r3, [r6, #0]
 8018a62:	6032      	strlt	r2, [r6, #0]
 8018a64:	4b90      	ldr	r3, [pc, #576]	@ (8018ca8 <_dtoa_r+0x2b8>)
 8018a66:	9e03      	ldr	r6, [sp, #12]
 8018a68:	43b3      	bics	r3, r6
 8018a6a:	d110      	bne.n	8018a8e <_dtoa_r+0x9e>
 8018a6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018a6e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018a72:	6013      	str	r3, [r2, #0]
 8018a74:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8018a78:	4323      	orrs	r3, r4
 8018a7a:	f000 84e6 	beq.w	801944a <_dtoa_r+0xa5a>
 8018a7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018a80:	4f8a      	ldr	r7, [pc, #552]	@ (8018cac <_dtoa_r+0x2bc>)
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	f000 84e8 	beq.w	8019458 <_dtoa_r+0xa68>
 8018a88:	1cfb      	adds	r3, r7, #3
 8018a8a:	f000 bce3 	b.w	8019454 <_dtoa_r+0xa64>
 8018a8e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8018a92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a9a:	d10a      	bne.n	8018ab2 <_dtoa_r+0xc2>
 8018a9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018a9e:	2301      	movs	r3, #1
 8018aa0:	6013      	str	r3, [r2, #0]
 8018aa2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018aa4:	b113      	cbz	r3, 8018aac <_dtoa_r+0xbc>
 8018aa6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8018aa8:	4b81      	ldr	r3, [pc, #516]	@ (8018cb0 <_dtoa_r+0x2c0>)
 8018aaa:	6013      	str	r3, [r2, #0]
 8018aac:	4f81      	ldr	r7, [pc, #516]	@ (8018cb4 <_dtoa_r+0x2c4>)
 8018aae:	f000 bcd3 	b.w	8019458 <_dtoa_r+0xa68>
 8018ab2:	aa0e      	add	r2, sp, #56	@ 0x38
 8018ab4:	a90f      	add	r1, sp, #60	@ 0x3c
 8018ab6:	4648      	mov	r0, r9
 8018ab8:	eeb0 0b48 	vmov.f64	d0, d8
 8018abc:	f001 f918 	bl	8019cf0 <__d2b>
 8018ac0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8018ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018ac6:	9001      	str	r0, [sp, #4]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d045      	beq.n	8018b58 <_dtoa_r+0x168>
 8018acc:	eeb0 7b48 	vmov.f64	d7, d8
 8018ad0:	ee18 1a90 	vmov	r1, s17
 8018ad4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018ad8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8018adc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8018ae0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8018ae4:	2500      	movs	r5, #0
 8018ae6:	ee07 1a90 	vmov	s15, r1
 8018aea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8018aee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018c88 <_dtoa_r+0x298>
 8018af2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018af6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8018c90 <_dtoa_r+0x2a0>
 8018afa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018afe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018c98 <_dtoa_r+0x2a8>
 8018b02:	ee07 3a90 	vmov	s15, r3
 8018b06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018b0a:	eeb0 7b46 	vmov.f64	d7, d6
 8018b0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018b12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018b16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b1e:	ee16 8a90 	vmov	r8, s13
 8018b22:	d508      	bpl.n	8018b36 <_dtoa_r+0x146>
 8018b24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018b28:	eeb4 6b47 	vcmp.f64	d6, d7
 8018b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b30:	bf18      	it	ne
 8018b32:	f108 38ff 	addne.w	r8, r8, #4294967295
 8018b36:	f1b8 0f16 	cmp.w	r8, #22
 8018b3a:	d82b      	bhi.n	8018b94 <_dtoa_r+0x1a4>
 8018b3c:	495e      	ldr	r1, [pc, #376]	@ (8018cb8 <_dtoa_r+0x2c8>)
 8018b3e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8018b42:	ed91 7b00 	vldr	d7, [r1]
 8018b46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b4e:	d501      	bpl.n	8018b54 <_dtoa_r+0x164>
 8018b50:	f108 38ff 	add.w	r8, r8, #4294967295
 8018b54:	2100      	movs	r1, #0
 8018b56:	e01e      	b.n	8018b96 <_dtoa_r+0x1a6>
 8018b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b5a:	4413      	add	r3, r2
 8018b5c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8018b60:	2920      	cmp	r1, #32
 8018b62:	bfc1      	itttt	gt
 8018b64:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8018b68:	408e      	lslgt	r6, r1
 8018b6a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8018b6e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8018b72:	bfd6      	itet	le
 8018b74:	f1c1 0120 	rsble	r1, r1, #32
 8018b78:	4331      	orrgt	r1, r6
 8018b7a:	fa04 f101 	lslle.w	r1, r4, r1
 8018b7e:	ee07 1a90 	vmov	s15, r1
 8018b82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018b86:	3b01      	subs	r3, #1
 8018b88:	ee17 1a90 	vmov	r1, s15
 8018b8c:	2501      	movs	r5, #1
 8018b8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8018b92:	e7a8      	b.n	8018ae6 <_dtoa_r+0xf6>
 8018b94:	2101      	movs	r1, #1
 8018b96:	1ad2      	subs	r2, r2, r3
 8018b98:	1e53      	subs	r3, r2, #1
 8018b9a:	9306      	str	r3, [sp, #24]
 8018b9c:	bf45      	ittet	mi
 8018b9e:	f1c2 0301 	rsbmi	r3, r2, #1
 8018ba2:	9304      	strmi	r3, [sp, #16]
 8018ba4:	2300      	movpl	r3, #0
 8018ba6:	2300      	movmi	r3, #0
 8018ba8:	bf4c      	ite	mi
 8018baa:	9306      	strmi	r3, [sp, #24]
 8018bac:	9304      	strpl	r3, [sp, #16]
 8018bae:	f1b8 0f00 	cmp.w	r8, #0
 8018bb2:	910c      	str	r1, [sp, #48]	@ 0x30
 8018bb4:	db18      	blt.n	8018be8 <_dtoa_r+0x1f8>
 8018bb6:	9b06      	ldr	r3, [sp, #24]
 8018bb8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8018bbc:	4443      	add	r3, r8
 8018bbe:	9306      	str	r3, [sp, #24]
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	9a07      	ldr	r2, [sp, #28]
 8018bc4:	2a09      	cmp	r2, #9
 8018bc6:	d845      	bhi.n	8018c54 <_dtoa_r+0x264>
 8018bc8:	2a05      	cmp	r2, #5
 8018bca:	bfc4      	itt	gt
 8018bcc:	3a04      	subgt	r2, #4
 8018bce:	9207      	strgt	r2, [sp, #28]
 8018bd0:	9a07      	ldr	r2, [sp, #28]
 8018bd2:	f1a2 0202 	sub.w	r2, r2, #2
 8018bd6:	bfcc      	ite	gt
 8018bd8:	2400      	movgt	r4, #0
 8018bda:	2401      	movle	r4, #1
 8018bdc:	2a03      	cmp	r2, #3
 8018bde:	d844      	bhi.n	8018c6a <_dtoa_r+0x27a>
 8018be0:	e8df f002 	tbb	[pc, r2]
 8018be4:	0b173634 	.word	0x0b173634
 8018be8:	9b04      	ldr	r3, [sp, #16]
 8018bea:	2200      	movs	r2, #0
 8018bec:	eba3 0308 	sub.w	r3, r3, r8
 8018bf0:	9304      	str	r3, [sp, #16]
 8018bf2:	920a      	str	r2, [sp, #40]	@ 0x28
 8018bf4:	f1c8 0300 	rsb	r3, r8, #0
 8018bf8:	e7e3      	b.n	8018bc2 <_dtoa_r+0x1d2>
 8018bfa:	2201      	movs	r2, #1
 8018bfc:	9208      	str	r2, [sp, #32]
 8018bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c00:	eb08 0b02 	add.w	fp, r8, r2
 8018c04:	f10b 0a01 	add.w	sl, fp, #1
 8018c08:	4652      	mov	r2, sl
 8018c0a:	2a01      	cmp	r2, #1
 8018c0c:	bfb8      	it	lt
 8018c0e:	2201      	movlt	r2, #1
 8018c10:	e006      	b.n	8018c20 <_dtoa_r+0x230>
 8018c12:	2201      	movs	r2, #1
 8018c14:	9208      	str	r2, [sp, #32]
 8018c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c18:	2a00      	cmp	r2, #0
 8018c1a:	dd29      	ble.n	8018c70 <_dtoa_r+0x280>
 8018c1c:	4693      	mov	fp, r2
 8018c1e:	4692      	mov	sl, r2
 8018c20:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8018c24:	2100      	movs	r1, #0
 8018c26:	2004      	movs	r0, #4
 8018c28:	f100 0614 	add.w	r6, r0, #20
 8018c2c:	4296      	cmp	r6, r2
 8018c2e:	d926      	bls.n	8018c7e <_dtoa_r+0x28e>
 8018c30:	6079      	str	r1, [r7, #4]
 8018c32:	4648      	mov	r0, r9
 8018c34:	9305      	str	r3, [sp, #20]
 8018c36:	f000 fd39 	bl	80196ac <_Balloc>
 8018c3a:	9b05      	ldr	r3, [sp, #20]
 8018c3c:	4607      	mov	r7, r0
 8018c3e:	2800      	cmp	r0, #0
 8018c40:	d13e      	bne.n	8018cc0 <_dtoa_r+0x2d0>
 8018c42:	4b1e      	ldr	r3, [pc, #120]	@ (8018cbc <_dtoa_r+0x2cc>)
 8018c44:	4602      	mov	r2, r0
 8018c46:	f240 11af 	movw	r1, #431	@ 0x1af
 8018c4a:	e6ea      	b.n	8018a22 <_dtoa_r+0x32>
 8018c4c:	2200      	movs	r2, #0
 8018c4e:	e7e1      	b.n	8018c14 <_dtoa_r+0x224>
 8018c50:	2200      	movs	r2, #0
 8018c52:	e7d3      	b.n	8018bfc <_dtoa_r+0x20c>
 8018c54:	2401      	movs	r4, #1
 8018c56:	2200      	movs	r2, #0
 8018c58:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8018c5c:	f04f 3bff 	mov.w	fp, #4294967295
 8018c60:	2100      	movs	r1, #0
 8018c62:	46da      	mov	sl, fp
 8018c64:	2212      	movs	r2, #18
 8018c66:	9109      	str	r1, [sp, #36]	@ 0x24
 8018c68:	e7da      	b.n	8018c20 <_dtoa_r+0x230>
 8018c6a:	2201      	movs	r2, #1
 8018c6c:	9208      	str	r2, [sp, #32]
 8018c6e:	e7f5      	b.n	8018c5c <_dtoa_r+0x26c>
 8018c70:	f04f 0b01 	mov.w	fp, #1
 8018c74:	46da      	mov	sl, fp
 8018c76:	465a      	mov	r2, fp
 8018c78:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8018c7c:	e7d0      	b.n	8018c20 <_dtoa_r+0x230>
 8018c7e:	3101      	adds	r1, #1
 8018c80:	0040      	lsls	r0, r0, #1
 8018c82:	e7d1      	b.n	8018c28 <_dtoa_r+0x238>
 8018c84:	f3af 8000 	nop.w
 8018c88:	636f4361 	.word	0x636f4361
 8018c8c:	3fd287a7 	.word	0x3fd287a7
 8018c90:	8b60c8b3 	.word	0x8b60c8b3
 8018c94:	3fc68a28 	.word	0x3fc68a28
 8018c98:	509f79fb 	.word	0x509f79fb
 8018c9c:	3fd34413 	.word	0x3fd34413
 8018ca0:	0801c5f1 	.word	0x0801c5f1
 8018ca4:	0801c608 	.word	0x0801c608
 8018ca8:	7ff00000 	.word	0x7ff00000
 8018cac:	0801c5ed 	.word	0x0801c5ed
 8018cb0:	0801c5c1 	.word	0x0801c5c1
 8018cb4:	0801c5c0 	.word	0x0801c5c0
 8018cb8:	0801c758 	.word	0x0801c758
 8018cbc:	0801c660 	.word	0x0801c660
 8018cc0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8018cc4:	f1ba 0f0e 	cmp.w	sl, #14
 8018cc8:	6010      	str	r0, [r2, #0]
 8018cca:	d86e      	bhi.n	8018daa <_dtoa_r+0x3ba>
 8018ccc:	2c00      	cmp	r4, #0
 8018cce:	d06c      	beq.n	8018daa <_dtoa_r+0x3ba>
 8018cd0:	f1b8 0f00 	cmp.w	r8, #0
 8018cd4:	f340 80b4 	ble.w	8018e40 <_dtoa_r+0x450>
 8018cd8:	4ac8      	ldr	r2, [pc, #800]	@ (8018ffc <_dtoa_r+0x60c>)
 8018cda:	f008 010f 	and.w	r1, r8, #15
 8018cde:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018ce2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8018ce6:	ed92 7b00 	vldr	d7, [r2]
 8018cea:	ea4f 1128 	mov.w	r1, r8, asr #4
 8018cee:	f000 809b 	beq.w	8018e28 <_dtoa_r+0x438>
 8018cf2:	4ac3      	ldr	r2, [pc, #780]	@ (8019000 <_dtoa_r+0x610>)
 8018cf4:	ed92 6b08 	vldr	d6, [r2, #32]
 8018cf8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018cfc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018d00:	f001 010f 	and.w	r1, r1, #15
 8018d04:	2203      	movs	r2, #3
 8018d06:	48be      	ldr	r0, [pc, #760]	@ (8019000 <_dtoa_r+0x610>)
 8018d08:	2900      	cmp	r1, #0
 8018d0a:	f040 808f 	bne.w	8018e2c <_dtoa_r+0x43c>
 8018d0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018d12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018d16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018d1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018d1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018d20:	2900      	cmp	r1, #0
 8018d22:	f000 80b3 	beq.w	8018e8c <_dtoa_r+0x49c>
 8018d26:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8018d2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d32:	f140 80ab 	bpl.w	8018e8c <_dtoa_r+0x49c>
 8018d36:	f1ba 0f00 	cmp.w	sl, #0
 8018d3a:	f000 80a7 	beq.w	8018e8c <_dtoa_r+0x49c>
 8018d3e:	f1bb 0f00 	cmp.w	fp, #0
 8018d42:	dd30      	ble.n	8018da6 <_dtoa_r+0x3b6>
 8018d44:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8018d48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018d4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018d50:	f108 31ff 	add.w	r1, r8, #4294967295
 8018d54:	9105      	str	r1, [sp, #20]
 8018d56:	3201      	adds	r2, #1
 8018d58:	465c      	mov	r4, fp
 8018d5a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018d5e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8018d62:	ee07 2a90 	vmov	s15, r2
 8018d66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018d6a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018d6e:	ee15 2a90 	vmov	r2, s11
 8018d72:	ec51 0b15 	vmov	r0, r1, d5
 8018d76:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8018d7a:	2c00      	cmp	r4, #0
 8018d7c:	f040 808a 	bne.w	8018e94 <_dtoa_r+0x4a4>
 8018d80:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018d84:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018d88:	ec41 0b17 	vmov	d7, r0, r1
 8018d8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d94:	f300 826a 	bgt.w	801926c <_dtoa_r+0x87c>
 8018d98:	eeb1 7b47 	vneg.f64	d7, d7
 8018d9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018da4:	d423      	bmi.n	8018dee <_dtoa_r+0x3fe>
 8018da6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018daa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018dac:	2a00      	cmp	r2, #0
 8018dae:	f2c0 8129 	blt.w	8019004 <_dtoa_r+0x614>
 8018db2:	f1b8 0f0e 	cmp.w	r8, #14
 8018db6:	f300 8125 	bgt.w	8019004 <_dtoa_r+0x614>
 8018dba:	4b90      	ldr	r3, [pc, #576]	@ (8018ffc <_dtoa_r+0x60c>)
 8018dbc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018dc0:	ed93 6b00 	vldr	d6, [r3]
 8018dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	f280 80c8 	bge.w	8018f5c <_dtoa_r+0x56c>
 8018dcc:	f1ba 0f00 	cmp.w	sl, #0
 8018dd0:	f300 80c4 	bgt.w	8018f5c <_dtoa_r+0x56c>
 8018dd4:	d10b      	bne.n	8018dee <_dtoa_r+0x3fe>
 8018dd6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018dda:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018dde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018de2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dea:	f2c0 823c 	blt.w	8019266 <_dtoa_r+0x876>
 8018dee:	2400      	movs	r4, #0
 8018df0:	4625      	mov	r5, r4
 8018df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018df4:	43db      	mvns	r3, r3
 8018df6:	9305      	str	r3, [sp, #20]
 8018df8:	463e      	mov	r6, r7
 8018dfa:	f04f 0800 	mov.w	r8, #0
 8018dfe:	4621      	mov	r1, r4
 8018e00:	4648      	mov	r0, r9
 8018e02:	f000 fc93 	bl	801972c <_Bfree>
 8018e06:	2d00      	cmp	r5, #0
 8018e08:	f000 80a2 	beq.w	8018f50 <_dtoa_r+0x560>
 8018e0c:	f1b8 0f00 	cmp.w	r8, #0
 8018e10:	d005      	beq.n	8018e1e <_dtoa_r+0x42e>
 8018e12:	45a8      	cmp	r8, r5
 8018e14:	d003      	beq.n	8018e1e <_dtoa_r+0x42e>
 8018e16:	4641      	mov	r1, r8
 8018e18:	4648      	mov	r0, r9
 8018e1a:	f000 fc87 	bl	801972c <_Bfree>
 8018e1e:	4629      	mov	r1, r5
 8018e20:	4648      	mov	r0, r9
 8018e22:	f000 fc83 	bl	801972c <_Bfree>
 8018e26:	e093      	b.n	8018f50 <_dtoa_r+0x560>
 8018e28:	2202      	movs	r2, #2
 8018e2a:	e76c      	b.n	8018d06 <_dtoa_r+0x316>
 8018e2c:	07cc      	lsls	r4, r1, #31
 8018e2e:	d504      	bpl.n	8018e3a <_dtoa_r+0x44a>
 8018e30:	ed90 6b00 	vldr	d6, [r0]
 8018e34:	3201      	adds	r2, #1
 8018e36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018e3a:	1049      	asrs	r1, r1, #1
 8018e3c:	3008      	adds	r0, #8
 8018e3e:	e763      	b.n	8018d08 <_dtoa_r+0x318>
 8018e40:	d022      	beq.n	8018e88 <_dtoa_r+0x498>
 8018e42:	f1c8 0100 	rsb	r1, r8, #0
 8018e46:	4a6d      	ldr	r2, [pc, #436]	@ (8018ffc <_dtoa_r+0x60c>)
 8018e48:	f001 000f 	and.w	r0, r1, #15
 8018e4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018e50:	ed92 7b00 	vldr	d7, [r2]
 8018e54:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018e58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018e5c:	4868      	ldr	r0, [pc, #416]	@ (8019000 <_dtoa_r+0x610>)
 8018e5e:	1109      	asrs	r1, r1, #4
 8018e60:	2400      	movs	r4, #0
 8018e62:	2202      	movs	r2, #2
 8018e64:	b929      	cbnz	r1, 8018e72 <_dtoa_r+0x482>
 8018e66:	2c00      	cmp	r4, #0
 8018e68:	f43f af57 	beq.w	8018d1a <_dtoa_r+0x32a>
 8018e6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018e70:	e753      	b.n	8018d1a <_dtoa_r+0x32a>
 8018e72:	07ce      	lsls	r6, r1, #31
 8018e74:	d505      	bpl.n	8018e82 <_dtoa_r+0x492>
 8018e76:	ed90 6b00 	vldr	d6, [r0]
 8018e7a:	3201      	adds	r2, #1
 8018e7c:	2401      	movs	r4, #1
 8018e7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018e82:	1049      	asrs	r1, r1, #1
 8018e84:	3008      	adds	r0, #8
 8018e86:	e7ed      	b.n	8018e64 <_dtoa_r+0x474>
 8018e88:	2202      	movs	r2, #2
 8018e8a:	e746      	b.n	8018d1a <_dtoa_r+0x32a>
 8018e8c:	f8cd 8014 	str.w	r8, [sp, #20]
 8018e90:	4654      	mov	r4, sl
 8018e92:	e762      	b.n	8018d5a <_dtoa_r+0x36a>
 8018e94:	4a59      	ldr	r2, [pc, #356]	@ (8018ffc <_dtoa_r+0x60c>)
 8018e96:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8018e9a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018e9e:	9a08      	ldr	r2, [sp, #32]
 8018ea0:	ec41 0b17 	vmov	d7, r0, r1
 8018ea4:	443c      	add	r4, r7
 8018ea6:	b34a      	cbz	r2, 8018efc <_dtoa_r+0x50c>
 8018ea8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8018eac:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8018eb0:	463e      	mov	r6, r7
 8018eb2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018eb6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018eba:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018ebe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018ec2:	ee14 2a90 	vmov	r2, s9
 8018ec6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018eca:	3230      	adds	r2, #48	@ 0x30
 8018ecc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018ed0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ed8:	f806 2b01 	strb.w	r2, [r6], #1
 8018edc:	d438      	bmi.n	8018f50 <_dtoa_r+0x560>
 8018ede:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018ee2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eea:	d46e      	bmi.n	8018fca <_dtoa_r+0x5da>
 8018eec:	42a6      	cmp	r6, r4
 8018eee:	f43f af5a 	beq.w	8018da6 <_dtoa_r+0x3b6>
 8018ef2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018ef6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018efa:	e7e0      	b.n	8018ebe <_dtoa_r+0x4ce>
 8018efc:	4621      	mov	r1, r4
 8018efe:	463e      	mov	r6, r7
 8018f00:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018f04:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018f08:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018f0c:	ee14 2a90 	vmov	r2, s9
 8018f10:	3230      	adds	r2, #48	@ 0x30
 8018f12:	f806 2b01 	strb.w	r2, [r6], #1
 8018f16:	42a6      	cmp	r6, r4
 8018f18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018f1c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018f20:	d119      	bne.n	8018f56 <_dtoa_r+0x566>
 8018f22:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8018f26:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018f2a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f32:	dc4a      	bgt.n	8018fca <_dtoa_r+0x5da>
 8018f34:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018f38:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f40:	f57f af31 	bpl.w	8018da6 <_dtoa_r+0x3b6>
 8018f44:	460e      	mov	r6, r1
 8018f46:	3901      	subs	r1, #1
 8018f48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018f4c:	2b30      	cmp	r3, #48	@ 0x30
 8018f4e:	d0f9      	beq.n	8018f44 <_dtoa_r+0x554>
 8018f50:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018f54:	e027      	b.n	8018fa6 <_dtoa_r+0x5b6>
 8018f56:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018f5a:	e7d5      	b.n	8018f08 <_dtoa_r+0x518>
 8018f5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018f60:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8018f64:	463e      	mov	r6, r7
 8018f66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018f6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018f6e:	ee15 3a10 	vmov	r3, s10
 8018f72:	3330      	adds	r3, #48	@ 0x30
 8018f74:	f806 3b01 	strb.w	r3, [r6], #1
 8018f78:	1bf3      	subs	r3, r6, r7
 8018f7a:	459a      	cmp	sl, r3
 8018f7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018f80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018f84:	d132      	bne.n	8018fec <_dtoa_r+0x5fc>
 8018f86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018f8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f92:	dc18      	bgt.n	8018fc6 <_dtoa_r+0x5d6>
 8018f94:	eeb4 7b46 	vcmp.f64	d7, d6
 8018f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f9c:	d103      	bne.n	8018fa6 <_dtoa_r+0x5b6>
 8018f9e:	ee15 3a10 	vmov	r3, s10
 8018fa2:	07db      	lsls	r3, r3, #31
 8018fa4:	d40f      	bmi.n	8018fc6 <_dtoa_r+0x5d6>
 8018fa6:	9901      	ldr	r1, [sp, #4]
 8018fa8:	4648      	mov	r0, r9
 8018faa:	f000 fbbf 	bl	801972c <_Bfree>
 8018fae:	2300      	movs	r3, #0
 8018fb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018fb2:	7033      	strb	r3, [r6, #0]
 8018fb4:	f108 0301 	add.w	r3, r8, #1
 8018fb8:	6013      	str	r3, [r2, #0]
 8018fba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	f000 824b 	beq.w	8019458 <_dtoa_r+0xa68>
 8018fc2:	601e      	str	r6, [r3, #0]
 8018fc4:	e248      	b.n	8019458 <_dtoa_r+0xa68>
 8018fc6:	f8cd 8014 	str.w	r8, [sp, #20]
 8018fca:	4633      	mov	r3, r6
 8018fcc:	461e      	mov	r6, r3
 8018fce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018fd2:	2a39      	cmp	r2, #57	@ 0x39
 8018fd4:	d106      	bne.n	8018fe4 <_dtoa_r+0x5f4>
 8018fd6:	429f      	cmp	r7, r3
 8018fd8:	d1f8      	bne.n	8018fcc <_dtoa_r+0x5dc>
 8018fda:	9a05      	ldr	r2, [sp, #20]
 8018fdc:	3201      	adds	r2, #1
 8018fde:	9205      	str	r2, [sp, #20]
 8018fe0:	2230      	movs	r2, #48	@ 0x30
 8018fe2:	703a      	strb	r2, [r7, #0]
 8018fe4:	781a      	ldrb	r2, [r3, #0]
 8018fe6:	3201      	adds	r2, #1
 8018fe8:	701a      	strb	r2, [r3, #0]
 8018fea:	e7b1      	b.n	8018f50 <_dtoa_r+0x560>
 8018fec:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018ff0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff8:	d1b5      	bne.n	8018f66 <_dtoa_r+0x576>
 8018ffa:	e7d4      	b.n	8018fa6 <_dtoa_r+0x5b6>
 8018ffc:	0801c758 	.word	0x0801c758
 8019000:	0801c730 	.word	0x0801c730
 8019004:	9908      	ldr	r1, [sp, #32]
 8019006:	2900      	cmp	r1, #0
 8019008:	f000 80e9 	beq.w	80191de <_dtoa_r+0x7ee>
 801900c:	9907      	ldr	r1, [sp, #28]
 801900e:	2901      	cmp	r1, #1
 8019010:	f300 80cb 	bgt.w	80191aa <_dtoa_r+0x7ba>
 8019014:	2d00      	cmp	r5, #0
 8019016:	f000 80c4 	beq.w	80191a2 <_dtoa_r+0x7b2>
 801901a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801901e:	9e04      	ldr	r6, [sp, #16]
 8019020:	461c      	mov	r4, r3
 8019022:	9305      	str	r3, [sp, #20]
 8019024:	9b04      	ldr	r3, [sp, #16]
 8019026:	4413      	add	r3, r2
 8019028:	9304      	str	r3, [sp, #16]
 801902a:	9b06      	ldr	r3, [sp, #24]
 801902c:	2101      	movs	r1, #1
 801902e:	4413      	add	r3, r2
 8019030:	4648      	mov	r0, r9
 8019032:	9306      	str	r3, [sp, #24]
 8019034:	f000 fc2e 	bl	8019894 <__i2b>
 8019038:	9b05      	ldr	r3, [sp, #20]
 801903a:	4605      	mov	r5, r0
 801903c:	b166      	cbz	r6, 8019058 <_dtoa_r+0x668>
 801903e:	9a06      	ldr	r2, [sp, #24]
 8019040:	2a00      	cmp	r2, #0
 8019042:	dd09      	ble.n	8019058 <_dtoa_r+0x668>
 8019044:	42b2      	cmp	r2, r6
 8019046:	9904      	ldr	r1, [sp, #16]
 8019048:	bfa8      	it	ge
 801904a:	4632      	movge	r2, r6
 801904c:	1a89      	subs	r1, r1, r2
 801904e:	9104      	str	r1, [sp, #16]
 8019050:	9906      	ldr	r1, [sp, #24]
 8019052:	1ab6      	subs	r6, r6, r2
 8019054:	1a8a      	subs	r2, r1, r2
 8019056:	9206      	str	r2, [sp, #24]
 8019058:	b30b      	cbz	r3, 801909e <_dtoa_r+0x6ae>
 801905a:	9a08      	ldr	r2, [sp, #32]
 801905c:	2a00      	cmp	r2, #0
 801905e:	f000 80c5 	beq.w	80191ec <_dtoa_r+0x7fc>
 8019062:	2c00      	cmp	r4, #0
 8019064:	f000 80bf 	beq.w	80191e6 <_dtoa_r+0x7f6>
 8019068:	4629      	mov	r1, r5
 801906a:	4622      	mov	r2, r4
 801906c:	4648      	mov	r0, r9
 801906e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019070:	f000 fcc8 	bl	8019a04 <__pow5mult>
 8019074:	9a01      	ldr	r2, [sp, #4]
 8019076:	4601      	mov	r1, r0
 8019078:	4605      	mov	r5, r0
 801907a:	4648      	mov	r0, r9
 801907c:	f000 fc20 	bl	80198c0 <__multiply>
 8019080:	9901      	ldr	r1, [sp, #4]
 8019082:	9005      	str	r0, [sp, #20]
 8019084:	4648      	mov	r0, r9
 8019086:	f000 fb51 	bl	801972c <_Bfree>
 801908a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801908c:	1b1b      	subs	r3, r3, r4
 801908e:	f000 80b0 	beq.w	80191f2 <_dtoa_r+0x802>
 8019092:	9905      	ldr	r1, [sp, #20]
 8019094:	461a      	mov	r2, r3
 8019096:	4648      	mov	r0, r9
 8019098:	f000 fcb4 	bl	8019a04 <__pow5mult>
 801909c:	9001      	str	r0, [sp, #4]
 801909e:	2101      	movs	r1, #1
 80190a0:	4648      	mov	r0, r9
 80190a2:	f000 fbf7 	bl	8019894 <__i2b>
 80190a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80190a8:	4604      	mov	r4, r0
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	f000 81da 	beq.w	8019464 <_dtoa_r+0xa74>
 80190b0:	461a      	mov	r2, r3
 80190b2:	4601      	mov	r1, r0
 80190b4:	4648      	mov	r0, r9
 80190b6:	f000 fca5 	bl	8019a04 <__pow5mult>
 80190ba:	9b07      	ldr	r3, [sp, #28]
 80190bc:	2b01      	cmp	r3, #1
 80190be:	4604      	mov	r4, r0
 80190c0:	f300 80a0 	bgt.w	8019204 <_dtoa_r+0x814>
 80190c4:	9b02      	ldr	r3, [sp, #8]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	f040 8096 	bne.w	80191f8 <_dtoa_r+0x808>
 80190cc:	9b03      	ldr	r3, [sp, #12]
 80190ce:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80190d2:	2a00      	cmp	r2, #0
 80190d4:	f040 8092 	bne.w	80191fc <_dtoa_r+0x80c>
 80190d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80190dc:	0d12      	lsrs	r2, r2, #20
 80190de:	0512      	lsls	r2, r2, #20
 80190e0:	2a00      	cmp	r2, #0
 80190e2:	f000 808d 	beq.w	8019200 <_dtoa_r+0x810>
 80190e6:	9b04      	ldr	r3, [sp, #16]
 80190e8:	3301      	adds	r3, #1
 80190ea:	9304      	str	r3, [sp, #16]
 80190ec:	9b06      	ldr	r3, [sp, #24]
 80190ee:	3301      	adds	r3, #1
 80190f0:	9306      	str	r3, [sp, #24]
 80190f2:	2301      	movs	r3, #1
 80190f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80190f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	f000 81b9 	beq.w	8019470 <_dtoa_r+0xa80>
 80190fe:	6922      	ldr	r2, [r4, #16]
 8019100:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019104:	6910      	ldr	r0, [r2, #16]
 8019106:	f000 fb79 	bl	80197fc <__hi0bits>
 801910a:	f1c0 0020 	rsb	r0, r0, #32
 801910e:	9b06      	ldr	r3, [sp, #24]
 8019110:	4418      	add	r0, r3
 8019112:	f010 001f 	ands.w	r0, r0, #31
 8019116:	f000 8081 	beq.w	801921c <_dtoa_r+0x82c>
 801911a:	f1c0 0220 	rsb	r2, r0, #32
 801911e:	2a04      	cmp	r2, #4
 8019120:	dd73      	ble.n	801920a <_dtoa_r+0x81a>
 8019122:	9b04      	ldr	r3, [sp, #16]
 8019124:	f1c0 001c 	rsb	r0, r0, #28
 8019128:	4403      	add	r3, r0
 801912a:	9304      	str	r3, [sp, #16]
 801912c:	9b06      	ldr	r3, [sp, #24]
 801912e:	4406      	add	r6, r0
 8019130:	4403      	add	r3, r0
 8019132:	9306      	str	r3, [sp, #24]
 8019134:	9b04      	ldr	r3, [sp, #16]
 8019136:	2b00      	cmp	r3, #0
 8019138:	dd05      	ble.n	8019146 <_dtoa_r+0x756>
 801913a:	9901      	ldr	r1, [sp, #4]
 801913c:	461a      	mov	r2, r3
 801913e:	4648      	mov	r0, r9
 8019140:	f000 fcba 	bl	8019ab8 <__lshift>
 8019144:	9001      	str	r0, [sp, #4]
 8019146:	9b06      	ldr	r3, [sp, #24]
 8019148:	2b00      	cmp	r3, #0
 801914a:	dd05      	ble.n	8019158 <_dtoa_r+0x768>
 801914c:	4621      	mov	r1, r4
 801914e:	461a      	mov	r2, r3
 8019150:	4648      	mov	r0, r9
 8019152:	f000 fcb1 	bl	8019ab8 <__lshift>
 8019156:	4604      	mov	r4, r0
 8019158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801915a:	2b00      	cmp	r3, #0
 801915c:	d060      	beq.n	8019220 <_dtoa_r+0x830>
 801915e:	9801      	ldr	r0, [sp, #4]
 8019160:	4621      	mov	r1, r4
 8019162:	f000 fd15 	bl	8019b90 <__mcmp>
 8019166:	2800      	cmp	r0, #0
 8019168:	da5a      	bge.n	8019220 <_dtoa_r+0x830>
 801916a:	f108 33ff 	add.w	r3, r8, #4294967295
 801916e:	9305      	str	r3, [sp, #20]
 8019170:	9901      	ldr	r1, [sp, #4]
 8019172:	2300      	movs	r3, #0
 8019174:	220a      	movs	r2, #10
 8019176:	4648      	mov	r0, r9
 8019178:	f000 fafa 	bl	8019770 <__multadd>
 801917c:	9b08      	ldr	r3, [sp, #32]
 801917e:	9001      	str	r0, [sp, #4]
 8019180:	2b00      	cmp	r3, #0
 8019182:	f000 8177 	beq.w	8019474 <_dtoa_r+0xa84>
 8019186:	4629      	mov	r1, r5
 8019188:	2300      	movs	r3, #0
 801918a:	220a      	movs	r2, #10
 801918c:	4648      	mov	r0, r9
 801918e:	f000 faef 	bl	8019770 <__multadd>
 8019192:	f1bb 0f00 	cmp.w	fp, #0
 8019196:	4605      	mov	r5, r0
 8019198:	dc6e      	bgt.n	8019278 <_dtoa_r+0x888>
 801919a:	9b07      	ldr	r3, [sp, #28]
 801919c:	2b02      	cmp	r3, #2
 801919e:	dc48      	bgt.n	8019232 <_dtoa_r+0x842>
 80191a0:	e06a      	b.n	8019278 <_dtoa_r+0x888>
 80191a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80191a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80191a8:	e739      	b.n	801901e <_dtoa_r+0x62e>
 80191aa:	f10a 34ff 	add.w	r4, sl, #4294967295
 80191ae:	42a3      	cmp	r3, r4
 80191b0:	db07      	blt.n	80191c2 <_dtoa_r+0x7d2>
 80191b2:	f1ba 0f00 	cmp.w	sl, #0
 80191b6:	eba3 0404 	sub.w	r4, r3, r4
 80191ba:	db0b      	blt.n	80191d4 <_dtoa_r+0x7e4>
 80191bc:	9e04      	ldr	r6, [sp, #16]
 80191be:	4652      	mov	r2, sl
 80191c0:	e72f      	b.n	8019022 <_dtoa_r+0x632>
 80191c2:	1ae2      	subs	r2, r4, r3
 80191c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80191c6:	9e04      	ldr	r6, [sp, #16]
 80191c8:	4413      	add	r3, r2
 80191ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80191cc:	4652      	mov	r2, sl
 80191ce:	4623      	mov	r3, r4
 80191d0:	2400      	movs	r4, #0
 80191d2:	e726      	b.n	8019022 <_dtoa_r+0x632>
 80191d4:	9a04      	ldr	r2, [sp, #16]
 80191d6:	eba2 060a 	sub.w	r6, r2, sl
 80191da:	2200      	movs	r2, #0
 80191dc:	e721      	b.n	8019022 <_dtoa_r+0x632>
 80191de:	9e04      	ldr	r6, [sp, #16]
 80191e0:	9d08      	ldr	r5, [sp, #32]
 80191e2:	461c      	mov	r4, r3
 80191e4:	e72a      	b.n	801903c <_dtoa_r+0x64c>
 80191e6:	9a01      	ldr	r2, [sp, #4]
 80191e8:	9205      	str	r2, [sp, #20]
 80191ea:	e752      	b.n	8019092 <_dtoa_r+0x6a2>
 80191ec:	9901      	ldr	r1, [sp, #4]
 80191ee:	461a      	mov	r2, r3
 80191f0:	e751      	b.n	8019096 <_dtoa_r+0x6a6>
 80191f2:	9b05      	ldr	r3, [sp, #20]
 80191f4:	9301      	str	r3, [sp, #4]
 80191f6:	e752      	b.n	801909e <_dtoa_r+0x6ae>
 80191f8:	2300      	movs	r3, #0
 80191fa:	e77b      	b.n	80190f4 <_dtoa_r+0x704>
 80191fc:	9b02      	ldr	r3, [sp, #8]
 80191fe:	e779      	b.n	80190f4 <_dtoa_r+0x704>
 8019200:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019202:	e778      	b.n	80190f6 <_dtoa_r+0x706>
 8019204:	2300      	movs	r3, #0
 8019206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019208:	e779      	b.n	80190fe <_dtoa_r+0x70e>
 801920a:	d093      	beq.n	8019134 <_dtoa_r+0x744>
 801920c:	9b04      	ldr	r3, [sp, #16]
 801920e:	321c      	adds	r2, #28
 8019210:	4413      	add	r3, r2
 8019212:	9304      	str	r3, [sp, #16]
 8019214:	9b06      	ldr	r3, [sp, #24]
 8019216:	4416      	add	r6, r2
 8019218:	4413      	add	r3, r2
 801921a:	e78a      	b.n	8019132 <_dtoa_r+0x742>
 801921c:	4602      	mov	r2, r0
 801921e:	e7f5      	b.n	801920c <_dtoa_r+0x81c>
 8019220:	f1ba 0f00 	cmp.w	sl, #0
 8019224:	f8cd 8014 	str.w	r8, [sp, #20]
 8019228:	46d3      	mov	fp, sl
 801922a:	dc21      	bgt.n	8019270 <_dtoa_r+0x880>
 801922c:	9b07      	ldr	r3, [sp, #28]
 801922e:	2b02      	cmp	r3, #2
 8019230:	dd1e      	ble.n	8019270 <_dtoa_r+0x880>
 8019232:	f1bb 0f00 	cmp.w	fp, #0
 8019236:	f47f addc 	bne.w	8018df2 <_dtoa_r+0x402>
 801923a:	4621      	mov	r1, r4
 801923c:	465b      	mov	r3, fp
 801923e:	2205      	movs	r2, #5
 8019240:	4648      	mov	r0, r9
 8019242:	f000 fa95 	bl	8019770 <__multadd>
 8019246:	4601      	mov	r1, r0
 8019248:	4604      	mov	r4, r0
 801924a:	9801      	ldr	r0, [sp, #4]
 801924c:	f000 fca0 	bl	8019b90 <__mcmp>
 8019250:	2800      	cmp	r0, #0
 8019252:	f77f adce 	ble.w	8018df2 <_dtoa_r+0x402>
 8019256:	463e      	mov	r6, r7
 8019258:	2331      	movs	r3, #49	@ 0x31
 801925a:	f806 3b01 	strb.w	r3, [r6], #1
 801925e:	9b05      	ldr	r3, [sp, #20]
 8019260:	3301      	adds	r3, #1
 8019262:	9305      	str	r3, [sp, #20]
 8019264:	e5c9      	b.n	8018dfa <_dtoa_r+0x40a>
 8019266:	f8cd 8014 	str.w	r8, [sp, #20]
 801926a:	4654      	mov	r4, sl
 801926c:	4625      	mov	r5, r4
 801926e:	e7f2      	b.n	8019256 <_dtoa_r+0x866>
 8019270:	9b08      	ldr	r3, [sp, #32]
 8019272:	2b00      	cmp	r3, #0
 8019274:	f000 8102 	beq.w	801947c <_dtoa_r+0xa8c>
 8019278:	2e00      	cmp	r6, #0
 801927a:	dd05      	ble.n	8019288 <_dtoa_r+0x898>
 801927c:	4629      	mov	r1, r5
 801927e:	4632      	mov	r2, r6
 8019280:	4648      	mov	r0, r9
 8019282:	f000 fc19 	bl	8019ab8 <__lshift>
 8019286:	4605      	mov	r5, r0
 8019288:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801928a:	2b00      	cmp	r3, #0
 801928c:	d058      	beq.n	8019340 <_dtoa_r+0x950>
 801928e:	6869      	ldr	r1, [r5, #4]
 8019290:	4648      	mov	r0, r9
 8019292:	f000 fa0b 	bl	80196ac <_Balloc>
 8019296:	4606      	mov	r6, r0
 8019298:	b928      	cbnz	r0, 80192a6 <_dtoa_r+0x8b6>
 801929a:	4b82      	ldr	r3, [pc, #520]	@ (80194a4 <_dtoa_r+0xab4>)
 801929c:	4602      	mov	r2, r0
 801929e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80192a2:	f7ff bbbe 	b.w	8018a22 <_dtoa_r+0x32>
 80192a6:	692a      	ldr	r2, [r5, #16]
 80192a8:	3202      	adds	r2, #2
 80192aa:	0092      	lsls	r2, r2, #2
 80192ac:	f105 010c 	add.w	r1, r5, #12
 80192b0:	300c      	adds	r0, #12
 80192b2:	f7ff fb06 	bl	80188c2 <memcpy>
 80192b6:	2201      	movs	r2, #1
 80192b8:	4631      	mov	r1, r6
 80192ba:	4648      	mov	r0, r9
 80192bc:	f000 fbfc 	bl	8019ab8 <__lshift>
 80192c0:	1c7b      	adds	r3, r7, #1
 80192c2:	9304      	str	r3, [sp, #16]
 80192c4:	eb07 030b 	add.w	r3, r7, fp
 80192c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80192ca:	9b02      	ldr	r3, [sp, #8]
 80192cc:	f003 0301 	and.w	r3, r3, #1
 80192d0:	46a8      	mov	r8, r5
 80192d2:	9308      	str	r3, [sp, #32]
 80192d4:	4605      	mov	r5, r0
 80192d6:	9b04      	ldr	r3, [sp, #16]
 80192d8:	9801      	ldr	r0, [sp, #4]
 80192da:	4621      	mov	r1, r4
 80192dc:	f103 3bff 	add.w	fp, r3, #4294967295
 80192e0:	f7ff fafd 	bl	80188de <quorem>
 80192e4:	4641      	mov	r1, r8
 80192e6:	9002      	str	r0, [sp, #8]
 80192e8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80192ec:	9801      	ldr	r0, [sp, #4]
 80192ee:	f000 fc4f 	bl	8019b90 <__mcmp>
 80192f2:	462a      	mov	r2, r5
 80192f4:	9006      	str	r0, [sp, #24]
 80192f6:	4621      	mov	r1, r4
 80192f8:	4648      	mov	r0, r9
 80192fa:	f000 fc65 	bl	8019bc8 <__mdiff>
 80192fe:	68c2      	ldr	r2, [r0, #12]
 8019300:	4606      	mov	r6, r0
 8019302:	b9fa      	cbnz	r2, 8019344 <_dtoa_r+0x954>
 8019304:	4601      	mov	r1, r0
 8019306:	9801      	ldr	r0, [sp, #4]
 8019308:	f000 fc42 	bl	8019b90 <__mcmp>
 801930c:	4602      	mov	r2, r0
 801930e:	4631      	mov	r1, r6
 8019310:	4648      	mov	r0, r9
 8019312:	920a      	str	r2, [sp, #40]	@ 0x28
 8019314:	f000 fa0a 	bl	801972c <_Bfree>
 8019318:	9b07      	ldr	r3, [sp, #28]
 801931a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801931c:	9e04      	ldr	r6, [sp, #16]
 801931e:	ea42 0103 	orr.w	r1, r2, r3
 8019322:	9b08      	ldr	r3, [sp, #32]
 8019324:	4319      	orrs	r1, r3
 8019326:	d10f      	bne.n	8019348 <_dtoa_r+0x958>
 8019328:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801932c:	d028      	beq.n	8019380 <_dtoa_r+0x990>
 801932e:	9b06      	ldr	r3, [sp, #24]
 8019330:	2b00      	cmp	r3, #0
 8019332:	dd02      	ble.n	801933a <_dtoa_r+0x94a>
 8019334:	9b02      	ldr	r3, [sp, #8]
 8019336:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801933a:	f88b a000 	strb.w	sl, [fp]
 801933e:	e55e      	b.n	8018dfe <_dtoa_r+0x40e>
 8019340:	4628      	mov	r0, r5
 8019342:	e7bd      	b.n	80192c0 <_dtoa_r+0x8d0>
 8019344:	2201      	movs	r2, #1
 8019346:	e7e2      	b.n	801930e <_dtoa_r+0x91e>
 8019348:	9b06      	ldr	r3, [sp, #24]
 801934a:	2b00      	cmp	r3, #0
 801934c:	db04      	blt.n	8019358 <_dtoa_r+0x968>
 801934e:	9907      	ldr	r1, [sp, #28]
 8019350:	430b      	orrs	r3, r1
 8019352:	9908      	ldr	r1, [sp, #32]
 8019354:	430b      	orrs	r3, r1
 8019356:	d120      	bne.n	801939a <_dtoa_r+0x9aa>
 8019358:	2a00      	cmp	r2, #0
 801935a:	ddee      	ble.n	801933a <_dtoa_r+0x94a>
 801935c:	9901      	ldr	r1, [sp, #4]
 801935e:	2201      	movs	r2, #1
 8019360:	4648      	mov	r0, r9
 8019362:	f000 fba9 	bl	8019ab8 <__lshift>
 8019366:	4621      	mov	r1, r4
 8019368:	9001      	str	r0, [sp, #4]
 801936a:	f000 fc11 	bl	8019b90 <__mcmp>
 801936e:	2800      	cmp	r0, #0
 8019370:	dc03      	bgt.n	801937a <_dtoa_r+0x98a>
 8019372:	d1e2      	bne.n	801933a <_dtoa_r+0x94a>
 8019374:	f01a 0f01 	tst.w	sl, #1
 8019378:	d0df      	beq.n	801933a <_dtoa_r+0x94a>
 801937a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801937e:	d1d9      	bne.n	8019334 <_dtoa_r+0x944>
 8019380:	2339      	movs	r3, #57	@ 0x39
 8019382:	f88b 3000 	strb.w	r3, [fp]
 8019386:	4633      	mov	r3, r6
 8019388:	461e      	mov	r6, r3
 801938a:	3b01      	subs	r3, #1
 801938c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019390:	2a39      	cmp	r2, #57	@ 0x39
 8019392:	d052      	beq.n	801943a <_dtoa_r+0xa4a>
 8019394:	3201      	adds	r2, #1
 8019396:	701a      	strb	r2, [r3, #0]
 8019398:	e531      	b.n	8018dfe <_dtoa_r+0x40e>
 801939a:	2a00      	cmp	r2, #0
 801939c:	dd07      	ble.n	80193ae <_dtoa_r+0x9be>
 801939e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80193a2:	d0ed      	beq.n	8019380 <_dtoa_r+0x990>
 80193a4:	f10a 0301 	add.w	r3, sl, #1
 80193a8:	f88b 3000 	strb.w	r3, [fp]
 80193ac:	e527      	b.n	8018dfe <_dtoa_r+0x40e>
 80193ae:	9b04      	ldr	r3, [sp, #16]
 80193b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80193b2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80193b6:	4293      	cmp	r3, r2
 80193b8:	d029      	beq.n	801940e <_dtoa_r+0xa1e>
 80193ba:	9901      	ldr	r1, [sp, #4]
 80193bc:	2300      	movs	r3, #0
 80193be:	220a      	movs	r2, #10
 80193c0:	4648      	mov	r0, r9
 80193c2:	f000 f9d5 	bl	8019770 <__multadd>
 80193c6:	45a8      	cmp	r8, r5
 80193c8:	9001      	str	r0, [sp, #4]
 80193ca:	f04f 0300 	mov.w	r3, #0
 80193ce:	f04f 020a 	mov.w	r2, #10
 80193d2:	4641      	mov	r1, r8
 80193d4:	4648      	mov	r0, r9
 80193d6:	d107      	bne.n	80193e8 <_dtoa_r+0x9f8>
 80193d8:	f000 f9ca 	bl	8019770 <__multadd>
 80193dc:	4680      	mov	r8, r0
 80193de:	4605      	mov	r5, r0
 80193e0:	9b04      	ldr	r3, [sp, #16]
 80193e2:	3301      	adds	r3, #1
 80193e4:	9304      	str	r3, [sp, #16]
 80193e6:	e776      	b.n	80192d6 <_dtoa_r+0x8e6>
 80193e8:	f000 f9c2 	bl	8019770 <__multadd>
 80193ec:	4629      	mov	r1, r5
 80193ee:	4680      	mov	r8, r0
 80193f0:	2300      	movs	r3, #0
 80193f2:	220a      	movs	r2, #10
 80193f4:	4648      	mov	r0, r9
 80193f6:	f000 f9bb 	bl	8019770 <__multadd>
 80193fa:	4605      	mov	r5, r0
 80193fc:	e7f0      	b.n	80193e0 <_dtoa_r+0x9f0>
 80193fe:	f1bb 0f00 	cmp.w	fp, #0
 8019402:	bfcc      	ite	gt
 8019404:	465e      	movgt	r6, fp
 8019406:	2601      	movle	r6, #1
 8019408:	443e      	add	r6, r7
 801940a:	f04f 0800 	mov.w	r8, #0
 801940e:	9901      	ldr	r1, [sp, #4]
 8019410:	2201      	movs	r2, #1
 8019412:	4648      	mov	r0, r9
 8019414:	f000 fb50 	bl	8019ab8 <__lshift>
 8019418:	4621      	mov	r1, r4
 801941a:	9001      	str	r0, [sp, #4]
 801941c:	f000 fbb8 	bl	8019b90 <__mcmp>
 8019420:	2800      	cmp	r0, #0
 8019422:	dcb0      	bgt.n	8019386 <_dtoa_r+0x996>
 8019424:	d102      	bne.n	801942c <_dtoa_r+0xa3c>
 8019426:	f01a 0f01 	tst.w	sl, #1
 801942a:	d1ac      	bne.n	8019386 <_dtoa_r+0x996>
 801942c:	4633      	mov	r3, r6
 801942e:	461e      	mov	r6, r3
 8019430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019434:	2a30      	cmp	r2, #48	@ 0x30
 8019436:	d0fa      	beq.n	801942e <_dtoa_r+0xa3e>
 8019438:	e4e1      	b.n	8018dfe <_dtoa_r+0x40e>
 801943a:	429f      	cmp	r7, r3
 801943c:	d1a4      	bne.n	8019388 <_dtoa_r+0x998>
 801943e:	9b05      	ldr	r3, [sp, #20]
 8019440:	3301      	adds	r3, #1
 8019442:	9305      	str	r3, [sp, #20]
 8019444:	2331      	movs	r3, #49	@ 0x31
 8019446:	703b      	strb	r3, [r7, #0]
 8019448:	e4d9      	b.n	8018dfe <_dtoa_r+0x40e>
 801944a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801944c:	4f16      	ldr	r7, [pc, #88]	@ (80194a8 <_dtoa_r+0xab8>)
 801944e:	b11b      	cbz	r3, 8019458 <_dtoa_r+0xa68>
 8019450:	f107 0308 	add.w	r3, r7, #8
 8019454:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019456:	6013      	str	r3, [r2, #0]
 8019458:	4638      	mov	r0, r7
 801945a:	b011      	add	sp, #68	@ 0x44
 801945c:	ecbd 8b02 	vpop	{d8}
 8019460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019464:	9b07      	ldr	r3, [sp, #28]
 8019466:	2b01      	cmp	r3, #1
 8019468:	f77f ae2c 	ble.w	80190c4 <_dtoa_r+0x6d4>
 801946c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801946e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019470:	2001      	movs	r0, #1
 8019472:	e64c      	b.n	801910e <_dtoa_r+0x71e>
 8019474:	f1bb 0f00 	cmp.w	fp, #0
 8019478:	f77f aed8 	ble.w	801922c <_dtoa_r+0x83c>
 801947c:	463e      	mov	r6, r7
 801947e:	9801      	ldr	r0, [sp, #4]
 8019480:	4621      	mov	r1, r4
 8019482:	f7ff fa2c 	bl	80188de <quorem>
 8019486:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801948a:	f806 ab01 	strb.w	sl, [r6], #1
 801948e:	1bf2      	subs	r2, r6, r7
 8019490:	4593      	cmp	fp, r2
 8019492:	ddb4      	ble.n	80193fe <_dtoa_r+0xa0e>
 8019494:	9901      	ldr	r1, [sp, #4]
 8019496:	2300      	movs	r3, #0
 8019498:	220a      	movs	r2, #10
 801949a:	4648      	mov	r0, r9
 801949c:	f000 f968 	bl	8019770 <__multadd>
 80194a0:	9001      	str	r0, [sp, #4]
 80194a2:	e7ec      	b.n	801947e <_dtoa_r+0xa8e>
 80194a4:	0801c660 	.word	0x0801c660
 80194a8:	0801c5e4 	.word	0x0801c5e4

080194ac <_free_r>:
 80194ac:	b538      	push	{r3, r4, r5, lr}
 80194ae:	4605      	mov	r5, r0
 80194b0:	2900      	cmp	r1, #0
 80194b2:	d041      	beq.n	8019538 <_free_r+0x8c>
 80194b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194b8:	1f0c      	subs	r4, r1, #4
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	bfb8      	it	lt
 80194be:	18e4      	addlt	r4, r4, r3
 80194c0:	f000 f8e8 	bl	8019694 <__malloc_lock>
 80194c4:	4a1d      	ldr	r2, [pc, #116]	@ (801953c <_free_r+0x90>)
 80194c6:	6813      	ldr	r3, [r2, #0]
 80194c8:	b933      	cbnz	r3, 80194d8 <_free_r+0x2c>
 80194ca:	6063      	str	r3, [r4, #4]
 80194cc:	6014      	str	r4, [r2, #0]
 80194ce:	4628      	mov	r0, r5
 80194d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194d4:	f000 b8e4 	b.w	80196a0 <__malloc_unlock>
 80194d8:	42a3      	cmp	r3, r4
 80194da:	d908      	bls.n	80194ee <_free_r+0x42>
 80194dc:	6820      	ldr	r0, [r4, #0]
 80194de:	1821      	adds	r1, r4, r0
 80194e0:	428b      	cmp	r3, r1
 80194e2:	bf01      	itttt	eq
 80194e4:	6819      	ldreq	r1, [r3, #0]
 80194e6:	685b      	ldreq	r3, [r3, #4]
 80194e8:	1809      	addeq	r1, r1, r0
 80194ea:	6021      	streq	r1, [r4, #0]
 80194ec:	e7ed      	b.n	80194ca <_free_r+0x1e>
 80194ee:	461a      	mov	r2, r3
 80194f0:	685b      	ldr	r3, [r3, #4]
 80194f2:	b10b      	cbz	r3, 80194f8 <_free_r+0x4c>
 80194f4:	42a3      	cmp	r3, r4
 80194f6:	d9fa      	bls.n	80194ee <_free_r+0x42>
 80194f8:	6811      	ldr	r1, [r2, #0]
 80194fa:	1850      	adds	r0, r2, r1
 80194fc:	42a0      	cmp	r0, r4
 80194fe:	d10b      	bne.n	8019518 <_free_r+0x6c>
 8019500:	6820      	ldr	r0, [r4, #0]
 8019502:	4401      	add	r1, r0
 8019504:	1850      	adds	r0, r2, r1
 8019506:	4283      	cmp	r3, r0
 8019508:	6011      	str	r1, [r2, #0]
 801950a:	d1e0      	bne.n	80194ce <_free_r+0x22>
 801950c:	6818      	ldr	r0, [r3, #0]
 801950e:	685b      	ldr	r3, [r3, #4]
 8019510:	6053      	str	r3, [r2, #4]
 8019512:	4408      	add	r0, r1
 8019514:	6010      	str	r0, [r2, #0]
 8019516:	e7da      	b.n	80194ce <_free_r+0x22>
 8019518:	d902      	bls.n	8019520 <_free_r+0x74>
 801951a:	230c      	movs	r3, #12
 801951c:	602b      	str	r3, [r5, #0]
 801951e:	e7d6      	b.n	80194ce <_free_r+0x22>
 8019520:	6820      	ldr	r0, [r4, #0]
 8019522:	1821      	adds	r1, r4, r0
 8019524:	428b      	cmp	r3, r1
 8019526:	bf04      	itt	eq
 8019528:	6819      	ldreq	r1, [r3, #0]
 801952a:	685b      	ldreq	r3, [r3, #4]
 801952c:	6063      	str	r3, [r4, #4]
 801952e:	bf04      	itt	eq
 8019530:	1809      	addeq	r1, r1, r0
 8019532:	6021      	streq	r1, [r4, #0]
 8019534:	6054      	str	r4, [r2, #4]
 8019536:	e7ca      	b.n	80194ce <_free_r+0x22>
 8019538:	bd38      	pop	{r3, r4, r5, pc}
 801953a:	bf00      	nop
 801953c:	24001a08 	.word	0x24001a08

08019540 <malloc>:
 8019540:	4b02      	ldr	r3, [pc, #8]	@ (801954c <malloc+0xc>)
 8019542:	4601      	mov	r1, r0
 8019544:	6818      	ldr	r0, [r3, #0]
 8019546:	f000 b825 	b.w	8019594 <_malloc_r>
 801954a:	bf00      	nop
 801954c:	24000170 	.word	0x24000170

08019550 <sbrk_aligned>:
 8019550:	b570      	push	{r4, r5, r6, lr}
 8019552:	4e0f      	ldr	r6, [pc, #60]	@ (8019590 <sbrk_aligned+0x40>)
 8019554:	460c      	mov	r4, r1
 8019556:	6831      	ldr	r1, [r6, #0]
 8019558:	4605      	mov	r5, r0
 801955a:	b911      	cbnz	r1, 8019562 <sbrk_aligned+0x12>
 801955c:	f001 f814 	bl	801a588 <_sbrk_r>
 8019560:	6030      	str	r0, [r6, #0]
 8019562:	4621      	mov	r1, r4
 8019564:	4628      	mov	r0, r5
 8019566:	f001 f80f 	bl	801a588 <_sbrk_r>
 801956a:	1c43      	adds	r3, r0, #1
 801956c:	d103      	bne.n	8019576 <sbrk_aligned+0x26>
 801956e:	f04f 34ff 	mov.w	r4, #4294967295
 8019572:	4620      	mov	r0, r4
 8019574:	bd70      	pop	{r4, r5, r6, pc}
 8019576:	1cc4      	adds	r4, r0, #3
 8019578:	f024 0403 	bic.w	r4, r4, #3
 801957c:	42a0      	cmp	r0, r4
 801957e:	d0f8      	beq.n	8019572 <sbrk_aligned+0x22>
 8019580:	1a21      	subs	r1, r4, r0
 8019582:	4628      	mov	r0, r5
 8019584:	f001 f800 	bl	801a588 <_sbrk_r>
 8019588:	3001      	adds	r0, #1
 801958a:	d1f2      	bne.n	8019572 <sbrk_aligned+0x22>
 801958c:	e7ef      	b.n	801956e <sbrk_aligned+0x1e>
 801958e:	bf00      	nop
 8019590:	24001a04 	.word	0x24001a04

08019594 <_malloc_r>:
 8019594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019598:	1ccd      	adds	r5, r1, #3
 801959a:	f025 0503 	bic.w	r5, r5, #3
 801959e:	3508      	adds	r5, #8
 80195a0:	2d0c      	cmp	r5, #12
 80195a2:	bf38      	it	cc
 80195a4:	250c      	movcc	r5, #12
 80195a6:	2d00      	cmp	r5, #0
 80195a8:	4606      	mov	r6, r0
 80195aa:	db01      	blt.n	80195b0 <_malloc_r+0x1c>
 80195ac:	42a9      	cmp	r1, r5
 80195ae:	d904      	bls.n	80195ba <_malloc_r+0x26>
 80195b0:	230c      	movs	r3, #12
 80195b2:	6033      	str	r3, [r6, #0]
 80195b4:	2000      	movs	r0, #0
 80195b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019690 <_malloc_r+0xfc>
 80195be:	f000 f869 	bl	8019694 <__malloc_lock>
 80195c2:	f8d8 3000 	ldr.w	r3, [r8]
 80195c6:	461c      	mov	r4, r3
 80195c8:	bb44      	cbnz	r4, 801961c <_malloc_r+0x88>
 80195ca:	4629      	mov	r1, r5
 80195cc:	4630      	mov	r0, r6
 80195ce:	f7ff ffbf 	bl	8019550 <sbrk_aligned>
 80195d2:	1c43      	adds	r3, r0, #1
 80195d4:	4604      	mov	r4, r0
 80195d6:	d158      	bne.n	801968a <_malloc_r+0xf6>
 80195d8:	f8d8 4000 	ldr.w	r4, [r8]
 80195dc:	4627      	mov	r7, r4
 80195de:	2f00      	cmp	r7, #0
 80195e0:	d143      	bne.n	801966a <_malloc_r+0xd6>
 80195e2:	2c00      	cmp	r4, #0
 80195e4:	d04b      	beq.n	801967e <_malloc_r+0xea>
 80195e6:	6823      	ldr	r3, [r4, #0]
 80195e8:	4639      	mov	r1, r7
 80195ea:	4630      	mov	r0, r6
 80195ec:	eb04 0903 	add.w	r9, r4, r3
 80195f0:	f000 ffca 	bl	801a588 <_sbrk_r>
 80195f4:	4581      	cmp	r9, r0
 80195f6:	d142      	bne.n	801967e <_malloc_r+0xea>
 80195f8:	6821      	ldr	r1, [r4, #0]
 80195fa:	1a6d      	subs	r5, r5, r1
 80195fc:	4629      	mov	r1, r5
 80195fe:	4630      	mov	r0, r6
 8019600:	f7ff ffa6 	bl	8019550 <sbrk_aligned>
 8019604:	3001      	adds	r0, #1
 8019606:	d03a      	beq.n	801967e <_malloc_r+0xea>
 8019608:	6823      	ldr	r3, [r4, #0]
 801960a:	442b      	add	r3, r5
 801960c:	6023      	str	r3, [r4, #0]
 801960e:	f8d8 3000 	ldr.w	r3, [r8]
 8019612:	685a      	ldr	r2, [r3, #4]
 8019614:	bb62      	cbnz	r2, 8019670 <_malloc_r+0xdc>
 8019616:	f8c8 7000 	str.w	r7, [r8]
 801961a:	e00f      	b.n	801963c <_malloc_r+0xa8>
 801961c:	6822      	ldr	r2, [r4, #0]
 801961e:	1b52      	subs	r2, r2, r5
 8019620:	d420      	bmi.n	8019664 <_malloc_r+0xd0>
 8019622:	2a0b      	cmp	r2, #11
 8019624:	d917      	bls.n	8019656 <_malloc_r+0xc2>
 8019626:	1961      	adds	r1, r4, r5
 8019628:	42a3      	cmp	r3, r4
 801962a:	6025      	str	r5, [r4, #0]
 801962c:	bf18      	it	ne
 801962e:	6059      	strne	r1, [r3, #4]
 8019630:	6863      	ldr	r3, [r4, #4]
 8019632:	bf08      	it	eq
 8019634:	f8c8 1000 	streq.w	r1, [r8]
 8019638:	5162      	str	r2, [r4, r5]
 801963a:	604b      	str	r3, [r1, #4]
 801963c:	4630      	mov	r0, r6
 801963e:	f000 f82f 	bl	80196a0 <__malloc_unlock>
 8019642:	f104 000b 	add.w	r0, r4, #11
 8019646:	1d23      	adds	r3, r4, #4
 8019648:	f020 0007 	bic.w	r0, r0, #7
 801964c:	1ac2      	subs	r2, r0, r3
 801964e:	bf1c      	itt	ne
 8019650:	1a1b      	subne	r3, r3, r0
 8019652:	50a3      	strne	r3, [r4, r2]
 8019654:	e7af      	b.n	80195b6 <_malloc_r+0x22>
 8019656:	6862      	ldr	r2, [r4, #4]
 8019658:	42a3      	cmp	r3, r4
 801965a:	bf0c      	ite	eq
 801965c:	f8c8 2000 	streq.w	r2, [r8]
 8019660:	605a      	strne	r2, [r3, #4]
 8019662:	e7eb      	b.n	801963c <_malloc_r+0xa8>
 8019664:	4623      	mov	r3, r4
 8019666:	6864      	ldr	r4, [r4, #4]
 8019668:	e7ae      	b.n	80195c8 <_malloc_r+0x34>
 801966a:	463c      	mov	r4, r7
 801966c:	687f      	ldr	r7, [r7, #4]
 801966e:	e7b6      	b.n	80195de <_malloc_r+0x4a>
 8019670:	461a      	mov	r2, r3
 8019672:	685b      	ldr	r3, [r3, #4]
 8019674:	42a3      	cmp	r3, r4
 8019676:	d1fb      	bne.n	8019670 <_malloc_r+0xdc>
 8019678:	2300      	movs	r3, #0
 801967a:	6053      	str	r3, [r2, #4]
 801967c:	e7de      	b.n	801963c <_malloc_r+0xa8>
 801967e:	230c      	movs	r3, #12
 8019680:	6033      	str	r3, [r6, #0]
 8019682:	4630      	mov	r0, r6
 8019684:	f000 f80c 	bl	80196a0 <__malloc_unlock>
 8019688:	e794      	b.n	80195b4 <_malloc_r+0x20>
 801968a:	6005      	str	r5, [r0, #0]
 801968c:	e7d6      	b.n	801963c <_malloc_r+0xa8>
 801968e:	bf00      	nop
 8019690:	24001a08 	.word	0x24001a08

08019694 <__malloc_lock>:
 8019694:	4801      	ldr	r0, [pc, #4]	@ (801969c <__malloc_lock+0x8>)
 8019696:	f7ff b912 	b.w	80188be <__retarget_lock_acquire_recursive>
 801969a:	bf00      	nop
 801969c:	24001a00 	.word	0x24001a00

080196a0 <__malloc_unlock>:
 80196a0:	4801      	ldr	r0, [pc, #4]	@ (80196a8 <__malloc_unlock+0x8>)
 80196a2:	f7ff b90d 	b.w	80188c0 <__retarget_lock_release_recursive>
 80196a6:	bf00      	nop
 80196a8:	24001a00 	.word	0x24001a00

080196ac <_Balloc>:
 80196ac:	b570      	push	{r4, r5, r6, lr}
 80196ae:	69c6      	ldr	r6, [r0, #28]
 80196b0:	4604      	mov	r4, r0
 80196b2:	460d      	mov	r5, r1
 80196b4:	b976      	cbnz	r6, 80196d4 <_Balloc+0x28>
 80196b6:	2010      	movs	r0, #16
 80196b8:	f7ff ff42 	bl	8019540 <malloc>
 80196bc:	4602      	mov	r2, r0
 80196be:	61e0      	str	r0, [r4, #28]
 80196c0:	b920      	cbnz	r0, 80196cc <_Balloc+0x20>
 80196c2:	4b18      	ldr	r3, [pc, #96]	@ (8019724 <_Balloc+0x78>)
 80196c4:	4818      	ldr	r0, [pc, #96]	@ (8019728 <_Balloc+0x7c>)
 80196c6:	216b      	movs	r1, #107	@ 0x6b
 80196c8:	f000 ff6e 	bl	801a5a8 <__assert_func>
 80196cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80196d0:	6006      	str	r6, [r0, #0]
 80196d2:	60c6      	str	r6, [r0, #12]
 80196d4:	69e6      	ldr	r6, [r4, #28]
 80196d6:	68f3      	ldr	r3, [r6, #12]
 80196d8:	b183      	cbz	r3, 80196fc <_Balloc+0x50>
 80196da:	69e3      	ldr	r3, [r4, #28]
 80196dc:	68db      	ldr	r3, [r3, #12]
 80196de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80196e2:	b9b8      	cbnz	r0, 8019714 <_Balloc+0x68>
 80196e4:	2101      	movs	r1, #1
 80196e6:	fa01 f605 	lsl.w	r6, r1, r5
 80196ea:	1d72      	adds	r2, r6, #5
 80196ec:	0092      	lsls	r2, r2, #2
 80196ee:	4620      	mov	r0, r4
 80196f0:	f000 ff78 	bl	801a5e4 <_calloc_r>
 80196f4:	b160      	cbz	r0, 8019710 <_Balloc+0x64>
 80196f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80196fa:	e00e      	b.n	801971a <_Balloc+0x6e>
 80196fc:	2221      	movs	r2, #33	@ 0x21
 80196fe:	2104      	movs	r1, #4
 8019700:	4620      	mov	r0, r4
 8019702:	f000 ff6f 	bl	801a5e4 <_calloc_r>
 8019706:	69e3      	ldr	r3, [r4, #28]
 8019708:	60f0      	str	r0, [r6, #12]
 801970a:	68db      	ldr	r3, [r3, #12]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d1e4      	bne.n	80196da <_Balloc+0x2e>
 8019710:	2000      	movs	r0, #0
 8019712:	bd70      	pop	{r4, r5, r6, pc}
 8019714:	6802      	ldr	r2, [r0, #0]
 8019716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801971a:	2300      	movs	r3, #0
 801971c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019720:	e7f7      	b.n	8019712 <_Balloc+0x66>
 8019722:	bf00      	nop
 8019724:	0801c5f1 	.word	0x0801c5f1
 8019728:	0801c671 	.word	0x0801c671

0801972c <_Bfree>:
 801972c:	b570      	push	{r4, r5, r6, lr}
 801972e:	69c6      	ldr	r6, [r0, #28]
 8019730:	4605      	mov	r5, r0
 8019732:	460c      	mov	r4, r1
 8019734:	b976      	cbnz	r6, 8019754 <_Bfree+0x28>
 8019736:	2010      	movs	r0, #16
 8019738:	f7ff ff02 	bl	8019540 <malloc>
 801973c:	4602      	mov	r2, r0
 801973e:	61e8      	str	r0, [r5, #28]
 8019740:	b920      	cbnz	r0, 801974c <_Bfree+0x20>
 8019742:	4b09      	ldr	r3, [pc, #36]	@ (8019768 <_Bfree+0x3c>)
 8019744:	4809      	ldr	r0, [pc, #36]	@ (801976c <_Bfree+0x40>)
 8019746:	218f      	movs	r1, #143	@ 0x8f
 8019748:	f000 ff2e 	bl	801a5a8 <__assert_func>
 801974c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019750:	6006      	str	r6, [r0, #0]
 8019752:	60c6      	str	r6, [r0, #12]
 8019754:	b13c      	cbz	r4, 8019766 <_Bfree+0x3a>
 8019756:	69eb      	ldr	r3, [r5, #28]
 8019758:	6862      	ldr	r2, [r4, #4]
 801975a:	68db      	ldr	r3, [r3, #12]
 801975c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019760:	6021      	str	r1, [r4, #0]
 8019762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019766:	bd70      	pop	{r4, r5, r6, pc}
 8019768:	0801c5f1 	.word	0x0801c5f1
 801976c:	0801c671 	.word	0x0801c671

08019770 <__multadd>:
 8019770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019774:	690d      	ldr	r5, [r1, #16]
 8019776:	4607      	mov	r7, r0
 8019778:	460c      	mov	r4, r1
 801977a:	461e      	mov	r6, r3
 801977c:	f101 0c14 	add.w	ip, r1, #20
 8019780:	2000      	movs	r0, #0
 8019782:	f8dc 3000 	ldr.w	r3, [ip]
 8019786:	b299      	uxth	r1, r3
 8019788:	fb02 6101 	mla	r1, r2, r1, r6
 801978c:	0c1e      	lsrs	r6, r3, #16
 801978e:	0c0b      	lsrs	r3, r1, #16
 8019790:	fb02 3306 	mla	r3, r2, r6, r3
 8019794:	b289      	uxth	r1, r1
 8019796:	3001      	adds	r0, #1
 8019798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801979c:	4285      	cmp	r5, r0
 801979e:	f84c 1b04 	str.w	r1, [ip], #4
 80197a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80197a6:	dcec      	bgt.n	8019782 <__multadd+0x12>
 80197a8:	b30e      	cbz	r6, 80197ee <__multadd+0x7e>
 80197aa:	68a3      	ldr	r3, [r4, #8]
 80197ac:	42ab      	cmp	r3, r5
 80197ae:	dc19      	bgt.n	80197e4 <__multadd+0x74>
 80197b0:	6861      	ldr	r1, [r4, #4]
 80197b2:	4638      	mov	r0, r7
 80197b4:	3101      	adds	r1, #1
 80197b6:	f7ff ff79 	bl	80196ac <_Balloc>
 80197ba:	4680      	mov	r8, r0
 80197bc:	b928      	cbnz	r0, 80197ca <__multadd+0x5a>
 80197be:	4602      	mov	r2, r0
 80197c0:	4b0c      	ldr	r3, [pc, #48]	@ (80197f4 <__multadd+0x84>)
 80197c2:	480d      	ldr	r0, [pc, #52]	@ (80197f8 <__multadd+0x88>)
 80197c4:	21ba      	movs	r1, #186	@ 0xba
 80197c6:	f000 feef 	bl	801a5a8 <__assert_func>
 80197ca:	6922      	ldr	r2, [r4, #16]
 80197cc:	3202      	adds	r2, #2
 80197ce:	f104 010c 	add.w	r1, r4, #12
 80197d2:	0092      	lsls	r2, r2, #2
 80197d4:	300c      	adds	r0, #12
 80197d6:	f7ff f874 	bl	80188c2 <memcpy>
 80197da:	4621      	mov	r1, r4
 80197dc:	4638      	mov	r0, r7
 80197de:	f7ff ffa5 	bl	801972c <_Bfree>
 80197e2:	4644      	mov	r4, r8
 80197e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80197e8:	3501      	adds	r5, #1
 80197ea:	615e      	str	r6, [r3, #20]
 80197ec:	6125      	str	r5, [r4, #16]
 80197ee:	4620      	mov	r0, r4
 80197f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197f4:	0801c660 	.word	0x0801c660
 80197f8:	0801c671 	.word	0x0801c671

080197fc <__hi0bits>:
 80197fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8019800:	4603      	mov	r3, r0
 8019802:	bf36      	itet	cc
 8019804:	0403      	lslcc	r3, r0, #16
 8019806:	2000      	movcs	r0, #0
 8019808:	2010      	movcc	r0, #16
 801980a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801980e:	bf3c      	itt	cc
 8019810:	021b      	lslcc	r3, r3, #8
 8019812:	3008      	addcc	r0, #8
 8019814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019818:	bf3c      	itt	cc
 801981a:	011b      	lslcc	r3, r3, #4
 801981c:	3004      	addcc	r0, #4
 801981e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019822:	bf3c      	itt	cc
 8019824:	009b      	lslcc	r3, r3, #2
 8019826:	3002      	addcc	r0, #2
 8019828:	2b00      	cmp	r3, #0
 801982a:	db05      	blt.n	8019838 <__hi0bits+0x3c>
 801982c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8019830:	f100 0001 	add.w	r0, r0, #1
 8019834:	bf08      	it	eq
 8019836:	2020      	moveq	r0, #32
 8019838:	4770      	bx	lr

0801983a <__lo0bits>:
 801983a:	6803      	ldr	r3, [r0, #0]
 801983c:	4602      	mov	r2, r0
 801983e:	f013 0007 	ands.w	r0, r3, #7
 8019842:	d00b      	beq.n	801985c <__lo0bits+0x22>
 8019844:	07d9      	lsls	r1, r3, #31
 8019846:	d421      	bmi.n	801988c <__lo0bits+0x52>
 8019848:	0798      	lsls	r0, r3, #30
 801984a:	bf49      	itett	mi
 801984c:	085b      	lsrmi	r3, r3, #1
 801984e:	089b      	lsrpl	r3, r3, #2
 8019850:	2001      	movmi	r0, #1
 8019852:	6013      	strmi	r3, [r2, #0]
 8019854:	bf5c      	itt	pl
 8019856:	6013      	strpl	r3, [r2, #0]
 8019858:	2002      	movpl	r0, #2
 801985a:	4770      	bx	lr
 801985c:	b299      	uxth	r1, r3
 801985e:	b909      	cbnz	r1, 8019864 <__lo0bits+0x2a>
 8019860:	0c1b      	lsrs	r3, r3, #16
 8019862:	2010      	movs	r0, #16
 8019864:	b2d9      	uxtb	r1, r3
 8019866:	b909      	cbnz	r1, 801986c <__lo0bits+0x32>
 8019868:	3008      	adds	r0, #8
 801986a:	0a1b      	lsrs	r3, r3, #8
 801986c:	0719      	lsls	r1, r3, #28
 801986e:	bf04      	itt	eq
 8019870:	091b      	lsreq	r3, r3, #4
 8019872:	3004      	addeq	r0, #4
 8019874:	0799      	lsls	r1, r3, #30
 8019876:	bf04      	itt	eq
 8019878:	089b      	lsreq	r3, r3, #2
 801987a:	3002      	addeq	r0, #2
 801987c:	07d9      	lsls	r1, r3, #31
 801987e:	d403      	bmi.n	8019888 <__lo0bits+0x4e>
 8019880:	085b      	lsrs	r3, r3, #1
 8019882:	f100 0001 	add.w	r0, r0, #1
 8019886:	d003      	beq.n	8019890 <__lo0bits+0x56>
 8019888:	6013      	str	r3, [r2, #0]
 801988a:	4770      	bx	lr
 801988c:	2000      	movs	r0, #0
 801988e:	4770      	bx	lr
 8019890:	2020      	movs	r0, #32
 8019892:	4770      	bx	lr

08019894 <__i2b>:
 8019894:	b510      	push	{r4, lr}
 8019896:	460c      	mov	r4, r1
 8019898:	2101      	movs	r1, #1
 801989a:	f7ff ff07 	bl	80196ac <_Balloc>
 801989e:	4602      	mov	r2, r0
 80198a0:	b928      	cbnz	r0, 80198ae <__i2b+0x1a>
 80198a2:	4b05      	ldr	r3, [pc, #20]	@ (80198b8 <__i2b+0x24>)
 80198a4:	4805      	ldr	r0, [pc, #20]	@ (80198bc <__i2b+0x28>)
 80198a6:	f240 1145 	movw	r1, #325	@ 0x145
 80198aa:	f000 fe7d 	bl	801a5a8 <__assert_func>
 80198ae:	2301      	movs	r3, #1
 80198b0:	6144      	str	r4, [r0, #20]
 80198b2:	6103      	str	r3, [r0, #16]
 80198b4:	bd10      	pop	{r4, pc}
 80198b6:	bf00      	nop
 80198b8:	0801c660 	.word	0x0801c660
 80198bc:	0801c671 	.word	0x0801c671

080198c0 <__multiply>:
 80198c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198c4:	4617      	mov	r7, r2
 80198c6:	690a      	ldr	r2, [r1, #16]
 80198c8:	693b      	ldr	r3, [r7, #16]
 80198ca:	429a      	cmp	r2, r3
 80198cc:	bfa8      	it	ge
 80198ce:	463b      	movge	r3, r7
 80198d0:	4689      	mov	r9, r1
 80198d2:	bfa4      	itt	ge
 80198d4:	460f      	movge	r7, r1
 80198d6:	4699      	movge	r9, r3
 80198d8:	693d      	ldr	r5, [r7, #16]
 80198da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80198de:	68bb      	ldr	r3, [r7, #8]
 80198e0:	6879      	ldr	r1, [r7, #4]
 80198e2:	eb05 060a 	add.w	r6, r5, sl
 80198e6:	42b3      	cmp	r3, r6
 80198e8:	b085      	sub	sp, #20
 80198ea:	bfb8      	it	lt
 80198ec:	3101      	addlt	r1, #1
 80198ee:	f7ff fedd 	bl	80196ac <_Balloc>
 80198f2:	b930      	cbnz	r0, 8019902 <__multiply+0x42>
 80198f4:	4602      	mov	r2, r0
 80198f6:	4b41      	ldr	r3, [pc, #260]	@ (80199fc <__multiply+0x13c>)
 80198f8:	4841      	ldr	r0, [pc, #260]	@ (8019a00 <__multiply+0x140>)
 80198fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80198fe:	f000 fe53 	bl	801a5a8 <__assert_func>
 8019902:	f100 0414 	add.w	r4, r0, #20
 8019906:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801990a:	4623      	mov	r3, r4
 801990c:	2200      	movs	r2, #0
 801990e:	4573      	cmp	r3, lr
 8019910:	d320      	bcc.n	8019954 <__multiply+0x94>
 8019912:	f107 0814 	add.w	r8, r7, #20
 8019916:	f109 0114 	add.w	r1, r9, #20
 801991a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801991e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8019922:	9302      	str	r3, [sp, #8]
 8019924:	1beb      	subs	r3, r5, r7
 8019926:	3b15      	subs	r3, #21
 8019928:	f023 0303 	bic.w	r3, r3, #3
 801992c:	3304      	adds	r3, #4
 801992e:	3715      	adds	r7, #21
 8019930:	42bd      	cmp	r5, r7
 8019932:	bf38      	it	cc
 8019934:	2304      	movcc	r3, #4
 8019936:	9301      	str	r3, [sp, #4]
 8019938:	9b02      	ldr	r3, [sp, #8]
 801993a:	9103      	str	r1, [sp, #12]
 801993c:	428b      	cmp	r3, r1
 801993e:	d80c      	bhi.n	801995a <__multiply+0x9a>
 8019940:	2e00      	cmp	r6, #0
 8019942:	dd03      	ble.n	801994c <__multiply+0x8c>
 8019944:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019948:	2b00      	cmp	r3, #0
 801994a:	d055      	beq.n	80199f8 <__multiply+0x138>
 801994c:	6106      	str	r6, [r0, #16]
 801994e:	b005      	add	sp, #20
 8019950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019954:	f843 2b04 	str.w	r2, [r3], #4
 8019958:	e7d9      	b.n	801990e <__multiply+0x4e>
 801995a:	f8b1 a000 	ldrh.w	sl, [r1]
 801995e:	f1ba 0f00 	cmp.w	sl, #0
 8019962:	d01f      	beq.n	80199a4 <__multiply+0xe4>
 8019964:	46c4      	mov	ip, r8
 8019966:	46a1      	mov	r9, r4
 8019968:	2700      	movs	r7, #0
 801996a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801996e:	f8d9 3000 	ldr.w	r3, [r9]
 8019972:	fa1f fb82 	uxth.w	fp, r2
 8019976:	b29b      	uxth	r3, r3
 8019978:	fb0a 330b 	mla	r3, sl, fp, r3
 801997c:	443b      	add	r3, r7
 801997e:	f8d9 7000 	ldr.w	r7, [r9]
 8019982:	0c12      	lsrs	r2, r2, #16
 8019984:	0c3f      	lsrs	r7, r7, #16
 8019986:	fb0a 7202 	mla	r2, sl, r2, r7
 801998a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801998e:	b29b      	uxth	r3, r3
 8019990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019994:	4565      	cmp	r5, ip
 8019996:	f849 3b04 	str.w	r3, [r9], #4
 801999a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801999e:	d8e4      	bhi.n	801996a <__multiply+0xaa>
 80199a0:	9b01      	ldr	r3, [sp, #4]
 80199a2:	50e7      	str	r7, [r4, r3]
 80199a4:	9b03      	ldr	r3, [sp, #12]
 80199a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80199aa:	3104      	adds	r1, #4
 80199ac:	f1b9 0f00 	cmp.w	r9, #0
 80199b0:	d020      	beq.n	80199f4 <__multiply+0x134>
 80199b2:	6823      	ldr	r3, [r4, #0]
 80199b4:	4647      	mov	r7, r8
 80199b6:	46a4      	mov	ip, r4
 80199b8:	f04f 0a00 	mov.w	sl, #0
 80199bc:	f8b7 b000 	ldrh.w	fp, [r7]
 80199c0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80199c4:	fb09 220b 	mla	r2, r9, fp, r2
 80199c8:	4452      	add	r2, sl
 80199ca:	b29b      	uxth	r3, r3
 80199cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80199d0:	f84c 3b04 	str.w	r3, [ip], #4
 80199d4:	f857 3b04 	ldr.w	r3, [r7], #4
 80199d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80199dc:	f8bc 3000 	ldrh.w	r3, [ip]
 80199e0:	fb09 330a 	mla	r3, r9, sl, r3
 80199e4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80199e8:	42bd      	cmp	r5, r7
 80199ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80199ee:	d8e5      	bhi.n	80199bc <__multiply+0xfc>
 80199f0:	9a01      	ldr	r2, [sp, #4]
 80199f2:	50a3      	str	r3, [r4, r2]
 80199f4:	3404      	adds	r4, #4
 80199f6:	e79f      	b.n	8019938 <__multiply+0x78>
 80199f8:	3e01      	subs	r6, #1
 80199fa:	e7a1      	b.n	8019940 <__multiply+0x80>
 80199fc:	0801c660 	.word	0x0801c660
 8019a00:	0801c671 	.word	0x0801c671

08019a04 <__pow5mult>:
 8019a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a08:	4615      	mov	r5, r2
 8019a0a:	f012 0203 	ands.w	r2, r2, #3
 8019a0e:	4607      	mov	r7, r0
 8019a10:	460e      	mov	r6, r1
 8019a12:	d007      	beq.n	8019a24 <__pow5mult+0x20>
 8019a14:	4c25      	ldr	r4, [pc, #148]	@ (8019aac <__pow5mult+0xa8>)
 8019a16:	3a01      	subs	r2, #1
 8019a18:	2300      	movs	r3, #0
 8019a1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019a1e:	f7ff fea7 	bl	8019770 <__multadd>
 8019a22:	4606      	mov	r6, r0
 8019a24:	10ad      	asrs	r5, r5, #2
 8019a26:	d03d      	beq.n	8019aa4 <__pow5mult+0xa0>
 8019a28:	69fc      	ldr	r4, [r7, #28]
 8019a2a:	b97c      	cbnz	r4, 8019a4c <__pow5mult+0x48>
 8019a2c:	2010      	movs	r0, #16
 8019a2e:	f7ff fd87 	bl	8019540 <malloc>
 8019a32:	4602      	mov	r2, r0
 8019a34:	61f8      	str	r0, [r7, #28]
 8019a36:	b928      	cbnz	r0, 8019a44 <__pow5mult+0x40>
 8019a38:	4b1d      	ldr	r3, [pc, #116]	@ (8019ab0 <__pow5mult+0xac>)
 8019a3a:	481e      	ldr	r0, [pc, #120]	@ (8019ab4 <__pow5mult+0xb0>)
 8019a3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019a40:	f000 fdb2 	bl	801a5a8 <__assert_func>
 8019a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019a48:	6004      	str	r4, [r0, #0]
 8019a4a:	60c4      	str	r4, [r0, #12]
 8019a4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019a50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019a54:	b94c      	cbnz	r4, 8019a6a <__pow5mult+0x66>
 8019a56:	f240 2171 	movw	r1, #625	@ 0x271
 8019a5a:	4638      	mov	r0, r7
 8019a5c:	f7ff ff1a 	bl	8019894 <__i2b>
 8019a60:	2300      	movs	r3, #0
 8019a62:	f8c8 0008 	str.w	r0, [r8, #8]
 8019a66:	4604      	mov	r4, r0
 8019a68:	6003      	str	r3, [r0, #0]
 8019a6a:	f04f 0900 	mov.w	r9, #0
 8019a6e:	07eb      	lsls	r3, r5, #31
 8019a70:	d50a      	bpl.n	8019a88 <__pow5mult+0x84>
 8019a72:	4631      	mov	r1, r6
 8019a74:	4622      	mov	r2, r4
 8019a76:	4638      	mov	r0, r7
 8019a78:	f7ff ff22 	bl	80198c0 <__multiply>
 8019a7c:	4631      	mov	r1, r6
 8019a7e:	4680      	mov	r8, r0
 8019a80:	4638      	mov	r0, r7
 8019a82:	f7ff fe53 	bl	801972c <_Bfree>
 8019a86:	4646      	mov	r6, r8
 8019a88:	106d      	asrs	r5, r5, #1
 8019a8a:	d00b      	beq.n	8019aa4 <__pow5mult+0xa0>
 8019a8c:	6820      	ldr	r0, [r4, #0]
 8019a8e:	b938      	cbnz	r0, 8019aa0 <__pow5mult+0x9c>
 8019a90:	4622      	mov	r2, r4
 8019a92:	4621      	mov	r1, r4
 8019a94:	4638      	mov	r0, r7
 8019a96:	f7ff ff13 	bl	80198c0 <__multiply>
 8019a9a:	6020      	str	r0, [r4, #0]
 8019a9c:	f8c0 9000 	str.w	r9, [r0]
 8019aa0:	4604      	mov	r4, r0
 8019aa2:	e7e4      	b.n	8019a6e <__pow5mult+0x6a>
 8019aa4:	4630      	mov	r0, r6
 8019aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019aaa:	bf00      	nop
 8019aac:	0801c724 	.word	0x0801c724
 8019ab0:	0801c5f1 	.word	0x0801c5f1
 8019ab4:	0801c671 	.word	0x0801c671

08019ab8 <__lshift>:
 8019ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019abc:	460c      	mov	r4, r1
 8019abe:	6849      	ldr	r1, [r1, #4]
 8019ac0:	6923      	ldr	r3, [r4, #16]
 8019ac2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019ac6:	68a3      	ldr	r3, [r4, #8]
 8019ac8:	4607      	mov	r7, r0
 8019aca:	4691      	mov	r9, r2
 8019acc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019ad0:	f108 0601 	add.w	r6, r8, #1
 8019ad4:	42b3      	cmp	r3, r6
 8019ad6:	db0b      	blt.n	8019af0 <__lshift+0x38>
 8019ad8:	4638      	mov	r0, r7
 8019ada:	f7ff fde7 	bl	80196ac <_Balloc>
 8019ade:	4605      	mov	r5, r0
 8019ae0:	b948      	cbnz	r0, 8019af6 <__lshift+0x3e>
 8019ae2:	4602      	mov	r2, r0
 8019ae4:	4b28      	ldr	r3, [pc, #160]	@ (8019b88 <__lshift+0xd0>)
 8019ae6:	4829      	ldr	r0, [pc, #164]	@ (8019b8c <__lshift+0xd4>)
 8019ae8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8019aec:	f000 fd5c 	bl	801a5a8 <__assert_func>
 8019af0:	3101      	adds	r1, #1
 8019af2:	005b      	lsls	r3, r3, #1
 8019af4:	e7ee      	b.n	8019ad4 <__lshift+0x1c>
 8019af6:	2300      	movs	r3, #0
 8019af8:	f100 0114 	add.w	r1, r0, #20
 8019afc:	f100 0210 	add.w	r2, r0, #16
 8019b00:	4618      	mov	r0, r3
 8019b02:	4553      	cmp	r3, sl
 8019b04:	db33      	blt.n	8019b6e <__lshift+0xb6>
 8019b06:	6920      	ldr	r0, [r4, #16]
 8019b08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019b0c:	f104 0314 	add.w	r3, r4, #20
 8019b10:	f019 091f 	ands.w	r9, r9, #31
 8019b14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019b18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019b1c:	d02b      	beq.n	8019b76 <__lshift+0xbe>
 8019b1e:	f1c9 0e20 	rsb	lr, r9, #32
 8019b22:	468a      	mov	sl, r1
 8019b24:	2200      	movs	r2, #0
 8019b26:	6818      	ldr	r0, [r3, #0]
 8019b28:	fa00 f009 	lsl.w	r0, r0, r9
 8019b2c:	4310      	orrs	r0, r2
 8019b2e:	f84a 0b04 	str.w	r0, [sl], #4
 8019b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b36:	459c      	cmp	ip, r3
 8019b38:	fa22 f20e 	lsr.w	r2, r2, lr
 8019b3c:	d8f3      	bhi.n	8019b26 <__lshift+0x6e>
 8019b3e:	ebac 0304 	sub.w	r3, ip, r4
 8019b42:	3b15      	subs	r3, #21
 8019b44:	f023 0303 	bic.w	r3, r3, #3
 8019b48:	3304      	adds	r3, #4
 8019b4a:	f104 0015 	add.w	r0, r4, #21
 8019b4e:	4560      	cmp	r0, ip
 8019b50:	bf88      	it	hi
 8019b52:	2304      	movhi	r3, #4
 8019b54:	50ca      	str	r2, [r1, r3]
 8019b56:	b10a      	cbz	r2, 8019b5c <__lshift+0xa4>
 8019b58:	f108 0602 	add.w	r6, r8, #2
 8019b5c:	3e01      	subs	r6, #1
 8019b5e:	4638      	mov	r0, r7
 8019b60:	612e      	str	r6, [r5, #16]
 8019b62:	4621      	mov	r1, r4
 8019b64:	f7ff fde2 	bl	801972c <_Bfree>
 8019b68:	4628      	mov	r0, r5
 8019b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019b72:	3301      	adds	r3, #1
 8019b74:	e7c5      	b.n	8019b02 <__lshift+0x4a>
 8019b76:	3904      	subs	r1, #4
 8019b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019b80:	459c      	cmp	ip, r3
 8019b82:	d8f9      	bhi.n	8019b78 <__lshift+0xc0>
 8019b84:	e7ea      	b.n	8019b5c <__lshift+0xa4>
 8019b86:	bf00      	nop
 8019b88:	0801c660 	.word	0x0801c660
 8019b8c:	0801c671 	.word	0x0801c671

08019b90 <__mcmp>:
 8019b90:	690a      	ldr	r2, [r1, #16]
 8019b92:	4603      	mov	r3, r0
 8019b94:	6900      	ldr	r0, [r0, #16]
 8019b96:	1a80      	subs	r0, r0, r2
 8019b98:	b530      	push	{r4, r5, lr}
 8019b9a:	d10e      	bne.n	8019bba <__mcmp+0x2a>
 8019b9c:	3314      	adds	r3, #20
 8019b9e:	3114      	adds	r1, #20
 8019ba0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019ba4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019ba8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019bac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019bb0:	4295      	cmp	r5, r2
 8019bb2:	d003      	beq.n	8019bbc <__mcmp+0x2c>
 8019bb4:	d205      	bcs.n	8019bc2 <__mcmp+0x32>
 8019bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8019bba:	bd30      	pop	{r4, r5, pc}
 8019bbc:	42a3      	cmp	r3, r4
 8019bbe:	d3f3      	bcc.n	8019ba8 <__mcmp+0x18>
 8019bc0:	e7fb      	b.n	8019bba <__mcmp+0x2a>
 8019bc2:	2001      	movs	r0, #1
 8019bc4:	e7f9      	b.n	8019bba <__mcmp+0x2a>
	...

08019bc8 <__mdiff>:
 8019bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bcc:	4689      	mov	r9, r1
 8019bce:	4606      	mov	r6, r0
 8019bd0:	4611      	mov	r1, r2
 8019bd2:	4648      	mov	r0, r9
 8019bd4:	4614      	mov	r4, r2
 8019bd6:	f7ff ffdb 	bl	8019b90 <__mcmp>
 8019bda:	1e05      	subs	r5, r0, #0
 8019bdc:	d112      	bne.n	8019c04 <__mdiff+0x3c>
 8019bde:	4629      	mov	r1, r5
 8019be0:	4630      	mov	r0, r6
 8019be2:	f7ff fd63 	bl	80196ac <_Balloc>
 8019be6:	4602      	mov	r2, r0
 8019be8:	b928      	cbnz	r0, 8019bf6 <__mdiff+0x2e>
 8019bea:	4b3f      	ldr	r3, [pc, #252]	@ (8019ce8 <__mdiff+0x120>)
 8019bec:	f240 2137 	movw	r1, #567	@ 0x237
 8019bf0:	483e      	ldr	r0, [pc, #248]	@ (8019cec <__mdiff+0x124>)
 8019bf2:	f000 fcd9 	bl	801a5a8 <__assert_func>
 8019bf6:	2301      	movs	r3, #1
 8019bf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019bfc:	4610      	mov	r0, r2
 8019bfe:	b003      	add	sp, #12
 8019c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c04:	bfbc      	itt	lt
 8019c06:	464b      	movlt	r3, r9
 8019c08:	46a1      	movlt	r9, r4
 8019c0a:	4630      	mov	r0, r6
 8019c0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019c10:	bfba      	itte	lt
 8019c12:	461c      	movlt	r4, r3
 8019c14:	2501      	movlt	r5, #1
 8019c16:	2500      	movge	r5, #0
 8019c18:	f7ff fd48 	bl	80196ac <_Balloc>
 8019c1c:	4602      	mov	r2, r0
 8019c1e:	b918      	cbnz	r0, 8019c28 <__mdiff+0x60>
 8019c20:	4b31      	ldr	r3, [pc, #196]	@ (8019ce8 <__mdiff+0x120>)
 8019c22:	f240 2145 	movw	r1, #581	@ 0x245
 8019c26:	e7e3      	b.n	8019bf0 <__mdiff+0x28>
 8019c28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019c2c:	6926      	ldr	r6, [r4, #16]
 8019c2e:	60c5      	str	r5, [r0, #12]
 8019c30:	f109 0310 	add.w	r3, r9, #16
 8019c34:	f109 0514 	add.w	r5, r9, #20
 8019c38:	f104 0e14 	add.w	lr, r4, #20
 8019c3c:	f100 0b14 	add.w	fp, r0, #20
 8019c40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019c44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019c48:	9301      	str	r3, [sp, #4]
 8019c4a:	46d9      	mov	r9, fp
 8019c4c:	f04f 0c00 	mov.w	ip, #0
 8019c50:	9b01      	ldr	r3, [sp, #4]
 8019c52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019c56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8019c5a:	9301      	str	r3, [sp, #4]
 8019c5c:	fa1f f38a 	uxth.w	r3, sl
 8019c60:	4619      	mov	r1, r3
 8019c62:	b283      	uxth	r3, r0
 8019c64:	1acb      	subs	r3, r1, r3
 8019c66:	0c00      	lsrs	r0, r0, #16
 8019c68:	4463      	add	r3, ip
 8019c6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8019c6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8019c72:	b29b      	uxth	r3, r3
 8019c74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019c78:	4576      	cmp	r6, lr
 8019c7a:	f849 3b04 	str.w	r3, [r9], #4
 8019c7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019c82:	d8e5      	bhi.n	8019c50 <__mdiff+0x88>
 8019c84:	1b33      	subs	r3, r6, r4
 8019c86:	3b15      	subs	r3, #21
 8019c88:	f023 0303 	bic.w	r3, r3, #3
 8019c8c:	3415      	adds	r4, #21
 8019c8e:	3304      	adds	r3, #4
 8019c90:	42a6      	cmp	r6, r4
 8019c92:	bf38      	it	cc
 8019c94:	2304      	movcc	r3, #4
 8019c96:	441d      	add	r5, r3
 8019c98:	445b      	add	r3, fp
 8019c9a:	461e      	mov	r6, r3
 8019c9c:	462c      	mov	r4, r5
 8019c9e:	4544      	cmp	r4, r8
 8019ca0:	d30e      	bcc.n	8019cc0 <__mdiff+0xf8>
 8019ca2:	f108 0103 	add.w	r1, r8, #3
 8019ca6:	1b49      	subs	r1, r1, r5
 8019ca8:	f021 0103 	bic.w	r1, r1, #3
 8019cac:	3d03      	subs	r5, #3
 8019cae:	45a8      	cmp	r8, r5
 8019cb0:	bf38      	it	cc
 8019cb2:	2100      	movcc	r1, #0
 8019cb4:	440b      	add	r3, r1
 8019cb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019cba:	b191      	cbz	r1, 8019ce2 <__mdiff+0x11a>
 8019cbc:	6117      	str	r7, [r2, #16]
 8019cbe:	e79d      	b.n	8019bfc <__mdiff+0x34>
 8019cc0:	f854 1b04 	ldr.w	r1, [r4], #4
 8019cc4:	46e6      	mov	lr, ip
 8019cc6:	0c08      	lsrs	r0, r1, #16
 8019cc8:	fa1c fc81 	uxtah	ip, ip, r1
 8019ccc:	4471      	add	r1, lr
 8019cce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8019cd2:	b289      	uxth	r1, r1
 8019cd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019cd8:	f846 1b04 	str.w	r1, [r6], #4
 8019cdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019ce0:	e7dd      	b.n	8019c9e <__mdiff+0xd6>
 8019ce2:	3f01      	subs	r7, #1
 8019ce4:	e7e7      	b.n	8019cb6 <__mdiff+0xee>
 8019ce6:	bf00      	nop
 8019ce8:	0801c660 	.word	0x0801c660
 8019cec:	0801c671 	.word	0x0801c671

08019cf0 <__d2b>:
 8019cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019cf4:	460f      	mov	r7, r1
 8019cf6:	2101      	movs	r1, #1
 8019cf8:	ec59 8b10 	vmov	r8, r9, d0
 8019cfc:	4616      	mov	r6, r2
 8019cfe:	f7ff fcd5 	bl	80196ac <_Balloc>
 8019d02:	4604      	mov	r4, r0
 8019d04:	b930      	cbnz	r0, 8019d14 <__d2b+0x24>
 8019d06:	4602      	mov	r2, r0
 8019d08:	4b23      	ldr	r3, [pc, #140]	@ (8019d98 <__d2b+0xa8>)
 8019d0a:	4824      	ldr	r0, [pc, #144]	@ (8019d9c <__d2b+0xac>)
 8019d0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8019d10:	f000 fc4a 	bl	801a5a8 <__assert_func>
 8019d14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019d1c:	b10d      	cbz	r5, 8019d22 <__d2b+0x32>
 8019d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019d22:	9301      	str	r3, [sp, #4]
 8019d24:	f1b8 0300 	subs.w	r3, r8, #0
 8019d28:	d023      	beq.n	8019d72 <__d2b+0x82>
 8019d2a:	4668      	mov	r0, sp
 8019d2c:	9300      	str	r3, [sp, #0]
 8019d2e:	f7ff fd84 	bl	801983a <__lo0bits>
 8019d32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019d36:	b1d0      	cbz	r0, 8019d6e <__d2b+0x7e>
 8019d38:	f1c0 0320 	rsb	r3, r0, #32
 8019d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8019d40:	430b      	orrs	r3, r1
 8019d42:	40c2      	lsrs	r2, r0
 8019d44:	6163      	str	r3, [r4, #20]
 8019d46:	9201      	str	r2, [sp, #4]
 8019d48:	9b01      	ldr	r3, [sp, #4]
 8019d4a:	61a3      	str	r3, [r4, #24]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	bf0c      	ite	eq
 8019d50:	2201      	moveq	r2, #1
 8019d52:	2202      	movne	r2, #2
 8019d54:	6122      	str	r2, [r4, #16]
 8019d56:	b1a5      	cbz	r5, 8019d82 <__d2b+0x92>
 8019d58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019d5c:	4405      	add	r5, r0
 8019d5e:	603d      	str	r5, [r7, #0]
 8019d60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019d64:	6030      	str	r0, [r6, #0]
 8019d66:	4620      	mov	r0, r4
 8019d68:	b003      	add	sp, #12
 8019d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d6e:	6161      	str	r1, [r4, #20]
 8019d70:	e7ea      	b.n	8019d48 <__d2b+0x58>
 8019d72:	a801      	add	r0, sp, #4
 8019d74:	f7ff fd61 	bl	801983a <__lo0bits>
 8019d78:	9b01      	ldr	r3, [sp, #4]
 8019d7a:	6163      	str	r3, [r4, #20]
 8019d7c:	3020      	adds	r0, #32
 8019d7e:	2201      	movs	r2, #1
 8019d80:	e7e8      	b.n	8019d54 <__d2b+0x64>
 8019d82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019d86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019d8a:	6038      	str	r0, [r7, #0]
 8019d8c:	6918      	ldr	r0, [r3, #16]
 8019d8e:	f7ff fd35 	bl	80197fc <__hi0bits>
 8019d92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019d96:	e7e5      	b.n	8019d64 <__d2b+0x74>
 8019d98:	0801c660 	.word	0x0801c660
 8019d9c:	0801c671 	.word	0x0801c671

08019da0 <__ssputs_r>:
 8019da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019da4:	688e      	ldr	r6, [r1, #8]
 8019da6:	461f      	mov	r7, r3
 8019da8:	42be      	cmp	r6, r7
 8019daa:	680b      	ldr	r3, [r1, #0]
 8019dac:	4682      	mov	sl, r0
 8019dae:	460c      	mov	r4, r1
 8019db0:	4690      	mov	r8, r2
 8019db2:	d82d      	bhi.n	8019e10 <__ssputs_r+0x70>
 8019db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019db8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019dbc:	d026      	beq.n	8019e0c <__ssputs_r+0x6c>
 8019dbe:	6965      	ldr	r5, [r4, #20]
 8019dc0:	6909      	ldr	r1, [r1, #16]
 8019dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019dc6:	eba3 0901 	sub.w	r9, r3, r1
 8019dca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019dce:	1c7b      	adds	r3, r7, #1
 8019dd0:	444b      	add	r3, r9
 8019dd2:	106d      	asrs	r5, r5, #1
 8019dd4:	429d      	cmp	r5, r3
 8019dd6:	bf38      	it	cc
 8019dd8:	461d      	movcc	r5, r3
 8019dda:	0553      	lsls	r3, r2, #21
 8019ddc:	d527      	bpl.n	8019e2e <__ssputs_r+0x8e>
 8019dde:	4629      	mov	r1, r5
 8019de0:	f7ff fbd8 	bl	8019594 <_malloc_r>
 8019de4:	4606      	mov	r6, r0
 8019de6:	b360      	cbz	r0, 8019e42 <__ssputs_r+0xa2>
 8019de8:	6921      	ldr	r1, [r4, #16]
 8019dea:	464a      	mov	r2, r9
 8019dec:	f7fe fd69 	bl	80188c2 <memcpy>
 8019df0:	89a3      	ldrh	r3, [r4, #12]
 8019df2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019dfa:	81a3      	strh	r3, [r4, #12]
 8019dfc:	6126      	str	r6, [r4, #16]
 8019dfe:	6165      	str	r5, [r4, #20]
 8019e00:	444e      	add	r6, r9
 8019e02:	eba5 0509 	sub.w	r5, r5, r9
 8019e06:	6026      	str	r6, [r4, #0]
 8019e08:	60a5      	str	r5, [r4, #8]
 8019e0a:	463e      	mov	r6, r7
 8019e0c:	42be      	cmp	r6, r7
 8019e0e:	d900      	bls.n	8019e12 <__ssputs_r+0x72>
 8019e10:	463e      	mov	r6, r7
 8019e12:	6820      	ldr	r0, [r4, #0]
 8019e14:	4632      	mov	r2, r6
 8019e16:	4641      	mov	r1, r8
 8019e18:	f000 fb9c 	bl	801a554 <memmove>
 8019e1c:	68a3      	ldr	r3, [r4, #8]
 8019e1e:	1b9b      	subs	r3, r3, r6
 8019e20:	60a3      	str	r3, [r4, #8]
 8019e22:	6823      	ldr	r3, [r4, #0]
 8019e24:	4433      	add	r3, r6
 8019e26:	6023      	str	r3, [r4, #0]
 8019e28:	2000      	movs	r0, #0
 8019e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e2e:	462a      	mov	r2, r5
 8019e30:	f000 fbfe 	bl	801a630 <_realloc_r>
 8019e34:	4606      	mov	r6, r0
 8019e36:	2800      	cmp	r0, #0
 8019e38:	d1e0      	bne.n	8019dfc <__ssputs_r+0x5c>
 8019e3a:	6921      	ldr	r1, [r4, #16]
 8019e3c:	4650      	mov	r0, sl
 8019e3e:	f7ff fb35 	bl	80194ac <_free_r>
 8019e42:	230c      	movs	r3, #12
 8019e44:	f8ca 3000 	str.w	r3, [sl]
 8019e48:	89a3      	ldrh	r3, [r4, #12]
 8019e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e4e:	81a3      	strh	r3, [r4, #12]
 8019e50:	f04f 30ff 	mov.w	r0, #4294967295
 8019e54:	e7e9      	b.n	8019e2a <__ssputs_r+0x8a>
	...

08019e58 <_svfiprintf_r>:
 8019e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e5c:	4698      	mov	r8, r3
 8019e5e:	898b      	ldrh	r3, [r1, #12]
 8019e60:	061b      	lsls	r3, r3, #24
 8019e62:	b09d      	sub	sp, #116	@ 0x74
 8019e64:	4607      	mov	r7, r0
 8019e66:	460d      	mov	r5, r1
 8019e68:	4614      	mov	r4, r2
 8019e6a:	d510      	bpl.n	8019e8e <_svfiprintf_r+0x36>
 8019e6c:	690b      	ldr	r3, [r1, #16]
 8019e6e:	b973      	cbnz	r3, 8019e8e <_svfiprintf_r+0x36>
 8019e70:	2140      	movs	r1, #64	@ 0x40
 8019e72:	f7ff fb8f 	bl	8019594 <_malloc_r>
 8019e76:	6028      	str	r0, [r5, #0]
 8019e78:	6128      	str	r0, [r5, #16]
 8019e7a:	b930      	cbnz	r0, 8019e8a <_svfiprintf_r+0x32>
 8019e7c:	230c      	movs	r3, #12
 8019e7e:	603b      	str	r3, [r7, #0]
 8019e80:	f04f 30ff 	mov.w	r0, #4294967295
 8019e84:	b01d      	add	sp, #116	@ 0x74
 8019e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e8a:	2340      	movs	r3, #64	@ 0x40
 8019e8c:	616b      	str	r3, [r5, #20]
 8019e8e:	2300      	movs	r3, #0
 8019e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e92:	2320      	movs	r3, #32
 8019e94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e9c:	2330      	movs	r3, #48	@ 0x30
 8019e9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a03c <_svfiprintf_r+0x1e4>
 8019ea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019ea6:	f04f 0901 	mov.w	r9, #1
 8019eaa:	4623      	mov	r3, r4
 8019eac:	469a      	mov	sl, r3
 8019eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019eb2:	b10a      	cbz	r2, 8019eb8 <_svfiprintf_r+0x60>
 8019eb4:	2a25      	cmp	r2, #37	@ 0x25
 8019eb6:	d1f9      	bne.n	8019eac <_svfiprintf_r+0x54>
 8019eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8019ebc:	d00b      	beq.n	8019ed6 <_svfiprintf_r+0x7e>
 8019ebe:	465b      	mov	r3, fp
 8019ec0:	4622      	mov	r2, r4
 8019ec2:	4629      	mov	r1, r5
 8019ec4:	4638      	mov	r0, r7
 8019ec6:	f7ff ff6b 	bl	8019da0 <__ssputs_r>
 8019eca:	3001      	adds	r0, #1
 8019ecc:	f000 80a7 	beq.w	801a01e <_svfiprintf_r+0x1c6>
 8019ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ed2:	445a      	add	r2, fp
 8019ed4:	9209      	str	r2, [sp, #36]	@ 0x24
 8019ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	f000 809f 	beq.w	801a01e <_svfiprintf_r+0x1c6>
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8019ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019eea:	f10a 0a01 	add.w	sl, sl, #1
 8019eee:	9304      	str	r3, [sp, #16]
 8019ef0:	9307      	str	r3, [sp, #28]
 8019ef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019ef6:	931a      	str	r3, [sp, #104]	@ 0x68
 8019ef8:	4654      	mov	r4, sl
 8019efa:	2205      	movs	r2, #5
 8019efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f00:	484e      	ldr	r0, [pc, #312]	@ (801a03c <_svfiprintf_r+0x1e4>)
 8019f02:	f7e6 fa05 	bl	8000310 <memchr>
 8019f06:	9a04      	ldr	r2, [sp, #16]
 8019f08:	b9d8      	cbnz	r0, 8019f42 <_svfiprintf_r+0xea>
 8019f0a:	06d0      	lsls	r0, r2, #27
 8019f0c:	bf44      	itt	mi
 8019f0e:	2320      	movmi	r3, #32
 8019f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f14:	0711      	lsls	r1, r2, #28
 8019f16:	bf44      	itt	mi
 8019f18:	232b      	movmi	r3, #43	@ 0x2b
 8019f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8019f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f24:	d015      	beq.n	8019f52 <_svfiprintf_r+0xfa>
 8019f26:	9a07      	ldr	r2, [sp, #28]
 8019f28:	4654      	mov	r4, sl
 8019f2a:	2000      	movs	r0, #0
 8019f2c:	f04f 0c0a 	mov.w	ip, #10
 8019f30:	4621      	mov	r1, r4
 8019f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f36:	3b30      	subs	r3, #48	@ 0x30
 8019f38:	2b09      	cmp	r3, #9
 8019f3a:	d94b      	bls.n	8019fd4 <_svfiprintf_r+0x17c>
 8019f3c:	b1b0      	cbz	r0, 8019f6c <_svfiprintf_r+0x114>
 8019f3e:	9207      	str	r2, [sp, #28]
 8019f40:	e014      	b.n	8019f6c <_svfiprintf_r+0x114>
 8019f42:	eba0 0308 	sub.w	r3, r0, r8
 8019f46:	fa09 f303 	lsl.w	r3, r9, r3
 8019f4a:	4313      	orrs	r3, r2
 8019f4c:	9304      	str	r3, [sp, #16]
 8019f4e:	46a2      	mov	sl, r4
 8019f50:	e7d2      	b.n	8019ef8 <_svfiprintf_r+0xa0>
 8019f52:	9b03      	ldr	r3, [sp, #12]
 8019f54:	1d19      	adds	r1, r3, #4
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	9103      	str	r1, [sp, #12]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	bfbb      	ittet	lt
 8019f5e:	425b      	neglt	r3, r3
 8019f60:	f042 0202 	orrlt.w	r2, r2, #2
 8019f64:	9307      	strge	r3, [sp, #28]
 8019f66:	9307      	strlt	r3, [sp, #28]
 8019f68:	bfb8      	it	lt
 8019f6a:	9204      	strlt	r2, [sp, #16]
 8019f6c:	7823      	ldrb	r3, [r4, #0]
 8019f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019f70:	d10a      	bne.n	8019f88 <_svfiprintf_r+0x130>
 8019f72:	7863      	ldrb	r3, [r4, #1]
 8019f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f76:	d132      	bne.n	8019fde <_svfiprintf_r+0x186>
 8019f78:	9b03      	ldr	r3, [sp, #12]
 8019f7a:	1d1a      	adds	r2, r3, #4
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	9203      	str	r2, [sp, #12]
 8019f80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019f84:	3402      	adds	r4, #2
 8019f86:	9305      	str	r3, [sp, #20]
 8019f88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a04c <_svfiprintf_r+0x1f4>
 8019f8c:	7821      	ldrb	r1, [r4, #0]
 8019f8e:	2203      	movs	r2, #3
 8019f90:	4650      	mov	r0, sl
 8019f92:	f7e6 f9bd 	bl	8000310 <memchr>
 8019f96:	b138      	cbz	r0, 8019fa8 <_svfiprintf_r+0x150>
 8019f98:	9b04      	ldr	r3, [sp, #16]
 8019f9a:	eba0 000a 	sub.w	r0, r0, sl
 8019f9e:	2240      	movs	r2, #64	@ 0x40
 8019fa0:	4082      	lsls	r2, r0
 8019fa2:	4313      	orrs	r3, r2
 8019fa4:	3401      	adds	r4, #1
 8019fa6:	9304      	str	r3, [sp, #16]
 8019fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fac:	4824      	ldr	r0, [pc, #144]	@ (801a040 <_svfiprintf_r+0x1e8>)
 8019fae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019fb2:	2206      	movs	r2, #6
 8019fb4:	f7e6 f9ac 	bl	8000310 <memchr>
 8019fb8:	2800      	cmp	r0, #0
 8019fba:	d036      	beq.n	801a02a <_svfiprintf_r+0x1d2>
 8019fbc:	4b21      	ldr	r3, [pc, #132]	@ (801a044 <_svfiprintf_r+0x1ec>)
 8019fbe:	bb1b      	cbnz	r3, 801a008 <_svfiprintf_r+0x1b0>
 8019fc0:	9b03      	ldr	r3, [sp, #12]
 8019fc2:	3307      	adds	r3, #7
 8019fc4:	f023 0307 	bic.w	r3, r3, #7
 8019fc8:	3308      	adds	r3, #8
 8019fca:	9303      	str	r3, [sp, #12]
 8019fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019fce:	4433      	add	r3, r6
 8019fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8019fd2:	e76a      	b.n	8019eaa <_svfiprintf_r+0x52>
 8019fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8019fd8:	460c      	mov	r4, r1
 8019fda:	2001      	movs	r0, #1
 8019fdc:	e7a8      	b.n	8019f30 <_svfiprintf_r+0xd8>
 8019fde:	2300      	movs	r3, #0
 8019fe0:	3401      	adds	r4, #1
 8019fe2:	9305      	str	r3, [sp, #20]
 8019fe4:	4619      	mov	r1, r3
 8019fe6:	f04f 0c0a 	mov.w	ip, #10
 8019fea:	4620      	mov	r0, r4
 8019fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ff0:	3a30      	subs	r2, #48	@ 0x30
 8019ff2:	2a09      	cmp	r2, #9
 8019ff4:	d903      	bls.n	8019ffe <_svfiprintf_r+0x1a6>
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d0c6      	beq.n	8019f88 <_svfiprintf_r+0x130>
 8019ffa:	9105      	str	r1, [sp, #20]
 8019ffc:	e7c4      	b.n	8019f88 <_svfiprintf_r+0x130>
 8019ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 801a002:	4604      	mov	r4, r0
 801a004:	2301      	movs	r3, #1
 801a006:	e7f0      	b.n	8019fea <_svfiprintf_r+0x192>
 801a008:	ab03      	add	r3, sp, #12
 801a00a:	9300      	str	r3, [sp, #0]
 801a00c:	462a      	mov	r2, r5
 801a00e:	4b0e      	ldr	r3, [pc, #56]	@ (801a048 <_svfiprintf_r+0x1f0>)
 801a010:	a904      	add	r1, sp, #16
 801a012:	4638      	mov	r0, r7
 801a014:	f7fd ff08 	bl	8017e28 <_printf_float>
 801a018:	1c42      	adds	r2, r0, #1
 801a01a:	4606      	mov	r6, r0
 801a01c:	d1d6      	bne.n	8019fcc <_svfiprintf_r+0x174>
 801a01e:	89ab      	ldrh	r3, [r5, #12]
 801a020:	065b      	lsls	r3, r3, #25
 801a022:	f53f af2d 	bmi.w	8019e80 <_svfiprintf_r+0x28>
 801a026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a028:	e72c      	b.n	8019e84 <_svfiprintf_r+0x2c>
 801a02a:	ab03      	add	r3, sp, #12
 801a02c:	9300      	str	r3, [sp, #0]
 801a02e:	462a      	mov	r2, r5
 801a030:	4b05      	ldr	r3, [pc, #20]	@ (801a048 <_svfiprintf_r+0x1f0>)
 801a032:	a904      	add	r1, sp, #16
 801a034:	4638      	mov	r0, r7
 801a036:	f7fe f97f 	bl	8018338 <_printf_i>
 801a03a:	e7ed      	b.n	801a018 <_svfiprintf_r+0x1c0>
 801a03c:	0801c6ca 	.word	0x0801c6ca
 801a040:	0801c6d4 	.word	0x0801c6d4
 801a044:	08017e29 	.word	0x08017e29
 801a048:	08019da1 	.word	0x08019da1
 801a04c:	0801c6d0 	.word	0x0801c6d0

0801a050 <__sfputc_r>:
 801a050:	6893      	ldr	r3, [r2, #8]
 801a052:	3b01      	subs	r3, #1
 801a054:	2b00      	cmp	r3, #0
 801a056:	b410      	push	{r4}
 801a058:	6093      	str	r3, [r2, #8]
 801a05a:	da08      	bge.n	801a06e <__sfputc_r+0x1e>
 801a05c:	6994      	ldr	r4, [r2, #24]
 801a05e:	42a3      	cmp	r3, r4
 801a060:	db01      	blt.n	801a066 <__sfputc_r+0x16>
 801a062:	290a      	cmp	r1, #10
 801a064:	d103      	bne.n	801a06e <__sfputc_r+0x1e>
 801a066:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a06a:	f000 b9df 	b.w	801a42c <__swbuf_r>
 801a06e:	6813      	ldr	r3, [r2, #0]
 801a070:	1c58      	adds	r0, r3, #1
 801a072:	6010      	str	r0, [r2, #0]
 801a074:	7019      	strb	r1, [r3, #0]
 801a076:	4608      	mov	r0, r1
 801a078:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a07c:	4770      	bx	lr

0801a07e <__sfputs_r>:
 801a07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a080:	4606      	mov	r6, r0
 801a082:	460f      	mov	r7, r1
 801a084:	4614      	mov	r4, r2
 801a086:	18d5      	adds	r5, r2, r3
 801a088:	42ac      	cmp	r4, r5
 801a08a:	d101      	bne.n	801a090 <__sfputs_r+0x12>
 801a08c:	2000      	movs	r0, #0
 801a08e:	e007      	b.n	801a0a0 <__sfputs_r+0x22>
 801a090:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a094:	463a      	mov	r2, r7
 801a096:	4630      	mov	r0, r6
 801a098:	f7ff ffda 	bl	801a050 <__sfputc_r>
 801a09c:	1c43      	adds	r3, r0, #1
 801a09e:	d1f3      	bne.n	801a088 <__sfputs_r+0xa>
 801a0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a0a4 <_vfiprintf_r>:
 801a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0a8:	460d      	mov	r5, r1
 801a0aa:	b09d      	sub	sp, #116	@ 0x74
 801a0ac:	4614      	mov	r4, r2
 801a0ae:	4698      	mov	r8, r3
 801a0b0:	4606      	mov	r6, r0
 801a0b2:	b118      	cbz	r0, 801a0bc <_vfiprintf_r+0x18>
 801a0b4:	6a03      	ldr	r3, [r0, #32]
 801a0b6:	b90b      	cbnz	r3, 801a0bc <_vfiprintf_r+0x18>
 801a0b8:	f7fe fae8 	bl	801868c <__sinit>
 801a0bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a0be:	07d9      	lsls	r1, r3, #31
 801a0c0:	d405      	bmi.n	801a0ce <_vfiprintf_r+0x2a>
 801a0c2:	89ab      	ldrh	r3, [r5, #12]
 801a0c4:	059a      	lsls	r2, r3, #22
 801a0c6:	d402      	bmi.n	801a0ce <_vfiprintf_r+0x2a>
 801a0c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a0ca:	f7fe fbf8 	bl	80188be <__retarget_lock_acquire_recursive>
 801a0ce:	89ab      	ldrh	r3, [r5, #12]
 801a0d0:	071b      	lsls	r3, r3, #28
 801a0d2:	d501      	bpl.n	801a0d8 <_vfiprintf_r+0x34>
 801a0d4:	692b      	ldr	r3, [r5, #16]
 801a0d6:	b99b      	cbnz	r3, 801a100 <_vfiprintf_r+0x5c>
 801a0d8:	4629      	mov	r1, r5
 801a0da:	4630      	mov	r0, r6
 801a0dc:	f000 f9e4 	bl	801a4a8 <__swsetup_r>
 801a0e0:	b170      	cbz	r0, 801a100 <_vfiprintf_r+0x5c>
 801a0e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a0e4:	07dc      	lsls	r4, r3, #31
 801a0e6:	d504      	bpl.n	801a0f2 <_vfiprintf_r+0x4e>
 801a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a0ec:	b01d      	add	sp, #116	@ 0x74
 801a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0f2:	89ab      	ldrh	r3, [r5, #12]
 801a0f4:	0598      	lsls	r0, r3, #22
 801a0f6:	d4f7      	bmi.n	801a0e8 <_vfiprintf_r+0x44>
 801a0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a0fa:	f7fe fbe1 	bl	80188c0 <__retarget_lock_release_recursive>
 801a0fe:	e7f3      	b.n	801a0e8 <_vfiprintf_r+0x44>
 801a100:	2300      	movs	r3, #0
 801a102:	9309      	str	r3, [sp, #36]	@ 0x24
 801a104:	2320      	movs	r3, #32
 801a106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a10a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a10e:	2330      	movs	r3, #48	@ 0x30
 801a110:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a2c0 <_vfiprintf_r+0x21c>
 801a114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a118:	f04f 0901 	mov.w	r9, #1
 801a11c:	4623      	mov	r3, r4
 801a11e:	469a      	mov	sl, r3
 801a120:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a124:	b10a      	cbz	r2, 801a12a <_vfiprintf_r+0x86>
 801a126:	2a25      	cmp	r2, #37	@ 0x25
 801a128:	d1f9      	bne.n	801a11e <_vfiprintf_r+0x7a>
 801a12a:	ebba 0b04 	subs.w	fp, sl, r4
 801a12e:	d00b      	beq.n	801a148 <_vfiprintf_r+0xa4>
 801a130:	465b      	mov	r3, fp
 801a132:	4622      	mov	r2, r4
 801a134:	4629      	mov	r1, r5
 801a136:	4630      	mov	r0, r6
 801a138:	f7ff ffa1 	bl	801a07e <__sfputs_r>
 801a13c:	3001      	adds	r0, #1
 801a13e:	f000 80a7 	beq.w	801a290 <_vfiprintf_r+0x1ec>
 801a142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a144:	445a      	add	r2, fp
 801a146:	9209      	str	r2, [sp, #36]	@ 0x24
 801a148:	f89a 3000 	ldrb.w	r3, [sl]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	f000 809f 	beq.w	801a290 <_vfiprintf_r+0x1ec>
 801a152:	2300      	movs	r3, #0
 801a154:	f04f 32ff 	mov.w	r2, #4294967295
 801a158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a15c:	f10a 0a01 	add.w	sl, sl, #1
 801a160:	9304      	str	r3, [sp, #16]
 801a162:	9307      	str	r3, [sp, #28]
 801a164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a168:	931a      	str	r3, [sp, #104]	@ 0x68
 801a16a:	4654      	mov	r4, sl
 801a16c:	2205      	movs	r2, #5
 801a16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a172:	4853      	ldr	r0, [pc, #332]	@ (801a2c0 <_vfiprintf_r+0x21c>)
 801a174:	f7e6 f8cc 	bl	8000310 <memchr>
 801a178:	9a04      	ldr	r2, [sp, #16]
 801a17a:	b9d8      	cbnz	r0, 801a1b4 <_vfiprintf_r+0x110>
 801a17c:	06d1      	lsls	r1, r2, #27
 801a17e:	bf44      	itt	mi
 801a180:	2320      	movmi	r3, #32
 801a182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a186:	0713      	lsls	r3, r2, #28
 801a188:	bf44      	itt	mi
 801a18a:	232b      	movmi	r3, #43	@ 0x2b
 801a18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a190:	f89a 3000 	ldrb.w	r3, [sl]
 801a194:	2b2a      	cmp	r3, #42	@ 0x2a
 801a196:	d015      	beq.n	801a1c4 <_vfiprintf_r+0x120>
 801a198:	9a07      	ldr	r2, [sp, #28]
 801a19a:	4654      	mov	r4, sl
 801a19c:	2000      	movs	r0, #0
 801a19e:	f04f 0c0a 	mov.w	ip, #10
 801a1a2:	4621      	mov	r1, r4
 801a1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a1a8:	3b30      	subs	r3, #48	@ 0x30
 801a1aa:	2b09      	cmp	r3, #9
 801a1ac:	d94b      	bls.n	801a246 <_vfiprintf_r+0x1a2>
 801a1ae:	b1b0      	cbz	r0, 801a1de <_vfiprintf_r+0x13a>
 801a1b0:	9207      	str	r2, [sp, #28]
 801a1b2:	e014      	b.n	801a1de <_vfiprintf_r+0x13a>
 801a1b4:	eba0 0308 	sub.w	r3, r0, r8
 801a1b8:	fa09 f303 	lsl.w	r3, r9, r3
 801a1bc:	4313      	orrs	r3, r2
 801a1be:	9304      	str	r3, [sp, #16]
 801a1c0:	46a2      	mov	sl, r4
 801a1c2:	e7d2      	b.n	801a16a <_vfiprintf_r+0xc6>
 801a1c4:	9b03      	ldr	r3, [sp, #12]
 801a1c6:	1d19      	adds	r1, r3, #4
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	9103      	str	r1, [sp, #12]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	bfbb      	ittet	lt
 801a1d0:	425b      	neglt	r3, r3
 801a1d2:	f042 0202 	orrlt.w	r2, r2, #2
 801a1d6:	9307      	strge	r3, [sp, #28]
 801a1d8:	9307      	strlt	r3, [sp, #28]
 801a1da:	bfb8      	it	lt
 801a1dc:	9204      	strlt	r2, [sp, #16]
 801a1de:	7823      	ldrb	r3, [r4, #0]
 801a1e0:	2b2e      	cmp	r3, #46	@ 0x2e
 801a1e2:	d10a      	bne.n	801a1fa <_vfiprintf_r+0x156>
 801a1e4:	7863      	ldrb	r3, [r4, #1]
 801a1e6:	2b2a      	cmp	r3, #42	@ 0x2a
 801a1e8:	d132      	bne.n	801a250 <_vfiprintf_r+0x1ac>
 801a1ea:	9b03      	ldr	r3, [sp, #12]
 801a1ec:	1d1a      	adds	r2, r3, #4
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	9203      	str	r2, [sp, #12]
 801a1f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a1f6:	3402      	adds	r4, #2
 801a1f8:	9305      	str	r3, [sp, #20]
 801a1fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a2d0 <_vfiprintf_r+0x22c>
 801a1fe:	7821      	ldrb	r1, [r4, #0]
 801a200:	2203      	movs	r2, #3
 801a202:	4650      	mov	r0, sl
 801a204:	f7e6 f884 	bl	8000310 <memchr>
 801a208:	b138      	cbz	r0, 801a21a <_vfiprintf_r+0x176>
 801a20a:	9b04      	ldr	r3, [sp, #16]
 801a20c:	eba0 000a 	sub.w	r0, r0, sl
 801a210:	2240      	movs	r2, #64	@ 0x40
 801a212:	4082      	lsls	r2, r0
 801a214:	4313      	orrs	r3, r2
 801a216:	3401      	adds	r4, #1
 801a218:	9304      	str	r3, [sp, #16]
 801a21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a21e:	4829      	ldr	r0, [pc, #164]	@ (801a2c4 <_vfiprintf_r+0x220>)
 801a220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a224:	2206      	movs	r2, #6
 801a226:	f7e6 f873 	bl	8000310 <memchr>
 801a22a:	2800      	cmp	r0, #0
 801a22c:	d03f      	beq.n	801a2ae <_vfiprintf_r+0x20a>
 801a22e:	4b26      	ldr	r3, [pc, #152]	@ (801a2c8 <_vfiprintf_r+0x224>)
 801a230:	bb1b      	cbnz	r3, 801a27a <_vfiprintf_r+0x1d6>
 801a232:	9b03      	ldr	r3, [sp, #12]
 801a234:	3307      	adds	r3, #7
 801a236:	f023 0307 	bic.w	r3, r3, #7
 801a23a:	3308      	adds	r3, #8
 801a23c:	9303      	str	r3, [sp, #12]
 801a23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a240:	443b      	add	r3, r7
 801a242:	9309      	str	r3, [sp, #36]	@ 0x24
 801a244:	e76a      	b.n	801a11c <_vfiprintf_r+0x78>
 801a246:	fb0c 3202 	mla	r2, ip, r2, r3
 801a24a:	460c      	mov	r4, r1
 801a24c:	2001      	movs	r0, #1
 801a24e:	e7a8      	b.n	801a1a2 <_vfiprintf_r+0xfe>
 801a250:	2300      	movs	r3, #0
 801a252:	3401      	adds	r4, #1
 801a254:	9305      	str	r3, [sp, #20]
 801a256:	4619      	mov	r1, r3
 801a258:	f04f 0c0a 	mov.w	ip, #10
 801a25c:	4620      	mov	r0, r4
 801a25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a262:	3a30      	subs	r2, #48	@ 0x30
 801a264:	2a09      	cmp	r2, #9
 801a266:	d903      	bls.n	801a270 <_vfiprintf_r+0x1cc>
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d0c6      	beq.n	801a1fa <_vfiprintf_r+0x156>
 801a26c:	9105      	str	r1, [sp, #20]
 801a26e:	e7c4      	b.n	801a1fa <_vfiprintf_r+0x156>
 801a270:	fb0c 2101 	mla	r1, ip, r1, r2
 801a274:	4604      	mov	r4, r0
 801a276:	2301      	movs	r3, #1
 801a278:	e7f0      	b.n	801a25c <_vfiprintf_r+0x1b8>
 801a27a:	ab03      	add	r3, sp, #12
 801a27c:	9300      	str	r3, [sp, #0]
 801a27e:	462a      	mov	r2, r5
 801a280:	4b12      	ldr	r3, [pc, #72]	@ (801a2cc <_vfiprintf_r+0x228>)
 801a282:	a904      	add	r1, sp, #16
 801a284:	4630      	mov	r0, r6
 801a286:	f7fd fdcf 	bl	8017e28 <_printf_float>
 801a28a:	4607      	mov	r7, r0
 801a28c:	1c78      	adds	r0, r7, #1
 801a28e:	d1d6      	bne.n	801a23e <_vfiprintf_r+0x19a>
 801a290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a292:	07d9      	lsls	r1, r3, #31
 801a294:	d405      	bmi.n	801a2a2 <_vfiprintf_r+0x1fe>
 801a296:	89ab      	ldrh	r3, [r5, #12]
 801a298:	059a      	lsls	r2, r3, #22
 801a29a:	d402      	bmi.n	801a2a2 <_vfiprintf_r+0x1fe>
 801a29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a29e:	f7fe fb0f 	bl	80188c0 <__retarget_lock_release_recursive>
 801a2a2:	89ab      	ldrh	r3, [r5, #12]
 801a2a4:	065b      	lsls	r3, r3, #25
 801a2a6:	f53f af1f 	bmi.w	801a0e8 <_vfiprintf_r+0x44>
 801a2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a2ac:	e71e      	b.n	801a0ec <_vfiprintf_r+0x48>
 801a2ae:	ab03      	add	r3, sp, #12
 801a2b0:	9300      	str	r3, [sp, #0]
 801a2b2:	462a      	mov	r2, r5
 801a2b4:	4b05      	ldr	r3, [pc, #20]	@ (801a2cc <_vfiprintf_r+0x228>)
 801a2b6:	a904      	add	r1, sp, #16
 801a2b8:	4630      	mov	r0, r6
 801a2ba:	f7fe f83d 	bl	8018338 <_printf_i>
 801a2be:	e7e4      	b.n	801a28a <_vfiprintf_r+0x1e6>
 801a2c0:	0801c6ca 	.word	0x0801c6ca
 801a2c4:	0801c6d4 	.word	0x0801c6d4
 801a2c8:	08017e29 	.word	0x08017e29
 801a2cc:	0801a07f 	.word	0x0801a07f
 801a2d0:	0801c6d0 	.word	0x0801c6d0

0801a2d4 <__sflush_r>:
 801a2d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2dc:	0716      	lsls	r6, r2, #28
 801a2de:	4605      	mov	r5, r0
 801a2e0:	460c      	mov	r4, r1
 801a2e2:	d454      	bmi.n	801a38e <__sflush_r+0xba>
 801a2e4:	684b      	ldr	r3, [r1, #4]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	dc02      	bgt.n	801a2f0 <__sflush_r+0x1c>
 801a2ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	dd48      	ble.n	801a382 <__sflush_r+0xae>
 801a2f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a2f2:	2e00      	cmp	r6, #0
 801a2f4:	d045      	beq.n	801a382 <__sflush_r+0xae>
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a2fc:	682f      	ldr	r7, [r5, #0]
 801a2fe:	6a21      	ldr	r1, [r4, #32]
 801a300:	602b      	str	r3, [r5, #0]
 801a302:	d030      	beq.n	801a366 <__sflush_r+0x92>
 801a304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a306:	89a3      	ldrh	r3, [r4, #12]
 801a308:	0759      	lsls	r1, r3, #29
 801a30a:	d505      	bpl.n	801a318 <__sflush_r+0x44>
 801a30c:	6863      	ldr	r3, [r4, #4]
 801a30e:	1ad2      	subs	r2, r2, r3
 801a310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a312:	b10b      	cbz	r3, 801a318 <__sflush_r+0x44>
 801a314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a316:	1ad2      	subs	r2, r2, r3
 801a318:	2300      	movs	r3, #0
 801a31a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a31c:	6a21      	ldr	r1, [r4, #32]
 801a31e:	4628      	mov	r0, r5
 801a320:	47b0      	blx	r6
 801a322:	1c43      	adds	r3, r0, #1
 801a324:	89a3      	ldrh	r3, [r4, #12]
 801a326:	d106      	bne.n	801a336 <__sflush_r+0x62>
 801a328:	6829      	ldr	r1, [r5, #0]
 801a32a:	291d      	cmp	r1, #29
 801a32c:	d82b      	bhi.n	801a386 <__sflush_r+0xb2>
 801a32e:	4a2a      	ldr	r2, [pc, #168]	@ (801a3d8 <__sflush_r+0x104>)
 801a330:	40ca      	lsrs	r2, r1
 801a332:	07d6      	lsls	r6, r2, #31
 801a334:	d527      	bpl.n	801a386 <__sflush_r+0xb2>
 801a336:	2200      	movs	r2, #0
 801a338:	6062      	str	r2, [r4, #4]
 801a33a:	04d9      	lsls	r1, r3, #19
 801a33c:	6922      	ldr	r2, [r4, #16]
 801a33e:	6022      	str	r2, [r4, #0]
 801a340:	d504      	bpl.n	801a34c <__sflush_r+0x78>
 801a342:	1c42      	adds	r2, r0, #1
 801a344:	d101      	bne.n	801a34a <__sflush_r+0x76>
 801a346:	682b      	ldr	r3, [r5, #0]
 801a348:	b903      	cbnz	r3, 801a34c <__sflush_r+0x78>
 801a34a:	6560      	str	r0, [r4, #84]	@ 0x54
 801a34c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a34e:	602f      	str	r7, [r5, #0]
 801a350:	b1b9      	cbz	r1, 801a382 <__sflush_r+0xae>
 801a352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a356:	4299      	cmp	r1, r3
 801a358:	d002      	beq.n	801a360 <__sflush_r+0x8c>
 801a35a:	4628      	mov	r0, r5
 801a35c:	f7ff f8a6 	bl	80194ac <_free_r>
 801a360:	2300      	movs	r3, #0
 801a362:	6363      	str	r3, [r4, #52]	@ 0x34
 801a364:	e00d      	b.n	801a382 <__sflush_r+0xae>
 801a366:	2301      	movs	r3, #1
 801a368:	4628      	mov	r0, r5
 801a36a:	47b0      	blx	r6
 801a36c:	4602      	mov	r2, r0
 801a36e:	1c50      	adds	r0, r2, #1
 801a370:	d1c9      	bne.n	801a306 <__sflush_r+0x32>
 801a372:	682b      	ldr	r3, [r5, #0]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d0c6      	beq.n	801a306 <__sflush_r+0x32>
 801a378:	2b1d      	cmp	r3, #29
 801a37a:	d001      	beq.n	801a380 <__sflush_r+0xac>
 801a37c:	2b16      	cmp	r3, #22
 801a37e:	d11e      	bne.n	801a3be <__sflush_r+0xea>
 801a380:	602f      	str	r7, [r5, #0]
 801a382:	2000      	movs	r0, #0
 801a384:	e022      	b.n	801a3cc <__sflush_r+0xf8>
 801a386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a38a:	b21b      	sxth	r3, r3
 801a38c:	e01b      	b.n	801a3c6 <__sflush_r+0xf2>
 801a38e:	690f      	ldr	r7, [r1, #16]
 801a390:	2f00      	cmp	r7, #0
 801a392:	d0f6      	beq.n	801a382 <__sflush_r+0xae>
 801a394:	0793      	lsls	r3, r2, #30
 801a396:	680e      	ldr	r6, [r1, #0]
 801a398:	bf08      	it	eq
 801a39a:	694b      	ldreq	r3, [r1, #20]
 801a39c:	600f      	str	r7, [r1, #0]
 801a39e:	bf18      	it	ne
 801a3a0:	2300      	movne	r3, #0
 801a3a2:	eba6 0807 	sub.w	r8, r6, r7
 801a3a6:	608b      	str	r3, [r1, #8]
 801a3a8:	f1b8 0f00 	cmp.w	r8, #0
 801a3ac:	dde9      	ble.n	801a382 <__sflush_r+0xae>
 801a3ae:	6a21      	ldr	r1, [r4, #32]
 801a3b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a3b2:	4643      	mov	r3, r8
 801a3b4:	463a      	mov	r2, r7
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	47b0      	blx	r6
 801a3ba:	2800      	cmp	r0, #0
 801a3bc:	dc08      	bgt.n	801a3d0 <__sflush_r+0xfc>
 801a3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3c6:	81a3      	strh	r3, [r4, #12]
 801a3c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3d0:	4407      	add	r7, r0
 801a3d2:	eba8 0800 	sub.w	r8, r8, r0
 801a3d6:	e7e7      	b.n	801a3a8 <__sflush_r+0xd4>
 801a3d8:	20400001 	.word	0x20400001

0801a3dc <_fflush_r>:
 801a3dc:	b538      	push	{r3, r4, r5, lr}
 801a3de:	690b      	ldr	r3, [r1, #16]
 801a3e0:	4605      	mov	r5, r0
 801a3e2:	460c      	mov	r4, r1
 801a3e4:	b913      	cbnz	r3, 801a3ec <_fflush_r+0x10>
 801a3e6:	2500      	movs	r5, #0
 801a3e8:	4628      	mov	r0, r5
 801a3ea:	bd38      	pop	{r3, r4, r5, pc}
 801a3ec:	b118      	cbz	r0, 801a3f6 <_fflush_r+0x1a>
 801a3ee:	6a03      	ldr	r3, [r0, #32]
 801a3f0:	b90b      	cbnz	r3, 801a3f6 <_fflush_r+0x1a>
 801a3f2:	f7fe f94b 	bl	801868c <__sinit>
 801a3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d0f3      	beq.n	801a3e6 <_fflush_r+0xa>
 801a3fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a400:	07d0      	lsls	r0, r2, #31
 801a402:	d404      	bmi.n	801a40e <_fflush_r+0x32>
 801a404:	0599      	lsls	r1, r3, #22
 801a406:	d402      	bmi.n	801a40e <_fflush_r+0x32>
 801a408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a40a:	f7fe fa58 	bl	80188be <__retarget_lock_acquire_recursive>
 801a40e:	4628      	mov	r0, r5
 801a410:	4621      	mov	r1, r4
 801a412:	f7ff ff5f 	bl	801a2d4 <__sflush_r>
 801a416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a418:	07da      	lsls	r2, r3, #31
 801a41a:	4605      	mov	r5, r0
 801a41c:	d4e4      	bmi.n	801a3e8 <_fflush_r+0xc>
 801a41e:	89a3      	ldrh	r3, [r4, #12]
 801a420:	059b      	lsls	r3, r3, #22
 801a422:	d4e1      	bmi.n	801a3e8 <_fflush_r+0xc>
 801a424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a426:	f7fe fa4b 	bl	80188c0 <__retarget_lock_release_recursive>
 801a42a:	e7dd      	b.n	801a3e8 <_fflush_r+0xc>

0801a42c <__swbuf_r>:
 801a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a42e:	460e      	mov	r6, r1
 801a430:	4614      	mov	r4, r2
 801a432:	4605      	mov	r5, r0
 801a434:	b118      	cbz	r0, 801a43e <__swbuf_r+0x12>
 801a436:	6a03      	ldr	r3, [r0, #32]
 801a438:	b90b      	cbnz	r3, 801a43e <__swbuf_r+0x12>
 801a43a:	f7fe f927 	bl	801868c <__sinit>
 801a43e:	69a3      	ldr	r3, [r4, #24]
 801a440:	60a3      	str	r3, [r4, #8]
 801a442:	89a3      	ldrh	r3, [r4, #12]
 801a444:	071a      	lsls	r2, r3, #28
 801a446:	d501      	bpl.n	801a44c <__swbuf_r+0x20>
 801a448:	6923      	ldr	r3, [r4, #16]
 801a44a:	b943      	cbnz	r3, 801a45e <__swbuf_r+0x32>
 801a44c:	4621      	mov	r1, r4
 801a44e:	4628      	mov	r0, r5
 801a450:	f000 f82a 	bl	801a4a8 <__swsetup_r>
 801a454:	b118      	cbz	r0, 801a45e <__swbuf_r+0x32>
 801a456:	f04f 37ff 	mov.w	r7, #4294967295
 801a45a:	4638      	mov	r0, r7
 801a45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a45e:	6823      	ldr	r3, [r4, #0]
 801a460:	6922      	ldr	r2, [r4, #16]
 801a462:	1a98      	subs	r0, r3, r2
 801a464:	6963      	ldr	r3, [r4, #20]
 801a466:	b2f6      	uxtb	r6, r6
 801a468:	4283      	cmp	r3, r0
 801a46a:	4637      	mov	r7, r6
 801a46c:	dc05      	bgt.n	801a47a <__swbuf_r+0x4e>
 801a46e:	4621      	mov	r1, r4
 801a470:	4628      	mov	r0, r5
 801a472:	f7ff ffb3 	bl	801a3dc <_fflush_r>
 801a476:	2800      	cmp	r0, #0
 801a478:	d1ed      	bne.n	801a456 <__swbuf_r+0x2a>
 801a47a:	68a3      	ldr	r3, [r4, #8]
 801a47c:	3b01      	subs	r3, #1
 801a47e:	60a3      	str	r3, [r4, #8]
 801a480:	6823      	ldr	r3, [r4, #0]
 801a482:	1c5a      	adds	r2, r3, #1
 801a484:	6022      	str	r2, [r4, #0]
 801a486:	701e      	strb	r6, [r3, #0]
 801a488:	6962      	ldr	r2, [r4, #20]
 801a48a:	1c43      	adds	r3, r0, #1
 801a48c:	429a      	cmp	r2, r3
 801a48e:	d004      	beq.n	801a49a <__swbuf_r+0x6e>
 801a490:	89a3      	ldrh	r3, [r4, #12]
 801a492:	07db      	lsls	r3, r3, #31
 801a494:	d5e1      	bpl.n	801a45a <__swbuf_r+0x2e>
 801a496:	2e0a      	cmp	r6, #10
 801a498:	d1df      	bne.n	801a45a <__swbuf_r+0x2e>
 801a49a:	4621      	mov	r1, r4
 801a49c:	4628      	mov	r0, r5
 801a49e:	f7ff ff9d 	bl	801a3dc <_fflush_r>
 801a4a2:	2800      	cmp	r0, #0
 801a4a4:	d0d9      	beq.n	801a45a <__swbuf_r+0x2e>
 801a4a6:	e7d6      	b.n	801a456 <__swbuf_r+0x2a>

0801a4a8 <__swsetup_r>:
 801a4a8:	b538      	push	{r3, r4, r5, lr}
 801a4aa:	4b29      	ldr	r3, [pc, #164]	@ (801a550 <__swsetup_r+0xa8>)
 801a4ac:	4605      	mov	r5, r0
 801a4ae:	6818      	ldr	r0, [r3, #0]
 801a4b0:	460c      	mov	r4, r1
 801a4b2:	b118      	cbz	r0, 801a4bc <__swsetup_r+0x14>
 801a4b4:	6a03      	ldr	r3, [r0, #32]
 801a4b6:	b90b      	cbnz	r3, 801a4bc <__swsetup_r+0x14>
 801a4b8:	f7fe f8e8 	bl	801868c <__sinit>
 801a4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4c0:	0719      	lsls	r1, r3, #28
 801a4c2:	d422      	bmi.n	801a50a <__swsetup_r+0x62>
 801a4c4:	06da      	lsls	r2, r3, #27
 801a4c6:	d407      	bmi.n	801a4d8 <__swsetup_r+0x30>
 801a4c8:	2209      	movs	r2, #9
 801a4ca:	602a      	str	r2, [r5, #0]
 801a4cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a4d0:	81a3      	strh	r3, [r4, #12]
 801a4d2:	f04f 30ff 	mov.w	r0, #4294967295
 801a4d6:	e033      	b.n	801a540 <__swsetup_r+0x98>
 801a4d8:	0758      	lsls	r0, r3, #29
 801a4da:	d512      	bpl.n	801a502 <__swsetup_r+0x5a>
 801a4dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a4de:	b141      	cbz	r1, 801a4f2 <__swsetup_r+0x4a>
 801a4e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a4e4:	4299      	cmp	r1, r3
 801a4e6:	d002      	beq.n	801a4ee <__swsetup_r+0x46>
 801a4e8:	4628      	mov	r0, r5
 801a4ea:	f7fe ffdf 	bl	80194ac <_free_r>
 801a4ee:	2300      	movs	r3, #0
 801a4f0:	6363      	str	r3, [r4, #52]	@ 0x34
 801a4f2:	89a3      	ldrh	r3, [r4, #12]
 801a4f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a4f8:	81a3      	strh	r3, [r4, #12]
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	6063      	str	r3, [r4, #4]
 801a4fe:	6923      	ldr	r3, [r4, #16]
 801a500:	6023      	str	r3, [r4, #0]
 801a502:	89a3      	ldrh	r3, [r4, #12]
 801a504:	f043 0308 	orr.w	r3, r3, #8
 801a508:	81a3      	strh	r3, [r4, #12]
 801a50a:	6923      	ldr	r3, [r4, #16]
 801a50c:	b94b      	cbnz	r3, 801a522 <__swsetup_r+0x7a>
 801a50e:	89a3      	ldrh	r3, [r4, #12]
 801a510:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a518:	d003      	beq.n	801a522 <__swsetup_r+0x7a>
 801a51a:	4621      	mov	r1, r4
 801a51c:	4628      	mov	r0, r5
 801a51e:	f000 f8fb 	bl	801a718 <__smakebuf_r>
 801a522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a526:	f013 0201 	ands.w	r2, r3, #1
 801a52a:	d00a      	beq.n	801a542 <__swsetup_r+0x9a>
 801a52c:	2200      	movs	r2, #0
 801a52e:	60a2      	str	r2, [r4, #8]
 801a530:	6962      	ldr	r2, [r4, #20]
 801a532:	4252      	negs	r2, r2
 801a534:	61a2      	str	r2, [r4, #24]
 801a536:	6922      	ldr	r2, [r4, #16]
 801a538:	b942      	cbnz	r2, 801a54c <__swsetup_r+0xa4>
 801a53a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a53e:	d1c5      	bne.n	801a4cc <__swsetup_r+0x24>
 801a540:	bd38      	pop	{r3, r4, r5, pc}
 801a542:	0799      	lsls	r1, r3, #30
 801a544:	bf58      	it	pl
 801a546:	6962      	ldrpl	r2, [r4, #20]
 801a548:	60a2      	str	r2, [r4, #8]
 801a54a:	e7f4      	b.n	801a536 <__swsetup_r+0x8e>
 801a54c:	2000      	movs	r0, #0
 801a54e:	e7f7      	b.n	801a540 <__swsetup_r+0x98>
 801a550:	24000170 	.word	0x24000170

0801a554 <memmove>:
 801a554:	4288      	cmp	r0, r1
 801a556:	b510      	push	{r4, lr}
 801a558:	eb01 0402 	add.w	r4, r1, r2
 801a55c:	d902      	bls.n	801a564 <memmove+0x10>
 801a55e:	4284      	cmp	r4, r0
 801a560:	4623      	mov	r3, r4
 801a562:	d807      	bhi.n	801a574 <memmove+0x20>
 801a564:	1e43      	subs	r3, r0, #1
 801a566:	42a1      	cmp	r1, r4
 801a568:	d008      	beq.n	801a57c <memmove+0x28>
 801a56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a56e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a572:	e7f8      	b.n	801a566 <memmove+0x12>
 801a574:	4402      	add	r2, r0
 801a576:	4601      	mov	r1, r0
 801a578:	428a      	cmp	r2, r1
 801a57a:	d100      	bne.n	801a57e <memmove+0x2a>
 801a57c:	bd10      	pop	{r4, pc}
 801a57e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a586:	e7f7      	b.n	801a578 <memmove+0x24>

0801a588 <_sbrk_r>:
 801a588:	b538      	push	{r3, r4, r5, lr}
 801a58a:	4d06      	ldr	r5, [pc, #24]	@ (801a5a4 <_sbrk_r+0x1c>)
 801a58c:	2300      	movs	r3, #0
 801a58e:	4604      	mov	r4, r0
 801a590:	4608      	mov	r0, r1
 801a592:	602b      	str	r3, [r5, #0]
 801a594:	f7e7 fc26 	bl	8001de4 <_sbrk>
 801a598:	1c43      	adds	r3, r0, #1
 801a59a:	d102      	bne.n	801a5a2 <_sbrk_r+0x1a>
 801a59c:	682b      	ldr	r3, [r5, #0]
 801a59e:	b103      	cbz	r3, 801a5a2 <_sbrk_r+0x1a>
 801a5a0:	6023      	str	r3, [r4, #0]
 801a5a2:	bd38      	pop	{r3, r4, r5, pc}
 801a5a4:	240019fc 	.word	0x240019fc

0801a5a8 <__assert_func>:
 801a5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a5aa:	4614      	mov	r4, r2
 801a5ac:	461a      	mov	r2, r3
 801a5ae:	4b09      	ldr	r3, [pc, #36]	@ (801a5d4 <__assert_func+0x2c>)
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	4605      	mov	r5, r0
 801a5b4:	68d8      	ldr	r0, [r3, #12]
 801a5b6:	b14c      	cbz	r4, 801a5cc <__assert_func+0x24>
 801a5b8:	4b07      	ldr	r3, [pc, #28]	@ (801a5d8 <__assert_func+0x30>)
 801a5ba:	9100      	str	r1, [sp, #0]
 801a5bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a5c0:	4906      	ldr	r1, [pc, #24]	@ (801a5dc <__assert_func+0x34>)
 801a5c2:	462b      	mov	r3, r5
 801a5c4:	f000 f870 	bl	801a6a8 <fiprintf>
 801a5c8:	f000 f904 	bl	801a7d4 <abort>
 801a5cc:	4b04      	ldr	r3, [pc, #16]	@ (801a5e0 <__assert_func+0x38>)
 801a5ce:	461c      	mov	r4, r3
 801a5d0:	e7f3      	b.n	801a5ba <__assert_func+0x12>
 801a5d2:	bf00      	nop
 801a5d4:	24000170 	.word	0x24000170
 801a5d8:	0801c6e5 	.word	0x0801c6e5
 801a5dc:	0801c6f2 	.word	0x0801c6f2
 801a5e0:	0801c720 	.word	0x0801c720

0801a5e4 <_calloc_r>:
 801a5e4:	b570      	push	{r4, r5, r6, lr}
 801a5e6:	fba1 5402 	umull	r5, r4, r1, r2
 801a5ea:	b934      	cbnz	r4, 801a5fa <_calloc_r+0x16>
 801a5ec:	4629      	mov	r1, r5
 801a5ee:	f7fe ffd1 	bl	8019594 <_malloc_r>
 801a5f2:	4606      	mov	r6, r0
 801a5f4:	b928      	cbnz	r0, 801a602 <_calloc_r+0x1e>
 801a5f6:	4630      	mov	r0, r6
 801a5f8:	bd70      	pop	{r4, r5, r6, pc}
 801a5fa:	220c      	movs	r2, #12
 801a5fc:	6002      	str	r2, [r0, #0]
 801a5fe:	2600      	movs	r6, #0
 801a600:	e7f9      	b.n	801a5f6 <_calloc_r+0x12>
 801a602:	462a      	mov	r2, r5
 801a604:	4621      	mov	r1, r4
 801a606:	f7fe f8dc 	bl	80187c2 <memset>
 801a60a:	e7f4      	b.n	801a5f6 <_calloc_r+0x12>

0801a60c <__ascii_mbtowc>:
 801a60c:	b082      	sub	sp, #8
 801a60e:	b901      	cbnz	r1, 801a612 <__ascii_mbtowc+0x6>
 801a610:	a901      	add	r1, sp, #4
 801a612:	b142      	cbz	r2, 801a626 <__ascii_mbtowc+0x1a>
 801a614:	b14b      	cbz	r3, 801a62a <__ascii_mbtowc+0x1e>
 801a616:	7813      	ldrb	r3, [r2, #0]
 801a618:	600b      	str	r3, [r1, #0]
 801a61a:	7812      	ldrb	r2, [r2, #0]
 801a61c:	1e10      	subs	r0, r2, #0
 801a61e:	bf18      	it	ne
 801a620:	2001      	movne	r0, #1
 801a622:	b002      	add	sp, #8
 801a624:	4770      	bx	lr
 801a626:	4610      	mov	r0, r2
 801a628:	e7fb      	b.n	801a622 <__ascii_mbtowc+0x16>
 801a62a:	f06f 0001 	mvn.w	r0, #1
 801a62e:	e7f8      	b.n	801a622 <__ascii_mbtowc+0x16>

0801a630 <_realloc_r>:
 801a630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a634:	4607      	mov	r7, r0
 801a636:	4614      	mov	r4, r2
 801a638:	460d      	mov	r5, r1
 801a63a:	b921      	cbnz	r1, 801a646 <_realloc_r+0x16>
 801a63c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a640:	4611      	mov	r1, r2
 801a642:	f7fe bfa7 	b.w	8019594 <_malloc_r>
 801a646:	b92a      	cbnz	r2, 801a654 <_realloc_r+0x24>
 801a648:	f7fe ff30 	bl	80194ac <_free_r>
 801a64c:	4625      	mov	r5, r4
 801a64e:	4628      	mov	r0, r5
 801a650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a654:	f000 f8c5 	bl	801a7e2 <_malloc_usable_size_r>
 801a658:	4284      	cmp	r4, r0
 801a65a:	4606      	mov	r6, r0
 801a65c:	d802      	bhi.n	801a664 <_realloc_r+0x34>
 801a65e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a662:	d8f4      	bhi.n	801a64e <_realloc_r+0x1e>
 801a664:	4621      	mov	r1, r4
 801a666:	4638      	mov	r0, r7
 801a668:	f7fe ff94 	bl	8019594 <_malloc_r>
 801a66c:	4680      	mov	r8, r0
 801a66e:	b908      	cbnz	r0, 801a674 <_realloc_r+0x44>
 801a670:	4645      	mov	r5, r8
 801a672:	e7ec      	b.n	801a64e <_realloc_r+0x1e>
 801a674:	42b4      	cmp	r4, r6
 801a676:	4622      	mov	r2, r4
 801a678:	4629      	mov	r1, r5
 801a67a:	bf28      	it	cs
 801a67c:	4632      	movcs	r2, r6
 801a67e:	f7fe f920 	bl	80188c2 <memcpy>
 801a682:	4629      	mov	r1, r5
 801a684:	4638      	mov	r0, r7
 801a686:	f7fe ff11 	bl	80194ac <_free_r>
 801a68a:	e7f1      	b.n	801a670 <_realloc_r+0x40>

0801a68c <__ascii_wctomb>:
 801a68c:	4603      	mov	r3, r0
 801a68e:	4608      	mov	r0, r1
 801a690:	b141      	cbz	r1, 801a6a4 <__ascii_wctomb+0x18>
 801a692:	2aff      	cmp	r2, #255	@ 0xff
 801a694:	d904      	bls.n	801a6a0 <__ascii_wctomb+0x14>
 801a696:	228a      	movs	r2, #138	@ 0x8a
 801a698:	601a      	str	r2, [r3, #0]
 801a69a:	f04f 30ff 	mov.w	r0, #4294967295
 801a69e:	4770      	bx	lr
 801a6a0:	700a      	strb	r2, [r1, #0]
 801a6a2:	2001      	movs	r0, #1
 801a6a4:	4770      	bx	lr
	...

0801a6a8 <fiprintf>:
 801a6a8:	b40e      	push	{r1, r2, r3}
 801a6aa:	b503      	push	{r0, r1, lr}
 801a6ac:	4601      	mov	r1, r0
 801a6ae:	ab03      	add	r3, sp, #12
 801a6b0:	4805      	ldr	r0, [pc, #20]	@ (801a6c8 <fiprintf+0x20>)
 801a6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6b6:	6800      	ldr	r0, [r0, #0]
 801a6b8:	9301      	str	r3, [sp, #4]
 801a6ba:	f7ff fcf3 	bl	801a0a4 <_vfiprintf_r>
 801a6be:	b002      	add	sp, #8
 801a6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6c4:	b003      	add	sp, #12
 801a6c6:	4770      	bx	lr
 801a6c8:	24000170 	.word	0x24000170

0801a6cc <__swhatbuf_r>:
 801a6cc:	b570      	push	{r4, r5, r6, lr}
 801a6ce:	460c      	mov	r4, r1
 801a6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6d4:	2900      	cmp	r1, #0
 801a6d6:	b096      	sub	sp, #88	@ 0x58
 801a6d8:	4615      	mov	r5, r2
 801a6da:	461e      	mov	r6, r3
 801a6dc:	da0d      	bge.n	801a6fa <__swhatbuf_r+0x2e>
 801a6de:	89a3      	ldrh	r3, [r4, #12]
 801a6e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a6e4:	f04f 0100 	mov.w	r1, #0
 801a6e8:	bf14      	ite	ne
 801a6ea:	2340      	movne	r3, #64	@ 0x40
 801a6ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a6f0:	2000      	movs	r0, #0
 801a6f2:	6031      	str	r1, [r6, #0]
 801a6f4:	602b      	str	r3, [r5, #0]
 801a6f6:	b016      	add	sp, #88	@ 0x58
 801a6f8:	bd70      	pop	{r4, r5, r6, pc}
 801a6fa:	466a      	mov	r2, sp
 801a6fc:	f000 f848 	bl	801a790 <_fstat_r>
 801a700:	2800      	cmp	r0, #0
 801a702:	dbec      	blt.n	801a6de <__swhatbuf_r+0x12>
 801a704:	9901      	ldr	r1, [sp, #4]
 801a706:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a70a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a70e:	4259      	negs	r1, r3
 801a710:	4159      	adcs	r1, r3
 801a712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a716:	e7eb      	b.n	801a6f0 <__swhatbuf_r+0x24>

0801a718 <__smakebuf_r>:
 801a718:	898b      	ldrh	r3, [r1, #12]
 801a71a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a71c:	079d      	lsls	r5, r3, #30
 801a71e:	4606      	mov	r6, r0
 801a720:	460c      	mov	r4, r1
 801a722:	d507      	bpl.n	801a734 <__smakebuf_r+0x1c>
 801a724:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a728:	6023      	str	r3, [r4, #0]
 801a72a:	6123      	str	r3, [r4, #16]
 801a72c:	2301      	movs	r3, #1
 801a72e:	6163      	str	r3, [r4, #20]
 801a730:	b003      	add	sp, #12
 801a732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a734:	ab01      	add	r3, sp, #4
 801a736:	466a      	mov	r2, sp
 801a738:	f7ff ffc8 	bl	801a6cc <__swhatbuf_r>
 801a73c:	9f00      	ldr	r7, [sp, #0]
 801a73e:	4605      	mov	r5, r0
 801a740:	4639      	mov	r1, r7
 801a742:	4630      	mov	r0, r6
 801a744:	f7fe ff26 	bl	8019594 <_malloc_r>
 801a748:	b948      	cbnz	r0, 801a75e <__smakebuf_r+0x46>
 801a74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a74e:	059a      	lsls	r2, r3, #22
 801a750:	d4ee      	bmi.n	801a730 <__smakebuf_r+0x18>
 801a752:	f023 0303 	bic.w	r3, r3, #3
 801a756:	f043 0302 	orr.w	r3, r3, #2
 801a75a:	81a3      	strh	r3, [r4, #12]
 801a75c:	e7e2      	b.n	801a724 <__smakebuf_r+0xc>
 801a75e:	89a3      	ldrh	r3, [r4, #12]
 801a760:	6020      	str	r0, [r4, #0]
 801a762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a766:	81a3      	strh	r3, [r4, #12]
 801a768:	9b01      	ldr	r3, [sp, #4]
 801a76a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a76e:	b15b      	cbz	r3, 801a788 <__smakebuf_r+0x70>
 801a770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a774:	4630      	mov	r0, r6
 801a776:	f000 f81d 	bl	801a7b4 <_isatty_r>
 801a77a:	b128      	cbz	r0, 801a788 <__smakebuf_r+0x70>
 801a77c:	89a3      	ldrh	r3, [r4, #12]
 801a77e:	f023 0303 	bic.w	r3, r3, #3
 801a782:	f043 0301 	orr.w	r3, r3, #1
 801a786:	81a3      	strh	r3, [r4, #12]
 801a788:	89a3      	ldrh	r3, [r4, #12]
 801a78a:	431d      	orrs	r5, r3
 801a78c:	81a5      	strh	r5, [r4, #12]
 801a78e:	e7cf      	b.n	801a730 <__smakebuf_r+0x18>

0801a790 <_fstat_r>:
 801a790:	b538      	push	{r3, r4, r5, lr}
 801a792:	4d07      	ldr	r5, [pc, #28]	@ (801a7b0 <_fstat_r+0x20>)
 801a794:	2300      	movs	r3, #0
 801a796:	4604      	mov	r4, r0
 801a798:	4608      	mov	r0, r1
 801a79a:	4611      	mov	r1, r2
 801a79c:	602b      	str	r3, [r5, #0]
 801a79e:	f7e7 faf9 	bl	8001d94 <_fstat>
 801a7a2:	1c43      	adds	r3, r0, #1
 801a7a4:	d102      	bne.n	801a7ac <_fstat_r+0x1c>
 801a7a6:	682b      	ldr	r3, [r5, #0]
 801a7a8:	b103      	cbz	r3, 801a7ac <_fstat_r+0x1c>
 801a7aa:	6023      	str	r3, [r4, #0]
 801a7ac:	bd38      	pop	{r3, r4, r5, pc}
 801a7ae:	bf00      	nop
 801a7b0:	240019fc 	.word	0x240019fc

0801a7b4 <_isatty_r>:
 801a7b4:	b538      	push	{r3, r4, r5, lr}
 801a7b6:	4d06      	ldr	r5, [pc, #24]	@ (801a7d0 <_isatty_r+0x1c>)
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	4604      	mov	r4, r0
 801a7bc:	4608      	mov	r0, r1
 801a7be:	602b      	str	r3, [r5, #0]
 801a7c0:	f7e7 faf8 	bl	8001db4 <_isatty>
 801a7c4:	1c43      	adds	r3, r0, #1
 801a7c6:	d102      	bne.n	801a7ce <_isatty_r+0x1a>
 801a7c8:	682b      	ldr	r3, [r5, #0]
 801a7ca:	b103      	cbz	r3, 801a7ce <_isatty_r+0x1a>
 801a7cc:	6023      	str	r3, [r4, #0]
 801a7ce:	bd38      	pop	{r3, r4, r5, pc}
 801a7d0:	240019fc 	.word	0x240019fc

0801a7d4 <abort>:
 801a7d4:	b508      	push	{r3, lr}
 801a7d6:	2006      	movs	r0, #6
 801a7d8:	f000 f834 	bl	801a844 <raise>
 801a7dc:	2001      	movs	r0, #1
 801a7de:	f7e7 fa89 	bl	8001cf4 <_exit>

0801a7e2 <_malloc_usable_size_r>:
 801a7e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a7e6:	1f18      	subs	r0, r3, #4
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	bfbc      	itt	lt
 801a7ec:	580b      	ldrlt	r3, [r1, r0]
 801a7ee:	18c0      	addlt	r0, r0, r3
 801a7f0:	4770      	bx	lr

0801a7f2 <_raise_r>:
 801a7f2:	291f      	cmp	r1, #31
 801a7f4:	b538      	push	{r3, r4, r5, lr}
 801a7f6:	4605      	mov	r5, r0
 801a7f8:	460c      	mov	r4, r1
 801a7fa:	d904      	bls.n	801a806 <_raise_r+0x14>
 801a7fc:	2316      	movs	r3, #22
 801a7fe:	6003      	str	r3, [r0, #0]
 801a800:	f04f 30ff 	mov.w	r0, #4294967295
 801a804:	bd38      	pop	{r3, r4, r5, pc}
 801a806:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a808:	b112      	cbz	r2, 801a810 <_raise_r+0x1e>
 801a80a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a80e:	b94b      	cbnz	r3, 801a824 <_raise_r+0x32>
 801a810:	4628      	mov	r0, r5
 801a812:	f000 f831 	bl	801a878 <_getpid_r>
 801a816:	4622      	mov	r2, r4
 801a818:	4601      	mov	r1, r0
 801a81a:	4628      	mov	r0, r5
 801a81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a820:	f000 b818 	b.w	801a854 <_kill_r>
 801a824:	2b01      	cmp	r3, #1
 801a826:	d00a      	beq.n	801a83e <_raise_r+0x4c>
 801a828:	1c59      	adds	r1, r3, #1
 801a82a:	d103      	bne.n	801a834 <_raise_r+0x42>
 801a82c:	2316      	movs	r3, #22
 801a82e:	6003      	str	r3, [r0, #0]
 801a830:	2001      	movs	r0, #1
 801a832:	e7e7      	b.n	801a804 <_raise_r+0x12>
 801a834:	2100      	movs	r1, #0
 801a836:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a83a:	4620      	mov	r0, r4
 801a83c:	4798      	blx	r3
 801a83e:	2000      	movs	r0, #0
 801a840:	e7e0      	b.n	801a804 <_raise_r+0x12>
	...

0801a844 <raise>:
 801a844:	4b02      	ldr	r3, [pc, #8]	@ (801a850 <raise+0xc>)
 801a846:	4601      	mov	r1, r0
 801a848:	6818      	ldr	r0, [r3, #0]
 801a84a:	f7ff bfd2 	b.w	801a7f2 <_raise_r>
 801a84e:	bf00      	nop
 801a850:	24000170 	.word	0x24000170

0801a854 <_kill_r>:
 801a854:	b538      	push	{r3, r4, r5, lr}
 801a856:	4d07      	ldr	r5, [pc, #28]	@ (801a874 <_kill_r+0x20>)
 801a858:	2300      	movs	r3, #0
 801a85a:	4604      	mov	r4, r0
 801a85c:	4608      	mov	r0, r1
 801a85e:	4611      	mov	r1, r2
 801a860:	602b      	str	r3, [r5, #0]
 801a862:	f7e7 fa37 	bl	8001cd4 <_kill>
 801a866:	1c43      	adds	r3, r0, #1
 801a868:	d102      	bne.n	801a870 <_kill_r+0x1c>
 801a86a:	682b      	ldr	r3, [r5, #0]
 801a86c:	b103      	cbz	r3, 801a870 <_kill_r+0x1c>
 801a86e:	6023      	str	r3, [r4, #0]
 801a870:	bd38      	pop	{r3, r4, r5, pc}
 801a872:	bf00      	nop
 801a874:	240019fc 	.word	0x240019fc

0801a878 <_getpid_r>:
 801a878:	f7e7 ba24 	b.w	8001cc4 <_getpid>

0801a87c <atan2>:
 801a87c:	f000 bb50 	b.w	801af20 <__ieee754_atan2>

0801a880 <sqrt>:
 801a880:	b508      	push	{r3, lr}
 801a882:	ed2d 8b04 	vpush	{d8-d9}
 801a886:	eeb0 8b40 	vmov.f64	d8, d0
 801a88a:	f000 fa5a 	bl	801ad42 <__ieee754_sqrt>
 801a88e:	eeb4 8b48 	vcmp.f64	d8, d8
 801a892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a896:	d60c      	bvs.n	801a8b2 <sqrt+0x32>
 801a898:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801a8b8 <sqrt+0x38>
 801a89c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a4:	d505      	bpl.n	801a8b2 <sqrt+0x32>
 801a8a6:	f7fd ffdf 	bl	8018868 <__errno>
 801a8aa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801a8ae:	2321      	movs	r3, #33	@ 0x21
 801a8b0:	6003      	str	r3, [r0, #0]
 801a8b2:	ecbd 8b04 	vpop	{d8-d9}
 801a8b6:	bd08      	pop	{r3, pc}
	...

0801a8c0 <acosf>:
 801a8c0:	b508      	push	{r3, lr}
 801a8c2:	ed2d 8b02 	vpush	{d8}
 801a8c6:	eeb0 8a40 	vmov.f32	s16, s0
 801a8ca:	f000 fdcf 	bl	801b46c <__ieee754_acosf>
 801a8ce:	eeb4 8a48 	vcmp.f32	s16, s16
 801a8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d6:	eef0 8a40 	vmov.f32	s17, s0
 801a8da:	d615      	bvs.n	801a908 <acosf+0x48>
 801a8dc:	eeb0 0a48 	vmov.f32	s0, s16
 801a8e0:	f000 f848 	bl	801a974 <fabsf>
 801a8e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a8e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8f0:	dd0a      	ble.n	801a908 <acosf+0x48>
 801a8f2:	f7fd ffb9 	bl	8018868 <__errno>
 801a8f6:	ecbd 8b02 	vpop	{d8}
 801a8fa:	2321      	movs	r3, #33	@ 0x21
 801a8fc:	6003      	str	r3, [r0, #0]
 801a8fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a902:	4804      	ldr	r0, [pc, #16]	@ (801a914 <acosf+0x54>)
 801a904:	f000 b86a 	b.w	801a9dc <nanf>
 801a908:	eeb0 0a68 	vmov.f32	s0, s17
 801a90c:	ecbd 8b02 	vpop	{d8}
 801a910:	bd08      	pop	{r3, pc}
 801a912:	bf00      	nop
 801a914:	0801c720 	.word	0x0801c720

0801a918 <asinf>:
 801a918:	b508      	push	{r3, lr}
 801a91a:	ed2d 8b02 	vpush	{d8}
 801a91e:	eeb0 8a40 	vmov.f32	s16, s0
 801a922:	f000 fe99 	bl	801b658 <__ieee754_asinf>
 801a926:	eeb4 8a48 	vcmp.f32	s16, s16
 801a92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a92e:	eef0 8a40 	vmov.f32	s17, s0
 801a932:	d615      	bvs.n	801a960 <asinf+0x48>
 801a934:	eeb0 0a48 	vmov.f32	s0, s16
 801a938:	f000 f81c 	bl	801a974 <fabsf>
 801a93c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a940:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a948:	dd0a      	ble.n	801a960 <asinf+0x48>
 801a94a:	f7fd ff8d 	bl	8018868 <__errno>
 801a94e:	ecbd 8b02 	vpop	{d8}
 801a952:	2321      	movs	r3, #33	@ 0x21
 801a954:	6003      	str	r3, [r0, #0]
 801a956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a95a:	4804      	ldr	r0, [pc, #16]	@ (801a96c <asinf+0x54>)
 801a95c:	f000 b83e 	b.w	801a9dc <nanf>
 801a960:	eeb0 0a68 	vmov.f32	s0, s17
 801a964:	ecbd 8b02 	vpop	{d8}
 801a968:	bd08      	pop	{r3, pc}
 801a96a:	bf00      	nop
 801a96c:	0801c720 	.word	0x0801c720

0801a970 <atan2f>:
 801a970:	f000 bf56 	b.w	801b820 <__ieee754_atan2f>

0801a974 <fabsf>:
 801a974:	ee10 3a10 	vmov	r3, s0
 801a978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a97c:	ee00 3a10 	vmov	s0, r3
 801a980:	4770      	bx	lr
	...

0801a984 <tanf>:
 801a984:	ee10 3a10 	vmov	r3, s0
 801a988:	b507      	push	{r0, r1, r2, lr}
 801a98a:	4a12      	ldr	r2, [pc, #72]	@ (801a9d4 <tanf+0x50>)
 801a98c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a990:	4293      	cmp	r3, r2
 801a992:	d807      	bhi.n	801a9a4 <tanf+0x20>
 801a994:	eddf 0a10 	vldr	s1, [pc, #64]	@ 801a9d8 <tanf+0x54>
 801a998:	2001      	movs	r0, #1
 801a99a:	b003      	add	sp, #12
 801a99c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9a0:	f000 bc84 	b.w	801b2ac <__kernel_tanf>
 801a9a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801a9a8:	d304      	bcc.n	801a9b4 <tanf+0x30>
 801a9aa:	ee30 0a40 	vsub.f32	s0, s0, s0
 801a9ae:	b003      	add	sp, #12
 801a9b0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a9b4:	4668      	mov	r0, sp
 801a9b6:	f000 ffd1 	bl	801b95c <__ieee754_rem_pio2f>
 801a9ba:	0040      	lsls	r0, r0, #1
 801a9bc:	f000 0002 	and.w	r0, r0, #2
 801a9c0:	eddd 0a01 	vldr	s1, [sp, #4]
 801a9c4:	ed9d 0a00 	vldr	s0, [sp]
 801a9c8:	f1c0 0001 	rsb	r0, r0, #1
 801a9cc:	f000 fc6e 	bl	801b2ac <__kernel_tanf>
 801a9d0:	e7ed      	b.n	801a9ae <tanf+0x2a>
 801a9d2:	bf00      	nop
 801a9d4:	3f490fda 	.word	0x3f490fda
 801a9d8:	00000000 	.word	0x00000000

0801a9dc <nanf>:
 801a9dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a9e4 <nanf+0x8>
 801a9e0:	4770      	bx	lr
 801a9e2:	bf00      	nop
 801a9e4:	7fc00000 	.word	0x7fc00000

0801a9e8 <sinf_poly>:
 801a9e8:	07cb      	lsls	r3, r1, #31
 801a9ea:	d412      	bmi.n	801aa12 <sinf_poly+0x2a>
 801a9ec:	ee21 5b00 	vmul.f64	d5, d1, d0
 801a9f0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801a9f4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801a9f8:	eea6 7b01 	vfma.f64	d7, d6, d1
 801a9fc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801aa00:	ee21 1b05 	vmul.f64	d1, d1, d5
 801aa04:	eea6 0b05 	vfma.f64	d0, d6, d5
 801aa08:	eea7 0b01 	vfma.f64	d0, d7, d1
 801aa0c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801aa10:	4770      	bx	lr
 801aa12:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801aa16:	ee21 5b01 	vmul.f64	d5, d1, d1
 801aa1a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801aa1e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801aa22:	eea1 7b06 	vfma.f64	d7, d1, d6
 801aa26:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801aa2a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801aa2e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801aa32:	ee21 1b05 	vmul.f64	d1, d1, d5
 801aa36:	eea5 0b06 	vfma.f64	d0, d5, d6
 801aa3a:	e7e5      	b.n	801aa08 <sinf_poly+0x20>
 801aa3c:	0000      	movs	r0, r0
	...

0801aa40 <sinf>:
 801aa40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aa42:	ee10 4a10 	vmov	r4, s0
 801aa46:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801aa4a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801aa4e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801aa52:	eef0 7a40 	vmov.f32	s15, s0
 801aa56:	d218      	bcs.n	801aa8a <sinf+0x4a>
 801aa58:	ee26 1b06 	vmul.f64	d1, d6, d6
 801aa5c:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801aa60:	d20a      	bcs.n	801aa78 <sinf+0x38>
 801aa62:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801aa66:	d103      	bne.n	801aa70 <sinf+0x30>
 801aa68:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801aa6c:	ed8d 1a01 	vstr	s2, [sp, #4]
 801aa70:	eeb0 0a67 	vmov.f32	s0, s15
 801aa74:	b003      	add	sp, #12
 801aa76:	bd30      	pop	{r4, r5, pc}
 801aa78:	483b      	ldr	r0, [pc, #236]	@ (801ab68 <sinf+0x128>)
 801aa7a:	eeb0 0b46 	vmov.f64	d0, d6
 801aa7e:	2100      	movs	r1, #0
 801aa80:	b003      	add	sp, #12
 801aa82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa86:	f7ff bfaf 	b.w	801a9e8 <sinf_poly>
 801aa8a:	f240 422e 	movw	r2, #1070	@ 0x42e
 801aa8e:	4293      	cmp	r3, r2
 801aa90:	d824      	bhi.n	801aadc <sinf+0x9c>
 801aa92:	4b35      	ldr	r3, [pc, #212]	@ (801ab68 <sinf+0x128>)
 801aa94:	ed93 7b08 	vldr	d7, [r3, #32]
 801aa98:	ee26 7b07 	vmul.f64	d7, d6, d7
 801aa9c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801aaa0:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801aaa4:	ee17 1a90 	vmov	r1, s15
 801aaa8:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801aaac:	1609      	asrs	r1, r1, #24
 801aaae:	ee07 1a90 	vmov	s15, r1
 801aab2:	f001 0203 	and.w	r2, r1, #3
 801aab6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801aaba:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801aabe:	ed92 0b00 	vldr	d0, [r2]
 801aac2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801aac6:	f011 0f02 	tst.w	r1, #2
 801aaca:	eea5 6b47 	vfms.f64	d6, d5, d7
 801aace:	bf08      	it	eq
 801aad0:	4618      	moveq	r0, r3
 801aad2:	ee26 1b06 	vmul.f64	d1, d6, d6
 801aad6:	ee20 0b06 	vmul.f64	d0, d0, d6
 801aada:	e7d1      	b.n	801aa80 <sinf+0x40>
 801aadc:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801aae0:	d237      	bcs.n	801ab52 <sinf+0x112>
 801aae2:	4922      	ldr	r1, [pc, #136]	@ (801ab6c <sinf+0x12c>)
 801aae4:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801aae8:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801aaec:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801aaf0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801aaf4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801aaf8:	6a10      	ldr	r0, [r2, #32]
 801aafa:	6912      	ldr	r2, [r2, #16]
 801aafc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801ab00:	40ab      	lsls	r3, r5
 801ab02:	fba0 5003 	umull	r5, r0, r0, r3
 801ab06:	4359      	muls	r1, r3
 801ab08:	fbe3 0102 	umlal	r0, r1, r3, r2
 801ab0c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801ab10:	0f9d      	lsrs	r5, r3, #30
 801ab12:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801ab16:	1ac9      	subs	r1, r1, r3
 801ab18:	f7e5 ff0a 	bl	8000930 <__aeabi_l2d>
 801ab1c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801ab20:	4b11      	ldr	r3, [pc, #68]	@ (801ab68 <sinf+0x128>)
 801ab22:	f004 0203 	and.w	r2, r4, #3
 801ab26:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801ab2a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 801ab60 <sinf+0x120>
 801ab2e:	ed92 0b00 	vldr	d0, [r2]
 801ab32:	ec41 0b17 	vmov	d7, r0, r1
 801ab36:	f014 0f02 	tst.w	r4, #2
 801ab3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ab3e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801ab42:	4629      	mov	r1, r5
 801ab44:	bf08      	it	eq
 801ab46:	4618      	moveq	r0, r3
 801ab48:	ee27 1b07 	vmul.f64	d1, d7, d7
 801ab4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ab50:	e796      	b.n	801aa80 <sinf+0x40>
 801ab52:	b003      	add	sp, #12
 801ab54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ab58:	f000 b8e4 	b.w	801ad24 <__math_invalidf>
 801ab5c:	f3af 8000 	nop.w
 801ab60:	54442d18 	.word	0x54442d18
 801ab64:	3c1921fb 	.word	0x3c1921fb
 801ab68:	0801c988 	.word	0x0801c988
 801ab6c:	0801c924 	.word	0x0801c924

0801ab70 <sinf_poly>:
 801ab70:	07cb      	lsls	r3, r1, #31
 801ab72:	d412      	bmi.n	801ab9a <sinf_poly+0x2a>
 801ab74:	ee21 5b00 	vmul.f64	d5, d1, d0
 801ab78:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801ab7c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801ab80:	eea6 7b01 	vfma.f64	d7, d6, d1
 801ab84:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801ab88:	ee21 1b05 	vmul.f64	d1, d1, d5
 801ab8c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801ab90:	eea7 0b01 	vfma.f64	d0, d7, d1
 801ab94:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ab98:	4770      	bx	lr
 801ab9a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801ab9e:	ee21 5b01 	vmul.f64	d5, d1, d1
 801aba2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801aba6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801abaa:	eea1 7b06 	vfma.f64	d7, d1, d6
 801abae:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801abb2:	eea1 0b06 	vfma.f64	d0, d1, d6
 801abb6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801abba:	ee21 1b05 	vmul.f64	d1, d1, d5
 801abbe:	eea5 0b06 	vfma.f64	d0, d5, d6
 801abc2:	e7e5      	b.n	801ab90 <sinf_poly+0x20>
 801abc4:	0000      	movs	r0, r0
	...

0801abc8 <cosf>:
 801abc8:	b538      	push	{r3, r4, r5, lr}
 801abca:	ee10 4a10 	vmov	r4, s0
 801abce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801abd2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801abd6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801abda:	d21f      	bcs.n	801ac1c <cosf+0x54>
 801abdc:	ee27 7b07 	vmul.f64	d7, d7, d7
 801abe0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801abe4:	f0c0 8082 	bcc.w	801acec <cosf+0x124>
 801abe8:	ee27 4b07 	vmul.f64	d4, d7, d7
 801abec:	4b44      	ldr	r3, [pc, #272]	@ (801ad00 <cosf+0x138>)
 801abee:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801abf2:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801abf6:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 801abfa:	eea7 6b05 	vfma.f64	d6, d7, d5
 801abfe:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801ac02:	eea7 0b05 	vfma.f64	d0, d7, d5
 801ac06:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 801ac0a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ac0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801ac12:	eea6 0b07 	vfma.f64	d0, d6, d7
 801ac16:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ac1a:	bd38      	pop	{r3, r4, r5, pc}
 801ac1c:	f240 422e 	movw	r2, #1070	@ 0x42e
 801ac20:	4293      	cmp	r3, r2
 801ac22:	d829      	bhi.n	801ac78 <cosf+0xb0>
 801ac24:	4b36      	ldr	r3, [pc, #216]	@ (801ad00 <cosf+0x138>)
 801ac26:	ed93 6b08 	vldr	d6, [r3, #32]
 801ac2a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801ac2e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801ac32:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801ac36:	ee16 1a90 	vmov	r1, s13
 801ac3a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801ac3e:	1609      	asrs	r1, r1, #24
 801ac40:	ee06 1a90 	vmov	s13, r1
 801ac44:	f001 0203 	and.w	r2, r1, #3
 801ac48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801ac4c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801ac50:	ed92 0b00 	vldr	d0, [r2]
 801ac54:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 801ac58:	f011 0f02 	tst.w	r1, #2
 801ac5c:	f081 0101 	eor.w	r1, r1, #1
 801ac60:	eea5 7b46 	vfms.f64	d7, d5, d6
 801ac64:	bf08      	it	eq
 801ac66:	4618      	moveq	r0, r3
 801ac68:	ee27 1b07 	vmul.f64	d1, d7, d7
 801ac6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac70:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ac74:	f7ff bf7c 	b.w	801ab70 <sinf_poly>
 801ac78:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801ac7c:	d232      	bcs.n	801ace4 <cosf+0x11c>
 801ac7e:	4921      	ldr	r1, [pc, #132]	@ (801ad04 <cosf+0x13c>)
 801ac80:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801ac84:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801ac88:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801ac8c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801ac90:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801ac94:	6a10      	ldr	r0, [r2, #32]
 801ac96:	6912      	ldr	r2, [r2, #16]
 801ac98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801ac9c:	40ab      	lsls	r3, r5
 801ac9e:	fba0 5003 	umull	r5, r0, r0, r3
 801aca2:	4359      	muls	r1, r3
 801aca4:	fbe3 0102 	umlal	r0, r1, r3, r2
 801aca8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801acac:	0f9d      	lsrs	r5, r3, #30
 801acae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801acb2:	1ac9      	subs	r1, r1, r3
 801acb4:	f7e5 fe3c 	bl	8000930 <__aeabi_l2d>
 801acb8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801acbc:	4b10      	ldr	r3, [pc, #64]	@ (801ad00 <cosf+0x138>)
 801acbe:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 801acf8 <cosf+0x130>
 801acc2:	ec41 0b17 	vmov	d7, r0, r1
 801acc6:	f004 0203 	and.w	r2, r4, #3
 801acca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801acce:	ed92 0b00 	vldr	d0, [r2]
 801acd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801acd6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801acda:	f014 0f02 	tst.w	r4, #2
 801acde:	f085 0101 	eor.w	r1, r5, #1
 801ace2:	e7bf      	b.n	801ac64 <cosf+0x9c>
 801ace4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ace8:	f000 b81c 	b.w	801ad24 <__math_invalidf>
 801acec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801acf0:	e793      	b.n	801ac1a <cosf+0x52>
 801acf2:	bf00      	nop
 801acf4:	f3af 8000 	nop.w
 801acf8:	54442d18 	.word	0x54442d18
 801acfc:	3c1921fb 	.word	0x3c1921fb
 801ad00:	0801c988 	.word	0x0801c988
 801ad04:	0801c924 	.word	0x0801c924

0801ad08 <with_errnof>:
 801ad08:	b510      	push	{r4, lr}
 801ad0a:	ed2d 8b02 	vpush	{d8}
 801ad0e:	eeb0 8a40 	vmov.f32	s16, s0
 801ad12:	4604      	mov	r4, r0
 801ad14:	f7fd fda8 	bl	8018868 <__errno>
 801ad18:	eeb0 0a48 	vmov.f32	s0, s16
 801ad1c:	ecbd 8b02 	vpop	{d8}
 801ad20:	6004      	str	r4, [r0, #0]
 801ad22:	bd10      	pop	{r4, pc}

0801ad24 <__math_invalidf>:
 801ad24:	eef0 7a40 	vmov.f32	s15, s0
 801ad28:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ad2c:	eef4 7a67 	vcmp.f32	s15, s15
 801ad30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad34:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801ad38:	d602      	bvs.n	801ad40 <__math_invalidf+0x1c>
 801ad3a:	2021      	movs	r0, #33	@ 0x21
 801ad3c:	f7ff bfe4 	b.w	801ad08 <with_errnof>
 801ad40:	4770      	bx	lr

0801ad42 <__ieee754_sqrt>:
 801ad42:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801ad46:	4770      	bx	lr

0801ad48 <ceil>:
 801ad48:	ee10 1a90 	vmov	r1, s1
 801ad4c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ad50:	ee10 0a10 	vmov	r0, s0
 801ad54:	f2a2 33ff 	subw	r3, r2, #1023	@ 0x3ff
 801ad58:	2b13      	cmp	r3, #19
 801ad5a:	b530      	push	{r4, r5, lr}
 801ad5c:	4605      	mov	r5, r0
 801ad5e:	dc2e      	bgt.n	801adbe <ceil+0x76>
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	da12      	bge.n	801ad8a <ceil+0x42>
 801ad64:	ed9f 7b2e 	vldr	d7, [pc, #184]	@ 801ae20 <ceil+0xd8>
 801ad68:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ad6c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ad70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad74:	dd04      	ble.n	801ad80 <ceil+0x38>
 801ad76:	2900      	cmp	r1, #0
 801ad78:	db4b      	blt.n	801ae12 <ceil+0xca>
 801ad7a:	4308      	orrs	r0, r1
 801ad7c:	d14d      	bne.n	801ae1a <ceil+0xd2>
 801ad7e:	4601      	mov	r1, r0
 801ad80:	460b      	mov	r3, r1
 801ad82:	4602      	mov	r2, r0
 801ad84:	ec43 2b10 	vmov	d0, r2, r3
 801ad88:	e020      	b.n	801adcc <ceil+0x84>
 801ad8a:	4a27      	ldr	r2, [pc, #156]	@ (801ae28 <ceil+0xe0>)
 801ad8c:	411a      	asrs	r2, r3
 801ad8e:	ea01 0402 	and.w	r4, r1, r2
 801ad92:	4304      	orrs	r4, r0
 801ad94:	d01a      	beq.n	801adcc <ceil+0x84>
 801ad96:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801ae20 <ceil+0xd8>
 801ad9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ad9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ada2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada6:	ddeb      	ble.n	801ad80 <ceil+0x38>
 801ada8:	2900      	cmp	r1, #0
 801adaa:	bfc2      	ittt	gt
 801adac:	f44f 1080 	movgt.w	r0, #1048576	@ 0x100000
 801adb0:	fa40 f303 	asrgt.w	r3, r0, r3
 801adb4:	18c9      	addgt	r1, r1, r3
 801adb6:	ea21 0102 	bic.w	r1, r1, r2
 801adba:	2000      	movs	r0, #0
 801adbc:	e7e0      	b.n	801ad80 <ceil+0x38>
 801adbe:	2b33      	cmp	r3, #51	@ 0x33
 801adc0:	dd05      	ble.n	801adce <ceil+0x86>
 801adc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801adc6:	d101      	bne.n	801adcc <ceil+0x84>
 801adc8:	ee30 0b00 	vadd.f64	d0, d0, d0
 801adcc:	bd30      	pop	{r4, r5, pc}
 801adce:	f2a2 4413 	subw	r4, r2, #1043	@ 0x413
 801add2:	f04f 32ff 	mov.w	r2, #4294967295
 801add6:	40e2      	lsrs	r2, r4
 801add8:	4210      	tst	r0, r2
 801adda:	d0f7      	beq.n	801adcc <ceil+0x84>
 801addc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801ae20 <ceil+0xd8>
 801ade0:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ade4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ade8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adec:	ddc8      	ble.n	801ad80 <ceil+0x38>
 801adee:	2900      	cmp	r1, #0
 801adf0:	dd02      	ble.n	801adf8 <ceil+0xb0>
 801adf2:	2b14      	cmp	r3, #20
 801adf4:	d103      	bne.n	801adfe <ceil+0xb6>
 801adf6:	3101      	adds	r1, #1
 801adf8:	ea20 0002 	bic.w	r0, r0, r2
 801adfc:	e7c0      	b.n	801ad80 <ceil+0x38>
 801adfe:	2401      	movs	r4, #1
 801ae00:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 801ae04:	fa04 f303 	lsl.w	r3, r4, r3
 801ae08:	4418      	add	r0, r3
 801ae0a:	4285      	cmp	r5, r0
 801ae0c:	bf88      	it	hi
 801ae0e:	1909      	addhi	r1, r1, r4
 801ae10:	e7f2      	b.n	801adf8 <ceil+0xb0>
 801ae12:	2000      	movs	r0, #0
 801ae14:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 801ae18:	e7b2      	b.n	801ad80 <ceil+0x38>
 801ae1a:	4904      	ldr	r1, [pc, #16]	@ (801ae2c <ceil+0xe4>)
 801ae1c:	2000      	movs	r0, #0
 801ae1e:	e7af      	b.n	801ad80 <ceil+0x38>
 801ae20:	8800759c 	.word	0x8800759c
 801ae24:	7e37e43c 	.word	0x7e37e43c
 801ae28:	000fffff 	.word	0x000fffff
 801ae2c:	3ff00000 	.word	0x3ff00000

0801ae30 <floor>:
 801ae30:	ee10 3a90 	vmov	r3, s1
 801ae34:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801ae38:	ee10 2a10 	vmov	r2, s0
 801ae3c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801ae40:	2913      	cmp	r1, #19
 801ae42:	b530      	push	{r4, r5, lr}
 801ae44:	4615      	mov	r5, r2
 801ae46:	dc33      	bgt.n	801aeb0 <floor+0x80>
 801ae48:	2900      	cmp	r1, #0
 801ae4a:	da18      	bge.n	801ae7e <floor+0x4e>
 801ae4c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801af10 <floor+0xe0>
 801ae50:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ae54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ae58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae5c:	dd0a      	ble.n	801ae74 <floor+0x44>
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	da50      	bge.n	801af04 <floor+0xd4>
 801ae62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ae66:	4313      	orrs	r3, r2
 801ae68:	2200      	movs	r2, #0
 801ae6a:	4293      	cmp	r3, r2
 801ae6c:	4b2a      	ldr	r3, [pc, #168]	@ (801af18 <floor+0xe8>)
 801ae6e:	bf08      	it	eq
 801ae70:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801ae74:	4619      	mov	r1, r3
 801ae76:	4610      	mov	r0, r2
 801ae78:	ec41 0b10 	vmov	d0, r0, r1
 801ae7c:	e01f      	b.n	801aebe <floor+0x8e>
 801ae7e:	4827      	ldr	r0, [pc, #156]	@ (801af1c <floor+0xec>)
 801ae80:	4108      	asrs	r0, r1
 801ae82:	ea03 0400 	and.w	r4, r3, r0
 801ae86:	4314      	orrs	r4, r2
 801ae88:	d019      	beq.n	801aebe <floor+0x8e>
 801ae8a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801af10 <floor+0xe0>
 801ae8e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ae92:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ae96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae9a:	ddeb      	ble.n	801ae74 <floor+0x44>
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	bfbe      	ittt	lt
 801aea0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801aea4:	410a      	asrlt	r2, r1
 801aea6:	189b      	addlt	r3, r3, r2
 801aea8:	ea23 0300 	bic.w	r3, r3, r0
 801aeac:	2200      	movs	r2, #0
 801aeae:	e7e1      	b.n	801ae74 <floor+0x44>
 801aeb0:	2933      	cmp	r1, #51	@ 0x33
 801aeb2:	dd05      	ble.n	801aec0 <floor+0x90>
 801aeb4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801aeb8:	d101      	bne.n	801aebe <floor+0x8e>
 801aeba:	ee30 0b00 	vadd.f64	d0, d0, d0
 801aebe:	bd30      	pop	{r4, r5, pc}
 801aec0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801aec4:	f04f 30ff 	mov.w	r0, #4294967295
 801aec8:	40e0      	lsrs	r0, r4
 801aeca:	4210      	tst	r0, r2
 801aecc:	d0f7      	beq.n	801aebe <floor+0x8e>
 801aece:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801af10 <floor+0xe0>
 801aed2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801aed6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801aeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aede:	ddc9      	ble.n	801ae74 <floor+0x44>
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	da02      	bge.n	801aeea <floor+0xba>
 801aee4:	2914      	cmp	r1, #20
 801aee6:	d103      	bne.n	801aef0 <floor+0xc0>
 801aee8:	3301      	adds	r3, #1
 801aeea:	ea22 0200 	bic.w	r2, r2, r0
 801aeee:	e7c1      	b.n	801ae74 <floor+0x44>
 801aef0:	2401      	movs	r4, #1
 801aef2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801aef6:	fa04 f101 	lsl.w	r1, r4, r1
 801aefa:	440a      	add	r2, r1
 801aefc:	42aa      	cmp	r2, r5
 801aefe:	bf38      	it	cc
 801af00:	191b      	addcc	r3, r3, r4
 801af02:	e7f2      	b.n	801aeea <floor+0xba>
 801af04:	2200      	movs	r2, #0
 801af06:	4613      	mov	r3, r2
 801af08:	e7b4      	b.n	801ae74 <floor+0x44>
 801af0a:	bf00      	nop
 801af0c:	f3af 8000 	nop.w
 801af10:	8800759c 	.word	0x8800759c
 801af14:	7e37e43c 	.word	0x7e37e43c
 801af18:	bff00000 	.word	0xbff00000
 801af1c:	000fffff 	.word	0x000fffff

0801af20 <__ieee754_atan2>:
 801af20:	ee11 1a10 	vmov	r1, s2
 801af24:	eeb0 7b40 	vmov.f64	d7, d0
 801af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af2a:	ee11 5a90 	vmov	r5, s3
 801af2e:	424b      	negs	r3, r1
 801af30:	4f59      	ldr	r7, [pc, #356]	@ (801b098 <__ieee754_atan2+0x178>)
 801af32:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801af36:	430b      	orrs	r3, r1
 801af38:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801af3c:	42bb      	cmp	r3, r7
 801af3e:	d80d      	bhi.n	801af5c <__ieee754_atan2+0x3c>
 801af40:	ee10 ca10 	vmov	ip, s0
 801af44:	ee17 6a90 	vmov	r6, s15
 801af48:	f1cc 0000 	rsb	r0, ip, #0
 801af4c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801af50:	ea40 000c 	orr.w	r0, r0, ip
 801af54:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801af58:	42b8      	cmp	r0, r7
 801af5a:	d904      	bls.n	801af66 <__ieee754_atan2+0x46>
 801af5c:	ee37 7b01 	vadd.f64	d7, d7, d1
 801af60:	eeb0 0b47 	vmov.f64	d0, d7
 801af64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af66:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801af6a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801af6e:	4308      	orrs	r0, r1
 801af70:	d103      	bne.n	801af7a <__ieee754_atan2+0x5a>
 801af72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801af76:	f000 b897 	b.w	801b0a8 <atan>
 801af7a:	17ac      	asrs	r4, r5, #30
 801af7c:	f004 0402 	and.w	r4, r4, #2
 801af80:	ea53 0c0c 	orrs.w	ip, r3, ip
 801af84:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801af88:	d107      	bne.n	801af9a <__ieee754_atan2+0x7a>
 801af8a:	2c02      	cmp	r4, #2
 801af8c:	d05c      	beq.n	801b048 <__ieee754_atan2+0x128>
 801af8e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801b060 <__ieee754_atan2+0x140>
 801af92:	2c03      	cmp	r4, #3
 801af94:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801af98:	e7e2      	b.n	801af60 <__ieee754_atan2+0x40>
 801af9a:	4311      	orrs	r1, r2
 801af9c:	d107      	bne.n	801afae <__ieee754_atan2+0x8e>
 801af9e:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801b068 <__ieee754_atan2+0x148>
 801afa2:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801b070 <__ieee754_atan2+0x150>
 801afa6:	2e00      	cmp	r6, #0
 801afa8:	fe26 7b07 	vselge.f64	d7, d6, d7
 801afac:	e7d8      	b.n	801af60 <__ieee754_atan2+0x40>
 801afae:	42ba      	cmp	r2, r7
 801afb0:	d10f      	bne.n	801afd2 <__ieee754_atan2+0xb2>
 801afb2:	4293      	cmp	r3, r2
 801afb4:	f104 34ff 	add.w	r4, r4, #4294967295
 801afb8:	d107      	bne.n	801afca <__ieee754_atan2+0xaa>
 801afba:	2c02      	cmp	r4, #2
 801afbc:	d847      	bhi.n	801b04e <__ieee754_atan2+0x12e>
 801afbe:	4b37      	ldr	r3, [pc, #220]	@ (801b09c <__ieee754_atan2+0x17c>)
 801afc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801afc4:	ed93 7b00 	vldr	d7, [r3]
 801afc8:	e7ca      	b.n	801af60 <__ieee754_atan2+0x40>
 801afca:	2c02      	cmp	r4, #2
 801afcc:	d842      	bhi.n	801b054 <__ieee754_atan2+0x134>
 801afce:	4b34      	ldr	r3, [pc, #208]	@ (801b0a0 <__ieee754_atan2+0x180>)
 801afd0:	e7f6      	b.n	801afc0 <__ieee754_atan2+0xa0>
 801afd2:	42bb      	cmp	r3, r7
 801afd4:	d0e3      	beq.n	801af9e <__ieee754_atan2+0x7e>
 801afd6:	1a9b      	subs	r3, r3, r2
 801afd8:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801afdc:	ea4f 5223 	mov.w	r2, r3, asr #20
 801afe0:	da1a      	bge.n	801b018 <__ieee754_atan2+0xf8>
 801afe2:	2d00      	cmp	r5, #0
 801afe4:	da01      	bge.n	801afea <__ieee754_atan2+0xca>
 801afe6:	323c      	adds	r2, #60	@ 0x3c
 801afe8:	db19      	blt.n	801b01e <__ieee754_atan2+0xfe>
 801afea:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801afee:	f000 f955 	bl	801b29c <fabs>
 801aff2:	f000 f859 	bl	801b0a8 <atan>
 801aff6:	eeb0 7b40 	vmov.f64	d7, d0
 801affa:	2c01      	cmp	r4, #1
 801affc:	d012      	beq.n	801b024 <__ieee754_atan2+0x104>
 801affe:	2c02      	cmp	r4, #2
 801b000:	d019      	beq.n	801b036 <__ieee754_atan2+0x116>
 801b002:	2c00      	cmp	r4, #0
 801b004:	d0ac      	beq.n	801af60 <__ieee754_atan2+0x40>
 801b006:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801b078 <__ieee754_atan2+0x158>
 801b00a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b00e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801b080 <__ieee754_atan2+0x160>
 801b012:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b016:	e7a3      	b.n	801af60 <__ieee754_atan2+0x40>
 801b018:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801b070 <__ieee754_atan2+0x150>
 801b01c:	e7ed      	b.n	801affa <__ieee754_atan2+0xda>
 801b01e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801b088 <__ieee754_atan2+0x168>
 801b022:	e7ea      	b.n	801affa <__ieee754_atan2+0xda>
 801b024:	ee17 1a90 	vmov	r1, s15
 801b028:	ec53 2b17 	vmov	r2, r3, d7
 801b02c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b030:	ec43 2b17 	vmov	d7, r2, r3
 801b034:	e794      	b.n	801af60 <__ieee754_atan2+0x40>
 801b036:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801b078 <__ieee754_atan2+0x158>
 801b03a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b03e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801b080 <__ieee754_atan2+0x160>
 801b042:	ee36 7b47 	vsub.f64	d7, d6, d7
 801b046:	e78b      	b.n	801af60 <__ieee754_atan2+0x40>
 801b048:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801b080 <__ieee754_atan2+0x160>
 801b04c:	e788      	b.n	801af60 <__ieee754_atan2+0x40>
 801b04e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801b090 <__ieee754_atan2+0x170>
 801b052:	e785      	b.n	801af60 <__ieee754_atan2+0x40>
 801b054:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801b088 <__ieee754_atan2+0x168>
 801b058:	e782      	b.n	801af60 <__ieee754_atan2+0x40>
 801b05a:	bf00      	nop
 801b05c:	f3af 8000 	nop.w
 801b060:	54442d18 	.word	0x54442d18
 801b064:	c00921fb 	.word	0xc00921fb
 801b068:	54442d18 	.word	0x54442d18
 801b06c:	bff921fb 	.word	0xbff921fb
 801b070:	54442d18 	.word	0x54442d18
 801b074:	3ff921fb 	.word	0x3ff921fb
 801b078:	33145c07 	.word	0x33145c07
 801b07c:	3ca1a626 	.word	0x3ca1a626
 801b080:	54442d18 	.word	0x54442d18
 801b084:	400921fb 	.word	0x400921fb
	...
 801b090:	54442d18 	.word	0x54442d18
 801b094:	3fe921fb 	.word	0x3fe921fb
 801b098:	7ff00000 	.word	0x7ff00000
 801b09c:	0801ca80 	.word	0x0801ca80
 801b0a0:	0801ca68 	.word	0x0801ca68
 801b0a4:	00000000 	.word	0x00000000

0801b0a8 <atan>:
 801b0a8:	b538      	push	{r3, r4, r5, lr}
 801b0aa:	eeb0 7b40 	vmov.f64	d7, d0
 801b0ae:	ee17 5a90 	vmov	r5, s15
 801b0b2:	4b73      	ldr	r3, [pc, #460]	@ (801b280 <atan+0x1d8>)
 801b0b4:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801b0b8:	429c      	cmp	r4, r3
 801b0ba:	d913      	bls.n	801b0e4 <atan+0x3c>
 801b0bc:	4b71      	ldr	r3, [pc, #452]	@ (801b284 <atan+0x1dc>)
 801b0be:	429c      	cmp	r4, r3
 801b0c0:	d803      	bhi.n	801b0ca <atan+0x22>
 801b0c2:	d107      	bne.n	801b0d4 <atan+0x2c>
 801b0c4:	ee10 3a10 	vmov	r3, s0
 801b0c8:	b123      	cbz	r3, 801b0d4 <atan+0x2c>
 801b0ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b0ce:	eeb0 0b47 	vmov.f64	d0, d7
 801b0d2:	bd38      	pop	{r3, r4, r5, pc}
 801b0d4:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801b210 <atan+0x168>
 801b0d8:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801b218 <atan+0x170>
 801b0dc:	2d00      	cmp	r5, #0
 801b0de:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801b0e2:	e7f4      	b.n	801b0ce <atan+0x26>
 801b0e4:	4b68      	ldr	r3, [pc, #416]	@ (801b288 <atan+0x1e0>)
 801b0e6:	429c      	cmp	r4, r3
 801b0e8:	d811      	bhi.n	801b10e <atan+0x66>
 801b0ea:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801b0ee:	429c      	cmp	r4, r3
 801b0f0:	d80a      	bhi.n	801b108 <atan+0x60>
 801b0f2:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801b0f6:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801b220 <atan+0x178>
 801b0fa:	ee30 6b06 	vadd.f64	d6, d0, d6
 801b0fe:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801b102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b106:	dce2      	bgt.n	801b0ce <atan+0x26>
 801b108:	f04f 33ff 	mov.w	r3, #4294967295
 801b10c:	e013      	b.n	801b136 <atan+0x8e>
 801b10e:	f000 f8c5 	bl	801b29c <fabs>
 801b112:	4b5e      	ldr	r3, [pc, #376]	@ (801b28c <atan+0x1e4>)
 801b114:	429c      	cmp	r4, r3
 801b116:	d84f      	bhi.n	801b1b8 <atan+0x110>
 801b118:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801b11c:	429c      	cmp	r4, r3
 801b11e:	d841      	bhi.n	801b1a4 <atan+0xfc>
 801b120:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801b124:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801b128:	2300      	movs	r3, #0
 801b12a:	eea0 5b07 	vfma.f64	d5, d0, d7
 801b12e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b132:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801b136:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801b228 <atan+0x180>
 801b13a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801b13e:	ee24 5b04 	vmul.f64	d5, d4, d4
 801b142:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801b230 <atan+0x188>
 801b146:	eea5 3b06 	vfma.f64	d3, d5, d6
 801b14a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801b238 <atan+0x190>
 801b14e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801b152:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801b240 <atan+0x198>
 801b156:	eea6 3b05 	vfma.f64	d3, d6, d5
 801b15a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801b248 <atan+0x1a0>
 801b15e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801b162:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801b250 <atan+0x1a8>
 801b166:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801b258 <atan+0x1b0>
 801b16a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801b16e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801b260 <atan+0x1b8>
 801b172:	eea5 2b06 	vfma.f64	d2, d5, d6
 801b176:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801b268 <atan+0x1c0>
 801b17a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801b17e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801b270 <atan+0x1c8>
 801b182:	eea6 2b05 	vfma.f64	d2, d6, d5
 801b186:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801b278 <atan+0x1d0>
 801b18a:	1c5a      	adds	r2, r3, #1
 801b18c:	eea2 6b05 	vfma.f64	d6, d2, d5
 801b190:	ee26 6b05 	vmul.f64	d6, d6, d5
 801b194:	eea3 6b04 	vfma.f64	d6, d3, d4
 801b198:	ee27 6b06 	vmul.f64	d6, d7, d6
 801b19c:	d121      	bne.n	801b1e2 <atan+0x13a>
 801b19e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b1a2:	e794      	b.n	801b0ce <atan+0x26>
 801b1a4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801b1a8:	2301      	movs	r3, #1
 801b1aa:	ee30 5b47 	vsub.f64	d5, d0, d7
 801b1ae:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b1b2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801b1b6:	e7be      	b.n	801b136 <atan+0x8e>
 801b1b8:	4b35      	ldr	r3, [pc, #212]	@ (801b290 <atan+0x1e8>)
 801b1ba:	429c      	cmp	r4, r3
 801b1bc:	d20b      	bcs.n	801b1d6 <atan+0x12e>
 801b1be:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801b1c2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801b1c6:	ee30 5b47 	vsub.f64	d5, d0, d7
 801b1ca:	eea0 6b07 	vfma.f64	d6, d0, d7
 801b1ce:	2302      	movs	r3, #2
 801b1d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801b1d4:	e7af      	b.n	801b136 <atan+0x8e>
 801b1d6:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801b1da:	2303      	movs	r3, #3
 801b1dc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801b1e0:	e7a9      	b.n	801b136 <atan+0x8e>
 801b1e2:	4a2c      	ldr	r2, [pc, #176]	@ (801b294 <atan+0x1ec>)
 801b1e4:	492c      	ldr	r1, [pc, #176]	@ (801b298 <atan+0x1f0>)
 801b1e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801b1ea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801b1ee:	ed93 5b00 	vldr	d5, [r3]
 801b1f2:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b1f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801b1fa:	ed92 7b00 	vldr	d7, [r2]
 801b1fe:	2d00      	cmp	r5, #0
 801b200:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b204:	bfb8      	it	lt
 801b206:	eeb1 7b47 	vneglt.f64	d7, d7
 801b20a:	e760      	b.n	801b0ce <atan+0x26>
 801b20c:	f3af 8000 	nop.w
 801b210:	54442d18 	.word	0x54442d18
 801b214:	bff921fb 	.word	0xbff921fb
 801b218:	54442d18 	.word	0x54442d18
 801b21c:	3ff921fb 	.word	0x3ff921fb
 801b220:	8800759c 	.word	0x8800759c
 801b224:	7e37e43c 	.word	0x7e37e43c
 801b228:	e322da11 	.word	0xe322da11
 801b22c:	3f90ad3a 	.word	0x3f90ad3a
 801b230:	24760deb 	.word	0x24760deb
 801b234:	3fa97b4b 	.word	0x3fa97b4b
 801b238:	a0d03d51 	.word	0xa0d03d51
 801b23c:	3fb10d66 	.word	0x3fb10d66
 801b240:	c54c206e 	.word	0xc54c206e
 801b244:	3fb745cd 	.word	0x3fb745cd
 801b248:	920083ff 	.word	0x920083ff
 801b24c:	3fc24924 	.word	0x3fc24924
 801b250:	5555550d 	.word	0x5555550d
 801b254:	3fd55555 	.word	0x3fd55555
 801b258:	52defd9a 	.word	0x52defd9a
 801b25c:	bfadde2d 	.word	0xbfadde2d
 801b260:	2c6a6c2f 	.word	0x2c6a6c2f
 801b264:	bfa2b444 	.word	0xbfa2b444
 801b268:	af749a6d 	.word	0xaf749a6d
 801b26c:	bfb3b0f2 	.word	0xbfb3b0f2
 801b270:	fe231671 	.word	0xfe231671
 801b274:	bfbc71c6 	.word	0xbfbc71c6
 801b278:	9998ebc4 	.word	0x9998ebc4
 801b27c:	bfc99999 	.word	0xbfc99999
 801b280:	440fffff 	.word	0x440fffff
 801b284:	7ff00000 	.word	0x7ff00000
 801b288:	3fdbffff 	.word	0x3fdbffff
 801b28c:	3ff2ffff 	.word	0x3ff2ffff
 801b290:	40038000 	.word	0x40038000
 801b294:	0801cab8 	.word	0x0801cab8
 801b298:	0801ca98 	.word	0x0801ca98

0801b29c <fabs>:
 801b29c:	ec51 0b10 	vmov	r0, r1, d0
 801b2a0:	4602      	mov	r2, r0
 801b2a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b2a6:	ec43 2b10 	vmov	d0, r2, r3
 801b2aa:	4770      	bx	lr

0801b2ac <__kernel_tanf>:
 801b2ac:	b508      	push	{r3, lr}
 801b2ae:	ee10 3a10 	vmov	r3, s0
 801b2b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801b2b6:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 801b2ba:	eef0 7a40 	vmov.f32	s15, s0
 801b2be:	d217      	bcs.n	801b2f0 <__kernel_tanf+0x44>
 801b2c0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801b2c4:	ee17 1a10 	vmov	r1, s14
 801b2c8:	bb41      	cbnz	r1, 801b31c <__kernel_tanf+0x70>
 801b2ca:	1c43      	adds	r3, r0, #1
 801b2cc:	4313      	orrs	r3, r2
 801b2ce:	d108      	bne.n	801b2e2 <__kernel_tanf+0x36>
 801b2d0:	f7ff fb50 	bl	801a974 <fabsf>
 801b2d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b2d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b2dc:	eeb0 0a67 	vmov.f32	s0, s15
 801b2e0:	bd08      	pop	{r3, pc}
 801b2e2:	2801      	cmp	r0, #1
 801b2e4:	d0fa      	beq.n	801b2dc <__kernel_tanf+0x30>
 801b2e6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801b2ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b2ee:	e7f5      	b.n	801b2dc <__kernel_tanf+0x30>
 801b2f0:	494c      	ldr	r1, [pc, #304]	@ (801b424 <__kernel_tanf+0x178>)
 801b2f2:	428a      	cmp	r2, r1
 801b2f4:	d312      	bcc.n	801b31c <__kernel_tanf+0x70>
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 801b428 <__kernel_tanf+0x17c>
 801b2fc:	bfb8      	it	lt
 801b2fe:	eef1 7a40 	vneglt.f32	s15, s0
 801b302:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b306:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801b42c <__kernel_tanf+0x180>
 801b30a:	bfb8      	it	lt
 801b30c:	eef1 0a60 	vneglt.f32	s1, s1
 801b310:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801b314:	eddf 0a46 	vldr	s1, [pc, #280]	@ 801b430 <__kernel_tanf+0x184>
 801b318:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b31c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801b320:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801b434 <__kernel_tanf+0x188>
 801b324:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801b438 <__kernel_tanf+0x18c>
 801b328:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 801b43c <__kernel_tanf+0x190>
 801b32c:	493d      	ldr	r1, [pc, #244]	@ (801b424 <__kernel_tanf+0x178>)
 801b32e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801b332:	428a      	cmp	r2, r1
 801b334:	eea7 6a25 	vfma.f32	s12, s14, s11
 801b338:	eddf 5a41 	vldr	s11, [pc, #260]	@ 801b440 <__kernel_tanf+0x194>
 801b33c:	eee6 5a07 	vfma.f32	s11, s12, s14
 801b340:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 801b444 <__kernel_tanf+0x198>
 801b344:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b348:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801b448 <__kernel_tanf+0x19c>
 801b34c:	eee6 5a07 	vfma.f32	s11, s12, s14
 801b350:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 801b44c <__kernel_tanf+0x1a0>
 801b354:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b358:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 801b450 <__kernel_tanf+0x1a4>
 801b35c:	eee7 5a05 	vfma.f32	s11, s14, s10
 801b360:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801b454 <__kernel_tanf+0x1a8>
 801b364:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b368:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801b458 <__kernel_tanf+0x1ac>
 801b36c:	eee5 5a07 	vfma.f32	s11, s10, s14
 801b370:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801b45c <__kernel_tanf+0x1b0>
 801b374:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b378:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801b460 <__kernel_tanf+0x1b4>
 801b37c:	eee5 5a07 	vfma.f32	s11, s10, s14
 801b380:	eeb0 7a46 	vmov.f32	s14, s12
 801b384:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b388:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801b38c:	eeb0 6a60 	vmov.f32	s12, s1
 801b390:	eea7 6a05 	vfma.f32	s12, s14, s10
 801b394:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801b464 <__kernel_tanf+0x1b8>
 801b398:	eee6 0a26 	vfma.f32	s1, s12, s13
 801b39c:	eee5 0a07 	vfma.f32	s1, s10, s14
 801b3a0:	ee37 6aa0 	vadd.f32	s12, s15, s1
 801b3a4:	d31d      	bcc.n	801b3e2 <__kernel_tanf+0x136>
 801b3a6:	ee07 0a10 	vmov	s14, r0
 801b3aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b3ae:	ee26 5a06 	vmul.f32	s10, s12, s12
 801b3b2:	ee36 6a07 	vadd.f32	s12, s12, s14
 801b3b6:	179b      	asrs	r3, r3, #30
 801b3b8:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801b3bc:	f003 0302 	and.w	r3, r3, #2
 801b3c0:	f1c3 0301 	rsb	r3, r3, #1
 801b3c4:	ee06 3a90 	vmov	s13, r3
 801b3c8:	ee35 6ae0 	vsub.f32	s12, s11, s1
 801b3cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b3d0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b3d4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801b3d8:	eea7 7ac6 	vfms.f32	s14, s15, s12
 801b3dc:	ee66 7a87 	vmul.f32	s15, s13, s14
 801b3e0:	e77c      	b.n	801b2dc <__kernel_tanf+0x30>
 801b3e2:	2801      	cmp	r0, #1
 801b3e4:	d01b      	beq.n	801b41e <__kernel_tanf+0x172>
 801b3e6:	4b20      	ldr	r3, [pc, #128]	@ (801b468 <__kernel_tanf+0x1bc>)
 801b3e8:	ee16 2a10 	vmov	r2, s12
 801b3ec:	401a      	ands	r2, r3
 801b3ee:	ee05 2a90 	vmov	s11, r2
 801b3f2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801b3f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b3fa:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801b3fe:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 801b402:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801b406:	ee16 2a90 	vmov	r2, s13
 801b40a:	4013      	ands	r3, r2
 801b40c:	ee07 3a90 	vmov	s15, r3
 801b410:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801b414:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801b418:	eee7 7a26 	vfma.f32	s15, s14, s13
 801b41c:	e75e      	b.n	801b2dc <__kernel_tanf+0x30>
 801b41e:	eef0 7a46 	vmov.f32	s15, s12
 801b422:	e75b      	b.n	801b2dc <__kernel_tanf+0x30>
 801b424:	3f2ca140 	.word	0x3f2ca140
 801b428:	3f490fda 	.word	0x3f490fda
 801b42c:	33222168 	.word	0x33222168
 801b430:	00000000 	.word	0x00000000
 801b434:	b79bae5f 	.word	0xb79bae5f
 801b438:	38a3f445 	.word	0x38a3f445
 801b43c:	37d95384 	.word	0x37d95384
 801b440:	3a1a26c8 	.word	0x3a1a26c8
 801b444:	3b6b6916 	.word	0x3b6b6916
 801b448:	3cb327a4 	.word	0x3cb327a4
 801b44c:	3e088889 	.word	0x3e088889
 801b450:	3895c07a 	.word	0x3895c07a
 801b454:	398137b9 	.word	0x398137b9
 801b458:	3abede48 	.word	0x3abede48
 801b45c:	3c11371f 	.word	0x3c11371f
 801b460:	3d5d0dd1 	.word	0x3d5d0dd1
 801b464:	3eaaaaab 	.word	0x3eaaaaab
 801b468:	fffff000 	.word	0xfffff000

0801b46c <__ieee754_acosf>:
 801b46c:	b508      	push	{r3, lr}
 801b46e:	ee10 3a10 	vmov	r3, s0
 801b472:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801b476:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801b47a:	ed2d 8b0c 	vpush	{d8-d13}
 801b47e:	d109      	bne.n	801b494 <__ieee754_acosf+0x28>
 801b480:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 801b614 <__ieee754_acosf+0x1a8>
 801b484:	eddf 7a64 	vldr	s15, [pc, #400]	@ 801b618 <__ieee754_acosf+0x1ac>
 801b488:	2b00      	cmp	r3, #0
 801b48a:	fe37 0a80 	vselgt.f32	s0, s15, s0
 801b48e:	ecbd 8b0c 	vpop	{d8-d13}
 801b492:	bd08      	pop	{r3, pc}
 801b494:	d904      	bls.n	801b4a0 <__ieee754_acosf+0x34>
 801b496:	ee30 8a40 	vsub.f32	s16, s0, s0
 801b49a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801b49e:	e7f6      	b.n	801b48e <__ieee754_acosf+0x22>
 801b4a0:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801b4a4:	d23c      	bcs.n	801b520 <__ieee754_acosf+0xb4>
 801b4a6:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 801b4aa:	f240 80af 	bls.w	801b60c <__ieee754_acosf+0x1a0>
 801b4ae:	ee60 7a00 	vmul.f32	s15, s0, s0
 801b4b2:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801b61c <__ieee754_acosf+0x1b0>
 801b4b6:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 801b620 <__ieee754_acosf+0x1b4>
 801b4ba:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801b624 <__ieee754_acosf+0x1b8>
 801b4be:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801b4c2:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801b628 <__ieee754_acosf+0x1bc>
 801b4c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b4ca:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801b62c <__ieee754_acosf+0x1c0>
 801b4ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b4d2:	eddf 6a57 	vldr	s13, [pc, #348]	@ 801b630 <__ieee754_acosf+0x1c4>
 801b4d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b4da:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801b634 <__ieee754_acosf+0x1c8>
 801b4de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b4e2:	eddf 6a55 	vldr	s13, [pc, #340]	@ 801b638 <__ieee754_acosf+0x1cc>
 801b4e6:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801b4ea:	eddf 6a54 	vldr	s13, [pc, #336]	@ 801b63c <__ieee754_acosf+0x1d0>
 801b4ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b4f2:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 801b640 <__ieee754_acosf+0x1d4>
 801b4f6:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801b4fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b4fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b502:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b506:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801b644 <__ieee754_acosf+0x1d8>
 801b50a:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801b50e:	eee0 7a46 	vfms.f32	s15, s0, s12
 801b512:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b516:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 801b648 <__ieee754_acosf+0x1dc>
 801b51a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b51e:	e7b6      	b.n	801b48e <__ieee754_acosf+0x22>
 801b520:	2b00      	cmp	r3, #0
 801b522:	eddf da3e 	vldr	s27, [pc, #248]	@ 801b61c <__ieee754_acosf+0x1b0>
 801b526:	eddf ca3e 	vldr	s25, [pc, #248]	@ 801b620 <__ieee754_acosf+0x1b4>
 801b52a:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 801b628 <__ieee754_acosf+0x1bc>
 801b52e:	eddf ba3f 	vldr	s23, [pc, #252]	@ 801b62c <__ieee754_acosf+0x1c0>
 801b532:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 801b630 <__ieee754_acosf+0x1c4>
 801b536:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 801b634 <__ieee754_acosf+0x1c8>
 801b53a:	ed9f da3f 	vldr	s26, [pc, #252]	@ 801b638 <__ieee754_acosf+0x1cc>
 801b53e:	eddf aa39 	vldr	s21, [pc, #228]	@ 801b624 <__ieee754_acosf+0x1b8>
 801b542:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 801b63c <__ieee754_acosf+0x1d0>
 801b546:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 801b640 <__ieee754_acosf+0x1d4>
 801b54a:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801b54e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b552:	da28      	bge.n	801b5a6 <__ieee754_acosf+0x13a>
 801b554:	ee30 8a09 	vadd.f32	s16, s0, s18
 801b558:	ee28 0a27 	vmul.f32	s0, s16, s15
 801b55c:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801b560:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801b564:	eeac ca80 	vfma.f32	s24, s25, s0
 801b568:	eeaa aa80 	vfma.f32	s20, s21, s0
 801b56c:	eeec ba00 	vfma.f32	s23, s24, s0
 801b570:	eeea 9a00 	vfma.f32	s19, s20, s0
 801b574:	eeab ba80 	vfma.f32	s22, s23, s0
 801b578:	eea9 9a80 	vfma.f32	s18, s19, s0
 801b57c:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801b580:	ee68 8a80 	vmul.f32	s17, s17, s0
 801b584:	f000 fbee 	bl	801bd64 <__ieee754_sqrtf>
 801b588:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801b58c:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 801b64c <__ieee754_acosf+0x1e0>
 801b590:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b594:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801b598:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b59c:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 801b650 <__ieee754_acosf+0x1e4>
 801b5a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b5a4:	e773      	b.n	801b48e <__ieee754_acosf+0x22>
 801b5a6:	ee39 8a40 	vsub.f32	s16, s18, s0
 801b5aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b5ae:	eeb0 0a48 	vmov.f32	s0, s16
 801b5b2:	f000 fbd7 	bl	801bd64 <__ieee754_sqrtf>
 801b5b6:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801b5ba:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801b5be:	eeac ca88 	vfma.f32	s24, s25, s16
 801b5c2:	eeaa aa88 	vfma.f32	s20, s21, s16
 801b5c6:	eeec ba08 	vfma.f32	s23, s24, s16
 801b5ca:	ee10 3a10 	vmov	r3, s0
 801b5ce:	eeab ba88 	vfma.f32	s22, s23, s16
 801b5d2:	f36f 030b 	bfc	r3, #0, #12
 801b5d6:	eeea 9a08 	vfma.f32	s19, s20, s16
 801b5da:	ee07 3a90 	vmov	s15, r3
 801b5de:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801b5e2:	eeb0 6a48 	vmov.f32	s12, s16
 801b5e6:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801b5ea:	eea9 9a88 	vfma.f32	s18, s19, s16
 801b5ee:	ee70 6a27 	vadd.f32	s13, s0, s15
 801b5f2:	ee68 8a88 	vmul.f32	s17, s17, s16
 801b5f6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b5fa:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801b5fe:	eea0 7a26 	vfma.f32	s14, s0, s13
 801b602:	ee37 0a87 	vadd.f32	s0, s15, s14
 801b606:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b60a:	e740      	b.n	801b48e <__ieee754_acosf+0x22>
 801b60c:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801b654 <__ieee754_acosf+0x1e8>
 801b610:	e73d      	b.n	801b48e <__ieee754_acosf+0x22>
 801b612:	bf00      	nop
 801b614:	40490fdb 	.word	0x40490fdb
 801b618:	00000000 	.word	0x00000000
 801b61c:	3811ef08 	.word	0x3811ef08
 801b620:	3a4f7f04 	.word	0x3a4f7f04
 801b624:	bf303361 	.word	0xbf303361
 801b628:	bd241146 	.word	0xbd241146
 801b62c:	3e4e0aa8 	.word	0x3e4e0aa8
 801b630:	bea6b090 	.word	0xbea6b090
 801b634:	3e2aaaab 	.word	0x3e2aaaab
 801b638:	3d9dc62e 	.word	0x3d9dc62e
 801b63c:	4001572d 	.word	0x4001572d
 801b640:	c019d139 	.word	0xc019d139
 801b644:	33a22168 	.word	0x33a22168
 801b648:	3fc90fda 	.word	0x3fc90fda
 801b64c:	b3a22168 	.word	0xb3a22168
 801b650:	40490fda 	.word	0x40490fda
 801b654:	3fc90fdb 	.word	0x3fc90fdb

0801b658 <__ieee754_asinf>:
 801b658:	b538      	push	{r3, r4, r5, lr}
 801b65a:	ee10 5a10 	vmov	r5, s0
 801b65e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801b662:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801b666:	ed2d 8b04 	vpush	{d8-d9}
 801b66a:	d10c      	bne.n	801b686 <__ieee754_asinf+0x2e>
 801b66c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b7e0 <__ieee754_asinf+0x188>
 801b670:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 801b7e4 <__ieee754_asinf+0x18c>
 801b674:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b678:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b67c:	eeb0 0a67 	vmov.f32	s0, s15
 801b680:	ecbd 8b04 	vpop	{d8-d9}
 801b684:	bd38      	pop	{r3, r4, r5, pc}
 801b686:	d904      	bls.n	801b692 <__ieee754_asinf+0x3a>
 801b688:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b68c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801b690:	e7f6      	b.n	801b680 <__ieee754_asinf+0x28>
 801b692:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801b696:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801b69a:	d20b      	bcs.n	801b6b4 <__ieee754_asinf+0x5c>
 801b69c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 801b6a0:	d252      	bcs.n	801b748 <__ieee754_asinf+0xf0>
 801b6a2:	eddf 7a51 	vldr	s15, [pc, #324]	@ 801b7e8 <__ieee754_asinf+0x190>
 801b6a6:	ee70 7a27 	vadd.f32	s15, s0, s15
 801b6aa:	eef4 7ae8 	vcmpe.f32	s15, s17
 801b6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6b2:	dce5      	bgt.n	801b680 <__ieee754_asinf+0x28>
 801b6b4:	f7ff f95e 	bl	801a974 <fabsf>
 801b6b8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801b6bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b6c0:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b6c4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801b7ec <__ieee754_asinf+0x194>
 801b6c8:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801b7f0 <__ieee754_asinf+0x198>
 801b6cc:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 801b7f4 <__ieee754_asinf+0x19c>
 801b6d0:	eea8 7a27 	vfma.f32	s14, s16, s15
 801b6d4:	eddf 7a48 	vldr	s15, [pc, #288]	@ 801b7f8 <__ieee754_asinf+0x1a0>
 801b6d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 801b6dc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 801b7fc <__ieee754_asinf+0x1a4>
 801b6e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 801b6e4:	eddf 7a46 	vldr	s15, [pc, #280]	@ 801b800 <__ieee754_asinf+0x1a8>
 801b6e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 801b6ec:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801b804 <__ieee754_asinf+0x1ac>
 801b6f0:	eea7 9a88 	vfma.f32	s18, s15, s16
 801b6f4:	eddf 7a44 	vldr	s15, [pc, #272]	@ 801b808 <__ieee754_asinf+0x1b0>
 801b6f8:	eee8 7a07 	vfma.f32	s15, s16, s14
 801b6fc:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801b80c <__ieee754_asinf+0x1b4>
 801b700:	eea7 7a88 	vfma.f32	s14, s15, s16
 801b704:	eddf 7a42 	vldr	s15, [pc, #264]	@ 801b810 <__ieee754_asinf+0x1b8>
 801b708:	eee7 7a08 	vfma.f32	s15, s14, s16
 801b70c:	eeb0 0a48 	vmov.f32	s0, s16
 801b710:	eee7 8a88 	vfma.f32	s17, s15, s16
 801b714:	f000 fb26 	bl	801bd64 <__ieee754_sqrtf>
 801b718:	4b3e      	ldr	r3, [pc, #248]	@ (801b814 <__ieee754_asinf+0x1bc>)
 801b71a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801b71e:	429c      	cmp	r4, r3
 801b720:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801b724:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801b728:	d93d      	bls.n	801b7a6 <__ieee754_asinf+0x14e>
 801b72a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801b72e:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 801b818 <__ieee754_asinf+0x1c0>
 801b732:	eee0 7a26 	vfma.f32	s15, s0, s13
 801b736:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801b7e4 <__ieee754_asinf+0x18c>
 801b73a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b73e:	2d00      	cmp	r5, #0
 801b740:	bfd8      	it	le
 801b742:	eeb1 0a40 	vnegle.f32	s0, s0
 801b746:	e79b      	b.n	801b680 <__ieee754_asinf+0x28>
 801b748:	ee60 7a00 	vmul.f32	s15, s0, s0
 801b74c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 801b7f0 <__ieee754_asinf+0x198>
 801b750:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801b7ec <__ieee754_asinf+0x194>
 801b754:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 801b804 <__ieee754_asinf+0x1ac>
 801b758:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801b75c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801b7f8 <__ieee754_asinf+0x1a0>
 801b760:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b764:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 801b7fc <__ieee754_asinf+0x1a4>
 801b768:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b76c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 801b800 <__ieee754_asinf+0x1a8>
 801b770:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b774:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801b7f4 <__ieee754_asinf+0x19c>
 801b778:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b77c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 801b808 <__ieee754_asinf+0x1b0>
 801b780:	eee7 6a86 	vfma.f32	s13, s15, s12
 801b784:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 801b80c <__ieee754_asinf+0x1b4>
 801b788:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801b78c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 801b810 <__ieee754_asinf+0x1b8>
 801b790:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b794:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b798:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801b79c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801b7a0:	eea0 0a27 	vfma.f32	s0, s0, s15
 801b7a4:	e76c      	b.n	801b680 <__ieee754_asinf+0x28>
 801b7a6:	ee10 3a10 	vmov	r3, s0
 801b7aa:	f36f 030b 	bfc	r3, #0, #12
 801b7ae:	ee07 3a10 	vmov	s14, r3
 801b7b2:	eea7 8a47 	vfms.f32	s16, s14, s14
 801b7b6:	ee70 5a00 	vadd.f32	s11, s0, s0
 801b7ba:	ee30 0a07 	vadd.f32	s0, s0, s14
 801b7be:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801b7e0 <__ieee754_asinf+0x188>
 801b7c2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801b7c6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801b81c <__ieee754_asinf+0x1c4>
 801b7ca:	eee5 7a66 	vfms.f32	s15, s10, s13
 801b7ce:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801b7d2:	eeb0 6a40 	vmov.f32	s12, s0
 801b7d6:	eea7 6a66 	vfms.f32	s12, s14, s13
 801b7da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b7de:	e7ac      	b.n	801b73a <__ieee754_asinf+0xe2>
 801b7e0:	b33bbd2e 	.word	0xb33bbd2e
 801b7e4:	3fc90fdb 	.word	0x3fc90fdb
 801b7e8:	7149f2ca 	.word	0x7149f2ca
 801b7ec:	3a4f7f04 	.word	0x3a4f7f04
 801b7f0:	3811ef08 	.word	0x3811ef08
 801b7f4:	3e2aaaab 	.word	0x3e2aaaab
 801b7f8:	bd241146 	.word	0xbd241146
 801b7fc:	3e4e0aa8 	.word	0x3e4e0aa8
 801b800:	bea6b090 	.word	0xbea6b090
 801b804:	3d9dc62e 	.word	0x3d9dc62e
 801b808:	bf303361 	.word	0xbf303361
 801b80c:	4001572d 	.word	0x4001572d
 801b810:	c019d139 	.word	0xc019d139
 801b814:	3f799999 	.word	0x3f799999
 801b818:	333bbd2e 	.word	0x333bbd2e
 801b81c:	3f490fdb 	.word	0x3f490fdb

0801b820 <__ieee754_atan2f>:
 801b820:	ee10 2a90 	vmov	r2, s1
 801b824:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801b828:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801b82c:	b510      	push	{r4, lr}
 801b82e:	eef0 7a40 	vmov.f32	s15, s0
 801b832:	d806      	bhi.n	801b842 <__ieee754_atan2f+0x22>
 801b834:	ee10 0a10 	vmov	r0, s0
 801b838:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801b83c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b840:	d904      	bls.n	801b84c <__ieee754_atan2f+0x2c>
 801b842:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801b846:	eeb0 0a67 	vmov.f32	s0, s15
 801b84a:	bd10      	pop	{r4, pc}
 801b84c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801b850:	d103      	bne.n	801b85a <__ieee754_atan2f+0x3a>
 801b852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b856:	f000 b9b1 	b.w	801bbbc <atanf>
 801b85a:	1794      	asrs	r4, r2, #30
 801b85c:	f004 0402 	and.w	r4, r4, #2
 801b860:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801b864:	b93b      	cbnz	r3, 801b876 <__ieee754_atan2f+0x56>
 801b866:	2c02      	cmp	r4, #2
 801b868:	d05c      	beq.n	801b924 <__ieee754_atan2f+0x104>
 801b86a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801b938 <__ieee754_atan2f+0x118>
 801b86e:	2c03      	cmp	r4, #3
 801b870:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801b874:	e7e7      	b.n	801b846 <__ieee754_atan2f+0x26>
 801b876:	b939      	cbnz	r1, 801b888 <__ieee754_atan2f+0x68>
 801b878:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801b93c <__ieee754_atan2f+0x11c>
 801b87c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801b940 <__ieee754_atan2f+0x120>
 801b880:	2800      	cmp	r0, #0
 801b882:	fe67 7a27 	vselge.f32	s15, s14, s15
 801b886:	e7de      	b.n	801b846 <__ieee754_atan2f+0x26>
 801b888:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801b88c:	d110      	bne.n	801b8b0 <__ieee754_atan2f+0x90>
 801b88e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b892:	f104 34ff 	add.w	r4, r4, #4294967295
 801b896:	d107      	bne.n	801b8a8 <__ieee754_atan2f+0x88>
 801b898:	2c02      	cmp	r4, #2
 801b89a:	d846      	bhi.n	801b92a <__ieee754_atan2f+0x10a>
 801b89c:	4b29      	ldr	r3, [pc, #164]	@ (801b944 <__ieee754_atan2f+0x124>)
 801b89e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b8a2:	edd3 7a00 	vldr	s15, [r3]
 801b8a6:	e7ce      	b.n	801b846 <__ieee754_atan2f+0x26>
 801b8a8:	2c02      	cmp	r4, #2
 801b8aa:	d841      	bhi.n	801b930 <__ieee754_atan2f+0x110>
 801b8ac:	4b26      	ldr	r3, [pc, #152]	@ (801b948 <__ieee754_atan2f+0x128>)
 801b8ae:	e7f6      	b.n	801b89e <__ieee754_atan2f+0x7e>
 801b8b0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b8b4:	d0e0      	beq.n	801b878 <__ieee754_atan2f+0x58>
 801b8b6:	1a5b      	subs	r3, r3, r1
 801b8b8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801b8bc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801b8c0:	da1a      	bge.n	801b8f8 <__ieee754_atan2f+0xd8>
 801b8c2:	2a00      	cmp	r2, #0
 801b8c4:	da01      	bge.n	801b8ca <__ieee754_atan2f+0xaa>
 801b8c6:	313c      	adds	r1, #60	@ 0x3c
 801b8c8:	db19      	blt.n	801b8fe <__ieee754_atan2f+0xde>
 801b8ca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801b8ce:	f7ff f851 	bl	801a974 <fabsf>
 801b8d2:	f000 f973 	bl	801bbbc <atanf>
 801b8d6:	eef0 7a40 	vmov.f32	s15, s0
 801b8da:	2c01      	cmp	r4, #1
 801b8dc:	d012      	beq.n	801b904 <__ieee754_atan2f+0xe4>
 801b8de:	2c02      	cmp	r4, #2
 801b8e0:	d017      	beq.n	801b912 <__ieee754_atan2f+0xf2>
 801b8e2:	2c00      	cmp	r4, #0
 801b8e4:	d0af      	beq.n	801b846 <__ieee754_atan2f+0x26>
 801b8e6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801b94c <__ieee754_atan2f+0x12c>
 801b8ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b8ee:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801b950 <__ieee754_atan2f+0x130>
 801b8f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b8f6:	e7a6      	b.n	801b846 <__ieee754_atan2f+0x26>
 801b8f8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801b940 <__ieee754_atan2f+0x120>
 801b8fc:	e7ed      	b.n	801b8da <__ieee754_atan2f+0xba>
 801b8fe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801b954 <__ieee754_atan2f+0x134>
 801b902:	e7ea      	b.n	801b8da <__ieee754_atan2f+0xba>
 801b904:	ee17 3a90 	vmov	r3, s15
 801b908:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801b90c:	ee07 3a90 	vmov	s15, r3
 801b910:	e799      	b.n	801b846 <__ieee754_atan2f+0x26>
 801b912:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801b94c <__ieee754_atan2f+0x12c>
 801b916:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b91a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801b950 <__ieee754_atan2f+0x130>
 801b91e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b922:	e790      	b.n	801b846 <__ieee754_atan2f+0x26>
 801b924:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801b950 <__ieee754_atan2f+0x130>
 801b928:	e78d      	b.n	801b846 <__ieee754_atan2f+0x26>
 801b92a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801b958 <__ieee754_atan2f+0x138>
 801b92e:	e78a      	b.n	801b846 <__ieee754_atan2f+0x26>
 801b930:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801b954 <__ieee754_atan2f+0x134>
 801b934:	e787      	b.n	801b846 <__ieee754_atan2f+0x26>
 801b936:	bf00      	nop
 801b938:	c0490fdb 	.word	0xc0490fdb
 801b93c:	bfc90fdb 	.word	0xbfc90fdb
 801b940:	3fc90fdb 	.word	0x3fc90fdb
 801b944:	0801cae4 	.word	0x0801cae4
 801b948:	0801cad8 	.word	0x0801cad8
 801b94c:	33bbbd2e 	.word	0x33bbbd2e
 801b950:	40490fdb 	.word	0x40490fdb
 801b954:	00000000 	.word	0x00000000
 801b958:	3f490fdb 	.word	0x3f490fdb

0801b95c <__ieee754_rem_pio2f>:
 801b95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b95e:	ee10 6a10 	vmov	r6, s0
 801b962:	4b88      	ldr	r3, [pc, #544]	@ (801bb84 <__ieee754_rem_pio2f+0x228>)
 801b964:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801b968:	429d      	cmp	r5, r3
 801b96a:	b087      	sub	sp, #28
 801b96c:	4604      	mov	r4, r0
 801b96e:	d805      	bhi.n	801b97c <__ieee754_rem_pio2f+0x20>
 801b970:	2300      	movs	r3, #0
 801b972:	ed80 0a00 	vstr	s0, [r0]
 801b976:	6043      	str	r3, [r0, #4]
 801b978:	2000      	movs	r0, #0
 801b97a:	e022      	b.n	801b9c2 <__ieee754_rem_pio2f+0x66>
 801b97c:	4b82      	ldr	r3, [pc, #520]	@ (801bb88 <__ieee754_rem_pio2f+0x22c>)
 801b97e:	429d      	cmp	r5, r3
 801b980:	d83a      	bhi.n	801b9f8 <__ieee754_rem_pio2f+0x9c>
 801b982:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801b986:	2e00      	cmp	r6, #0
 801b988:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801bb8c <__ieee754_rem_pio2f+0x230>
 801b98c:	4a80      	ldr	r2, [pc, #512]	@ (801bb90 <__ieee754_rem_pio2f+0x234>)
 801b98e:	f023 030f 	bic.w	r3, r3, #15
 801b992:	dd18      	ble.n	801b9c6 <__ieee754_rem_pio2f+0x6a>
 801b994:	4293      	cmp	r3, r2
 801b996:	ee70 7a47 	vsub.f32	s15, s0, s14
 801b99a:	bf09      	itett	eq
 801b99c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801bb94 <__ieee754_rem_pio2f+0x238>
 801b9a0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801bb98 <__ieee754_rem_pio2f+0x23c>
 801b9a4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801bb9c <__ieee754_rem_pio2f+0x240>
 801b9a8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801b9ac:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801b9b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b9b4:	ed80 7a00 	vstr	s14, [r0]
 801b9b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b9bc:	edc0 7a01 	vstr	s15, [r0, #4]
 801b9c0:	2001      	movs	r0, #1
 801b9c2:	b007      	add	sp, #28
 801b9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9c6:	4293      	cmp	r3, r2
 801b9c8:	ee70 7a07 	vadd.f32	s15, s0, s14
 801b9cc:	bf09      	itett	eq
 801b9ce:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801bb94 <__ieee754_rem_pio2f+0x238>
 801b9d2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801bb98 <__ieee754_rem_pio2f+0x23c>
 801b9d6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801bb9c <__ieee754_rem_pio2f+0x240>
 801b9da:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801b9de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b9e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b9e6:	ed80 7a00 	vstr	s14, [r0]
 801b9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b9ee:	edc0 7a01 	vstr	s15, [r0, #4]
 801b9f2:	f04f 30ff 	mov.w	r0, #4294967295
 801b9f6:	e7e4      	b.n	801b9c2 <__ieee754_rem_pio2f+0x66>
 801b9f8:	4b69      	ldr	r3, [pc, #420]	@ (801bba0 <__ieee754_rem_pio2f+0x244>)
 801b9fa:	429d      	cmp	r5, r3
 801b9fc:	d873      	bhi.n	801bae6 <__ieee754_rem_pio2f+0x18a>
 801b9fe:	f7fe ffb9 	bl	801a974 <fabsf>
 801ba02:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801bba4 <__ieee754_rem_pio2f+0x248>
 801ba06:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ba0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ba0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ba12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ba16:	ee17 0a90 	vmov	r0, s15
 801ba1a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801bb8c <__ieee754_rem_pio2f+0x230>
 801ba1e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801ba22:	281f      	cmp	r0, #31
 801ba24:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801bb98 <__ieee754_rem_pio2f+0x23c>
 801ba28:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ba2c:	eeb1 6a47 	vneg.f32	s12, s14
 801ba30:	ee70 6a67 	vsub.f32	s13, s0, s15
 801ba34:	ee16 1a90 	vmov	r1, s13
 801ba38:	dc09      	bgt.n	801ba4e <__ieee754_rem_pio2f+0xf2>
 801ba3a:	4a5b      	ldr	r2, [pc, #364]	@ (801bba8 <__ieee754_rem_pio2f+0x24c>)
 801ba3c:	1e47      	subs	r7, r0, #1
 801ba3e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801ba42:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801ba46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801ba4a:	4293      	cmp	r3, r2
 801ba4c:	d107      	bne.n	801ba5e <__ieee754_rem_pio2f+0x102>
 801ba4e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801ba52:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801ba56:	2a08      	cmp	r2, #8
 801ba58:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801ba5c:	dc14      	bgt.n	801ba88 <__ieee754_rem_pio2f+0x12c>
 801ba5e:	6021      	str	r1, [r4, #0]
 801ba60:	ed94 7a00 	vldr	s14, [r4]
 801ba64:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ba68:	2e00      	cmp	r6, #0
 801ba6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ba6e:	ed84 0a01 	vstr	s0, [r4, #4]
 801ba72:	daa6      	bge.n	801b9c2 <__ieee754_rem_pio2f+0x66>
 801ba74:	eeb1 7a47 	vneg.f32	s14, s14
 801ba78:	eeb1 0a40 	vneg.f32	s0, s0
 801ba7c:	ed84 7a00 	vstr	s14, [r4]
 801ba80:	ed84 0a01 	vstr	s0, [r4, #4]
 801ba84:	4240      	negs	r0, r0
 801ba86:	e79c      	b.n	801b9c2 <__ieee754_rem_pio2f+0x66>
 801ba88:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801bb94 <__ieee754_rem_pio2f+0x238>
 801ba8c:	eef0 6a40 	vmov.f32	s13, s0
 801ba90:	eee6 6a25 	vfma.f32	s13, s12, s11
 801ba94:	ee70 7a66 	vsub.f32	s15, s0, s13
 801ba98:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ba9c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801bb9c <__ieee754_rem_pio2f+0x240>
 801baa0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801baa4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801baa8:	ee15 2a90 	vmov	r2, s11
 801baac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801bab0:	1a5b      	subs	r3, r3, r1
 801bab2:	2b19      	cmp	r3, #25
 801bab4:	dc04      	bgt.n	801bac0 <__ieee754_rem_pio2f+0x164>
 801bab6:	edc4 5a00 	vstr	s11, [r4]
 801baba:	eeb0 0a66 	vmov.f32	s0, s13
 801babe:	e7cf      	b.n	801ba60 <__ieee754_rem_pio2f+0x104>
 801bac0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801bbac <__ieee754_rem_pio2f+0x250>
 801bac4:	eeb0 0a66 	vmov.f32	s0, s13
 801bac8:	eea6 0a25 	vfma.f32	s0, s12, s11
 801bacc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801bad0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801bbb0 <__ieee754_rem_pio2f+0x254>
 801bad4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801bad8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801badc:	ee30 7a67 	vsub.f32	s14, s0, s15
 801bae0:	ed84 7a00 	vstr	s14, [r4]
 801bae4:	e7bc      	b.n	801ba60 <__ieee754_rem_pio2f+0x104>
 801bae6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801baea:	d306      	bcc.n	801bafa <__ieee754_rem_pio2f+0x19e>
 801baec:	ee70 7a40 	vsub.f32	s15, s0, s0
 801baf0:	edc0 7a01 	vstr	s15, [r0, #4]
 801baf4:	edc0 7a00 	vstr	s15, [r0]
 801baf8:	e73e      	b.n	801b978 <__ieee754_rem_pio2f+0x1c>
 801bafa:	15ea      	asrs	r2, r5, #23
 801bafc:	3a86      	subs	r2, #134	@ 0x86
 801bafe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801bb02:	ee07 3a90 	vmov	s15, r3
 801bb06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801bb0a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801bbb4 <__ieee754_rem_pio2f+0x258>
 801bb0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bb12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bb16:	ed8d 7a03 	vstr	s14, [sp, #12]
 801bb1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bb1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801bb22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bb26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bb2a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801bb2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bb32:	eef5 7a40 	vcmp.f32	s15, #0.0
 801bb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb3a:	edcd 7a05 	vstr	s15, [sp, #20]
 801bb3e:	d11e      	bne.n	801bb7e <__ieee754_rem_pio2f+0x222>
 801bb40:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801bb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb48:	bf0c      	ite	eq
 801bb4a:	2301      	moveq	r3, #1
 801bb4c:	2302      	movne	r3, #2
 801bb4e:	491a      	ldr	r1, [pc, #104]	@ (801bbb8 <__ieee754_rem_pio2f+0x25c>)
 801bb50:	9101      	str	r1, [sp, #4]
 801bb52:	2102      	movs	r1, #2
 801bb54:	9100      	str	r1, [sp, #0]
 801bb56:	a803      	add	r0, sp, #12
 801bb58:	4621      	mov	r1, r4
 801bb5a:	f000 f907 	bl	801bd6c <__kernel_rem_pio2f>
 801bb5e:	2e00      	cmp	r6, #0
 801bb60:	f6bf af2f 	bge.w	801b9c2 <__ieee754_rem_pio2f+0x66>
 801bb64:	edd4 7a00 	vldr	s15, [r4]
 801bb68:	eef1 7a67 	vneg.f32	s15, s15
 801bb6c:	edc4 7a00 	vstr	s15, [r4]
 801bb70:	edd4 7a01 	vldr	s15, [r4, #4]
 801bb74:	eef1 7a67 	vneg.f32	s15, s15
 801bb78:	edc4 7a01 	vstr	s15, [r4, #4]
 801bb7c:	e782      	b.n	801ba84 <__ieee754_rem_pio2f+0x128>
 801bb7e:	2303      	movs	r3, #3
 801bb80:	e7e5      	b.n	801bb4e <__ieee754_rem_pio2f+0x1f2>
 801bb82:	bf00      	nop
 801bb84:	3f490fd8 	.word	0x3f490fd8
 801bb88:	4016cbe3 	.word	0x4016cbe3
 801bb8c:	3fc90f80 	.word	0x3fc90f80
 801bb90:	3fc90fd0 	.word	0x3fc90fd0
 801bb94:	37354400 	.word	0x37354400
 801bb98:	37354443 	.word	0x37354443
 801bb9c:	2e85a308 	.word	0x2e85a308
 801bba0:	43490f80 	.word	0x43490f80
 801bba4:	3f22f984 	.word	0x3f22f984
 801bba8:	0801caf0 	.word	0x0801caf0
 801bbac:	2e85a300 	.word	0x2e85a300
 801bbb0:	248d3132 	.word	0x248d3132
 801bbb4:	43800000 	.word	0x43800000
 801bbb8:	0801cb70 	.word	0x0801cb70

0801bbbc <atanf>:
 801bbbc:	b538      	push	{r3, r4, r5, lr}
 801bbbe:	ee10 5a10 	vmov	r5, s0
 801bbc2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801bbc6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801bbca:	eef0 7a40 	vmov.f32	s15, s0
 801bbce:	d30f      	bcc.n	801bbf0 <atanf+0x34>
 801bbd0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801bbd4:	d904      	bls.n	801bbe0 <atanf+0x24>
 801bbd6:	ee70 7a00 	vadd.f32	s15, s0, s0
 801bbda:	eeb0 0a67 	vmov.f32	s0, s15
 801bbde:	bd38      	pop	{r3, r4, r5, pc}
 801bbe0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801bd18 <atanf+0x15c>
 801bbe4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801bd1c <atanf+0x160>
 801bbe8:	2d00      	cmp	r5, #0
 801bbea:	fe77 7a27 	vselgt.f32	s15, s14, s15
 801bbee:	e7f4      	b.n	801bbda <atanf+0x1e>
 801bbf0:	4b4b      	ldr	r3, [pc, #300]	@ (801bd20 <atanf+0x164>)
 801bbf2:	429c      	cmp	r4, r3
 801bbf4:	d810      	bhi.n	801bc18 <atanf+0x5c>
 801bbf6:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801bbfa:	d20a      	bcs.n	801bc12 <atanf+0x56>
 801bbfc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801bd24 <atanf+0x168>
 801bc00:	ee30 7a07 	vadd.f32	s14, s0, s14
 801bc04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bc08:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801bc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc10:	dce3      	bgt.n	801bbda <atanf+0x1e>
 801bc12:	f04f 33ff 	mov.w	r3, #4294967295
 801bc16:	e013      	b.n	801bc40 <atanf+0x84>
 801bc18:	f7fe feac 	bl	801a974 <fabsf>
 801bc1c:	4b42      	ldr	r3, [pc, #264]	@ (801bd28 <atanf+0x16c>)
 801bc1e:	429c      	cmp	r4, r3
 801bc20:	d84f      	bhi.n	801bcc2 <atanf+0x106>
 801bc22:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801bc26:	429c      	cmp	r4, r3
 801bc28:	d841      	bhi.n	801bcae <atanf+0xf2>
 801bc2a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801bc2e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801bc32:	eea0 7a27 	vfma.f32	s14, s0, s15
 801bc36:	2300      	movs	r3, #0
 801bc38:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bc3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bc40:	1c5a      	adds	r2, r3, #1
 801bc42:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801bc46:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 801bd2c <atanf+0x170>
 801bc4a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801bd30 <atanf+0x174>
 801bc4e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 801bd34 <atanf+0x178>
 801bc52:	ee66 6a06 	vmul.f32	s13, s12, s12
 801bc56:	eee6 5a87 	vfma.f32	s11, s13, s14
 801bc5a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 801bd38 <atanf+0x17c>
 801bc5e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801bc62:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801bd3c <atanf+0x180>
 801bc66:	eee7 5a26 	vfma.f32	s11, s14, s13
 801bc6a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 801bd40 <atanf+0x184>
 801bc6e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801bc72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801bd44 <atanf+0x188>
 801bc76:	eee7 5a26 	vfma.f32	s11, s14, s13
 801bc7a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801bd48 <atanf+0x18c>
 801bc7e:	eea6 5a87 	vfma.f32	s10, s13, s14
 801bc82:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801bd4c <atanf+0x190>
 801bc86:	eea5 7a26 	vfma.f32	s14, s10, s13
 801bc8a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 801bd50 <atanf+0x194>
 801bc8e:	eea7 5a26 	vfma.f32	s10, s14, s13
 801bc92:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801bd54 <atanf+0x198>
 801bc96:	eea5 7a26 	vfma.f32	s14, s10, s13
 801bc9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801bc9e:	eea5 7a86 	vfma.f32	s14, s11, s12
 801bca2:	ee27 7a87 	vmul.f32	s14, s15, s14
 801bca6:	d121      	bne.n	801bcec <atanf+0x130>
 801bca8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bcac:	e795      	b.n	801bbda <atanf+0x1e>
 801bcae:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801bcb2:	ee30 7a67 	vsub.f32	s14, s0, s15
 801bcb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bcba:	2301      	movs	r3, #1
 801bcbc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bcc0:	e7be      	b.n	801bc40 <atanf+0x84>
 801bcc2:	4b25      	ldr	r3, [pc, #148]	@ (801bd58 <atanf+0x19c>)
 801bcc4:	429c      	cmp	r4, r3
 801bcc6:	d80b      	bhi.n	801bce0 <atanf+0x124>
 801bcc8:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801bccc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801bcd0:	eea0 7a27 	vfma.f32	s14, s0, s15
 801bcd4:	2302      	movs	r3, #2
 801bcd6:	ee70 6a67 	vsub.f32	s13, s0, s15
 801bcda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bcde:	e7af      	b.n	801bc40 <atanf+0x84>
 801bce0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801bce4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bce8:	2303      	movs	r3, #3
 801bcea:	e7a9      	b.n	801bc40 <atanf+0x84>
 801bcec:	4a1b      	ldr	r2, [pc, #108]	@ (801bd5c <atanf+0x1a0>)
 801bcee:	491c      	ldr	r1, [pc, #112]	@ (801bd60 <atanf+0x1a4>)
 801bcf0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801bcf4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bcf8:	edd3 6a00 	vldr	s13, [r3]
 801bcfc:	ee37 7a66 	vsub.f32	s14, s14, s13
 801bd00:	2d00      	cmp	r5, #0
 801bd02:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bd06:	edd2 7a00 	vldr	s15, [r2]
 801bd0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bd0e:	bfb8      	it	lt
 801bd10:	eef1 7a67 	vneglt.f32	s15, s15
 801bd14:	e761      	b.n	801bbda <atanf+0x1e>
 801bd16:	bf00      	nop
 801bd18:	bfc90fdb 	.word	0xbfc90fdb
 801bd1c:	3fc90fdb 	.word	0x3fc90fdb
 801bd20:	3edfffff 	.word	0x3edfffff
 801bd24:	7149f2ca 	.word	0x7149f2ca
 801bd28:	3f97ffff 	.word	0x3f97ffff
 801bd2c:	3c8569d7 	.word	0x3c8569d7
 801bd30:	3d4bda59 	.word	0x3d4bda59
 801bd34:	bd6ef16b 	.word	0xbd6ef16b
 801bd38:	3d886b35 	.word	0x3d886b35
 801bd3c:	3dba2e6e 	.word	0x3dba2e6e
 801bd40:	3e124925 	.word	0x3e124925
 801bd44:	3eaaaaab 	.word	0x3eaaaaab
 801bd48:	bd15a221 	.word	0xbd15a221
 801bd4c:	bd9d8795 	.word	0xbd9d8795
 801bd50:	bde38e38 	.word	0xbde38e38
 801bd54:	be4ccccd 	.word	0xbe4ccccd
 801bd58:	401bffff 	.word	0x401bffff
 801bd5c:	0801ce98 	.word	0x0801ce98
 801bd60:	0801ce88 	.word	0x0801ce88

0801bd64 <__ieee754_sqrtf>:
 801bd64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801bd68:	4770      	bx	lr
	...

0801bd6c <__kernel_rem_pio2f>:
 801bd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd70:	ed2d 8b04 	vpush	{d8-d9}
 801bd74:	b0d9      	sub	sp, #356	@ 0x164
 801bd76:	4690      	mov	r8, r2
 801bd78:	9001      	str	r0, [sp, #4]
 801bd7a:	4ab6      	ldr	r2, [pc, #728]	@ (801c054 <__kernel_rem_pio2f+0x2e8>)
 801bd7c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801bd7e:	f118 0f04 	cmn.w	r8, #4
 801bd82:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801bd86:	460f      	mov	r7, r1
 801bd88:	f103 3bff 	add.w	fp, r3, #4294967295
 801bd8c:	db26      	blt.n	801bddc <__kernel_rem_pio2f+0x70>
 801bd8e:	f1b8 0203 	subs.w	r2, r8, #3
 801bd92:	bf48      	it	mi
 801bd94:	f108 0204 	addmi.w	r2, r8, #4
 801bd98:	10d2      	asrs	r2, r2, #3
 801bd9a:	1c55      	adds	r5, r2, #1
 801bd9c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801bd9e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801c064 <__kernel_rem_pio2f+0x2f8>
 801bda2:	00e8      	lsls	r0, r5, #3
 801bda4:	eba2 060b 	sub.w	r6, r2, fp
 801bda8:	9002      	str	r0, [sp, #8]
 801bdaa:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801bdae:	eb0a 0c0b 	add.w	ip, sl, fp
 801bdb2:	ac1c      	add	r4, sp, #112	@ 0x70
 801bdb4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801bdb8:	2000      	movs	r0, #0
 801bdba:	4560      	cmp	r0, ip
 801bdbc:	dd10      	ble.n	801bde0 <__kernel_rem_pio2f+0x74>
 801bdbe:	a91c      	add	r1, sp, #112	@ 0x70
 801bdc0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801bdc4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801bdc8:	2600      	movs	r6, #0
 801bdca:	4556      	cmp	r6, sl
 801bdcc:	dc24      	bgt.n	801be18 <__kernel_rem_pio2f+0xac>
 801bdce:	f8dd e004 	ldr.w	lr, [sp, #4]
 801bdd2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801c064 <__kernel_rem_pio2f+0x2f8>
 801bdd6:	4684      	mov	ip, r0
 801bdd8:	2400      	movs	r4, #0
 801bdda:	e016      	b.n	801be0a <__kernel_rem_pio2f+0x9e>
 801bddc:	2200      	movs	r2, #0
 801bdde:	e7dc      	b.n	801bd9a <__kernel_rem_pio2f+0x2e>
 801bde0:	42c6      	cmn	r6, r0
 801bde2:	bf5d      	ittte	pl
 801bde4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801bde8:	ee07 1a90 	vmovpl	s15, r1
 801bdec:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801bdf0:	eef0 7a47 	vmovmi.f32	s15, s14
 801bdf4:	ece4 7a01 	vstmia	r4!, {s15}
 801bdf8:	3001      	adds	r0, #1
 801bdfa:	e7de      	b.n	801bdba <__kernel_rem_pio2f+0x4e>
 801bdfc:	ecfe 6a01 	vldmia	lr!, {s13}
 801be00:	ed3c 7a01 	vldmdb	ip!, {s14}
 801be04:	eee6 7a87 	vfma.f32	s15, s13, s14
 801be08:	3401      	adds	r4, #1
 801be0a:	455c      	cmp	r4, fp
 801be0c:	ddf6      	ble.n	801bdfc <__kernel_rem_pio2f+0x90>
 801be0e:	ece9 7a01 	vstmia	r9!, {s15}
 801be12:	3601      	adds	r6, #1
 801be14:	3004      	adds	r0, #4
 801be16:	e7d8      	b.n	801bdca <__kernel_rem_pio2f+0x5e>
 801be18:	a908      	add	r1, sp, #32
 801be1a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801be1e:	9104      	str	r1, [sp, #16]
 801be20:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801be22:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801c060 <__kernel_rem_pio2f+0x2f4>
 801be26:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801c05c <__kernel_rem_pio2f+0x2f0>
 801be2a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801be2e:	9203      	str	r2, [sp, #12]
 801be30:	4654      	mov	r4, sl
 801be32:	00a2      	lsls	r2, r4, #2
 801be34:	9205      	str	r2, [sp, #20]
 801be36:	aa58      	add	r2, sp, #352	@ 0x160
 801be38:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801be3c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801be40:	a944      	add	r1, sp, #272	@ 0x110
 801be42:	aa08      	add	r2, sp, #32
 801be44:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801be48:	4694      	mov	ip, r2
 801be4a:	4626      	mov	r6, r4
 801be4c:	2e00      	cmp	r6, #0
 801be4e:	dc4c      	bgt.n	801beea <__kernel_rem_pio2f+0x17e>
 801be50:	4628      	mov	r0, r5
 801be52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801be56:	f000 f9f1 	bl	801c23c <scalbnf>
 801be5a:	eeb0 8a40 	vmov.f32	s16, s0
 801be5e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801be62:	ee28 0a00 	vmul.f32	s0, s16, s0
 801be66:	f000 fa4d 	bl	801c304 <floorf>
 801be6a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801be6e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801be72:	2d00      	cmp	r5, #0
 801be74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801be78:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801be7c:	ee17 9a90 	vmov	r9, s15
 801be80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be84:	ee38 8a67 	vsub.f32	s16, s16, s15
 801be88:	dd41      	ble.n	801bf0e <__kernel_rem_pio2f+0x1a2>
 801be8a:	f104 3cff 	add.w	ip, r4, #4294967295
 801be8e:	a908      	add	r1, sp, #32
 801be90:	f1c5 0e08 	rsb	lr, r5, #8
 801be94:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801be98:	fa46 f00e 	asr.w	r0, r6, lr
 801be9c:	4481      	add	r9, r0
 801be9e:	fa00 f00e 	lsl.w	r0, r0, lr
 801bea2:	1a36      	subs	r6, r6, r0
 801bea4:	f1c5 0007 	rsb	r0, r5, #7
 801bea8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801beac:	4106      	asrs	r6, r0
 801beae:	2e00      	cmp	r6, #0
 801beb0:	dd3c      	ble.n	801bf2c <__kernel_rem_pio2f+0x1c0>
 801beb2:	f04f 0e00 	mov.w	lr, #0
 801beb6:	f109 0901 	add.w	r9, r9, #1
 801beba:	4670      	mov	r0, lr
 801bebc:	4574      	cmp	r4, lr
 801bebe:	dc68      	bgt.n	801bf92 <__kernel_rem_pio2f+0x226>
 801bec0:	2d00      	cmp	r5, #0
 801bec2:	dd03      	ble.n	801becc <__kernel_rem_pio2f+0x160>
 801bec4:	2d01      	cmp	r5, #1
 801bec6:	d074      	beq.n	801bfb2 <__kernel_rem_pio2f+0x246>
 801bec8:	2d02      	cmp	r5, #2
 801beca:	d07d      	beq.n	801bfc8 <__kernel_rem_pio2f+0x25c>
 801becc:	2e02      	cmp	r6, #2
 801bece:	d12d      	bne.n	801bf2c <__kernel_rem_pio2f+0x1c0>
 801bed0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801bed4:	ee30 8a48 	vsub.f32	s16, s0, s16
 801bed8:	b340      	cbz	r0, 801bf2c <__kernel_rem_pio2f+0x1c0>
 801beda:	4628      	mov	r0, r5
 801bedc:	9306      	str	r3, [sp, #24]
 801bede:	f000 f9ad 	bl	801c23c <scalbnf>
 801bee2:	9b06      	ldr	r3, [sp, #24]
 801bee4:	ee38 8a40 	vsub.f32	s16, s16, s0
 801bee8:	e020      	b.n	801bf2c <__kernel_rem_pio2f+0x1c0>
 801beea:	ee60 7a28 	vmul.f32	s15, s0, s17
 801beee:	3e01      	subs	r6, #1
 801bef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bef8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801befc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bf00:	ecac 0a01 	vstmia	ip!, {s0}
 801bf04:	ed30 0a01 	vldmdb	r0!, {s0}
 801bf08:	ee37 0a80 	vadd.f32	s0, s15, s0
 801bf0c:	e79e      	b.n	801be4c <__kernel_rem_pio2f+0xe0>
 801bf0e:	d105      	bne.n	801bf1c <__kernel_rem_pio2f+0x1b0>
 801bf10:	1e60      	subs	r0, r4, #1
 801bf12:	a908      	add	r1, sp, #32
 801bf14:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801bf18:	11f6      	asrs	r6, r6, #7
 801bf1a:	e7c8      	b.n	801beae <__kernel_rem_pio2f+0x142>
 801bf1c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801bf20:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf28:	da31      	bge.n	801bf8e <__kernel_rem_pio2f+0x222>
 801bf2a:	2600      	movs	r6, #0
 801bf2c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801bf30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf34:	f040 8098 	bne.w	801c068 <__kernel_rem_pio2f+0x2fc>
 801bf38:	1e60      	subs	r0, r4, #1
 801bf3a:	2200      	movs	r2, #0
 801bf3c:	4550      	cmp	r0, sl
 801bf3e:	da4b      	bge.n	801bfd8 <__kernel_rem_pio2f+0x26c>
 801bf40:	2a00      	cmp	r2, #0
 801bf42:	d065      	beq.n	801c010 <__kernel_rem_pio2f+0x2a4>
 801bf44:	3c01      	subs	r4, #1
 801bf46:	ab08      	add	r3, sp, #32
 801bf48:	3d08      	subs	r5, #8
 801bf4a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d0f8      	beq.n	801bf44 <__kernel_rem_pio2f+0x1d8>
 801bf52:	4628      	mov	r0, r5
 801bf54:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801bf58:	f000 f970 	bl	801c23c <scalbnf>
 801bf5c:	1c63      	adds	r3, r4, #1
 801bf5e:	aa44      	add	r2, sp, #272	@ 0x110
 801bf60:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801c060 <__kernel_rem_pio2f+0x2f4>
 801bf64:	0099      	lsls	r1, r3, #2
 801bf66:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801bf6a:	4623      	mov	r3, r4
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	f280 80a9 	bge.w	801c0c4 <__kernel_rem_pio2f+0x358>
 801bf72:	4623      	mov	r3, r4
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	f2c0 80c7 	blt.w	801c108 <__kernel_rem_pio2f+0x39c>
 801bf7a:	aa44      	add	r2, sp, #272	@ 0x110
 801bf7c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801bf80:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801c058 <__kernel_rem_pio2f+0x2ec>
 801bf84:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801c064 <__kernel_rem_pio2f+0x2f8>
 801bf88:	2000      	movs	r0, #0
 801bf8a:	1ae2      	subs	r2, r4, r3
 801bf8c:	e0b1      	b.n	801c0f2 <__kernel_rem_pio2f+0x386>
 801bf8e:	2602      	movs	r6, #2
 801bf90:	e78f      	b.n	801beb2 <__kernel_rem_pio2f+0x146>
 801bf92:	f852 1b04 	ldr.w	r1, [r2], #4
 801bf96:	b948      	cbnz	r0, 801bfac <__kernel_rem_pio2f+0x240>
 801bf98:	b121      	cbz	r1, 801bfa4 <__kernel_rem_pio2f+0x238>
 801bf9a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801bf9e:	f842 1c04 	str.w	r1, [r2, #-4]
 801bfa2:	2101      	movs	r1, #1
 801bfa4:	f10e 0e01 	add.w	lr, lr, #1
 801bfa8:	4608      	mov	r0, r1
 801bfaa:	e787      	b.n	801bebc <__kernel_rem_pio2f+0x150>
 801bfac:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801bfb0:	e7f5      	b.n	801bf9e <__kernel_rem_pio2f+0x232>
 801bfb2:	f104 3cff 	add.w	ip, r4, #4294967295
 801bfb6:	aa08      	add	r2, sp, #32
 801bfb8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801bfbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801bfc0:	a908      	add	r1, sp, #32
 801bfc2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801bfc6:	e781      	b.n	801becc <__kernel_rem_pio2f+0x160>
 801bfc8:	f104 3cff 	add.w	ip, r4, #4294967295
 801bfcc:	aa08      	add	r2, sp, #32
 801bfce:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801bfd2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801bfd6:	e7f3      	b.n	801bfc0 <__kernel_rem_pio2f+0x254>
 801bfd8:	a908      	add	r1, sp, #32
 801bfda:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801bfde:	3801      	subs	r0, #1
 801bfe0:	430a      	orrs	r2, r1
 801bfe2:	e7ab      	b.n	801bf3c <__kernel_rem_pio2f+0x1d0>
 801bfe4:	3201      	adds	r2, #1
 801bfe6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801bfea:	2e00      	cmp	r6, #0
 801bfec:	d0fa      	beq.n	801bfe4 <__kernel_rem_pio2f+0x278>
 801bfee:	9905      	ldr	r1, [sp, #20]
 801bff0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801bff4:	eb0d 0001 	add.w	r0, sp, r1
 801bff8:	18e6      	adds	r6, r4, r3
 801bffa:	a91c      	add	r1, sp, #112	@ 0x70
 801bffc:	f104 0c01 	add.w	ip, r4, #1
 801c000:	384c      	subs	r0, #76	@ 0x4c
 801c002:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801c006:	4422      	add	r2, r4
 801c008:	4562      	cmp	r2, ip
 801c00a:	da04      	bge.n	801c016 <__kernel_rem_pio2f+0x2aa>
 801c00c:	4614      	mov	r4, r2
 801c00e:	e710      	b.n	801be32 <__kernel_rem_pio2f+0xc6>
 801c010:	9804      	ldr	r0, [sp, #16]
 801c012:	2201      	movs	r2, #1
 801c014:	e7e7      	b.n	801bfe6 <__kernel_rem_pio2f+0x27a>
 801c016:	9903      	ldr	r1, [sp, #12]
 801c018:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c01c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801c020:	9105      	str	r1, [sp, #20]
 801c022:	ee07 1a90 	vmov	s15, r1
 801c026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c02a:	2400      	movs	r4, #0
 801c02c:	ece6 7a01 	vstmia	r6!, {s15}
 801c030:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801c064 <__kernel_rem_pio2f+0x2f8>
 801c034:	46b1      	mov	r9, r6
 801c036:	455c      	cmp	r4, fp
 801c038:	dd04      	ble.n	801c044 <__kernel_rem_pio2f+0x2d8>
 801c03a:	ece0 7a01 	vstmia	r0!, {s15}
 801c03e:	f10c 0c01 	add.w	ip, ip, #1
 801c042:	e7e1      	b.n	801c008 <__kernel_rem_pio2f+0x29c>
 801c044:	ecfe 6a01 	vldmia	lr!, {s13}
 801c048:	ed39 7a01 	vldmdb	r9!, {s14}
 801c04c:	3401      	adds	r4, #1
 801c04e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c052:	e7f0      	b.n	801c036 <__kernel_rem_pio2f+0x2ca>
 801c054:	0801ced4 	.word	0x0801ced4
 801c058:	0801cea8 	.word	0x0801cea8
 801c05c:	43800000 	.word	0x43800000
 801c060:	3b800000 	.word	0x3b800000
 801c064:	00000000 	.word	0x00000000
 801c068:	9b02      	ldr	r3, [sp, #8]
 801c06a:	eeb0 0a48 	vmov.f32	s0, s16
 801c06e:	eba3 0008 	sub.w	r0, r3, r8
 801c072:	f000 f8e3 	bl	801c23c <scalbnf>
 801c076:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801c05c <__kernel_rem_pio2f+0x2f0>
 801c07a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801c07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c082:	db19      	blt.n	801c0b8 <__kernel_rem_pio2f+0x34c>
 801c084:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801c060 <__kernel_rem_pio2f+0x2f4>
 801c088:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c08c:	aa08      	add	r2, sp, #32
 801c08e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c092:	3508      	adds	r5, #8
 801c094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c098:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801c09c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c0a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c0a4:	ee10 3a10 	vmov	r3, s0
 801c0a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801c0ac:	ee17 3a90 	vmov	r3, s15
 801c0b0:	3401      	adds	r4, #1
 801c0b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801c0b6:	e74c      	b.n	801bf52 <__kernel_rem_pio2f+0x1e6>
 801c0b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c0bc:	aa08      	add	r2, sp, #32
 801c0be:	ee10 3a10 	vmov	r3, s0
 801c0c2:	e7f6      	b.n	801c0b2 <__kernel_rem_pio2f+0x346>
 801c0c4:	a808      	add	r0, sp, #32
 801c0c6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801c0ca:	9001      	str	r0, [sp, #4]
 801c0cc:	ee07 0a90 	vmov	s15, r0
 801c0d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0d4:	3b01      	subs	r3, #1
 801c0d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c0da:	ee20 0a07 	vmul.f32	s0, s0, s14
 801c0de:	ed62 7a01 	vstmdb	r2!, {s15}
 801c0e2:	e743      	b.n	801bf6c <__kernel_rem_pio2f+0x200>
 801c0e4:	ecfc 6a01 	vldmia	ip!, {s13}
 801c0e8:	ecb5 7a01 	vldmia	r5!, {s14}
 801c0ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c0f0:	3001      	adds	r0, #1
 801c0f2:	4550      	cmp	r0, sl
 801c0f4:	dc01      	bgt.n	801c0fa <__kernel_rem_pio2f+0x38e>
 801c0f6:	4290      	cmp	r0, r2
 801c0f8:	ddf4      	ble.n	801c0e4 <__kernel_rem_pio2f+0x378>
 801c0fa:	a858      	add	r0, sp, #352	@ 0x160
 801c0fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801c100:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801c104:	3b01      	subs	r3, #1
 801c106:	e735      	b.n	801bf74 <__kernel_rem_pio2f+0x208>
 801c108:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801c10a:	2b02      	cmp	r3, #2
 801c10c:	dc09      	bgt.n	801c122 <__kernel_rem_pio2f+0x3b6>
 801c10e:	2b00      	cmp	r3, #0
 801c110:	dc27      	bgt.n	801c162 <__kernel_rem_pio2f+0x3f6>
 801c112:	d040      	beq.n	801c196 <__kernel_rem_pio2f+0x42a>
 801c114:	f009 0007 	and.w	r0, r9, #7
 801c118:	b059      	add	sp, #356	@ 0x164
 801c11a:	ecbd 8b04 	vpop	{d8-d9}
 801c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c122:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801c124:	2b03      	cmp	r3, #3
 801c126:	d1f5      	bne.n	801c114 <__kernel_rem_pio2f+0x3a8>
 801c128:	aa30      	add	r2, sp, #192	@ 0xc0
 801c12a:	1f0b      	subs	r3, r1, #4
 801c12c:	4413      	add	r3, r2
 801c12e:	461a      	mov	r2, r3
 801c130:	4620      	mov	r0, r4
 801c132:	2800      	cmp	r0, #0
 801c134:	dc50      	bgt.n	801c1d8 <__kernel_rem_pio2f+0x46c>
 801c136:	4622      	mov	r2, r4
 801c138:	2a01      	cmp	r2, #1
 801c13a:	dc5d      	bgt.n	801c1f8 <__kernel_rem_pio2f+0x48c>
 801c13c:	ab30      	add	r3, sp, #192	@ 0xc0
 801c13e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801c064 <__kernel_rem_pio2f+0x2f8>
 801c142:	440b      	add	r3, r1
 801c144:	2c01      	cmp	r4, #1
 801c146:	dc67      	bgt.n	801c218 <__kernel_rem_pio2f+0x4ac>
 801c148:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801c14c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801c150:	2e00      	cmp	r6, #0
 801c152:	d167      	bne.n	801c224 <__kernel_rem_pio2f+0x4b8>
 801c154:	edc7 6a00 	vstr	s13, [r7]
 801c158:	ed87 7a01 	vstr	s14, [r7, #4]
 801c15c:	edc7 7a02 	vstr	s15, [r7, #8]
 801c160:	e7d8      	b.n	801c114 <__kernel_rem_pio2f+0x3a8>
 801c162:	ab30      	add	r3, sp, #192	@ 0xc0
 801c164:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801c064 <__kernel_rem_pio2f+0x2f8>
 801c168:	440b      	add	r3, r1
 801c16a:	4622      	mov	r2, r4
 801c16c:	2a00      	cmp	r2, #0
 801c16e:	da24      	bge.n	801c1ba <__kernel_rem_pio2f+0x44e>
 801c170:	b34e      	cbz	r6, 801c1c6 <__kernel_rem_pio2f+0x45a>
 801c172:	eef1 7a47 	vneg.f32	s15, s14
 801c176:	edc7 7a00 	vstr	s15, [r7]
 801c17a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801c17e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c182:	aa31      	add	r2, sp, #196	@ 0xc4
 801c184:	2301      	movs	r3, #1
 801c186:	429c      	cmp	r4, r3
 801c188:	da20      	bge.n	801c1cc <__kernel_rem_pio2f+0x460>
 801c18a:	b10e      	cbz	r6, 801c190 <__kernel_rem_pio2f+0x424>
 801c18c:	eef1 7a67 	vneg.f32	s15, s15
 801c190:	edc7 7a01 	vstr	s15, [r7, #4]
 801c194:	e7be      	b.n	801c114 <__kernel_rem_pio2f+0x3a8>
 801c196:	ab30      	add	r3, sp, #192	@ 0xc0
 801c198:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801c064 <__kernel_rem_pio2f+0x2f8>
 801c19c:	440b      	add	r3, r1
 801c19e:	2c00      	cmp	r4, #0
 801c1a0:	da05      	bge.n	801c1ae <__kernel_rem_pio2f+0x442>
 801c1a2:	b10e      	cbz	r6, 801c1a8 <__kernel_rem_pio2f+0x43c>
 801c1a4:	eef1 7a67 	vneg.f32	s15, s15
 801c1a8:	edc7 7a00 	vstr	s15, [r7]
 801c1ac:	e7b2      	b.n	801c114 <__kernel_rem_pio2f+0x3a8>
 801c1ae:	ed33 7a01 	vldmdb	r3!, {s14}
 801c1b2:	3c01      	subs	r4, #1
 801c1b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c1b8:	e7f1      	b.n	801c19e <__kernel_rem_pio2f+0x432>
 801c1ba:	ed73 7a01 	vldmdb	r3!, {s15}
 801c1be:	3a01      	subs	r2, #1
 801c1c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c1c4:	e7d2      	b.n	801c16c <__kernel_rem_pio2f+0x400>
 801c1c6:	eef0 7a47 	vmov.f32	s15, s14
 801c1ca:	e7d4      	b.n	801c176 <__kernel_rem_pio2f+0x40a>
 801c1cc:	ecb2 7a01 	vldmia	r2!, {s14}
 801c1d0:	3301      	adds	r3, #1
 801c1d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c1d6:	e7d6      	b.n	801c186 <__kernel_rem_pio2f+0x41a>
 801c1d8:	ed72 7a01 	vldmdb	r2!, {s15}
 801c1dc:	edd2 6a01 	vldr	s13, [r2, #4]
 801c1e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c1e4:	3801      	subs	r0, #1
 801c1e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c1ea:	ed82 7a00 	vstr	s14, [r2]
 801c1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c1f2:	edc2 7a01 	vstr	s15, [r2, #4]
 801c1f6:	e79c      	b.n	801c132 <__kernel_rem_pio2f+0x3c6>
 801c1f8:	ed73 7a01 	vldmdb	r3!, {s15}
 801c1fc:	edd3 6a01 	vldr	s13, [r3, #4]
 801c200:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c204:	3a01      	subs	r2, #1
 801c206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c20a:	ed83 7a00 	vstr	s14, [r3]
 801c20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c212:	edc3 7a01 	vstr	s15, [r3, #4]
 801c216:	e78f      	b.n	801c138 <__kernel_rem_pio2f+0x3cc>
 801c218:	ed33 7a01 	vldmdb	r3!, {s14}
 801c21c:	3c01      	subs	r4, #1
 801c21e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c222:	e78f      	b.n	801c144 <__kernel_rem_pio2f+0x3d8>
 801c224:	eef1 6a66 	vneg.f32	s13, s13
 801c228:	eeb1 7a47 	vneg.f32	s14, s14
 801c22c:	edc7 6a00 	vstr	s13, [r7]
 801c230:	ed87 7a01 	vstr	s14, [r7, #4]
 801c234:	eef1 7a67 	vneg.f32	s15, s15
 801c238:	e790      	b.n	801c15c <__kernel_rem_pio2f+0x3f0>
 801c23a:	bf00      	nop

0801c23c <scalbnf>:
 801c23c:	ee10 3a10 	vmov	r3, s0
 801c240:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801c244:	d02a      	beq.n	801c29c <scalbnf+0x60>
 801c246:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801c24a:	d302      	bcc.n	801c252 <scalbnf+0x16>
 801c24c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c250:	4770      	bx	lr
 801c252:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801c256:	d122      	bne.n	801c29e <scalbnf+0x62>
 801c258:	4b23      	ldr	r3, [pc, #140]	@ (801c2e8 <scalbnf+0xac>)
 801c25a:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801c2ec <scalbnf+0xb0>
 801c25e:	4298      	cmp	r0, r3
 801c260:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c264:	db16      	blt.n	801c294 <scalbnf+0x58>
 801c266:	ee10 3a10 	vmov	r3, s0
 801c26a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c26e:	3a19      	subs	r2, #25
 801c270:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801c274:	4288      	cmp	r0, r1
 801c276:	dd14      	ble.n	801c2a2 <scalbnf+0x66>
 801c278:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 801c2f0 <scalbnf+0xb4>
 801c27c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 801c2f4 <scalbnf+0xb8>
 801c280:	ee10 3a10 	vmov	r3, s0
 801c284:	eeb0 7a67 	vmov.f32	s14, s15
 801c288:	2b00      	cmp	r3, #0
 801c28a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801c28e:	ee27 0a87 	vmul.f32	s0, s15, s14
 801c292:	4770      	bx	lr
 801c294:	eddf 7a18 	vldr	s15, [pc, #96]	@ 801c2f8 <scalbnf+0xbc>
 801c298:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c29c:	4770      	bx	lr
 801c29e:	0dd2      	lsrs	r2, r2, #23
 801c2a0:	e7e6      	b.n	801c270 <scalbnf+0x34>
 801c2a2:	4410      	add	r0, r2
 801c2a4:	28fe      	cmp	r0, #254	@ 0xfe
 801c2a6:	dce7      	bgt.n	801c278 <scalbnf+0x3c>
 801c2a8:	2800      	cmp	r0, #0
 801c2aa:	dd06      	ble.n	801c2ba <scalbnf+0x7e>
 801c2ac:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c2b0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801c2b4:	ee00 3a10 	vmov	s0, r3
 801c2b8:	4770      	bx	lr
 801c2ba:	f110 0f16 	cmn.w	r0, #22
 801c2be:	da09      	bge.n	801c2d4 <scalbnf+0x98>
 801c2c0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801c2f8 <scalbnf+0xbc>
 801c2c4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 801c2fc <scalbnf+0xc0>
 801c2c8:	ee10 3a10 	vmov	r3, s0
 801c2cc:	eeb0 7a67 	vmov.f32	s14, s15
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	e7da      	b.n	801c28a <scalbnf+0x4e>
 801c2d4:	3019      	adds	r0, #25
 801c2d6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c2da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801c2de:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801c300 <scalbnf+0xc4>
 801c2e2:	ee07 3a90 	vmov	s15, r3
 801c2e6:	e7d7      	b.n	801c298 <scalbnf+0x5c>
 801c2e8:	ffff3cb0 	.word	0xffff3cb0
 801c2ec:	4c000000 	.word	0x4c000000
 801c2f0:	7149f2ca 	.word	0x7149f2ca
 801c2f4:	f149f2ca 	.word	0xf149f2ca
 801c2f8:	0da24260 	.word	0x0da24260
 801c2fc:	8da24260 	.word	0x8da24260
 801c300:	33000000 	.word	0x33000000

0801c304 <floorf>:
 801c304:	ee10 3a10 	vmov	r3, s0
 801c308:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c30c:	3a7f      	subs	r2, #127	@ 0x7f
 801c30e:	2a16      	cmp	r2, #22
 801c310:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801c314:	dc2b      	bgt.n	801c36e <floorf+0x6a>
 801c316:	2a00      	cmp	r2, #0
 801c318:	da12      	bge.n	801c340 <floorf+0x3c>
 801c31a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801c380 <floorf+0x7c>
 801c31e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c322:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c32a:	dd06      	ble.n	801c33a <floorf+0x36>
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	da24      	bge.n	801c37a <floorf+0x76>
 801c330:	2900      	cmp	r1, #0
 801c332:	4b14      	ldr	r3, [pc, #80]	@ (801c384 <floorf+0x80>)
 801c334:	bf08      	it	eq
 801c336:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801c33a:	ee00 3a10 	vmov	s0, r3
 801c33e:	4770      	bx	lr
 801c340:	4911      	ldr	r1, [pc, #68]	@ (801c388 <floorf+0x84>)
 801c342:	4111      	asrs	r1, r2
 801c344:	420b      	tst	r3, r1
 801c346:	d0fa      	beq.n	801c33e <floorf+0x3a>
 801c348:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801c380 <floorf+0x7c>
 801c34c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c350:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c358:	ddef      	ble.n	801c33a <floorf+0x36>
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	bfbe      	ittt	lt
 801c35e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801c362:	fa40 f202 	asrlt.w	r2, r0, r2
 801c366:	189b      	addlt	r3, r3, r2
 801c368:	ea23 0301 	bic.w	r3, r3, r1
 801c36c:	e7e5      	b.n	801c33a <floorf+0x36>
 801c36e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801c372:	d3e4      	bcc.n	801c33e <floorf+0x3a>
 801c374:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c378:	4770      	bx	lr
 801c37a:	2300      	movs	r3, #0
 801c37c:	e7dd      	b.n	801c33a <floorf+0x36>
 801c37e:	bf00      	nop
 801c380:	7149f2ca 	.word	0x7149f2ca
 801c384:	bf800000 	.word	0xbf800000
 801c388:	007fffff 	.word	0x007fffff

0801c38c <_init>:
 801c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c38e:	bf00      	nop
 801c390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c392:	bc08      	pop	{r3}
 801c394:	469e      	mov	lr, r3
 801c396:	4770      	bx	lr

0801c398 <_fini>:
 801c398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c39a:	bf00      	nop
 801c39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c39e:	bc08      	pop	{r3}
 801c3a0:	469e      	mov	lr, r3
 801c3a2:	4770      	bx	lr
